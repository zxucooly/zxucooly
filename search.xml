<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Rabbitmq详解</title>
    <url>/2018/12/07/Rabbitmq%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h1><h2 id="默认无交换机"><a href="#默认无交换机" class="headerlink" title="默认无交换机"></a>默认无交换机</h2><p>默认exchange隐式绑定到每个队列，路由键等于队列名称。不可能显式地绑定到缺省交换器，也不可能从缺省交换器解除绑定。它也不能被删除。</p>
<ul>
<li>消费者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangXu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-12-07 8:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个连接工厂并进行配置</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">"47.100.221.12"</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        <span class="comment">// 2. 创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">// 3. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 声明一个队列</span></span><br><span class="line">        String queueName = <span class="string">"test001"</span>;</span><br><span class="line">        channel.queueDeclare(queueName,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 创建消费者</span></span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"consumerTag:"</span>+consumerTag);</span><br><span class="line">                System.out.println(envelope.toString());</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(body,<span class="string">"UTF-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 6. 设置channel</span></span><br><span class="line">        channel.basicConsume(queueName,<span class="keyword">true</span>, defaultConsumer);</span><br><span class="line">        <span class="comment">//channel.close();</span></span><br><span class="line">        <span class="comment">//connection.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ul>
<li>生产者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangXu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-12-07 8:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个连接工厂并进行配置</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">"47.100.221.12"</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        <span class="comment">// 2. 创建连接</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">// 3. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 4. 通过channel发送数据</span></span><br><span class="line">        channel.basicPublish(<span class="string">""</span>,<span class="string">"test001"</span>,<span class="keyword">null</span>,<span class="string">"hello 张三"</span>.getBytes());</span><br><span class="line">        <span class="comment">// 5. 关闭连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="DirectExchange"><a href="#DirectExchange" class="headerlink" title="DirectExchange"></a>DirectExchange</h2><ul>
<li>连接工厂工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMqConnectionFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConnectionFactory <span class="title">createConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        connectionFactory.setHost(<span class="string">"47.100.221.12"</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        connectionFactory.setAutomaticRecoveryEnabled(<span class="keyword">true</span>);</span><br><span class="line">        connectionFactory.setNetworkRecoveryInterval(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">return</span> connectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectExchangeTestConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = RMqConnectionFactory.createConnectionFactory();</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">"test_direct_exchange"</span>;</span><br><span class="line">        String exchangeType = <span class="string">"direct"</span>;</span><br><span class="line">        String queueName = <span class="string">"test_direct_queue"</span>;</span><br><span class="line">        String routingKey = <span class="string">"test.direct"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示声明了一个交换机</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, exchangeType, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//表示声明了一个队列</span></span><br><span class="line">        channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//建立一个绑定关系:</span></span><br><span class="line">        channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line">        <span class="comment">// 创建消费者</span></span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body,<span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(<span class="string">"收到消息："</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//参数：队列名称、是否自动ACK、Consumer</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectExchangeTestProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = RMqConnectionFactory.createConnectionFactory();</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">"test_direct_exchange"</span>;</span><br><span class="line">        String routingKey = <span class="string">"test.direct"</span>;</span><br><span class="line">        <span class="comment">// 发送</span></span><br><span class="line">        String msg = <span class="string">"Hello World RabbitMQ 4  Direct Exchange Message 111 ... "</span>;</span><br><span class="line">        channel.basicPublish(exchangeName, routingKey , <span class="keyword">null</span> , msg.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="TopicExchange"><a href="#TopicExchange" class="headerlink" title="TopicExchange"></a>TopicExchange</h2><ul>
<li>消费者<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicExchangeTestConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = RMqConnectionFactory.createConnectionFactory();</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">"test_topic_exchange"</span>;</span><br><span class="line">        String exchangeType = <span class="string">"topic"</span>;</span><br><span class="line">        String queueName = <span class="string">"test_topic_queue"</span>;</span><br><span class="line">        <span class="comment">// 匹配多个</span></span><br><span class="line">        <span class="comment">//String routingKey = "user.#";</span></span><br><span class="line">        <span class="comment">// 匹配一个单词</span></span><br><span class="line">        String routingKey = <span class="string">"user.*"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示声明了一个交换机</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, exchangeType, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//表示声明了一个队列</span></span><br><span class="line">        channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//建立一个绑定关系:</span></span><br><span class="line">        channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line">        <span class="comment">// 创建消费者</span></span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body,<span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(<span class="string">"收到消息："</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//参数：队列名称、是否自动ACK、Consumer</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>生成端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicExchangeTestProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = RMqConnectionFactory.createConnectionFactory();</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 声明</span></span><br><span class="line">        String exchangeName = <span class="string">"test_topic_exchange"</span>;</span><br><span class="line">        String routingKey1 = <span class="string">"user.save"</span>;</span><br><span class="line">        String routingKey2 = <span class="string">"user.update"</span>;</span><br><span class="line">        String routingKey3 = <span class="string">"user.delete.abc"</span>;</span><br><span class="line">        <span class="comment">//5 发送</span></span><br><span class="line"></span><br><span class="line">        String msg = <span class="string">"Hello World RabbitMQ 4 Topic Exchange Message ..."</span>;</span><br><span class="line">        channel.basicPublish(exchangeName, routingKey1 , <span class="keyword">null</span> , msg.getBytes());</span><br><span class="line">        channel.basicPublish(exchangeName, routingKey2 , <span class="keyword">null</span> , msg.getBytes());</span><br><span class="line">        channel.basicPublish(exchangeName, routingKey3 , <span class="keyword">null</span> , msg.getBytes());</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="FanoutExchange"><a href="#FanoutExchange" class="headerlink" title="FanoutExchange"></a>FanoutExchange</h2><ul>
<li>消费者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutExchangeTestConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = RMqConnectionFactory.createConnectionFactory();</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">"test_fanout_exchange"</span>;</span><br><span class="line">        String exchangeType = <span class="string">"fanout"</span>;</span><br><span class="line">        String queueName = <span class="string">"test_fanout_queue"</span>;</span><br><span class="line">        String routingKey = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示声明了一个交换机</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, exchangeType, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//表示声明了一个队列</span></span><br><span class="line">        channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//建立一个绑定关系:</span></span><br><span class="line">        channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line">        <span class="comment">// 创建消费者</span></span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body,<span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(<span class="string">"收到消息："</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//参数：队列名称、是否自动ACK、Consumer</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>生产者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutExchangeTestProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = RMqConnectionFactory.createConnectionFactory();</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">"test_fanout_exchange"</span>;</span><br><span class="line">        String routingKey = <span class="string">"随意"</span>;</span><br><span class="line">        <span class="comment">// 发送</span></span><br><span class="line">        String msg = <span class="string">"Hello World RabbitMQ 4  Direct Exchange Message 111 ... "</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            channel.basicPublish(exchangeName, routingKey, <span class="keyword">null</span>, msg.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="携带特殊参数"><a href="#携带特殊参数" class="headerlink" title="携带特殊参数"></a>携带特殊参数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">headers.put(<span class="string">"key1"</span>, <span class="string">"111"</span>);</span><br><span class="line">headers.put(<span class="string">"my2"</span>, <span class="string">"222"</span>);</span><br><span class="line"></span><br><span class="line">AMQP.BasicProperties properties = <span class="keyword">new</span> AMQP.BasicProperties.Builder()</span><br><span class="line">    .deliveryMode(<span class="number">2</span>)</span><br><span class="line">    .contentEncoding(<span class="string">"UTF-8"</span>)</span><br><span class="line">    .expiration(<span class="string">"10000"</span>)</span><br><span class="line">    .headers(headers)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4 通过Channel发送数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    String msg = <span class="string">"Hello RabbitMQ!"</span>;</span><br><span class="line">    <span class="comment">//1 exchange   2 routingKey</span></span><br><span class="line">    channel.basicPublish(<span class="string">"test_message_exchange"</span>,</span><br><span class="line">                         <span class="string">"test111"</span>,</span><br><span class="line">                         properties, </span><br><span class="line">                         msg.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="消息确认模式"><a href="#消息确认模式" class="headerlink" title="消息确认模式"></a>消息确认模式</h1><p>生成端发送消息，异步回调确认</p>
<ul>
<li>生成端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = RMqConnectionFactory.createConnectionFactory();</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//Enables publisher acknowledgements(确认) on this channel.</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line">        <span class="comment">// 声明队列和交换机模式</span></span><br><span class="line">        String queueName = <span class="string">"test.confirm.queue"</span>;</span><br><span class="line">        String exchangeName = <span class="string">"test.confirm.exchange"</span>;</span><br><span class="line">        String routingkey = <span class="string">"confirm.ok"</span>;</span><br><span class="line">        String msg = <span class="string">"send message..."</span>;</span><br><span class="line">        channel.basicPublish(exchangeName,routingkey,<span class="keyword">null</span>,msg.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生产者确认消息是否被接收</span></span><br><span class="line">        channel.addConfirmListener(<span class="keyword">new</span> ConfirmListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleAck</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"消费者已接收，ack....."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleNack</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"消费者未接收，nack....."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>消费端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 消费端接收消息</span></span><br><span class="line">        ConnectionFactory connectionFactory = RMqConnectionFactory.createConnectionFactory();</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        String queueName = <span class="string">"test.confirm.queue"</span>;</span><br><span class="line">        String exchangeName = <span class="string">"test.confirm.exchange"</span>;</span><br><span class="line">        String routingkey = <span class="string">"confirm.*"</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName, <span class="string">"topic"</span>, <span class="keyword">true</span>);</span><br><span class="line">        channel.queueDeclare(queueName,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(queueName,exchangeName,routingkey);</span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"message:"</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Return消息机制"><a href="#Return消息机制" class="headerlink" title="Return消息机制"></a>Return消息机制</h1><p>Broker将不可达消息返回给生产端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认false删除路由不到的消息 </span></span><br><span class="line"><span class="comment">//mandatory true if the 'mandatory(强制的；托管的；命令的</span></span><br><span class="line"><span class="comment">//)' flag is to be set</span></span><br><span class="line">channel.basicPublish(exchangeName,routingkey,<span class="keyword">true</span>,<span class="keyword">null</span>,msg.getBytes());</span><br><span class="line"><span class="comment">// 路由不到回调</span></span><br><span class="line">channel.addReturnListener(<span class="keyword">new</span> ReturnListener() &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturn</span><span class="params">(<span class="keyword">int</span> replyCode, String replyText, String exchange,</span></span></span><br><span class="line"><span class="function"><span class="params">         String routingKey, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      </span><br><span class="line">      System.err.println(<span class="string">"---------handle  return----------"</span>);</span><br><span class="line">      System.err.println(<span class="string">"replyCode: "</span> + replyCode);</span><br><span class="line">      System.err.println(<span class="string">"replyText: "</span> + replyText);</span><br><span class="line">      System.err.println(<span class="string">"exchange: "</span> + exchange);</span><br><span class="line">      System.err.println(<span class="string">"routingKey: "</span> + routingKey);</span><br><span class="line">      System.err.println(<span class="string">"properties: "</span> + properties);</span><br><span class="line">      System.err.println(<span class="string">"body: "</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">---------handle  <span class="keyword">return</span>----------</span><br><span class="line">replyCode: <span class="number">312</span></span><br><span class="line">replyText: NO_ROUTE</span><br><span class="line">exchange: test.<span class="keyword">return</span>.exchange</span><br><span class="line">routingKey: routingkeyErr</span><br><span class="line">properties: #contentHeader&lt;basic&gt;(content-type=null, content-encoding=null, headers=null, delivery-mode=null, priority=null, correlation-id=null, reply-to=null, expiration=null, message-id=null, timestamp=null, type=null, user-id=null, app-id=null, cluster-id=null)</span><br><span class="line">body: send message...</span><br></pre></td></tr></table></figure>



<h1 id="消费端限流（QOS）"><a href="#消费端限流（QOS）" class="headerlink" title="消费端限流（QOS）"></a>消费端限流（QOS）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1 限流方式  第一件事就是 autoAck设置为 false</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefetchSize maximum amount of content (measured in</span></span><br><span class="line"><span class="comment">     * octets) that the server will deliver, 0 if unlimited</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefetchCount maximum number of messages that the server</span></span><br><span class="line"><span class="comment">     * will deliver, 0 if unlimited</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> global true if the settings should be applied to the</span></span><br><span class="line"><span class="comment">     * entire channel rather than each consumer</span></span><br><span class="line"><span class="comment">false:应用于Consumer级别</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 第二步 每次接收一条消息</span></span><br><span class="line">channel.basicQos(<span class="number">0</span>, <span class="number">1</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 第一步 // 不自动接收消息</span></span><br><span class="line">channel.basicConsume(queueName, <span class="keyword">false</span>, <span class="keyword">new</span> MyConsumer(channel));</span><br><span class="line"><span class="comment">// 第三步</span></span><br><span class="line">channel.basicConsume(queueName, <span class="keyword">true</span>, <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"message:"</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">        <span class="comment">//Acknowledge one or several received messages.</span></span><br><span class="line">        <span class="comment">// 只有确认接收消息，其他消息才允许接收</span></span><br><span class="line">        channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h1 id="消费端ACK和重回队列"><a href="#消费端ACK和重回队列" class="headerlink" title="消费端ACK和重回队列"></a>消费端ACK和重回队列</h1><p>既没有ACK和NACK时，服务器宕机可能导致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   System.err.println(<span class="string">"-----------consume message----------"</span>);</span><br><span class="line">   System.err.println(<span class="string">"body: "</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>((Integer)properties.getHeaders().get(<span class="string">"num"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// false  是否消费多条消息</span></span><br><span class="line">      <span class="comment">// true 是否重回队列</span></span><br><span class="line">      channel.basicNack(envelope.getDeliveryTag(), <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      channel.basicAck(envelope.getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="TTL队列"><a href="#TTL队列" class="headerlink" title="TTL队列"></a>TTL队列</h1><p>TTL:Time to live 生存时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AMQP.BasicProperties properties = <span class="keyword">new</span> AMQP.BasicProperties.Builder()</span><br><span class="line">      .deliveryMode(<span class="number">2</span>)</span><br><span class="line">      .contentEncoding(<span class="string">"UTF-8"</span>)</span><br><span class="line">    	<span class="comment">// 十秒</span></span><br><span class="line">      .expiration(<span class="string">"10000"</span>)</span><br><span class="line">      .build();</span><br><span class="line">channel.basicPublish(exchange, routingKey, <span class="keyword">true</span>, properties, msg.getBytes());</span><br></pre></td></tr></table></figure>



<h1 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h1><p>DLX,Dead-letter-Exchange</p>
<p>queue没有消费者消费。会被publish到另一个Exchange,这个Exchange就是DLX.</p>
<ul>
<li>消费者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这就是一个普通的交换机 和 队列 以及路由</span></span><br><span class="line">String exchangeName = <span class="string">"test_dlx_exchange"</span>;</span><br><span class="line">String routingKey = <span class="string">"dlx.#"</span>;</span><br><span class="line">String queueName = <span class="string">"test_dlx_queue"</span>;</span><br><span class="line"></span><br><span class="line">channel.exchangeDeclare(exchangeName, <span class="string">"topic"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; agruments = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">agruments.put(<span class="string">"x-dead-letter-exchange"</span>, <span class="string">"dlx.exchange"</span>);</span><br><span class="line"><span class="comment">//这个agruments属性，要设置到声明队列上</span></span><br><span class="line">channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, agruments);</span><br><span class="line">channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">//要进行死信队列的声明:</span></span><br><span class="line">channel.exchangeDeclare(<span class="string">"dlx.exchange"</span>, <span class="string">"topic"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">"dlx.queue"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">channel.queueBind(<span class="string">"dlx.queue"</span>, <span class="string">"dlx.exchange"</span>, <span class="string">"#"</span>);</span><br><span class="line"></span><br><span class="line">channel.basicConsume(queueName, <span class="keyword">true</span>, <span class="keyword">new</span> MyConsumer(channel));</span><br></pre></td></tr></table></figure>

<ul>
<li>生产者</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String exchange = <span class="string">"test_dlx_exchange"</span>;</span><br><span class="line">String routingKey = <span class="string">"dlx.save"</span>;</span><br><span class="line"></span><br><span class="line">String msg = <span class="string">"Hello RabbitMQ DLX Message"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;<span class="number">1</span>; i ++)&#123;</span><br><span class="line">   </span><br><span class="line">   AMQP.BasicProperties properties = <span class="keyword">new</span> AMQP.BasicProperties.Builder()</span><br><span class="line">         .deliveryMode(<span class="number">2</span>) <span class="comment">// 持久化</span></span><br><span class="line">         .contentEncoding(<span class="string">"UTF-8"</span>)</span><br><span class="line">         .expiration(<span class="string">"10000"</span>) <span class="comment">// 十秒如果没有消费者消费，消息就会转到DLX</span></span><br><span class="line">         .build();</span><br><span class="line">   channel.basicPublish(exchange, routingKey, <span class="keyword">true</span>, properties, msg.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="与Spring整合"><a href="#与Spring整合" class="headerlink" title="与Spring整合"></a>与Spring整合</h1><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置队列、交换机、绑定关系"><a href="#配置队列、交换机、绑定关系" class="headerlink" title="配置队列、交换机、绑定关系"></a>配置队列、交换机、绑定关系</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConnectionFactory <span class="title">connectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CachingConnectionFactory cachingConnectionFactory = <span class="keyword">new</span> CachingConnectionFactory();</span><br><span class="line">        cachingConnectionFactory.setHost(<span class="string">"192.168.134.135"</span>);</span><br><span class="line">        cachingConnectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        cachingConnectionFactory.setUsername(<span class="string">"guest"</span>);</span><br><span class="line">        cachingConnectionFactory.setPassword(<span class="string">"guest"</span>);</span><br><span class="line">        cachingConnectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        <span class="keyword">return</span> cachingConnectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitAdmin <span class="title">rabbitAdmin</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RabbitAdmin rabbitAdmin = <span class="keyword">new</span> RabbitAdmin(connectionFactory);</span><br><span class="line">        rabbitAdmin.setAutoStartup(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> rabbitAdmin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建基本的交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">topicExchange1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String exchangeName = <span class="string">"topicExchange1-spring"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(exchangeName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String exchangeName = <span class="string">"fanoutExchange1-spring"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(exchangeName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String exchangeName = <span class="string">"directExchange1-spring"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(exchangeName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeadersExchange <span class="title">headersExchange1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String exchangeName = <span class="string">"headersExchange1-spring"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeadersExchange(exchangeName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue001</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"queue001-spring"</span>, <span class="keyword">true</span>); <span class="comment">//队列持久</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding001</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue001()).to(topicExchange1()).with(<span class="string">"rabbit.*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue002</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"queue002-spring"</span>, <span class="keyword">true</span>); <span class="comment">//队列持久</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建绑定关系</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding002</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue002()).to(topicExchange1()).with(<span class="string">"mq.*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue_image</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"image_queue"</span>, <span class="keyword">true</span>); <span class="comment">//队列持久</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue_pdf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"pdf_queue"</span>, <span class="keyword">true</span>); <span class="comment">//队列持久</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="SimpleMessageListenerContainer"><a href="#SimpleMessageListenerContainer" class="headerlink" title="SimpleMessageListenerContainer"></a>SimpleMessageListenerContainer</h2><ul>
<li>监听容器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 消息监听容器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleMessageListenerContainer <span class="title">messageContainer</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">    SimpleMessageListenerContainer container = <span class="keyword">new</span> SimpleMessageListenerContainer(connectionFactory);</span><br><span class="line">    container.addQueues(queue001(), queue002(), queue_image(), queue_pdf());</span><br><span class="line">    container.setConcurrentConsumers(<span class="number">1</span>);</span><br><span class="line">    container.setMaxConcurrentConsumers(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//Set the default behavior when a message is rejected, for example because the listener threw an exception. When true, messages will be requeued, when false, they will not.</span></span><br><span class="line">    container.setDefaultRequeueRejected(<span class="keyword">false</span>);</span><br><span class="line">    container.setAcknowledgeMode(AcknowledgeMode.AUTO);</span><br><span class="line">    container.setExposeListenerChannel(<span class="keyword">true</span>);</span><br><span class="line">    container.setConsumerTagStrategy(queueName -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> queueName + <span class="string">"-"</span> + UUID.randomUUID().toString();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 消息监听消费绑定队列上的消息</span></span><br><span class="line">    container.setMessageListener(<span class="keyword">new</span> ChannelAwareMessageListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            String msg = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">            System.out.println(<span class="string">"----------消费者: "</span> + msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MessageListenerAdapter"><a href="#MessageListenerAdapter" class="headerlink" title="MessageListenerAdapter"></a>MessageListenerAdapter</h2><ul>
<li>改变默认方法，类型转换</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 适配器方式. 默认是有自己的方法名字的：handleMessage</span></span><br><span class="line"><span class="comment">// 可以自己指定一个方法的名字: consumeMessage</span></span><br><span class="line"><span class="comment">// 也可以添加一个转换器: 从字节数组转换为String</span></span><br><span class="line">MessageListenerAdapter adapter = <span class="keyword">new</span> MessageListenerAdapter(<span class="keyword">new</span> MessageDelegate());</span><br><span class="line">adapter.setDefaultListenerMethod(<span class="string">"consumeMessage"</span>);</span><br><span class="line">adapter.setMessageConverter(<span class="keyword">new</span> TextMessageConverter());</span><br><span class="line">container.setMessageListener(adapter);</span><br></pre></td></tr></table></figure>

<ul>
<li>转换器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextMessageConverter</span> <span class="keyword">implements</span> <span class="title">MessageConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Message <span class="title">toMessage</span><span class="params">(Object object, MessageProperties messageProperties)</span> <span class="keyword">throws</span> MessageConversionException </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Message(object.toString().getBytes(), messageProperties);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">fromMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> MessageConversionException </span>&#123;</span><br><span class="line">      String contentType = message.getMessageProperties().getContentType();</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">null</span> != contentType &amp;&amp; contentType.contains(<span class="string">"text"</span>)) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> message.getBody();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>根据队列名称监听对应方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2 适配器方式: 我们的队列名称 和 方法名称 也可以进行一一的匹配</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">MessageListenerAdapter adapter = <span class="keyword">new</span> MessageListenerAdapter(<span class="keyword">new</span> MessageDelegate());</span><br><span class="line">adapter.setMessageConverter(<span class="keyword">new</span> TextMessageConverter());</span><br><span class="line">Map&lt;String, String&gt; queueOrTagToMethodName = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">queueOrTagToMethodName.put(<span class="string">"queue001-spring"</span>, <span class="string">"method1"</span>);</span><br><span class="line">queueOrTagToMethodName.put(<span class="string">"queue002-spring"</span>, <span class="string">"method2"</span>);</span><br><span class="line">adapter.setQueueOrTagToMethodName(queueOrTagToMethodName);</span><br><span class="line">container.setMessageListener(adapter);</span><br></pre></td></tr></table></figure>

<ul>
<li>代理器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="keyword">byte</span>[] messageBody)</span> </span>&#123;</span><br><span class="line">		System.err.println(<span class="string">"默认方法, 消息内容:"</span> + <span class="keyword">new</span> String(messageBody));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeMessage</span><span class="params">(<span class="keyword">byte</span>[] messageBody)</span> </span>&#123;</span><br><span class="line">		System.err.println(<span class="string">"字节数组方法, 消息内容:"</span> + <span class="keyword">new</span> String(messageBody));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeMessage</span><span class="params">(String messageBody)</span> </span>&#123;</span><br><span class="line">		System.err.println(<span class="string">"字符串方法, 消息内容:"</span> + messageBody);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(String messageBody)</span> </span>&#123;</span><br><span class="line">		System.err.println(<span class="string">"method1 收到消息内容:"</span> + <span class="keyword">new</span> String(messageBody));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(String messageBody)</span> </span>&#123;</span><br><span class="line">		System.err.println(<span class="string">"method2 收到消息内容:"</span> + <span class="keyword">new</span> String(messageBody));</span><br><span class="line">	&#125;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>

<h3 id="JSON格式转换"><a href="#JSON格式转换" class="headerlink" title="JSON格式转换"></a>JSON格式转换</h3><ul>
<li>监听容器配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.1 支持json格式的转换器</span></span><br><span class="line">MessageListenerAdapter adapter = <span class="keyword">new</span> MessageListenerAdapter(<span class="keyword">new</span> MessageDelegate());</span><br><span class="line">adapter.setDefaultListenerMethod(<span class="string">"consumeMessage"</span>);</span><br><span class="line"></span><br><span class="line">Jackson2JsonMessageConverter jackson2JsonMessageConverter = <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">adapter.setMessageConverter(jackson2JsonMessageConverter);</span><br><span class="line"></span><br><span class="line">container.setMessageListener(adapter);</span><br></pre></td></tr></table></figure>

<ul>
<li>消息代理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeMessage</span><span class="params">(Map messageBody)</span> </span>&#123;</span><br><span class="line">       System.err.println(<span class="string">"map方法, 消息内容:"</span> + messageBody);</span><br><span class="line">    &#125;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendJsonMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    Order order = <span class="keyword">new</span> Order();</span><br><span class="line">    order.setId(<span class="string">"001"</span>);</span><br><span class="line">    order.setName(<span class="string">"消息订单"</span>);</span><br><span class="line">    order.setContent(<span class="string">"描述信息"</span>);</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String json = mapper.writeValueAsString(order);</span><br><span class="line">    System.err.println(<span class="string">"order 4 json: "</span> + json);</span><br><span class="line"></span><br><span class="line">    MessageProperties messageProperties = <span class="keyword">new</span> MessageProperties();</span><br><span class="line">    <span class="comment">//这里注意一定要修改contentType为 application/json</span></span><br><span class="line">    messageProperties.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">    Message message = <span class="keyword">new</span> Message(json.getBytes(), messageProperties);</span><br><span class="line"></span><br><span class="line">    rabbitTemplate.send(<span class="string">"topicExchange1-spring"</span>, <span class="string">"mq.order"</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="java对象格式转换（NO）"><a href="#java对象格式转换（NO）" class="headerlink" title="*java对象格式转换（NO）"></a>*java对象格式转换（NO）</h3><ul>
<li>监听容器配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MessageListenerAdapter adapter = <span class="keyword">new</span> MessageListenerAdapter(<span class="keyword">new</span> MessageDelegate());</span><br><span class="line">     adapter.setDefaultListenerMethod(<span class="string">"consumeMessage"</span>);</span><br><span class="line"></span><br><span class="line">     Jackson2JsonMessageConverter jackson2JsonMessageConverter = <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line"></span><br><span class="line">     DefaultJackson2JavaTypeMapper javaTypeMapper = <span class="keyword">new</span> DefaultJackson2JavaTypeMapper();</span><br><span class="line">     jackson2JsonMessageConverter.setJavaTypeMapper(javaTypeMapper);</span><br><span class="line"></span><br><span class="line">     adapter.setMessageConverter(jackson2JsonMessageConverter);</span><br><span class="line">     container.setMessageListener(adapter);</span><br></pre></td></tr></table></figure>

<ul>
<li>消息代理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDelegate</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeMessage</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">		System.err.println(<span class="string">"order对象, 消息内容, id: "</span> + order.getId() +</span><br><span class="line">				<span class="string">", name: "</span> + order.getName() +</span><br><span class="line">				<span class="string">", content: "</span>+ order.getContent());</span><br><span class="line">	&#125;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendJavaMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">       Order order = <span class="keyword">new</span> Order();</span><br><span class="line">       order.setId(<span class="string">"001"</span>);</span><br><span class="line">       order.setName(<span class="string">"订单消息"</span>);</span><br><span class="line">       order.setContent(<span class="string">"订单描述信息"</span>);</span><br><span class="line">       ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       String json = mapper.writeValueAsString(order);</span><br><span class="line">       System.err.println(<span class="string">"order 4 json: "</span> + json);</span><br><span class="line"></span><br><span class="line">       MessageProperties messageProperties = <span class="keyword">new</span> MessageProperties();</span><br><span class="line">       <span class="comment">//这里注意一定要修改contentType为 application/json</span></span><br><span class="line">       messageProperties.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">       messageProperties.getHeaders().put(<span class="string">"__TypeId__"</span>, <span class="string">"anait.amqp.entity.Order"</span>);</span><br><span class="line">       Message message = <span class="keyword">new</span> Message(json.getBytes(), messageProperties);</span><br><span class="line"></span><br><span class="line">       rabbitTemplate.send(<span class="string">"topicExchange1-spring"</span>, <span class="string">"rabbit.order1"</span>, message);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="java对象多映射转换"><a href="#java对象多映射转换" class="headerlink" title="java对象多映射转换"></a>java对象多映射转换</h3><ul>
<li>监听容器配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MessageListenerAdapter adapter = <span class="keyword">new</span> MessageListenerAdapter(<span class="keyword">new</span> MessageDelegate());</span><br><span class="line">adapter.setDefaultListenerMethod(<span class="string">"consumeMessage"</span>);</span><br><span class="line">Jackson2JsonMessageConverter jackson2JsonMessageConverter = <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">DefaultJackson2JavaTypeMapper javaTypeMapper = <span class="keyword">new</span> DefaultJackson2JavaTypeMapper();</span><br><span class="line"></span><br><span class="line">Map&lt;String, Class&lt;?&gt;&gt; idClassMapping = <span class="keyword">new</span> HashMap&lt;String, Class&lt;?&gt;&gt;();</span><br><span class="line">idClassMapping.put(<span class="string">"order"</span>, Order<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">idClassMapping.put(<span class="string">"packaged"</span>, Packaged<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">javaTypeMapper.setIdClassMapping(idClassMapping);</span><br><span class="line"></span><br><span class="line">jackson2JsonMessageConverter.setJavaTypeMapper(javaTypeMapper);</span><br><span class="line">adapter.setMessageConverter(jackson2JsonMessageConverter);</span><br><span class="line">container.setMessageListener(adapter);</span><br></pre></td></tr></table></figure>

<ul>
<li>消息代理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeMessage</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"order对象, 消息内容, id: "</span> + order.getId() +</span><br><span class="line">                           <span class="string">", name: "</span> + order.getName() +</span><br><span class="line">                           <span class="string">", content: "</span>+ order.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeMessage</span><span class="params">(Packaged pack)</span> </span>&#123;</span><br><span class="line">		System.err.println(<span class="string">"package对象, 消息内容, id: "</span> + pack.getId() +</span><br><span class="line">				<span class="string">", name: "</span> + pack.getName() +</span><br><span class="line">				<span class="string">", content: "</span>+ pack.getDescription());</span><br><span class="line">	&#125;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendMappingMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    Order order = <span class="keyword">new</span> Order();</span><br><span class="line">    order.setId(<span class="string">"001"</span>);</span><br><span class="line">    order.setName(<span class="string">"订单消息"</span>);</span><br><span class="line">    order.setContent(<span class="string">"订单描述信息"</span>);</span><br><span class="line"></span><br><span class="line">    String json1 = mapper.writeValueAsString(order);</span><br><span class="line">    System.err.println(<span class="string">"order 4 json: "</span> + json1);</span><br><span class="line"></span><br><span class="line">    MessageProperties messageProperties1 = <span class="keyword">new</span> MessageProperties();</span><br><span class="line">    <span class="comment">//这里注意一定要修改contentType为 application/json</span></span><br><span class="line">    messageProperties1.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">    messageProperties1.getHeaders().put(<span class="string">"__TypeId__"</span>, <span class="string">"order"</span>);</span><br><span class="line">    Message message1 = <span class="keyword">new</span> Message(json1.getBytes(), messageProperties1);</span><br><span class="line">    rabbitTemplate.send(<span class="string">"topicExchange1-spring"</span>, <span class="string">"mq.order"</span>, message1);</span><br><span class="line"></span><br><span class="line">    Packaged pack = <span class="keyword">new</span> Packaged();</span><br><span class="line">    pack.setId(<span class="string">"002"</span>);</span><br><span class="line">    pack.setName(<span class="string">"包裹消息"</span>);</span><br><span class="line">    pack.setDescription(<span class="string">"包裹描述信息"</span>);</span><br><span class="line"></span><br><span class="line">    String json2 = mapper.writeValueAsString(pack);</span><br><span class="line">    System.err.println(<span class="string">"pack 4 json: "</span> + json2);</span><br><span class="line"></span><br><span class="line">    MessageProperties messageProperties2 = <span class="keyword">new</span> MessageProperties();</span><br><span class="line">    <span class="comment">//这里注意一定要修改contentType为 application/json</span></span><br><span class="line">    messageProperties2.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line">    messageProperties2.getHeaders().put(<span class="string">"__TypeId__"</span>, <span class="string">"packaged"</span>);</span><br><span class="line">    Message message2 = <span class="keyword">new</span> Message(json2.getBytes(), messageProperties2);</span><br><span class="line">    rabbitTemplate.send(<span class="string">"topicExchange1-spring"</span>, <span class="string">"mq.package"</span>, message2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="全局的转换器"><a href="#全局的转换器" class="headerlink" title="全局的转换器"></a>全局的转换器</h3><p><strong>容器式转换器，内可添多转换器</strong></p>
<ul>
<li>监听容器配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MessageListenerAdapter adapter = <span class="keyword">new</span> MessageListenerAdapter(<span class="keyword">new</span> MessageDelegate());</span><br><span class="line">adapter.setDefaultListenerMethod(<span class="string">"consumeMessage"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局的转换器:</span></span><br><span class="line">ContentTypeDelegatingMessageConverter convert = <span class="keyword">new</span> ContentTypeDelegatingMessageConverter();</span><br><span class="line"></span><br><span class="line">TextMessageConverter textConvert = <span class="keyword">new</span> TextMessageConverter();</span><br><span class="line">convert.addDelegate(<span class="string">"text"</span>, textConvert);</span><br><span class="line">convert.addDelegate(<span class="string">"html/text"</span>, textConvert);</span><br><span class="line">convert.addDelegate(<span class="string">"xml/text"</span>, textConvert);</span><br><span class="line">convert.addDelegate(<span class="string">"text/plain"</span>, textConvert);</span><br><span class="line"></span><br><span class="line">Jackson2JsonMessageConverter jsonConvert = <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">convert.addDelegate(<span class="string">"json"</span>, jsonConvert);</span><br><span class="line">convert.addDelegate(<span class="string">"application/json"</span>, jsonConvert);</span><br><span class="line"></span><br><span class="line">ImageMessageConverter imageConverter = <span class="keyword">new</span> ImageMessageConverter();</span><br><span class="line">convert.addDelegate(<span class="string">"image/png"</span>, imageConverter);</span><br><span class="line">convert.addDelegate(<span class="string">"image"</span>, imageConverter);</span><br><span class="line"></span><br><span class="line">PDFMessageConverter pdfConverter = <span class="keyword">new</span> PDFMessageConverter();</span><br><span class="line">convert.addDelegate(<span class="string">"application/pdf"</span>, pdfConverter);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">adapter.setMessageConverter(convert);</span><br><span class="line">container.setMessageListener(adapter);</span><br></pre></td></tr></table></figure>

<ul>
<li>消息代理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageDelegate</span> </span>&#123;</span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumeMessage</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">		System.err.println(<span class="string">"文件对象 方法, 消息内容:"</span> + file.getName());</span><br><span class="line">	&#125;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<ul>
<li><p>图片转换器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageMessageConverter</span> <span class="keyword">implements</span> <span class="title">MessageConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Message <span class="title">toMessage</span><span class="params">(Object object, MessageProperties messageProperties)</span> <span class="keyword">throws</span> MessageConversionException </span>&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> MessageConversionException(<span class="string">" convert error ! "</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">fromMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> MessageConversionException </span>&#123;</span><br><span class="line">		System.err.println(<span class="string">"-----------Image MessageConverter----------"</span>);</span><br><span class="line">		</span><br><span class="line">		Object _extName = message.getMessageProperties().getHeaders().get(<span class="string">"extName"</span>);</span><br><span class="line">		String extName = _extName == <span class="keyword">null</span> ? <span class="string">"png"</span> : _extName.toString();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">byte</span>[] body = message.getBody();</span><br><span class="line">		String fileName = UUID.randomUUID().toString();</span><br><span class="line">		String path = <span class="string">"d:/tmp/"</span> + fileName + <span class="string">"."</span> + extName;</span><br><span class="line">		File f = <span class="keyword">new</span> File(path);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Files.copy(<span class="keyword">new</span> ByteArrayInputStream(body), f.toPath());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> f;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendExtConverterMessage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] body = Files.readAllBytes(Paths.get(<span class="string">"d:/tmp"</span>, <span class="string">"iconCls.png"</span>));</span><br><span class="line">    MessageProperties messageProperties = <span class="keyword">new</span> MessageProperties();</span><br><span class="line">    messageProperties.setContentType(<span class="string">"image/png"</span>);</span><br><span class="line">    messageProperties.getHeaders().put(<span class="string">"extName"</span>, <span class="string">"png"</span>);</span><br><span class="line">    Message message = <span class="keyword">new</span> Message(body, messageProperties);</span><br><span class="line">    rabbitTemplate.send(<span class="string">""</span>, <span class="string">"image_queue"</span>, message);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//byte[] body = Files.readAllBytes(Paths.get("d:/tmp", "mysql.pdf"));</span></span><br><span class="line">    <span class="comment">//MessageProperties messageProperties = new MessageProperties();</span></span><br><span class="line">    <span class="comment">//messageProperties.setContentType("application/pdf");</span></span><br><span class="line">    <span class="comment">//Message message = new Message(body, messageProperties);</span></span><br><span class="line">    <span class="comment">//rabbitTemplate.send("", "pdf_queue", message);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="与SpringBoot整合"><a href="#与SpringBoot整合" class="headerlink" title="与SpringBoot整合"></a>与SpringBoot整合</h1><h2 id="生成端"><a href="#生成端" class="headerlink" title="生成端"></a>生成端</h2><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.addresses</span>=<span class="string">192.168.11.76:5672</span></span><br><span class="line"><span class="meta">spring.rabbitmq.username</span>=<span class="string">guest</span></span><br><span class="line"><span class="meta">spring.rabbitmq.password</span>=<span class="string">guest</span></span><br><span class="line"><span class="meta">spring.rabbitmq.virtual-host</span>=<span class="string">/</span></span><br><span class="line"><span class="meta">spring.rabbitmq.connection-timeout</span>=<span class="string">15000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.rabbitmq.publisher-confirms</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.rabbitmq.publisher-returns</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.rabbitmq.template.mandatory</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//自动注入RabbitTemplate模板类</span></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RabbitTemplate rabbitTemplate;  </span><br><span class="line">	</span><br><span class="line">	<span class="comment">//回调函数: confirm确认</span></span><br><span class="line">	<span class="keyword">final</span> ConfirmCallback confirmCallback = <span class="keyword">new</span> RabbitTemplate.ConfirmCallback() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">			System.err.println(<span class="string">"correlationData: "</span> + correlationData);</span><br><span class="line">			System.err.println(<span class="string">"ack: "</span> + ack);</span><br><span class="line">			<span class="keyword">if</span>(!ack)&#123;</span><br><span class="line">				System.err.println(<span class="string">"异常处理...."</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//回调函数: return返回</span></span><br><span class="line">	<span class="keyword">final</span> ReturnCallback returnCallback = <span class="keyword">new</span> RabbitTemplate.ReturnCallback() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(org.springframework.amqp.core.Message message, <span class="keyword">int</span> replyCode, String replyText,</span></span></span><br><span class="line"><span class="function"><span class="params">				String exchange, String routingKey)</span> </span>&#123;</span><br><span class="line">			System.err.println(<span class="string">"return exchange: "</span> + exchange + <span class="string">", routingKey: "</span> </span><br><span class="line">				+ routingKey + <span class="string">", replyCode: "</span> + replyCode + <span class="string">", replyText: "</span> + replyText);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//发送消息方法调用: 构建Message消息</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Object message, Map&lt;String, Object&gt; properties)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		MessageHeaders mhs = <span class="keyword">new</span> MessageHeaders(properties);</span><br><span class="line">		Message msg = MessageBuilder.createMessage(message, mhs);</span><br><span class="line">		rabbitTemplate.setConfirmCallback(confirmCallback);</span><br><span class="line">		rabbitTemplate.setReturnCallback(returnCallback);</span><br><span class="line">		<span class="comment">//id + 时间戳 全局唯一 </span></span><br><span class="line">		CorrelationData correlationData = <span class="keyword">new</span> CorrelationData(<span class="string">"1234567890"</span>);</span><br><span class="line">		rabbitTemplate.convertAndSend(<span class="string">"exchange-1"</span>, <span class="string">"springboot.abc"</span>, msg, correlationData);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//发送消息方法调用: 构建自定义对象消息</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendOrder</span><span class="params">(Order order)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		rabbitTemplate.setConfirmCallback(confirmCallback);</span><br><span class="line">		rabbitTemplate.setReturnCallback(returnCallback);</span><br><span class="line">		<span class="comment">//id + 时间戳 全局唯一 </span></span><br><span class="line">		CorrelationData correlationData = <span class="keyword">new</span> CorrelationData(<span class="string">"0987654321"</span>);</span><br><span class="line">		rabbitTemplate.convertAndSend(<span class="string">"exchange-2"</span>, <span class="string">"springboot.def"</span>, order, correlationData);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="消费端"><a href="#消费端" class="headerlink" title="消费端"></a>消费端</h2><h3 id="application-properties-1"><a href="#application-properties-1" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.rabbitmq.addresses</span>=<span class="string">192.168.11.76:5672</span></span><br><span class="line"><span class="meta">spring.rabbitmq.username</span>=<span class="string">guest</span></span><br><span class="line"><span class="meta">spring.rabbitmq.password</span>=<span class="string">guest</span></span><br><span class="line"><span class="meta">spring.rabbitmq.virtual-host</span>=<span class="string">/</span></span><br><span class="line"><span class="meta">spring.rabbitmq.connection-timeout</span>=<span class="string">15000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.rabbitmq.listener.simple.acknowledge-mode</span>=<span class="string">manual</span></span><br><span class="line"><span class="meta">spring.rabbitmq.listener.simple.concurrency</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">spring.rabbitmq.listener.simple.max-concurrency</span>=<span class="string">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应Order实体类</span></span><br><span class="line"><span class="meta">spring.rabbitmq.listener.order.queue.name</span>=<span class="string">queue-2</span></span><br><span class="line"><span class="meta">spring.rabbitmq.listener.order.queue.durable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.rabbitmq.listener.order.exchange.name</span>=<span class="string">exchange-2</span></span><br><span class="line"><span class="meta">spring.rabbitmq.listener.order.exchange.durable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.rabbitmq.listener.order.exchange.type</span>=<span class="string">topic</span></span><br><span class="line"><span class="meta">spring.rabbitmq.listener.order.exchange.ignoreDeclarationExceptions</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.rabbitmq.listener.order.key</span>=<span class="string">springboot.*</span></span><br></pre></td></tr></table></figure>

<h3 id="配置类-1"><a href="#配置类-1" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">         value = <span class="meta">@Queue</span>(value = <span class="string">"queue-1"</span>, </span><br><span class="line">         durable=<span class="string">"true"</span>),</span><br><span class="line">         exchange = <span class="meta">@Exchange</span>(value = <span class="string">"exchange-1"</span>, </span><br><span class="line">         durable=<span class="string">"true"</span>, </span><br><span class="line">         type= <span class="string">"topic"</span>, </span><br><span class="line">         ignoreDeclarationExceptions = <span class="string">"true"</span>),</span><br><span class="line">         key = <span class="string">"springboot.*"</span></span><br><span class="line">         )</span><br><span class="line">   )</span><br><span class="line">   <span class="meta">@RabbitHandler</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.err.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">      System.err.println(<span class="string">"消费端Payload: "</span> + message.getPayload());</span><br><span class="line">      Long deliveryTag = (Long)message.getHeaders().get(AmqpHeaders.DELIVERY_TAG);</span><br><span class="line">      <span class="comment">//手工ACK</span></span><br><span class="line">      channel.basicAck(deliveryTag, <span class="keyword">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * spring.rabbitmq.listener.order.queue.name=queue-2</span></span><br><span class="line"><span class="comment">      spring.rabbitmq.listener.order.queue.durable=true</span></span><br><span class="line"><span class="comment">      spring.rabbitmq.listener.order.exchange.name=exchange-1</span></span><br><span class="line"><span class="comment">      spring.rabbitmq.listener.order.exchange.durable=true</span></span><br><span class="line"><span class="comment">      spring.rabbitmq.listener.order.exchange.type=topic</span></span><br><span class="line"><span class="comment">      spring.rabbitmq.listener.order.exchange.ignoreDeclarationExceptions=true</span></span><br><span class="line"><span class="comment">      spring.rabbitmq.listener.order.key=springboot.*</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> order</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> headers</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">         value = <span class="meta">@Queue</span>(value = <span class="string">"$&#123;spring.rabbitmq.listener.order.queue.name&#125;"</span>, </span><br><span class="line">         durable=<span class="string">"$&#123;spring.rabbitmq.listener.order.queue.durable&#125;"</span>),</span><br><span class="line">         exchange = <span class="meta">@Exchange</span>(value = <span class="string">"$&#123;spring.rabbitmq.listener.order.exchange.name&#125;"</span>, </span><br><span class="line">         durable=<span class="string">"$&#123;spring.rabbitmq.listener.order.exchange.durable&#125;"</span>, </span><br><span class="line">         type= <span class="string">"$&#123;spring.rabbitmq.listener.order.exchange.type&#125;"</span>, </span><br><span class="line">         ignoreDeclarationExceptions = <span class="string">"$&#123;spring.rabbitmq.listener.order.exchange.ignoreDeclarationExceptions&#125;"</span>),</span><br><span class="line">         key = <span class="string">"$&#123;spring.rabbitmq.listener.order.key&#125;"</span></span><br><span class="line">         )</span><br><span class="line">   )</span><br><span class="line">   <span class="meta">@RabbitHandler</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOrderMessage</span><span class="params">(@Payload anait.entity.Order order, </span></span></span><br><span class="line"><span class="function"><span class="params">         Channel channel, </span></span></span><br><span class="line"><span class="function"><span class="params">         @Headers Map&lt;String, Object&gt; headers)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.err.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">      System.err.println(<span class="string">"消费端order: "</span> + order.getId());</span><br><span class="line">      Long deliveryTag = (Long)headers.get(AmqpHeaders.DELIVERY_TAG);</span><br><span class="line">      <span class="comment">//手工ACK</span></span><br><span class="line">      channel.basicAck(deliveryTag, <span class="keyword">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="TODO集群"><a href="#TODO集群" class="headerlink" title="TODO集群"></a>TODO集群</h1>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Rabbitmq详解</tag>
      </tags>
  </entry>
  <entry>
    <title>thymeleaf语法</title>
    <url>/2018/12/06/thymeleaf%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="变量获取"><a href="#变量获取" class="headerlink" title="变量获取"></a>变量获取</h1><ul>
<li>Variable Expressions: ${…}</li>
<li>Selection Variable Expressions: *{…}</li>
<li>Message Expressions: #{…}</li>
<li>Link URL Expressions: @{…}</li>
<li>Fragment Expressions: ~{…}</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p th:text&#x3D;&quot;&#39;Hello！, &#39; + $&#123;name&#125; + &#39;!&#39;&quot; &gt;3333&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p><strong>可以看出获取变量值用$符号,对于javaBean的话使用变量名.属性名方式获取,这点和EL表达式一样.</strong></p>
<ol>
<li><strong>表达式只能写在th标签内部,不然不会生效。</strong></li>
<li><strong><code>#{}</code>是国际化支持取值的符号。</strong></li>
<li><strong>注意:th:text与th:utext的区别，输出中文时应该使用th:utext 。</strong></li>
<li><strong>${..}实际语法是:OGNL(非web),SpEL(web) ,支持的内置变量。</strong></li>
</ol>
<a id="more"></a>

<p>便捷部分</p>
<ul>
<li>${x} will return a variable x stored into the Thymeleaf context or as a request attribute.</li>
<li>${param.x} will return a request parameter called x (which might be multivalued).</li>
<li>${session.x} will return a session attribute called x.</li>
<li>${application.x} will return a servlet context attribute called x.</li>
</ul>
<p>基本的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#ctx: the context object.</span><br><span class="line">#vars: the context variables.</span><br><span class="line">#locale: the context locale.</span><br><span class="line">#request: (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">#response: (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">#session: (only in Web Contexts) the HttpSession object.</span><br><span class="line">#servletContext: (only in Web Contexts) the ServletContext object.</span><br></pre></td></tr></table></figure>

<p>用<code>*{...}</code> 选择对象里的变量，如:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;lastName&#125;"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;nationality&#125;"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//等价于</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.lastName&#125;"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.nationality&#125;"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="字符串拼凑"><a href="#字符串拼凑" class="headerlink" title="字符串拼凑"></a>字符串拼凑</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:class</span>=<span class="string">"'content'"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"|Welcome to our application, $&#123;user.name&#125;!|"</span>&gt;</span></span><br><span class="line">//Which is equivalent to:</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'Welcome to our application, ' + $&#123;user.name&#125; + '!'"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;onevar&#125; + ' ' + |$&#123;twovar&#125;, $&#123;threevar&#125;|"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="定制模版本地变量"><a href="#定制模版本地变量" class="headerlink" title="定制模版本地变量"></a>定制模版本地变量</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:with</span>=<span class="string">"tb2=$&#123;testBeanList[0]&#125;,tb3=$&#123;testBeanList[1]&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;tb2.id&#125;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;tb2.name&#125;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>在表达式中可以使用各类算术运算符，例如+, -, *, /, %</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:with="isEven=($&#123;prodStat.count&#125; % 2 == 0)"</span><br></pre></td></tr></table></figure>

<p>逻辑运算符&gt;, &lt;, &gt;=, &lt;=，==,!= (gt, lt, ge, le,eq,ne)都可以使用，唯一需要注意的是使用&lt;,&gt;时需要用它的HTML转义符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">th:if="$&#123;prodStat.count&#125; <span class="symbol">&amp;gt;</span> 1"</span><br><span class="line">th:text="'Execution mode is ' + ( ($&#123;execMode&#125; == 'dev')? 'Development' : 'Production')"</span><br></pre></td></tr></table></figure>

<p>布尔运算符: <strong>and or not/!</strong></p>
<h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><ul>
<li>If-then: (if) ? (then)</li>
<li>If-then-else: (if) ? (then) : (else)</li>
<li>Default: (value) ?: (defaultvalue)</li>
<li>No-Operation: _</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:with</span>=<span class="string">"tb=$&#123;testBeanList[0]&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:style</span>=<span class="string">"'color:red;'"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;key1&#125;?:'nokey1'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:style</span>=<span class="string">"'color:red;'"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;tb.isBeanTrue()&#125;?'trueval'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:style</span>=<span class="string">"'color:red;font-size=18px;'"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;tb.isBeanFalse()&#125;?'trueval':'falsevalue'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">isBeanTrue是tb对象里的方法。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="if-unless"><a href="#if-unless" class="headerlink" title="if/unless"></a><strong>if/unless</strong></h2><p>Thymeleaf中使用th:if和th:unless属性进行条件判断，标签只有在th:if中条件成立时才显示,th:unless于th:if恰好相反，只有表达式中的条件不成立，才会显示其内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:with</span>=<span class="string">"tbIf=$&#123;testBeanList[4]&#125;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--条件里的为true才显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login.html&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;tbIf.isBeanTrue()&#125;"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--条件里的为false才显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login.html&#125;"</span> <span class="attr">th:unless</span>=<span class="string">"$&#123;tbIf.isBeanTrue()&#125;"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a><strong>Switch</strong></h2><p>Thymeleaf同样支持多路选择Switch结构,默认属性default可以用*表示:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#&#123;roles.manager&#125;"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="引入URL"><a href="#引入URL" class="headerlink" title="引入URL"></a>引入URL</h1><p>Thymeleaf对于URL的处理是通过语法<code>@{…}</code>来处理的</p>
<ul>
<li>Page-relative: <code>user/login.html</code></li>
<li>Context-relative: <code>/itemdetails?id=3</code> (context name in server will be added automatically)</li>
<li>Server-relative: <code>~/billing/processInvoice</code> (allows calling URLs in another context (= application) in the same server.</li>
<li>Protocol-relative URLs: <code>//code.jquery.com/jquery-2.0.3.min.js</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://blog.csdn.net/u012706811&#125;"</span>&gt;</span>绝对路径<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/&#125;"</span>&gt;</span>相对路径<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;css/bootstrap.min.css&#125;"</span>&gt;</span>Content路径,默认访问static下的css文件夹<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>类似的标签有:th:href和th:src</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Will produce 'http://localhost:8080/gtvg/order/details?orderId=3' (plus rewriting) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"details.html"</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">th:href</span>=<span class="string">"@&#123;http://localhost:8080/gtvg/order/details(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"details.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"details.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/order/&#123;orderId&#125;/details(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;$&#123;url&#125;(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;'/details/'+$&#123;user.login&#125;(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>style样式引入URL(<strong>+必须有</strong>)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">th:style</span>=<span class="string">"'background:url(' + @&#123;/img/bg.jpg&#125; + ');'"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">"tb :$&#123;testBeanList&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#request.getRequestURI()&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;tb.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;tb.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod : $&#123;prods&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.price&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>迭代对象必须为</p>
<ul>
<li>Any object implementing <code>java.util.Iterable、 java.util.Enumeration、java.util.Iterator</code></li>
<li>Any object implementing java.util.Map. When iterating maps, iter variables will be of class <code>java.util.Map.Entry</code>.</li>
<li>Any array.</li>
<li>Any other object will be treated as if it were a single-valued list containing the object itself.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod,iterStat : $&#123;prods&#125;"</span> <span class="attr">th:class</span>=<span class="string">"$&#123;iterStat.odd&#125;? 'odd'"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.price&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">//不过也可以直接加Stat后缀访问状态变量</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod : $&#123;prods&#125;"</span> <span class="attr">th:class</span>=<span class="string">"$&#123;prodStat.odd&#125;? 'odd'"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.price&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>th:each内置迭代状态属性（<strong>iterStat.*</strong>）：</p>
<ul>
<li>index ,当前索引，从0开始。</li>
<li>count,当前数目，从1开始。</li>
<li>size，总大小</li>
<li>current，当前值</li>
<li>even/odd boolean properties.</li>
<li>first boolean property.</li>
<li>last boolean property.</li>
</ul>
<h1 id="文本型模板-JS-CSS-、内联"><a href="#文本型模板-JS-CSS-、内联" class="headerlink" title="文本型模板(JS,CSS)、内联"></a>文本型模板(JS,CSS)、内联</h1><p><strong>文本型模板使得Thymeleaf可以支持输出CSS、Javascript和文本文件</strong>。在你想要在CSS或Javascript文件中使用服务端的变量时；或者想要输出纯文本的内容时。<br>在文本模式中使用Thymeleaf的特性，你需要使用一种新的语法，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[# th:each="item : $&#123;items&#125;"]</span><br><span class="line">  - [# th:utext="$&#123;item&#125;" /]</span><br><span class="line">[<span class="regexp">/]</span></span><br><span class="line"><span class="regexp">var a = [# th:text="$&#123;msg&#125;"/];</span></span><br></pre></td></tr></table></figure>

<p><strong>增强的内联机制</strong><br>现在可无需额外的标签，直接在文本中输出数据：</p>
<ul>
<li><p>CSS</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">th:inline</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="css">    .<span class="selector-attr">[[$&#123;classname&#125;]</span>] &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">text-align</span>: <span class="selector-attr">[[$&#123;align&#125;]</span>];</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">And the result would be</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">th:inline</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span>\ <span class="selector-tag">elems</span> &#123;</span></span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>html内联</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//不会转义时</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The message is "[($&#123;msg&#125;)]"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">//等价于</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The message is "This is <span class="tag">&lt;<span class="name">b</span>&gt;</span>great!<span class="tag">&lt;/<span class="name">b</span>&gt;</span>"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//转义时</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The message is "[[$&#123;msg&#125;]]"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">//等价于</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The message is "This is <span class="symbol">&amp;lt;</span>b<span class="symbol">&amp;gt;</span>great!<span class="symbol">&amp;lt;</span>/b<span class="symbol">&amp;gt;</span>"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//禁用内联</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:inline</span>=<span class="string">"none"</span>&gt;</span>A double array looks like this: [[1, 2, 3], [4, 5]]!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//js内联</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> username = [[$&#123;session.user.name&#125;]];</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="片段（Fragment）表达式"><a href="#片段（Fragment）表达式" class="headerlink" title="片段（Fragment）表达式"></a>片段（Fragment）表达式</h1><p>Thymeleaf 3.0 引入了一个新的片段表达式。形如：~{commons::footer}。<br>该特性十分有用（比如解决定义通用的header和footer的问题）<br>base.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:fragment</span>=<span class="string">"common_header(title,links)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">th:replace</span>=<span class="string">"$&#123;title&#125;"</span>&gt;</span>The awesome application<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Common styles and scripts --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"all"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/awesomeapp.css&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/images/favicon.ico&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/sh/scripts/codebase.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--/* Per-page placeholder for additional links */--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:replace</span>=<span class="string">"$&#123;links&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>main.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">th:replace</span>=<span class="string">"base :: common_header(~&#123;::title&#125;,~&#123;::link&#125;)"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Awesome - Main<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/bootstrap.min.css&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/themes/smoothness/jquery-ui.css&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>片段经常和<code>th:insert or th:replace</code>一起使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;commons :: main&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:with</span>=<span class="string">"frag=~&#123;footer :: #main/text()&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:insert</span>=<span class="string">"$&#123;frag&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>~{::selector} or ~{this::selector}</code>引用本模板内的片段</p>
<p>不使用th:fragment定义的片段的情况：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"copy-section"</span>&gt;</span></span><br><span class="line">  <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: #copy-section&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>th:insert and th:replace (and th:include)</code>的区别：<ul>
<li>th:insert 插入片段本身</li>
<li>th:replace actually replaces its host tag with the specified fragment.</li>
<li>th:include 与th:insert不同的是，它插入的是片段解析后的内容</li>
</ul>
</li>
</ul>
<h1 id="无操作标记（token）"><a href="#无操作标记（token）" class="headerlink" title="无操作标记（token）"></a>无操作标记（token）</h1><p>Thymeleaf 3.0 另一个新的特性就是无操作（NO-OP no-operation）标记，下划线”_”，代表什么也不做。<br>例如：<br><code>&lt;span th:text=&quot;${user.name} ?: _&quot;&gt;no user authenticated&lt;/span&gt;</code><br>当user.name 为空的时候，直接输出标签体中的内容。</p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1、<span class="comment">&lt;!--/* This code will be removed at Thymeleaf parsing time! */--&gt;</span></span><br><span class="line"></span><br><span class="line">2、<span class="comment">&lt;!--/*--&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     you can see me only before Thymeleaf processes me!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--*/--&gt;</span></span><br><span class="line"></span><br><span class="line">3、<span class="comment">&lt;!--/*/</span></span><br><span class="line"><span class="comment">  &lt;div th:text="$&#123;...&#125;"&gt;</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">  &lt;/div&gt;</span></span><br><span class="line"><span class="comment">/*/--&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwOTkwMzgyMQ==" title="https://segmentfault.com/a/1190000009903821">segment<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>1-IOC-DI-源码</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/1-IOC-DI-%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h1 id="0-BeanFactory"><a href="#0-BeanFactory" class="headerlink" title="0 BeanFactory"></a>0 BeanFactory</h1><ul>
<li>BeanFactory接口的子类或子接口</li>
</ul>
<p><img src="/images/springofficial/3-BeanFactory.png" alt=""></p>
<ul>
<li><p><strong>AutowireCapableBeanFactory：</strong><br>beanFactory接口的扩展实现，假如它们想要对已经存在的bean暴露它的功能，实现它就能实现自动装配功能。定义了将容器中的Bean按某种规则（如按名字匹配、按类型匹配等）进行自动装配的方法；</p>
</li>
<li><p><strong>HierarchicalBeanFactory</strong> :</p>
<p>是一个bean factory 子接口实现，可以作为层次结构的一部分。相对应的bean Factory方法setParentBeanFactory允许在一个可配置beanfactory中设置它们的父bean factory。</p>
</li>
</ul>
<a id="more"></a>

<ul>
<li><p><strong>ListableBeanFactory</strong>：</p>
<p>是beanFactory接口的扩展接口，它可以枚举所有的bean实例，而不是客户端通过名称一个一个的查询得出所有的实例。要预加载所有的bean定义的beanfactory可以实现这个接口来。该接口定义了访问容器中Bean基本信息的若干方法，如查看Bean的个数、获取某一类型Bean的配置名、查看容器中是否包括某一Bean等方法；</p>
</li>
<li><p><strong>SimpleJndiBeanFactory</strong>：</p>
<p>是spring beanFactory接口的基于jndi的简单实现。不支持枚举bean定义，故不需要实现ListableBeanFactory接口。这个bean工厂可以解析制定名称的jndi名称，在J2EE应用中，jndi名称的命名空间为”java:/comp/env/“.</p>
<p>这个bean工厂主要和spring的<strong>CommonAnnotationBeanPostProcessor</strong> 联合使用。</p>
<p>The main intent of this factory is usage in combination with Spring’s CommonAnnotationBeanPostProcessor, configured as “resourceFactory” for resolving @Resource annotations as JNDI objects without intermediate bean definitions. It may be used for similar lookup scenarios as well, of course, in particular if BeanFactory-style type checking is required.</p>
</li>
</ul>
<p>  <img src="/images/springofficial/4-XmlBeanFactory.png" alt=""></p>
<blockquote>
<p> bean经过两次进化，到了DefaultListableBeanFactory，完善了bean容器的功能。</p>
<p> 最终进化到XmlBeanFactory并从XML文件中读取数据</p>
</blockquote>
<h1 id="1-DefaultListableBeanFactory"><a href="#1-DefaultListableBeanFactory" class="headerlink" title="1 DefaultListableBeanFactory"></a>1 DefaultListableBeanFactory</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultListableBeanFactory</span> <span class="keyword">extends</span> <span class="title">AbstractAutowireCapableBeanFactory</span></span></span><br><span class="line"><span class="class">      <span class="keyword">implements</span> <span class="title">ConfigurableListableBeanFactory</span>, <span class="title">BeanDefinitionRegistry</span>, <span class="title">Serializable</span> </span>&#123;<span class="comment">//..</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-XmlBeanFactory"><a href="#2-XmlBeanFactory" class="headerlink" title="2 XmlBeanFactory"></a>2 XmlBeanFactory</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlBeanFactory</span> <span class="keyword">extends</span> <span class="title">DefaultListableBeanFactory</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/images/springofficial/5-XmlBeanFactory-uml.png" alt=""></p>
<h1 id="3-Resource"><a href="#3-Resource" class="headerlink" title="3 Resource"></a>3 Resource</h1><p>资源文件封装</p>
<p><img src="/images/springofficial/6-Resource.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"application2.xml"</span>);</span><br><span class="line"></span><br><span class="line">   System.out.println(resource.getURL());</span><br><span class="line">   System.out.println(((ClassPathResource) resource).getPath());</span><br><span class="line">   System.out.println(resource.getURI());</span><br><span class="line">   File file = resource.getFile();</span><br><span class="line">   System.out.println(file.getPath());</span><br><span class="line">   System.out.println(file.getName());</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   file:/C:/Users/ZhangXu/Desktop/spring-framework-5.0.8.RELEASE/test-springannotation/target/classes/application2.xml</span></span><br><span class="line"><span class="comment">   application2.xml</span></span><br><span class="line"><span class="comment">   file:/C:/Users/ZhangXu/Desktop/spring-framework-5.0.8.RELEASE/test-springannotation/target/classes/application2.xml</span></span><br><span class="line"><span class="comment">   C:\Users\ZhangXu\Desktop\spring-framework-5.0.8.RELEASE\test-springannotation\target\classes\application2.xml</span></span><br><span class="line"><span class="comment">   application2.xml</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="5-用法对应源码"><a href="#5-用法对应源码" class="headerlink" title="5 用法对应源码"></a>5 用法对应源码</h1><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath*:app.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DefaultBeanDefinitionDocumentReader.java  解析XML配置文件的类</span></span><br><span class="line"><span class="comment">// 并将所有数据封装在BeanDefinition类中</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse an "import" element and load the bean definitions</span></span><br><span class="line"><span class="comment"> * from the given resource into the bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">importBeanDefinitionResource</span><span class="params">(Element ele)</span> </span>&#123;</span><br><span class="line">   String location = ele.getAttribute(RESOURCE_ATTRIBUTE); <span class="comment">// resource</span></span><br><span class="line">   <span class="keyword">if</span> (!StringUtils.hasText(location)) &#123;</span><br><span class="line">      getReaderContext().error(<span class="string">"Resource location must not be empty"</span>, ele);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Resolve system properties: e.g. "$&#123;user.dir&#125;"</span></span><br><span class="line">   <span class="comment">// 解析占位符</span></span><br><span class="line">   location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location);</span><br><span class="line"></span><br><span class="line">   Set&lt;Resource&gt; actualResources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Discover whether the location is an absolute or relative URI</span></span><br><span class="line">   <span class="keyword">boolean</span> absoluteLocation = <span class="keyword">false</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 判断是不是classpath*: classpath:开头的</span></span><br><span class="line">      absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (URISyntaxException ex) &#123;</span><br><span class="line">      <span class="comment">// cannot convert to an URI, considering the location relative</span></span><br><span class="line">      <span class="comment">// unless it is the well-known Spring prefix "classpath*:"</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Absolute or relative?</span></span><br><span class="line">   <span class="keyword">if</span> (absoluteLocation) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">int</span> importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">         getReaderContext().error(</span><br><span class="line">               <span class="string">"Failed to import bean definitions from URL location ["</span> + location + <span class="string">"]"</span>, ele, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// No URL -&gt; considering resource location as relative to the current file.</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">int</span> importCount;</span><br><span class="line">         Resource relativeResource = getReaderContext().getResource().createRelative(location);</span><br><span class="line">         <span class="keyword">if</span> (relativeResource.exists()) &#123;</span><br><span class="line">            importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource);</span><br><span class="line">            actualResources.add(relativeResource);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            String baseLocation = getReaderContext().getResource().getURL().toString();</span><br><span class="line">            importCount = getReaderContext().getReader().loadBeanDefinitions(</span><br><span class="line">                  StringUtils.applyRelativePath(baseLocation, location), actualResources);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">         getReaderContext().error(<span class="string">"Failed to resolve current resource location"</span>, ele, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   Resource[] actResArray = actualResources.toArray(<span class="keyword">new</span> Resource[<span class="number">0</span>]);</span><br><span class="line">   getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="bean加载"><a href="#bean加载" class="headerlink" title="bean加载"></a>bean加载</h2><p><strong>通过getBean(“user1”)方法跟踪</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.ep.bean.User"</span> <span class="attr">id</span>=<span class="string">"user1"</span> <span class="attr">primary</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 在refresh()方法中创建BeanFactory对象    </span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">		DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">		beanFactory.setSerializationId(getId());</span><br><span class="line">		<span class="comment">// 定制：@Autowire。。。</span></span><br><span class="line">		customizeBeanFactory(beanFactory);</span><br><span class="line">		loadBeanDefinitions(beanFactory);</span><br><span class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">			<span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析XML后，beanFactory对应 beanDefinitionMap字段的值</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	"user1" -&gt; "Generic bean: class [com.ep.bean.User];</span></span><br><span class="line"><span class="comment">       scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; </span></span><br><span class="line"><span class="comment">       autowireCandidate=true; primary=true; factoryBeanName=null; </span></span><br><span class="line"><span class="comment">       factoryMethodName=null; initMethodName=null; destroyMethodName=null;</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>

<h3 id="bean的加载集中在此方法中"><a href="#bean的加载集中在此方法中" class="headerlink" title="bean的加载集中在此方法中"></a>bean的加载集中在此方法中</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AbstractBeanFactory</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(<span class="keyword">final</span> String name, @Nullable <span class="keyword">final</span> Class&lt;T&gt; requiredType,</span></span></span><br><span class="line"><span class="function"><span class="params">      @Nullable <span class="keyword">final</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 转换对应的bean name  -&gt;&gt;&gt;&gt; &amp;user(获取对应ObejectFactoryBean) -&gt; user</span></span><br><span class="line">   <span class="keyword">final</span> String beanName = transformedBeanName(name);</span><br><span class="line">   Object bean;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">   <span class="comment">// 尝试从缓存中加载单例</span></span><br><span class="line">   Object sharedInstance = getSingleton(beanName);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 实例化</span></span><br><span class="line">      bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Fail if we're already creating this bean instance:</span></span><br><span class="line">      <span class="comment">// We're assumably within a circular reference.</span></span><br><span class="line">      <span class="comment">// 尝试解决循环依赖</span></span><br><span class="line">      <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">      BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">      <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">         <span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">         String nameToLookup = originalBeanName(name);</span><br><span class="line">         <span class="keyword">if</span> (parentBeanFactory <span class="keyword">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">                  nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line">            <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">            <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">         markBeanAsCreated(beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 将从XML文件读取的数据BeanDefinition 转换为 RootBeanDefinition</span></span><br><span class="line">         <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">         <span class="comment">// 判断是不是抽象类，是抛出异常</span></span><br><span class="line">         checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">         String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">         <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">               <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                        <span class="string">"Circular depends-on relationship between '"</span> + beanName + <span class="string">"' and '"</span> + dep + <span class="string">"'"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 先注册依赖的bean</span></span><br><span class="line">               registerDependentBean(dep, beanName);</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                  getBean(dep);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                        <span class="string">"'"</span> + beanName + <span class="string">"' depends on missing bean '"</span> + dep + <span class="string">"'"</span>, ex);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Create bean instance.</span></span><br><span class="line">         <span class="keyword">if</span> (mbd.isSingleton()) &#123;                    <span class="comment">// new ObjectFactory()</span></span><br><span class="line">            sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">// 类似创建FactoryBean</span></span><br><span class="line">                  <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                  <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                  <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                  <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                  destroySingleton(beanName);</span><br><span class="line">                  <span class="keyword">throw</span> ex;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 示例化</span></span><br><span class="line">            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 多实例 实例化</span></span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">            <span class="comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">            Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               beforePrototypeCreation(beanName);</span><br><span class="line">               prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">               afterPrototypeCreation(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 范围bean</span></span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            String scopeName = mbd.getScope();</span><br><span class="line">            <span class="keyword">final</span> Scope scope = <span class="keyword">this</span>.scopes.get(scopeName);</span><br><span class="line">            <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No Scope registered for scope name '"</span> + scopeName + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               Object scopedInstance = scope.get(beanName, () -&gt; &#123;</span><br><span class="line">                  beforePrototypeCreation(beanName);</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                     <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">finally</span> &#123;</span><br><span class="line">                     afterPrototypeCreation(beanName);</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">               bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                     <span class="string">"Scope '"</span> + scopeName + <span class="string">"' is not active for the current thread; consider "</span> +</span><br><span class="line">                     <span class="string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</span><br><span class="line">                     ex);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Check if required type matches the type of the actual bean instance.</span></span><br><span class="line">   <span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">         <span class="keyword">if</span> (convertedBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> convertedBean;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Failed to convert bean '"</span> + name + <span class="string">"' to required type '"</span> +</span><br><span class="line">                  ClassUtils.getQualifiedName(requiredType) + <span class="string">"'"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="默认创建一个单例bean日志"><a href="#默认创建一个单例bean日志" class="headerlink" title="默认创建一个单例bean日志"></a>默认创建一个单例bean日志</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">DEBUG [main] - Creating shared instance of singleton bean 'user2'</span><br><span class="line">DEBUG [main] - Creating instance of bean 'user2'</span><br><span class="line">DEBUG [main] - Eagerly caching bean 'user2' to allow for resolving potential circular references</span><br><span class="line">DEBUG [main] - Finished creating instance of bean 'user2'</span><br></pre></td></tr></table></figure>

<h3 id="默认创建一个多例bean日志"><a href="#默认创建一个多例bean日志" class="headerlink" title="默认创建一个多例bean日志"></a>默认创建一个多例bean日志</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">DEBUG [main] - Creating shared instance of singleton bean 'user3'</span><br><span class="line">DEBUG [main] - Creating instance of bean 'user3'</span><br><span class="line">DEBUG [main] - Eagerly caching bean 'user3' to allow for resolving potential circular references</span><br><span class="line">DEBUG [main] - Finished creating instance of bean 'user3'</span><br><span class="line">DEBUG [main] - Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@3eb25e1a]</span><br><span class="line">DEBUG [main] - Returning cached instance of singleton bean 'lifecycleProcessor'</span><br><span class="line">DEBUG [main] - Could not find key 'spring.liveBeansView.mbeanDomain' in any property source</span><br><span class="line"><span class="comment"># 先创建单例bean的</span></span><br><span class="line">DEBUG [main] - Creating instance of bean 'userprototype'</span><br><span class="line">DEBUG [main] - Finished creating instance of bean 'userprototype'</span><br><span class="line">User&#123;id=null, name='张三prototype', age=null&#125;</span><br></pre></td></tr></table></figure>

<h3 id="getBean-“-amp-name”"><a href="#getBean-“-amp-name”" class="headerlink" title="getBean(“&amp;name”)"></a>getBean(“&amp;name”)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectForBeanInstance</span><span class="params">( // 具体的创建实例对象，如FactoryBean的createInstance方法，createBean只是创建FactoryBean</span></span></span><br><span class="line"><span class="function"><span class="params">      Object beanInstance, String name, String beanName, @Nullable RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Don't let calling code try to dereference the factory if the bean isn't a factory.</span></span><br><span class="line">   <span class="comment">// 判断getBean的形参是不是带&amp;,name是形参，beanName是去&amp;的值</span></span><br><span class="line">   <span class="keyword">if</span> (BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (beanInstance <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line">         <span class="keyword">return</span> beanInstance;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="单例bean加载"><a href="#单例bean加载" class="headerlink" title="单例bean加载"></a>单例bean加载</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.ep.bean.User"</span> <span class="attr">id</span>=<span class="string">"usersingleton"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span> <span class="comment">&lt;!--默认单例--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三singleton"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>日志</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">DEBUG [main] - Creating shared instance of singleton bean 'usersingleton'</span><br><span class="line">DEBUG [main] - Creating instance of bean 'usersingleton'</span><br><span class="line">DEBUG [main] - Eagerly caching bean 'usersingleton' to allow for resolving potential circular references</span><br><span class="line">DEBUG [main] - Finished creating instance of bean 'usersingleton'</span><br><span class="line">DEBUG [main] - Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@662ac478]</span><br><span class="line">DEBUG [main] - Returning cached instance of singleton bean 'lifecycleProcessor'</span><br><span class="line">DEBUG [main] - Could not find key 'spring.liveBeansView.mbeanDomain' in any property source</span><br><span class="line">DEBUG [main] - Returning cached instance of singleton bean 'usersingleton'</span><br></pre></td></tr></table></figure>

<h4 id="getBean方法代码-depand-on"><a href="#getBean方法代码-depand-on" class="headerlink" title="getBean方法代码-depand-on"></a>getBean方法代码-<code>depand-on</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(<span class="keyword">final</span> String name, @Nullable <span class="keyword">final</span> Class&lt;T&gt; requiredType,</span></span></span><br><span class="line"><span class="function"><span class="params">      @Nullable <span class="keyword">final</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 转换对应的bean name  -&gt;&gt;&gt;&gt; &amp;user(获取对应ObejectFactoryBean) -&gt; user</span></span><br><span class="line">   <span class="keyword">final</span> String beanName = transformedBeanName(name);</span><br><span class="line">   Object bean;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">   <span class="comment">// 尝试从缓存中加载单例</span></span><br><span class="line">   Object sharedInstance = getSingleton(beanName);</span><br><span class="line">   <span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Returning eagerly cached instance of singleton bean '"</span> + beanName +</span><br><span class="line">                  <span class="string">"' that is not fully initialized yet - a consequence of a circular reference"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 实例化</span></span><br><span class="line">      bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Fail if we're already creating this bean instance:</span></span><br><span class="line">      <span class="comment">// We're assumably within a circular reference.</span></span><br><span class="line">      <span class="comment">// 尝试解决循环依赖</span></span><br><span class="line">      <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">      BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">      <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">         <span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">         String nameToLookup = originalBeanName(name);</span><br><span class="line">         <span class="keyword">if</span> (parentBeanFactory <span class="keyword">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">                  nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line">            <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">            <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">         markBeanAsCreated(beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 将从XML文件读取的数据BeanDefinition 转换为 RootBeanDefinition</span></span><br><span class="line">         <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">         <span class="comment">// 判断是不是抽象类，是抛出异常</span></span><br><span class="line">         checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">         String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">         <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">               <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                        <span class="string">"Circular depends-on relationship between '"</span> + beanName + <span class="string">"' and '"</span> + dep + <span class="string">"'"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               registerDependentBean(dep, beanName);</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                  getBean(dep);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                        <span class="string">"'"</span> + beanName + <span class="string">"' depends on missing bean '"</span> + dep + <span class="string">"'"</span>, ex);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Create bean instance.</span></span><br><span class="line">         <span class="keyword">if</span> (mbd.isSingleton()) &#123;                    <span class="comment">// new ObjectFactory()</span></span><br><span class="line">            sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">// 类似创建FactoryBean</span></span><br><span class="line">                  <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                  <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                  <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                  <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                  destroySingleton(beanName);</span><br><span class="line">                  <span class="keyword">throw</span> ex;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 示例化</span></span><br><span class="line">            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 多实例 实例化</span></span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">            <span class="comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">            Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               beforePrototypeCreation(beanName);</span><br><span class="line">               prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">               afterPrototypeCreation(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 范围bean</span></span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            String scopeName = mbd.getScope();</span><br><span class="line">            <span class="keyword">final</span> Scope scope = <span class="keyword">this</span>.scopes.get(scopeName);</span><br><span class="line">            <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No Scope registered for scope name '"</span> + scopeName + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               Object scopedInstance = scope.get(beanName, () -&gt; &#123;</span><br><span class="line">                  beforePrototypeCreation(beanName);</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                     <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">finally</span> &#123;</span><br><span class="line">                     afterPrototypeCreation(beanName);</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">               bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                     <span class="string">"Scope '"</span> + scopeName + <span class="string">"' is not active for the current thread; consider "</span> +</span><br><span class="line">                     <span class="string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</span><br><span class="line">                     ex);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="先从缓存中查找"><a href="#先从缓存中查找" class="headerlink" title="先从缓存中查找"></a>先从缓存中查找</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, <span class="keyword">boolean</span> allowEarlyReference)</span> </span>&#123;</span><br><span class="line">   Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">   <span class="comment">// 如果没有从缓存中获取到，就到单例工厂获取，前提是 正在创建的单例实例缓存中包含此name</span></span><br><span class="line">   <span class="comment">// 顺序：singletonObjects -&gt; earlySingletonObjects -&gt; singletonFactories</span></span><br><span class="line">   <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">         singletonObject = <span class="keyword">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line">          <span class="comment">// earlySingletonObjects:存放先创建的实例，方便提前注入</span></span><br><span class="line">          <span class="comment">// allowEarlyReference:是否允许提前注入</span></span><br><span class="line">         <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">            ObjectFactory&lt;?&gt; singletonFactory = <span class="keyword">this</span>.singletonFactories.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (singletonFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">               singletonObject = singletonFactory.getObject();</span><br><span class="line">               <span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">               <span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> singletonObject;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这个方法首先尝试从singletonObjects里面获取实例,如果获取不到再从earlySingletonObjects里面获取,如果还获取不到,再尝试从singletonFactories里面获取beanName对应的,ObjectFactory,然后调用这个ObjectFactory的getObject来创建bean,并放到earlySingletonObjects里面去,并且从singletonFacotories里面remove掉这个ObjectFactory,而对于后续的所,有内存操作都只为了循环依赖检测时候使用,也就是在allowEarlyReference为true的情况下才,会使用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">O singletonObjects:用于保存BeanName和创建bean实例之间的关系, bean name--&gt; bean instance.</span></span><br><span class="line"><span class="comment">singletonFactories:用于保存BeanName和创建bean的工厂之间的关系, bean name-&gt;ObjectFactory.</span></span><br><span class="line"><span class="comment">o earlySingletonObjects:也是保存BeanName和创建bean实例之间的关系,与singletonObjects的不同之处在于, 当一个单例bean被放到这里面后,那么当bean还,在创建过程中,就可以通过getBean方法获取到了,其目的是用来检测循环引用。</span></span><br><span class="line"><span class="comment">o registeredSingletons:用来保存当前所有已注册的bean.</span></span><br></pre></td></tr></table></figure>

<h4 id="创建初始状态工厂类"><a href="#创建初始状态工厂类" class="headerlink" title="创建初始状态工厂类"></a>创建初始状态工厂类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 子类继承，重写</span></span><br><span class="line">      <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">      <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">      <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">      <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">      destroySingleton(beanName);</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="createBean"><a href="#createBean" class="headerlink" title="createBean"></a>createBean</h4><p>Central method of this class: creates a bean instance,populates the bean instance, applies post-processors, etc.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   RootBeanDefinition mbdToUse = mbd;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Make sure bean class is actually resolved at this point, and</span></span><br><span class="line">   <span class="comment">// clone the bean definition in case of a dynamically resolved Class</span></span><br><span class="line">   <span class="comment">// which cannot be stored in the shared merged bean definition.</span></span><br><span class="line">   <span class="comment">// 解析Class</span></span><br><span class="line">   Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class="line">   <span class="keyword">if</span> (resolvedClass != <span class="keyword">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      mbdToUse = <span class="keyword">new</span> RootBeanDefinition(mbd);</span><br><span class="line">      mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Prepare method overrides. 为了 lookup-method replace-method</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 找出当前类以及父类包含方法名称的个数，如果为1，则表示方法没有被重载，后续直接调用</span></span><br><span class="line">      mbdToUse.prepareMethodOverrides();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</span><br><span class="line">            beanName, <span class="string">"Validation of method overrides failed"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span><br><span class="line">      <span class="comment">// applyBeanPostProcessorsBeforeInstantiation  applyBeanPostProcessorsAfterInitialization，后置解析生成代理类</span></span><br><span class="line">      Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">      <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;  <span class="comment">// 短路  -&gt;  aop 在此判断</span></span><br><span class="line">         <span class="keyword">return</span> bean;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">            <span class="string">"BeanPostProcessor before instantiation of bean failed"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Finished creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> beanInstance;</span><br><span class="line">   &#125;<span class="keyword">catch</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="doCreateBean"><a href="#doCreateBean" class="headerlink" title="doCreateBean"></a>doCreateBean</h4><p>Actually create the specified bean. Pre-creation processing has already happened.at this point, e.g. checking {@code postProcessBeforeInstantiation} callbacks.Differentiates between default bean instantiation, use of a factory method, and autowiring a constructor.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Instantiate the bean.</span></span><br><span class="line">   BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">      <span class="comment">/* Cache of unfinished FactoryBean instances: FactoryBean name --&gt; BeanWrapper */</span></span><br><span class="line">      instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 根据bean对应的策略创建实例，如工厂方法、构造方法自动注入</span></span><br><span class="line">      instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">final</span> Object bean = instanceWrapper.getWrappedInstance();</span><br><span class="line">   Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">   <span class="keyword">if</span> (beanType != NullBean<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 目标类型</span></span><br><span class="line">      mbd.resolvedTargetType = beanType;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Allow post-processors to modify the merged bean definition.</span></span><br><span class="line">   <span class="comment">// 应用MergedBeanDefinitionPostProcessor 后处理器，合并bean的定义信息</span></span><br><span class="line">   <span class="comment">// Autowire等注解信息就是在这一步完成预解析，并且将注解需要的信息放入缓存</span></span><br><span class="line">   <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//      * Apply MergedBeanDefinitionPostProcessors to the specified bean definition,</span></span><br><span class="line">            <span class="comment">//  * invoking their &#123;@code postProcessMergedBeanDefinition&#125; methods.</span></span><br><span class="line">            <span class="comment">//   应用MergedBeanDefinitionPostProcessors后置解析器</span></span><br><span class="line">            applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                  <span class="string">"Post-processing of merged bean definition failed"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">         mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class="line">   <span class="comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class="line">   <span class="comment">// 是否需要提前曝光=单例&amp;允许循环依赖&amp;bean正在创建中</span></span><br><span class="line">   <span class="keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">         isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">   <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Eagerly caching bean '"</span> + beanName +</span><br><span class="line">               <span class="string">"' to allow for resolving potential circular references"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//为了避免循环依赖，在bean初始化完成前，就将创建bean实例的ObjectFactory</span></span><br><span class="line">      <span class="comment">// 放入工厂缓存（singletonFactories）</span></span><br><span class="line">      <span class="comment">// aop 动态植入advice</span></span><br><span class="line">      <span class="comment">//  * Add the given singleton factory for building the specified singleton</span></span><br><span class="line">      <span class="comment">//  * if necessary.</span></span><br><span class="line">      <span class="comment">// getEarlyBeanReference:</span></span><br><span class="line">      <span class="comment">//      * Obtain a reference for early access to the specified bean,</span></span><br><span class="line">      <span class="comment">//  * typically for the purpose of resolving a circular reference.</span></span><br><span class="line">      addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Initialize the bean instance.</span></span><br><span class="line">   Object exposedObject = bean;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// * Populate the bean instance in the given BeanWrapper with the property values</span></span><br><span class="line">      <span class="comment">//  * from the bean definition.</span></span><br><span class="line">      populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">      <span class="comment">// * Initialize the given bean instance, applying factory callbacks</span></span><br><span class="line">      <span class="comment">//  * as well as init methods and bean post processors.</span></span><br><span class="line">      exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">         <span class="keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">               mbd.getResourceDescription(), beanName, <span class="string">"Initialization of bean failed"</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">      Object earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (exposedObject == bean) &#123; <span class="comment">// 没有被增强</span></span><br><span class="line">            exposedObject = earlySingletonReference;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">            String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">            Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class="line">            <span class="keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line">               <span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                  actualDependentBeans.add(dependentBean);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 检测依赖</span></span><br><span class="line">            <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                     <span class="string">"Bean with name '"</span> + beanName + <span class="string">"' has been injected into other beans ["</span> +</span><br><span class="line">                     StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                     <span class="string">"] in its raw version as part of a circular reference, but has eventually been "</span> +</span><br><span class="line">                     <span class="string">"wrapped. This means that said other beans do not use the final version of the "</span> +</span><br><span class="line">                     <span class="string">"bean. This is often the result of over-eager type matching - consider using "</span> +</span><br><span class="line">                     <span class="string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Register bean as disposable.</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// destroy-method方法执行</span></span><br><span class="line">      registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="string">"Invalid destruction signature"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="createBeanInstance-lt-–-gt-factory-method"><a href="#createBeanInstance-lt-–-gt-factory-method" class="headerlink" title="createBeanInstance&lt;–&gt;factory-method"></a>createBeanInstance&lt;–&gt;<code>factory-method</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Create a new instance for the specified bean, using an appropriate instantiation strategy:</span><br><span class="line">factory method, constructor autowiring, or simple instantiation.</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// Make sure bean class is actually resolved at this point.</span></span><br><span class="line">		Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">					<span class="string">"Bean class isn't public, and non-public access not allowed: "</span> + beanClass.getName());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Supplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class="line">		<span class="keyword">if</span> (instanceSupplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> obtainFromSupplier(instanceSupplier, beanName);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// factory-method 实例化</span></span><br><span class="line">		<span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="keyword">null</span>)  &#123;</span><br><span class="line">			<span class="keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Shortcut when re-creating the same bean...</span></span><br><span class="line">		<span class="keyword">boolean</span> resolved = <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">boolean</span> autowireNecessary = <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class="line">				<span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="keyword">null</span>) &#123; <span class="comment">// 根据参数找到对应的构造方法过工厂方法</span></span><br><span class="line">					resolved = <span class="keyword">true</span>;</span><br><span class="line">					autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (resolved) &#123;</span><br><span class="line">			<span class="keyword">if</span> (autowireNecessary) &#123;</span><br><span class="line">				<span class="comment">// 构造方法自动注入</span></span><br><span class="line">				<span class="keyword">return</span> autowireConstructor(beanName, mbd, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// 默认构造函数构造</span></span><br><span class="line">				<span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Need to determine the constructor...</span></span><br><span class="line">		Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">		<span class="keyword">if</span> (ctors != <span class="keyword">null</span> ||</span><br><span class="line">				mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">				mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</span><br><span class="line">			<span class="keyword">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// No special handling: simply use no-arg constructor.</span></span><br><span class="line">		<span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="populateBean-autowired"><a href="#populateBean-autowired" class="headerlink" title="populateBean-autowired"></a>populateBean-<code>autowired</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (bw == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (mbd.hasPropertyValues()) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">						mbd.getResourceDescription(), beanName, <span class="string">"Cannot apply property values to null instance"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// Skip property population phase for null instance.</span></span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span></span><br><span class="line">		<span class="comment">// state of the bean before properties are set. This can be used, for example,</span></span><br><span class="line">		<span class="comment">// to support styles of field injection.</span></span><br><span class="line">		<span class="keyword">boolean</span> continueWithPropertyPopulation = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">			<span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">				<span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">					InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">					<span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">						continueWithPropertyPopulation = <span class="keyword">false</span>;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||</span><br><span class="line">				mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">			MutablePropertyValues newPvs = <span class="keyword">new</span> MutablePropertyValues(pvs);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Add property values based on autowire by name if applicable.</span></span><br><span class="line">			<span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">				autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Add property values based on autowire by type if applicable.</span></span><br><span class="line">			<span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">				autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			pvs = newPvs;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">boolean</span> hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">		<span class="keyword">boolean</span> needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line">			<span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line">				pvs = mbd.getPropertyValues();</span><br><span class="line">			&#125;</span><br><span class="line">			PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">			<span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">				<span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">					<span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">						InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">						pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">						<span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line">							<span class="keyword">return</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line">				checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (pvs != <span class="keyword">null</span>) &#123;</span><br><span class="line">			applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="initializeBean-init-method-XXXAware"><a href="#initializeBean-init-method-XXXAware" class="headerlink" title="initializeBean-init-method-XXXAware"></a>initializeBean-<code>init-method</code>-<code>XXXAware</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean, @Nullable RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">				invokeAwareMethods(beanName, bean);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">			&#125;, getAccessControlContext());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// 执行实现XXXAware接口的回调</span></span><br><span class="line">			invokeAwareMethods(beanName, bean);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Object wrappedBean = bean;</span><br><span class="line">		<span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">			wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// init-method 执行</span></span><br><span class="line">			invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">					(mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</span><br><span class="line">					beanName, <span class="string">"Invocation of init method failed"</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">			<span class="comment">// 后置处理器的执行</span></span><br><span class="line">			wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> wrappedBean;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>此时得到的只是初始状态的工厂类，想要创建实际的类，需要getObjectForBeanInstance方法。</strong></p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">Get the object <span class="keyword">for</span> the given bean instance, either the bean</span><br><span class="line">instance itself or its created object in case of a FactoryBean.</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectForBeanInstance</span><span class="params">( // 具体的创建实例对象，如FactoryBean的createInstance方法，createBean只是创建FactoryBean</span></span></span><br><span class="line"><span class="function"><span class="params">         Object beanInstance, String name, String beanName, @Nullable RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Don't let calling code try to dereference the factory if the bean isn't a factory.</span></span><br><span class="line">      <span class="keyword">if</span> (BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">         <span class="keyword">if</span> (beanInstance <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line">            <span class="keyword">return</span> beanInstance;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Now we have the bean instance, which may be a normal bean or a FactoryBean.</span></span><br><span class="line">      <span class="comment">// If it's a FactoryBean, we use it to create a bean instance, unless the</span></span><br><span class="line">      <span class="comment">// caller actually wants a reference to the factory.</span></span><br><span class="line">      <span class="comment">// 大多数情况都是在这直接返回，除非A依赖B,B依赖C,C依赖A,循环依赖</span></span><br><span class="line">      <span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">         <span class="keyword">return</span> beanInstance;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Object object = <span class="keyword">null</span>; <span class="comment">// 返回的是它，也就是要改变beanInstance，重新创建实例对象</span></span><br><span class="line">      <span class="keyword">if</span> (mbd == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 尝试从缓存中获取</span></span><br><span class="line">         <span class="comment">/* Cache of singleton objects created by FactoryBeans: FactoryBean name --&gt; object */</span></span><br><span class="line">         object = getCachedObjectForFactoryBean(beanName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">// Return bean instance from factory.  明确知道BeanInstance是FactoryBean类型</span></span><br><span class="line">         FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class="line">         <span class="comment">// Caches object obtained from FactoryBean if it is a singleton.</span></span><br><span class="line">         <span class="keyword">if</span> (mbd == <span class="keyword">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123; <span class="comment">// 从XML读取信息BeanDefinitionMap中有没有</span></span><br><span class="line"><span class="comment">//          Return a merged RootBeanDefinition, traversing the parent bean definition</span></span><br><span class="line"><span class="comment">//          if the specified bean corresponds to a child bean definition.</span></span><br><span class="line">            mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">boolean</span> synthetic = (mbd != <span class="keyword">null</span> &amp;&amp; mbd.isSynthetic()); <span class="comment">// 是不是应用程序本身定义的</span></span><br><span class="line">         <span class="comment">// 委托给FactoryBeanRegistrySupport.getObjectFromFactoryBean方法</span></span><br><span class="line">         <span class="comment">// 其实就是：object = factory.getObject();</span></span><br><span class="line">         object = getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> object;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>委托给FactoryBeanRegistrySupport.getObjectFromFactoryBean方法.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectFromFactoryBean</span><span class="params">(FactoryBean&lt;?&gt; factory, String beanName, <span class="keyword">boolean</span> shouldPostProcess)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 如果是单例模式</span></span><br><span class="line">   <span class="keyword">if</span> (factory.isSingleton() &amp;&amp; containsSingleton(beanName)) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (getSingletonMutex()) &#123;</span><br><span class="line">         <span class="comment">// 从缓存中获取</span></span><br><span class="line">         Object object = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">         <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Obtain an object to expose from the given FactoryBean.</span></span><br><span class="line">            <span class="comment">// 主要代码就是object = factory.getObject(); // 现将实例暴露出来，解决循环依赖</span></span><br><span class="line">            object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">            <span class="comment">// Only post-process and store if not put there already during getObject() call above</span></span><br><span class="line">            <span class="comment">// (e.g. because of circular reference processing triggered by custom getBean calls)</span></span><br><span class="line">            <span class="comment">// 译：在上面的getObject()调用过程中，如果没有将post-process和store放在那里，就只能使用它</span></span><br><span class="line">            <span class="comment">// 因为循环引用处理是由定制的getBean调用触发的</span></span><br><span class="line">            Object alreadyThere = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (alreadyThere != <span class="keyword">null</span>) &#123;</span><br><span class="line">               object = alreadyThere;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                     <span class="comment">// Temporarily return non-post-processed object, not storing it yet..</span></span><br><span class="line">                     <span class="keyword">return</span> object;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="comment">// 主要代码singletonsCurrentlyInCreation.add(beanName) 控制循环依赖</span></span><br><span class="line">                  beforeSingletonCreation(beanName);</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                     <span class="comment">// 后置处理器，默认直接返回，子类继承可重写</span></span><br><span class="line">                     object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                     <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                           <span class="string">"Post-processing of FactoryBean's singleton object failed"</span>, ex);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">finally</span> &#123;</span><br><span class="line">                     <span class="comment">// 主要代码singletonsCurrentlyInCreation.remove(beanName)</span></span><br><span class="line">                     afterSingletonCreation(beanName);</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (containsSingleton(beanName)) &#123;</span><br><span class="line">                  <span class="keyword">this</span>.factoryBeanObjectCache.put(beanName, object);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> object;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 不是单例,从这可以看出，单例的创建需要解决循环依赖，暴露beanFactory解决</span></span><br><span class="line">      <span class="comment">// object = factory.getObject();</span></span><br><span class="line">      Object object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">      <span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">"Post-processing of FactoryBean's object failed"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> object;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="后置处理"><a href="#后置处理" class="headerlink" title="后置处理"></a>后置处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java:383</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">applyBeanPostProcessorsAfterInitialization</span><span class="params">(Object existingBean, String beanName)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">   Object result = existingBean;</span><br><span class="line">   <span class="keyword">for</span> (BeanPostProcessor beanProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">       <span class="comment">// 处理初始化后</span></span><br><span class="line">      Object current = beanProcessor.postProcessAfterInitialization(result, beanName);</span><br><span class="line">      <span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">      result = current;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>5-AOP</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/5-AOP/</url>
    <content><![CDATA[<h1 id="0-AOP-Concepts"><a href="#0-AOP-Concepts" class="headerlink" title="0 AOP Concepts"></a>0 AOP Concepts</h1><p>Let us begin by defining some central AOP concepts and terminology（术语）. These terms are not Spring-specific… unfortunately, AOP terminology is not particularly intuitive（直观的）; however, it would be even more confusing if Spring used its own terminology.</p>
<ul>
<li><em>Aspect</em>: a modularization of a concern that cuts across multiple classes. Transaction management is a good example of a crosscutting concern in enterprise Java applications. In Spring AOP, aspects are implemented using regular classes (the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNhb3Atc2NoZW1h" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#aop-schema">schema-based approach<i class="fa fa-external-link"></i></span>) or regular classes annotated with the <code>@Aspect</code> annotation (the <a href="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#aop-ataspectj" target="_blank" rel="noopener"><code>@AspectJ</code> style</a>).</li>
<li><em>Join point</em>: a point during the execution of a program, such as the execution of a method or the handling of an exception. In Spring AOP, a join point <em>always</em> represents a method execution.</li>
<li><em>Advice</em>: action taken by an aspect at a particular join point. Different types of advice include “around”, “before” and “after” advice. (Advice types are discussed below.) Many AOP frameworks, including Spring, model an advice as an <em>interceptor</em>, maintaining a chain of interceptors <em>around</em> the join point.</li>
<li><em>Pointcut</em>: a predicate that matches join points. Advice is associated with a pointcut expression and runs at any join point matched by the pointcut (for example, the execution of a method with a certain name). The concept of join points as matched by pointcut expressions is central to AOP, and Spring uses the AspectJ pointcut expression language by default.</li>
<li><em>Introduction</em>: declaring additional methods or fields on behalf of a type. Spring AOP allows you to introduce new interfaces (and a corresponding implementation) to any advised object. For example, you could use an introduction to make a bean implement an <code>IsModified</code> interface, to simplify caching. (An introduction is known as an inter-type declaration in the AspectJ community.)</li>
<li><em>Target object</em>: object being advised by one or more aspects. Also referred to as the <em>advised</em> object. Since Spring AOP is implemented using runtime proxies, this object will always be a <em>proxied</em> object.</li>
<li><em>AOP proxy</em>: an object created by the AOP framework in order to implement the aspect contracts (advise method executions and so on). In the Spring Framework, an AOP proxy will be a JDK dynamic proxy or a CGLIB proxy.</li>
<li><em>Weaving</em>: linking aspects with other application types or objects to create an advised object. This can be done at compile time (using the AspectJ compiler, for example), load time, or at runtime. Spring AOP, like other pure Java AOP frameworks, performs weaving at runtime.<a id="more"></a>
<h1 id="1-启用spring-aspectj"><a href="#1-启用spring-aspectj" class="headerlink" title="1 启用spring aspectj"></a>1 启用spring aspectj</h1></li>
</ul>
<ul>
<li>注解方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>XML方式</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-声明切面"><a href="#2-声明切面" class="headerlink" title="2 声明切面"></a>2 声明切面</h1><p>A regular bean definition in the application context, pointing to a bean class that has the <code>@Aspect</code> annotation:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspect"</span> <span class="attr">class</span>=<span class="string">"org.xyz.NotVeryUsefulAspect"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configure properties of aspect here as normal --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>And the <code>NotVeryUsefulAspect</code> class definition, annotated with <code>org.aspectj.lang.annotation.Aspect</code> annotation;</p>
<p>您可以将方面类注册为Spring XML配置中的常规bean，或者通过类路径扫描自动检测它们——就像任何其他Spring管理的bean一样。但是，请注意@Aspect注释不足以在类路径中自动检测:为此，您需要添加一个单独的@Component注释(或者按照Spring的组件扫描器的规则，添加一个合格的定制原型注释)。</p>
<p>在Spring AOP中，不可能让@Aspect本身成为来自其他@Aspect的建议的目标。类上的@Aspect注释将其标记为切面，因此将其排除在自动代理之外。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xyz;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotVeryUsefulAspect</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-申明切入点"><a href="#3-申明切入点" class="headerlink" title="3 申明切入点"></a>3 申明切入点</h1><p>In the @AspectJ annotation-style of AOP, a pointcut signature is provided by a regular method definition, and the pointcut expression is indicated using the <code>@Pointcut</code>annotation (the method serving as the pointcut signature <em>must</em> have a <code>void</code> return type).</p>
<p>An example will help make this distinction between a pointcut signature and a pointcut expression clear. The following example defines a pointcut named <code>&#39;anyOldTransfer&#39;</code> that will match the execution of any method named <code>&#39;transfer&#39;</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* transfer(..))"</span>)<span class="comment">// the pointcut expression</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">anyOldTransfer</span><span class="params">()</span> </span>&#123;&#125;<span class="comment">// the pointcut signature</span></span><br><span class="line"><span class="comment">// 使用,如：</span></span><br><span class="line"><span class="meta">@Before</span>(value = <span class="string">"anyOldTransfer()"</span>)</span><br></pre></td></tr></table></figure>

<p>Spring AOP supports the following AspectJ pointcut designators (PCD) for use in pointcut expressions:</p>
<ul>
<li><em>execution</em> - for matching method execution join points, this is the primary pointcut designator you will use when working with Spring AOP</li>
<li><em>within</em> - limits matching to join points within certain types (<strong>simply</strong> the execution of a method declared within a matching type when using Spring AOP)-<strong>简化</strong></li>
<li><em>this</em> - limits matching to join points (the execution of methods when using Spring AOP) where the bean reference (Spring AOP proxy) is an instance of the given type-<strong>代理对象本身</strong></li>
<li><em>target</em> - limits matching to join points (the execution of methods when using Spring AOP) where the target object (application object being proxied) is an instance of the given type-<strong>代理后的目标对象</strong></li>
<li><em>args</em> - limits matching to join points (the execution of methods when using Spring AOP) where the arguments are instances of the given types-<strong>匹配参数</strong></li>
<li><em>@target</em> - limits matching to join points (the execution of methods when using Spring AOP) where the class of the executing object has an annotation of the given type</li>
<li><em>@args</em> - limits matching to join points (the execution of methods when using Spring AOP) where the runtime type of the actual arguments passed have annotations of the given type(s)</li>
<li><em>@within</em> - limits matching to join points within types that have the given annotation (the execution of methods declared in types with the given annotation when using Spring AOP)</li>
<li><em>@annotation</em> - limits matching to join points where the subject of the join point (method being executed in Spring AOP) has the given annotation</li>
<li>bean:<code>@Pointcut(&quot;bean(mainService)&quot;)</code></li>
</ul>
<p>AspectJ本身具有基于类型的语义，在执行连接点上，this和target都指向<strong>同一个对象</strong>——<strong>执行方法的对象</strong>。Spring AOP是一个基于代理的系统，它区分了代理对象本身(绑定到this)和代理后面的目标对象(绑定到target)。</p>
<p>一般情况下，使用this()和target()来匹配定义切点，二者是等效的</p>
<ul>
<li><code>target(com.xgj.IBussiness)</code>等价于 <code>this(com.xgj.IBussiness)</code></li>
<li><code>target(com.xgj.BussinessService)</code>等价于<code>this(com.xgj.BussinessService)</code></li>
<li><strong>参数绑定时，对象一致</strong></li>
</ul>
<p>二者的区别体现在通过<strong>引介切面</strong>产生代理对象时的具体表现。</p>
<p>I know this is an old post but I just came across an important difference between this and target while not using AspectJ.</p>
<p>Consider the following introduction aspect:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntroductionsAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeclareParents</span>(value=<span class="string">"a.b.c.D"</span>, defaultImpl=XImpl<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">static</span> <span class="title">X</span> <span class="title">x</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* a.b.c.D.*(..)) &amp;&amp; this(traceable)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">x</span><span class="params">(Traceable traceable)</span> </span>&#123;</span><br><span class="line">        traceable.increment();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Simply put, this aspect is doing two things:</p>
<ol>
<li>Making the <code>a.b.c.D</code> class implement the <code>X</code> interface.</li>
<li>Adding a call to <code>traceable.increment()</code> to be executed before each method of <code>a.b.c.D</code>.</li>
</ol>
<p>The important part is <code>&quot;execution(* a.b.c.D.*(..)) &amp;&amp; this(traceable)&quot;</code>. Notice that I used <strong>this</strong>, not <strong>target</strong>.</p>
<p>If you use <strong>target</strong> instead, you are trying to match the <strong>original</strong> class <code>a.b.c.D</code>, not the introduced interface <code>X</code>. So Spring AOP will not find any join point in <code>a.b.c.D</code>.</p>
<p>In summary:</p>
<p><strong>this</strong> - Checks the proxy type, or introduced type. <strong>target</strong> - Checks the declared type.</p>
<ul>
<li><strong>总结</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="meta">@Pointcut</span>(<span class="string">"bean(mainService)"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@After</span>(value = <span class="string">"pointcut() &amp;&amp; this(bean1) &amp;&amp; target(bean2)"</span>, argNames = <span class="string">"bean1,bean2"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(Object bean1,Object bean2)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"=====after start====="</span>);</span><br><span class="line">		System.out.println(bean1 <span class="keyword">instanceof</span> ExtraService); <span class="comment">// true</span></span><br><span class="line">		System.out.println(bean2 <span class="keyword">instanceof</span> ExtraService); <span class="comment">// false origin class</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//		System.out.println(bean1); // 不可打印</span></span><br><span class="line">		System.out.println(bean2); <span class="comment">// com.zx.service.MainService@247d8ae</span></span><br><span class="line">        </span><br><span class="line">		System.out.println(bean1 <span class="keyword">instanceof</span> MainService); <span class="comment">// true</span></span><br><span class="line">		System.out.println(bean2 <span class="keyword">instanceof</span> MainService); <span class="comment">// true</span></span><br><span class="line">		System.out.println(<span class="string">"=====after end====="</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@DeclareParents</span>(value = <span class="string">"com.zx.service.*"</span>,defaultImpl = ExtraServiceImpl<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">	<span class="title">private</span> <span class="title">ExtraService</span> <span class="title">extraService</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="3-1-切点表达式联合"><a href="#3-1-切点表达式联合" class="headerlink" title="3.1 切点表达式联合"></a>3.1 切点表达式联合</h2><p>Pointcut expressions can be combined using ‘&amp;&amp;’, ‘||’ and ‘!’. It is also possible to refer to pointcut expressions by name.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(public * *(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">anyPublicOperation</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"within(com.xyz.someapp.trading..*)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inTrading</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// 方法标识</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"anyPublicOperation() &amp;&amp; inTrading()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tradingOperation</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>最好的做法是用上面所示的较小的命名组件构建更复杂的切入点表达式。当通过名称引用切入点时，会应用普通的Java可见性规则(您可以看到相同类型的私有切入点、层次结构中的受保护切入点、任何地方的公共切入点等等)。可见性不影响切入点匹配。</p>
<h2 id="3-2-Sharing-common-pointcut-definitions"><a href="#3-2-Sharing-common-pointcut-definitions" class="headerlink" title="3.2 Sharing common pointcut definitions"></a>3.2 Sharing common pointcut definitions</h2><p>When working with enterprise applications, you often want to refer to modules of the application and particular sets of operations from within several aspects. We recommend defining a “SystemArchitecture” aspect that captures common pointcut expressions for this purpose. A typical such aspect would look as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyz.someapp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemArchitecture</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A join point is in the web layer if the method is defined</span></span><br><span class="line"><span class="comment">     * in a type in the com.xyz.someapp.web package or any sub-package</span></span><br><span class="line"><span class="comment">     * under that.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"within(com.xyz.someapp.web..*)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inWebLayer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A join point is in the service layer if the method is defined</span></span><br><span class="line"><span class="comment">     * in a type in the com.xyz.someapp.service package or any sub-package</span></span><br><span class="line"><span class="comment">     * under that.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"within(com.xyz.someapp.service..*)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inServiceLayer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A join point is in the data access layer if the method is defined</span></span><br><span class="line"><span class="comment">     * in a type in the com.xyz.someapp.dao package or any sub-package</span></span><br><span class="line"><span class="comment">     * under that.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"within(com.xyz.someapp.dao..*)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inDataAccessLayer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A business service is the execution of any method defined on a service</span></span><br><span class="line"><span class="comment">     * interface. This definition assumes that interfaces are placed in the</span></span><br><span class="line"><span class="comment">     * "service" package, and that implementation types are in sub-packages.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If you group service interfaces by functional area (for example,</span></span><br><span class="line"><span class="comment">     * in packages com.xyz.someapp.abc.service and com.xyz.someapp.def.service) then</span></span><br><span class="line"><span class="comment">     * the pointcut expression "execution(* com.xyz.someapp..service.*.*(..))"</span></span><br><span class="line"><span class="comment">     * could be used instead.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Alternatively, you can write the expression using the 'bean'</span></span><br><span class="line"><span class="comment">     * PCD, like so "bean(*Service)". (This assumes that you have</span></span><br><span class="line"><span class="comment">     * named your Spring service beans in a consistent fashion.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.xyz.someapp..service.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">businessService</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A data access operation is the execution of any method defined on a</span></span><br><span class="line"><span class="comment">     * dao interface. This definition assumes that interfaces are placed in the</span></span><br><span class="line"><span class="comment">     * "dao" package, and that implementation types are in sub-packages.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.xyz.someapp.dao.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataAccessOperation</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The pointcuts defined in such an aspect can be referred to <strong>anywhere</strong> that you need a pointcut expression. For example, to make the service layer transactional, you could write:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span></span></span><br><span class="line"><span class="tag">        <span class="attr">pointcut</span>=<span class="string">"com.xyz.someapp.SystemArchitecture.businessService()"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">advice-ref</span>=<span class="string">"tx-advice"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"tx-advice"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-PCD-Example"><a href="#3-3-PCD-Example" class="headerlink" title="3.3 PCD Example"></a>3.3 PCD Example</h2><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?</span><br><span class="line">          name-pattern(param-pattern)</span><br><span class="line">            <span class="keyword">throws</span>-pattern?)</span><br></pre></td></tr></table></figure>

<p>Some examples of common pointcut expressions are given below.</p>
<blockquote>
<p>execution</p>
</blockquote>
<ul>
<li>the execution of any public method:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execution(public * *(..))</span><br></pre></td></tr></table></figure>

<ul>
<li>the execution of any method with a name beginning with “set”:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execution(* set*(..))</span><br></pre></td></tr></table></figure>

<ul>
<li>the execution of any method defined by the <code>AccountService</code> interface:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execution(* com.xyz.service.AccountService.*(..))</span><br></pre></td></tr></table></figure>

<ul>
<li>the execution of any method defined in the service package:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execution(* com.xyz.service.*.*(..))</span><br></pre></td></tr></table></figure>

<ul>
<li>the execution of any method defined in the service package or a sub-package:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execution(* com.xyz.service..*.*(..))</span><br></pre></td></tr></table></figure>



<blockquote>
<p> within</p>
</blockquote>
<ul>
<li>any join point (<strong>method execution only in Spring AOP</strong>) within the service package:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">within(com.xyz.service.*)</span><br></pre></td></tr></table></figure>

<ul>
<li>any join point (method execution only in Spring AOP) within the service package or a sub-package:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">within(com.xyz.service..*)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>this target</p>
</blockquote>
<ul>
<li>any join point (method execution only in Spring AOP) where the <strong>proxy</strong> <strong>implements</strong> the <code>AccountService</code> interface:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this(com.xyz.service.AccountService)</span><br></pre></td></tr></table></figure>

<ul>
<li>any join point (method execution only in Spring AOP) where the <strong>target</strong> object implements the <code>AccountService</code> interface:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">target(com.xyz.service.AccountService)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>args</p>
</blockquote>
<ul>
<li>any join point (method execution only in Spring AOP) which takes a single parameter, and where the argument passed at runtime is <code>Serializable</code>:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">args(java.io.Serializable)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>@target</p>
</blockquote>
<ul>
<li>any join point (method execution only in Spring AOP) where the target object has an <code>@Transactional</code> annotation:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@target(org.springframework.transaction.annotation.Transactional)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>@annotation</p>
</blockquote>
<ul>
<li>any join point (method execution only in Spring AOP) where the executing method has an <code>@Transactional</code> annotation:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@annotation(org.springframework.transaction.annotation.Transactional)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>@args</p>
</blockquote>
<ul>
<li>any join point (method execution only in Spring AOP) which takes a single parameter, and where the runtime type of the argument passed has the <code>@Classified</code> annotation:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@args(com.xyz.security.Classified)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>bean</p>
</blockquote>
<ul>
<li>any join point (method execution only in Spring AOP) on a Spring bean named <code>tradeService</code>:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bean(tradeService)</span><br></pre></td></tr></table></figure>

<ul>
<li>any join point (method execution only in Spring AOP) on Spring beans having names that match the wildcard expression <code>*Service</code>:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bean(*Service)</span><br></pre></td></tr></table></figure>

<p>在编译期间，AspectJ处理切入点，以尝试和优化匹配性能。检查代码并确定每个连接点是否匹配(静态或动态)给定的切入点是一个昂贵的过程。(动态匹配意味着不能从静态分析中完全确定匹配，将在代码中进行测试，以确定在代码运行时是否存在实际匹配)。第一次遇到切入点声明时，AspectJ将把它重写为匹配过程的最佳形式。这是什么意思?基本上，切入点是用DNF(析取范式)重写的，切入点的组件是经过排序的，这样比较便宜的组件就会首先被检查。这意味着您不必担心理解各种切入点指示符的性能，并且可以在切入点声明中以任何顺序提供它们。</p>
<h1 id="4-申明通知"><a href="#4-申明通知" class="headerlink" title="4 申明通知"></a>4 申明通知</h1><h2 id="4-1-Before-Advice"><a href="#4-1-Before-Advice" class="headerlink" title="4.1 Before Advice"></a>4.1 Before Advice</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Before("com.xyz.myapp.SystemArchitecture.dataAccessOperation()")</span></span><br><span class="line">     <span class="meta">@Before</span>(<span class="string">"execution(* com.xyz.myapp.dao.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAccessCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-After-returning-advice"><a href="#4-2-After-returning-advice" class="headerlink" title="4.2 After returning advice"></a>4.2 After returning advice</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterReturningExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(</span><br><span class="line">        pointcut=<span class="string">"com.xyz.myapp.SystemArchitecture.dataAccessOperation()"</span>,</span><br><span class="line">        returning=<span class="string">"retVal"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAccessCheck</span><span class="params">(Object retVal)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-After-throwing-advice"><a href="#4-3-After-throwing-advice" class="headerlink" title="4.3 After throwing advice"></a>4.3 After throwing advice</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterThrowingExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"com.xyz.myapp.SystemArchitecture.dataAccessOperation()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doRecoveryActions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-4-After-finally-advice"><a href="#4-4-After-finally-advice" class="headerlink" title="4.4 After (finally) advice"></a>4.4 After (finally) advice</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterFinallyExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"com.xyz.myapp.SystemArchitecture.dataAccessOperation()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doReleaseLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-5-Around-advice"><a href="#4-5-Around-advice" class="headerlink" title="4.5 Around advice"></a>4.5 Around advice</h2><p>Around advice is declared using the <code>@Around</code> annotation. The first parameter of the advice method must be of type <code>ProceedingJoinPoint</code>. Within the body of the advice, calling <code>proceed()</code> on the <code>ProceedingJoinPoint</code> causes the underlying method to execute. The <code>proceed</code> method may also be called passing in an <code>Object[]</code> - the values in the array will be used as the arguments to the method execution when it proceeds.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AroundExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"com.xyz.myapp.SystemArchitecture.businessService()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doBasicProfiling</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// start stopwatch</span></span><br><span class="line">        Object retVal = pjp.proceed();</span><br><span class="line">        <span class="comment">// stop stopwatch</span></span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Any advice method may declare as its first parameter, a parameter of type <code>org.aspectj.lang.JoinPoint</code> (please note that around advice is <em>required</em> to declare a first parameter of type <code>ProceedingJoinPoint</code>, which is a subclass of <code>JoinPoint</code>. The<code>JoinPoint</code> interface provides a number of useful methods such as <code>getArgs()</code> (returns the method arguments), <code>getThis()</code>(returns the proxy object), <code>getTarget()</code> (returns the target object), <code>getSignature()</code> (returns a description of the method that is being advised) and <code>toString()</code> (prints a useful description of the method being advised). Please do consult the javadocs for full details.</p>
<h2 id="4-6-通知体内使用参数"><a href="#4-6-通知体内使用参数" class="headerlink" title="4.6 通知体内使用参数"></a>4.6 通知体内使用参数</h2><p>我们已经看到了如何绑定返回值或异常值(使用after return和after throw advice)。要使参数值对通知主体可用，可以使用args的绑定形式。如果在args表达式中使用参数名代替类型名，那么在调用通知时，相应参数的值将作为参数值传递。一个例子应该可以使这更清楚。假设您希望通知将Account对象作为第一个参数的dao操作的执行，并且需要访问通知正文中的帐户。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"com.xyz.myapp.SystemArchitecture.dataAccessOperation() &amp;&amp; args(account,..)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateAccount</span><span class="params">(Account account)</span> </span>&#123; <span class="comment">// 名称一致、不然报错</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-6-1-绑定注解"><a href="#4-6-1-绑定注解" class="headerlink" title="4.6.1 绑定注解"></a><strong>4.6.1 绑定注解</strong></h3><p>The interested reader is once more referred to the AspectJ programming guide for more details.</p>
<p>The proxy object ( <code>this</code>), target object ( <code>target</code>), and annotations ( <code>@within, @target, @annotation, @args</code>) can all be bound in a similar fashion. The following example shows how you could match the execution of methods annotated with an <code>@Auditable</code>annotation, and extract the audit code.</p>
<p>First the definition of the <code>@Auditable</code> annotation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Auditable &#123;</span><br><span class="line">    <span class="function">AuditCode <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>And then the advice that matches the execution of <code>@Auditable</code> methods:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; @annotation(auditable)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">audit</span><span class="params">(Auditable auditable)</span> </span>&#123;</span><br><span class="line">    AuditCode code = auditable.value();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-6-2-泛型参数绑定"><a href="#4-6-2-泛型参数绑定" class="headerlink" title="4.6.2 泛型参数绑定"></a><strong>4.6.2 泛型参数绑定</strong></h3><p>Spring AOP can handle generics used in class declarations and method parameters. Suppose you have a generic type like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sample</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sampleGenericMethod</span><span class="params">(T param)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sampleGenericCollectionMethod</span><span class="params">(Collection&lt;T&gt; param)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can restrict interception of method types to certain parameter types by simply typing the advice parameter to the parameter type you want to intercept the method for:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"execution(* ..Sample+.sampleGenericMethod(*)) &amp;&amp; args(param)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeSampleMethod</span><span class="params">(MyType param)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Advice implementation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>That this works is pretty obvious as we already discussed above. However, it’s worth pointing out that this won’t work for generic collections. So you cannot define a pointcut like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"execution(* ..Sample+.sampleGenericCollectionMethod(*)) &amp;&amp; args(param)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeSampleMethod</span><span class="params">(Collection&lt;MyType&gt; param)</span> </span>&#123; <span class="comment">// 不行</span></span><br><span class="line">    <span class="comment">// Advice implementation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要使其工作，我们必须检查集合的每个元素，这是不合理的，因为我们也不能决定如何处理一般的null值。要实现类似的功能，您必须将参数输入到Collection&lt;?并手动检查元素的类型。</p>
<h3 id="4-6-3-Determining-argument-names"><a href="#4-6-3-Determining-argument-names" class="headerlink" title="4.6.3 Determining argument names"></a>4.6.3 Determining argument names</h3><p>通知调用中的参数绑定依赖于切入点表达式中使用的名称与方法签名(通知和切入点)中声明的参数名称的匹配。通过Java反射无法获得参数名，因此Spring AOP使用以下策略来确定参数名:</p>
<ul>
<li>如果由用户显式地指定参数名称,然后使用指定的参数名称:建议和切入点的注释都有一个可选的<strong>“argNames”</strong>属性,可以用来指定带注释的方法的参数名称,在运行时这些参数名称可用。例如:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span>(value=<span class="string">"com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; target(bean) &amp;&amp; @annotation(auditable)"</span>,</span><br><span class="line">        argNames=<span class="string">"bean,auditable"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">audit</span><span class="params">(Object bean, Auditable auditable)</span> </span>&#123;</span><br><span class="line">    AuditCode code = auditable.value();</span><br><span class="line">    <span class="comment">// ... use code and bean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If the first parameter is of the <code>JoinPoint</code>, <code>ProceedingJoinPoint</code>, or <code>JoinPoint.StaticPart</code> type, you may leave out the name of the parameter from the value of the “argNames” attribute. For example, if you modify the preceding advice to receive the join point object, the “argNames” attribute need not include it:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span>(value=<span class="string">"com.xyz.lib.Pointcuts.anyPublicMethod() &amp;&amp; target(bean) &amp;&amp; @annotation(auditable)"</span>,</span><br><span class="line">        argNames=<span class="string">"bean,auditable"</span>) <span class="comment">// 也可以包括JoinPoint</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">audit</span><span class="params">(JoinPoint jp, Object bean, Auditable auditable)</span> </span>&#123;</span><br><span class="line">    AuditCode code = auditable.value();</span><br><span class="line">    <span class="comment">// ... use code, bean, and jp</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The special treatment given to the first parameter of the <code>JoinPoint</code>, <code>ProceedingJoinPoint</code>, and <code>JoinPoint.StaticPart</code> types is particularly convenient for advice that do not collect any other join point context. In such situations, you may simply omit the “argNames” attribute. For example, the following advice need not declare the “argNames” attribute:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"com.xyz.lib.Pointcuts.anyPublicMethod()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">audit</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ... use jp</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用’argNames’属性有点笨拙，因此如果没有指定’argNames’属性，那么Spring AOP将查看类的调试信息，并尝试从本地变量表中确定参数名。</p>
<p>可以不使用argsNames参数,顺序保持一致就行，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"bean(mainService) &amp;&amp; args(from,..) &amp;&amp; target(bean) &amp;&amp; this(bean2)"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint,</span></span></span><br><span class="line"><span class="function"><span class="params">                      String from,</span></span></span><br><span class="line"><span class="function"><span class="params">                      Object bean,</span></span></span><br><span class="line"><span class="function"><span class="params">                      Object bean2)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">      System.out.println(from);</span><br><span class="line">      System.out.println(bean);</span><br><span class="line">      System.out.println(bean2);</span><br><span class="line">      joinPoint.proceed();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-Introductions-DeclareParents"><a href="#5-Introductions-DeclareParents" class="headerlink" title="5 Introductions-@DeclareParents"></a>5 Introductions-<code>@DeclareParents</code></h1><blockquote>
<p>就是为了添加已有接口的功能</p>
<p>BussinessService bussinessService = (BussinessService) applicationContext<br>.getBean(“bussinessService”);<br>// 匹配 this<br>bussinessService.doBussiness();<br>// 匹配 this<br>bussinessService.doAnother();<br>((ITransportService) bussinessService).doTransport();   // 此方法不在接口中，而是通过切面新添的</p>
<p>// 如果有多个切面，注意多切面织入的顺序，如果不加织入的顺序， doTransport 方法的切面无法织入。</p>
</blockquote>
<p>引入(在AspectJ中称为类型间声明)使<strong>aspect</strong>能够声明<strong>advice</strong>对象实现了一个给定的接口，并代表这些对象提供该接口的实现。</p>
<p>使用@DeclareParents注释进行介绍。<strong>此注释用于声明匹配类型有一个新父类型</strong>。例如，给定一个接口<code>UsageTracked</code>，以及该接口的实现<code>DefaultUsageTracked</code>，下面的<code>@Aspect</code>声明<code>Service</code>接口的所有实现器也实现了<code>UsageTracked</code>接口。(例如，为了通过JMX公开统计信息)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsageTracking</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeclareParents</span>(value=<span class="string">"com.xzy.myapp.service.*+"</span>, defaultImpl=DefaultUsageTracked<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">static</span> <span class="title">UsageTracked</span> <span class="title">mixin</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"com.xyz.myapp.SystemArchitecture.businessService() &amp;&amp; this(usageTracked)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recordUsage</span><span class="params">(UsageTracked usageTracked)</span> </span>&#123;</span><br><span class="line">        usageTracked.incrementUseCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The interface to be implemented is determined by the type of the annotated field. The <code>value</code> attribute of the <code>@DeclareParents</code>annotation is an AspectJ type pattern :- <strong>any bean of a matching type will implement the UsageTracked interface</strong>. Note that in the before advice of the above example, service beans can be directly used as implementations of the <code>UsageTracked</code> interface. If accessing a bean programmatically you would write the following:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UsageTracked usageTracked = (UsageTracked) context.getBean(<span class="string">"myService"</span>);</span><br></pre></td></tr></table></figure>



<h1 id="6-XML方式配置"><a href="#6-XML方式配置" class="headerlink" title="6 XML方式配置"></a>6 XML方式配置</h1><h2 id="6-1-Declaring-an-aspect"><a href="#6-1-Declaring-an-aspect" class="headerlink" title="6.1 Declaring an aspect"></a>6.1 Declaring an aspect</h2><p>Using the schema support, an aspect is simply a regular Java object defined as a bean in your Spring application context. The state and behavior is captured in the fields and methods of the object, and the pointcut and advice information is captured in the XML.</p>
<p>An aspect is declared using the <span class="exturl" data-url="YW9wOmFzcGVjdA==" title="aop:aspect">aop:aspect<i class="fa fa-external-link"></i></span> element, and the backing bean is referenced using the <code>ref</code> attribute:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"myAspect"</span> <span class="attr">ref</span>=<span class="string">"aBean"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aBean"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-2-Declaring-a-pointcut"><a href="#6-2-Declaring-a-pointcut" class="headerlink" title="6.2 Declaring a pointcut"></a>6.2 Declaring a pointcut</h2><p>Declaring a pointcut inside an aspect is very similar to declaring a top-level pointcut:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"myAspect"</span> <span class="attr">ref</span>=<span class="string">"aBean"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"businessService"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">expression</span>=<span class="string">"execution(* com.xyz.myapp.service.*.*(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Much the same way in an @AspectJ aspect, pointcuts declared using the schema based definition style may collect join point context. For example, the following pointcut collects the ‘this’ object as the join point context and passes it to advice:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"myAspect"</span> <span class="attr">ref</span>=<span class="string">"aBean"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"businessService"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">expression</span>=<span class="string">"execution(* com.xyz.myapp.service.*.*(..)) <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> this(service)"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"businessService"</span> <span class="attr">method</span>=<span class="string">"monitor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The advice must be declared to receive the collected join point context by including parameters of the matching names:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">monitor</span><span class="params">(Object service)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When combining pointcut sub-expressions, <code>&amp;&amp;</code> is awkward within an XML document, and so the keywords <code>and</code>, <code>or</code>, and <code>not</code>can be used in place of <code>&amp;&amp;</code>, <code>||</code>, and <code>!</code> respectively. For example, the previous pointcut may be better written as:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"myAspect"</span> <span class="attr">ref</span>=<span class="string">"aBean"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"businessService"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">expression</span>=<span class="string">"execution(* com.xyz.myapp.service..(..)) and this(service)"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"businessService"</span> <span class="attr">method</span>=<span class="string">"monitor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，以这种方式定义的切入点由它们的XML id引用，不能作为命名切入点使用，以形成组合切入点。因此，基于模式的定义样式中命名的切入点支持比@AspectJ样式(<strong>注解</strong>)提供的更有限。</p>
<h2 id="6-3-Declaring-advice"><a href="#6-3-Declaring-advice" class="headerlink" title="6.3 Declaring advice"></a>6.3 Declaring advice</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"beforeExample"</span> <span class="attr">ref</span>=<span class="string">"aBean"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span></span></span><br><span class="line"><span class="tag">        <span class="attr">pointcut</span>=<span class="string">"execution(* com.xyz.myapp.dao.*.*(..))"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">method</span>=<span class="string">"doAccessCheck"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after-returning</span></span></span><br><span class="line"><span class="tag">        <span class="attr">pointcut-ref</span>=<span class="string">"dataAccessOperation"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">method</span>=<span class="string">"doAccessCheck"</span>/&gt;</span>  public void doAccessCheck(Object retVal) &#123;...</span><br><span class="line">    </span><br><span class="line">     <span class="tag">&lt;<span class="name">aop:after-throwing</span></span></span><br><span class="line"><span class="tag">        <span class="attr">pointcut-ref</span>=<span class="string">"dataAccessOperation"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">throwing</span>=<span class="string">"dataAccessEx"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">method</span>=<span class="string">"doRecoveryActions"</span>/&gt;</span> </span><br><span class="line">    public void doRecoveryActions(DataAccessException dataAccessEx) &#123;...</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span></span></span><br><span class="line"><span class="tag">        <span class="attr">pointcut-ref</span>=<span class="string">"dataAccessOperation"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">method</span>=<span class="string">"doReleaseLock"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span></span></span><br><span class="line"><span class="tag">        <span class="attr">pointcut-ref</span>=<span class="string">"businessService"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">method</span>=<span class="string">"doBasicProfiling"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    public Object doBasicProfiling(ProceedingJoinPoint pjp) throws Throwable &#123;</span><br><span class="line">    // start stopwatch</span><br><span class="line">    Object retVal = pjp.proceed();</span><br><span class="line">    // stop stopwatch</span><br><span class="line">    return retVal;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    参数</span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"theExecutionOfSomeFooServiceMethod"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">expression</span>=<span class="string">"execution(* x.y.service.FooService.getFoo(String,int))</span></span></span><br><span class="line"><span class="tag"><span class="string">                and args(name, age)"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">"theExecutionOfSomeFooServiceMethod"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">method</span>=<span class="string">"profile"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        public Object profile(ProceedingJoinPoint call, String name, int age) throws Throwable &#123;</span><br><span class="line">        StopWatch clock = new StopWatch("Profiling for '" + name + "' and '" + age + "'");</span><br><span class="line">        try &#123;</span><br><span class="line">            clock.start(call.toShortString());</span><br><span class="line">            return call.proceed();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            clock.stop();</span><br><span class="line">            System.out.println(clock.prettyPrint());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-4-Introductions"><a href="#6-4-Introductions" class="headerlink" title="6.4 Introductions"></a>6.4 Introductions</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"usageTrackerAspect"</span> <span class="attr">ref</span>=<span class="string">"usageTracking"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:declare-parents</span></span></span><br><span class="line"><span class="tag">        <span class="attr">types-matching</span>=<span class="string">"com.xzy.myapp.service.*+"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">implement-interface</span>=<span class="string">"com.xyz.myapp.service.tracking.UsageTracked"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default-impl</span>=<span class="string">"com.xyz.myapp.service.tracking.DefaultUsageTracked"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span></span></span><br><span class="line"><span class="tag">        <span class="attr">pointcut</span>=<span class="string">"com.xyz.myapp.SystemArchitecture.businessService()</span></span></span><br><span class="line"><span class="tag"><span class="string">            and this(usageTracked)"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">method</span>=<span class="string">"recordUsage"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-5-Advisors"><a href="#6-5-Advisors" class="headerlink" title="6.5 Advisors"></a>6.5 Advisors</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"businessService"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">expression</span>=<span class="string">"execution(* com.xyz.myapp.service.*.*(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span></span></span><br><span class="line"><span class="tag">        <span class="attr">pointcut-ref</span>=<span class="string">"businessService"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">advice-ref</span>=<span class="string">"tx-advice"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"tx-advice"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="7-AspectJ-or-XML"><a href="#7-AspectJ-or-XML" class="headerlink" title="7 @AspectJ or XML"></a>7 @AspectJ or XML</h1><p>现有的Spring用户最熟悉XML风格，它由真正的pojo支持。当使用AOP作为配置企业服务的工具时，XML是一个不错的选择(一个好的测试是，是否认为切入点表达式是您可能希望独立更改的配置的一部分)。使用XML样式，从您的配置中可以清楚地看到系统中有哪些方面。</p>
<p>XML风格有两个缺点。首先，它没有在一个地方完全封装它所处理的需求的实现。DRY原则认为，系统中任何知识都应该有一个单一的、明确的、权威的表示。在使用XML样式时，关于需求如何实现的知识将在支持bean类的声明和配置文件中的XML之间进行划分。当使用@AspectJ样式时，有一个单独的single module - the aspect - in在其中封装了这些信息。其次，<strong>XML风格在表达方面比@AspectJ风格稍微受限:只支持“单例”方面实例化模型，并且不可能组合XML中声明的命名切入点。</strong>例如，在@AspectJ样式中，您可以这样写:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(execution(* get*()))</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">propertyAccess</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(execution(org.xyz.Account+ *(..))</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationReturningAnAccount</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(propertyAccess() &amp;&amp; operationReturningAnAccount())</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accountPropertyAccess</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>In the XML style I can declare the first two pointcuts:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"propertyAccess"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">expression</span>=<span class="string">"execution(* get*())"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"operationReturningAnAccount"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">expression</span>=<span class="string">"execution(org.xyz.Account+ *(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>XML方法的缺点是不能通过组合这些定义来定义accountPropertyAccess切入点。</p>
<p>@AspectJ样式支持额外的实例化模型和更丰富的切入点组合。它的优点是将方面保持为模块化单元。它还具有@AspectJ方面可以被Spring AOP和AspectJ理解(从而消费)的优点——因此，如果您稍后决定需要AspectJ的功能来实现附加需求，那么迁移到基于AspectJ的方法就非常容易。总的来说，当您的方面不只是简单的企业服务的“配置”时，Spring团队更喜欢使用@AspectJ风格。</p>
<h1 id="8-AOP-代理机制"><a href="#8-AOP-代理机制" class="headerlink" title="8 AOP 代理机制"></a>8 AOP 代理机制</h1><p>Spring AOP使用JDK动态代理或CGLIB为给定的目标对象（target）创建代理。(只要有选择，优先使用JDK动态代理)。</p>
<p>如果要代理的目标对象实现了至少一个接口，那么将使用JDK动态代理。<strong>目标类型实现的所有接口都将被代理</strong>。如果目标对象没有实现任何接口，那么将创建一个CGLIB代理。</p>
<p>如果您想强制使用CGLIB代理(例如，代理为目标对象定义的每个方法，而不仅仅是由其接口实现的方法)，您可以这样做。然而，有一些问题需要考虑:</p>
<ul>
<li><code>final</code> methods cannot be advised, as they cannot be overridden.</li>
<li>在Spring 3.2中，不再需要将CGLIB添加到项目类路径中，因为CGLIB类是在org下重新打包的。springframework，并直接包含在spring-core JAR中。这意味着基于cglib的代理支持与JDK动态代理的工作方式是一样的。</li>
<li>到Spring 4.0时，由于CGLIB代理实例将通过Objenesis创建，所以代理对象的构造函数将不再被调用两次。只有当您的JVM不允许构造器绕过时，您才可能看到来自Spring AOP支持的双重调用和相应的调试日志条目。</li>
</ul>
<p>To force the use of CGLIB proxies set the value of the <code>proxy-target-class</code> attribute of the <code>&lt;aop:config&gt;</code> element to true:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- other beans defined here... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>To force CGLIB proxying when using the @AspectJ autoproxy support, set the <code>&#39;proxy-target-class&#39;</code> attribute of the <code>&lt;aop:aspectj-autoproxy&gt;</code> element to <code>true</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;aop:aspectj-autoproxy proxy-target-class&#x3D;&quot;true&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>



<h1 id="9-Understanding-AOP-proxies"><a href="#9-Understanding-AOP-proxies" class="headerlink" title="9 Understanding AOP proxies"></a>9 Understanding AOP proxies</h1><ul>
<li>无代理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Pojo pojo = <span class="keyword">new</span> SimplePojo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this is a direct method call on the 'pojo' reference</span></span><br><span class="line">        pojo.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>有代理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ProxyFactory factory = <span class="keyword">new</span> ProxyFactory(<span class="keyword">new</span> SimplePojo());</span><br><span class="line">        factory.addInterface(Pojo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        factory.addAdvice(<span class="keyword">new</span> RetryAdvice());</span><br><span class="line"></span><br><span class="line">        Pojo pojo = (Pojo) factory.getProxy(); <span class="comment">// 获取代理对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// this is a method call on the proxy!</span></span><br><span class="line">        pojo.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The key thing to understand here is that the client code inside the <code>main(..)</code> of the <code>Main</code> class <em>has a reference to the proxy</em>. This means that method calls on that object reference will be calls on the proxy, and as such the proxy will be able to delegate to all of the interceptors (advice) that are relevant to that particular method call. However, once the call has finally reached the target object, the <code>SimplePojo</code> reference in this case, any method calls that it may make on itself, such as <code>this.bar()</code> or <code>this.foo()</code>, are going to be invoked against the <em>this</em> reference, and <em>not</em> the proxy. This has important implications. It means that self-invocation is <em>not</em> going to result in the advice associated with a method invocation getting a chance to execute.</p>
<p>译：这里需要理解的关键是，主类的main(..)中的客户机代码有一个对代理的引用。这意味着对该对象引用的方法调用将是对代理的调用，因此代理将能够委托给与该特定方法调用相关的所有拦截器(通知)。但是，一旦调用最终到达<strong>目标对象</strong>SimplePojo引用(在本例中是这样的)，它自己可能进行的任何方法调用，例如this.bar()或this.foo()，都将针对这个引用而不是代理调用。这具有重要的意义。这意味着自调用不会导致与方法调用关联的<strong>通知</strong>获得执行机会。</p>
<p><strong>总结：自调用不会被增强。</strong></p>
<p>Okay, so what is to be done about this? The best approach (the term best is used loosely here) is to refactor your code such that the self-invocation does not happen. For sure, this does entail some work on your part, but it is the best, least-invasive approach. The next approach is absolutely horrendous, and I am almost reticent to point it out precisely because it is so horrendous. You can (choke!) totally tie the logic within your class to Spring AOP by doing this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePojo</span> <span class="keyword">implements</span> <span class="title">Pojo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// this works, but... gah!  代理对象融合本地逻辑对象</span></span><br><span class="line">        ((Pojo) AopContext.currentProxy()).bar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// some logic...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This totally couples your code to Spring AOP, <em>and</em> it makes the class itself aware of the fact that it is being used in an AOP context, which flies in the face of AOP. It also requires some additional configuration when the proxy is being created:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ProxyFactory factory = <span class="keyword">new</span> ProxyFactory(<span class="keyword">new</span> SimplePojo());</span><br><span class="line">        factory.adddInterface(Pojo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        factory.addAdvice(<span class="keyword">new</span> RetryAdvice());</span><br><span class="line">        </span><br><span class="line">        factory.setExposeProxy(<span class="keyword">true</span>); <span class="comment">// 暴露代理对象，提供代理上下文</span></span><br><span class="line"></span><br><span class="line">        Pojo pojo = (Pojo) factory.getProxy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this is a method call on the proxy!</span></span><br><span class="line">        pojo.foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Finally, it must be noted that AspectJ does not have this self-invocation issue because it is not a proxy-based AOP framework.</p>
<h1 id="10-Programmatic-creation-of-AspectJ-Proxies"><a href="#10-Programmatic-creation-of-AspectJ-Proxies" class="headerlink" title="10 Programmatic creation of @AspectJ Proxies"></a>10 Programmatic creation of @AspectJ Proxies</h1><p>In addition to declaring aspects in your configuration using either <code>&lt;aop:config&gt;</code> or <code>&lt;aop:aspectj-autoproxy&gt;</code>, it is also possible programmatically to create proxies that advise target objects. For the full details of Spring’s AOP API, see the next chapter. Here we want to focus on the ability to automatically create proxies using @AspectJ aspects.</p>
<p>The class <code>org.springframework.aop.aspectj.annotation.AspectJProxyFactory</code> can be used to create a proxy for a target object that is advised by one or more @AspectJ aspects. Basic usage for this class is very simple, as illustrated below. See the javadocs for full information.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create a factory that can generate a proxy for the given target object</span></span><br><span class="line">AspectJProxyFactory factory = <span class="keyword">new</span> AspectJProxyFactory(targetObject);</span><br><span class="line"></span><br><span class="line"><span class="comment">// add an aspect, the class must be an @AspectJ aspect</span></span><br><span class="line"><span class="comment">// you can call this as many times as you need with different aspects</span></span><br><span class="line">factory.addAspect(SecurityManager<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// you can also add existing aspect instances, the type of the object supplied must be an @AspectJ aspect</span></span><br><span class="line">factory.addAspect(usageTracker);</span><br><span class="line"></span><br><span class="line"><span class="comment">// now get the proxy object...</span></span><br><span class="line">MyInterfaceType proxy = factory.getProxy();</span><br></pre></td></tr></table></figure>



<h1 id="11-Using-AspectJ-with-Spring-applications"><a href="#11-Using-AspectJ-with-Spring-applications" class="headerlink" title="11 Using AspectJ with Spring applications"></a>11 Using AspectJ with Spring applications</h1><h2 id="11-1-注入领域对象-Configurable"><a href="#11-1-注入领域对象-Configurable" class="headerlink" title="11.1 注入领域对象-@Configurable"></a>11.1 注入领域对象-@Configurable</h2><p><strong>我们在使用Spring IOC时，可能需要这样的功能：我么写好的一个类，我们希望在类里面注入一些Spring IOC里的Bean，但是这个类并不被Spring IOC管理，也就是说，我们使用这个类的方式，可能是直接new，也可能是反射实例化一个对象，然后再使用；</strong></p>
<p><strong>@Configurable就可以解决上面的问题，开启Spring的LoadTimeWeaving，Spring会使用AspectJ的能力，进行类加载时控制；</strong></p>
<p>Spring容器实例化并配置在应用程序上下文中定义的bean。也可以要求bean工厂配置一个预先存在的对象，给定包含要应用的配置的bean定义的名称。spring-aspects.jar包含一个注解驱动的Aspect，它利用这种能力来允许任何对象的依赖注入。该支持用于在任何容器的控制之外创建的对象。域对象通常属于这一类，因为它们通常是使用新的操作符以编程方式创建的，或者作为数据库查询的结果由ORM工具创建的。</p>
<p>@Configurable标记了一个类<strong>适合spring驱动配置</strong>。在最简单的情况下，它可以用作标记注释:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyz.myapp.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Configurable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configurable</span>(<span class="string">"account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring will now look for a bean definition named “account” and use that as the definition to configure new <code>Account</code> instances.</p>
<p>You can also use autowiring to avoid having to specify a dedicated bean definition at all. To have Spring apply autowiring use the <code>autowire</code> property of the <code>@Configurable</code> annotation: specify either <code>@Configurable(autowire=Autowire.BY_TYPE)</code> or<code>@Configurable(autowire=Autowire.BY_NAME</code> for autowiring by type or by name respectively. As an alternative, as of Spring 2.5 it is preferable to specify explicit, annotation-driven dependency injection for your <code>@Configurable</code> beans by using <code>@Autowired</code> or <code>@Inject</code> at the field or method level </p>
<p>Finally you can enable Spring dependency checking for the object references in the newly created and configured object by using the <code>dependencyCheck</code> attribute (for example: <code>@Configurable(autowire=Autowire.BY_NAME,dependencyCheck=true)</code>). If this attribute is set to true, then Spring will validate after configuration that all properties (<em>which are not primitives or collections</em>) have been set.</p>
<p>仅仅使用注解并没有做任何事情。但是<code>spring-aspects.jar</code> 中的<code>AnnotationBeanConfigurerAspect</code>会在注解存在时起作用。实质上切面指明： “在初始化一个由<code>@Configurable</code> 注解的新对象时， Spring按照注解中的属性来配置这个新创建的对象”。这种情况下，<em>initialization</em> 指新初始化的（比如用<code>new</code>初始化）的对象以及能进行反序列化的 <code>Serializable</code>对象（例如通过 <span class="exturl" data-url="aHR0cDovL2phdmEuc3VuLmNvbS9qMnNlLzEuNS4wL2RvY3MvYXBpL2phdmEvaW8vU2VyaWFsaXphYmxlLmh0bWw=" title="http://java.sun.com/j2se/1.5.0/docs/api/java/io/Serializable.html">readResolve()<i class="fa fa-external-link"></i></span>方法）。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在上一段中一个关键的阶段就是“<em>inessence</em>”。多数情况下，“ <em>当从一个新对象初始化返回之后</em>”的精确语义很不错…这种语境下， “初始化之后”的意思是依赖将在对象被构造<em>之后</em>注入 - 这意味着在类的构造器块中依赖将不可用。如果你希望它能在构造器代码块执行 <em>之前</em>被注入，并从而在构造器中使用它， 那么你需要在<code>@Configurable</code>接口声明上做类似的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configurable</span>(preConstruction=<span class="keyword">true</span>)</span><br></pre></td></tr></table></figure>

<p>你可以在<span class="exturl" data-url="aHR0cDovL3d3dy5lY2xpcHNlLm9yZy9hc3BlY3RqL2RvYy9uZXh0L3Byb2dndWlkZS9pbmRleC5odG1s" title="http://www.eclipse.org/aspectj/doc/next/progguide/index.html"> AspectJ Programming Guide<i class="fa fa-external-link"></i></span>一书的<span class="exturl" data-url="aHR0cDovL3d3dy5lY2xpcHNlLm9yZy9hc3BlY3RqL2RvYy9uZXh0L3Byb2dndWlkZS9zZW1hbnRpY3Mtam9pblBvaW50cy5odG1s" title="http://www.eclipse.org/aspectj/doc/next/progguide/semantics-joinPoints.html">附录中<i class="fa fa-external-link"></i></span> 找到更多有关在AspectJ中各种切面类型的语义信息。</p>
<p>要实现上述的操作，已注解的类型必须由AspectJ weaver来织入 - 你可以使用一个构建时的ant/maven任务来完成 （参见<span class="exturl" data-url="aHR0cDovL3d3dy5lY2xpcHNlLm9yZy9hc3BlY3RqL2RvYy9yZWxlYXNlZC9kZXZndWlkZS9hbnRUYXNrcy5odG1s" title="http://www.eclipse.org/aspectj/doc/released/devguide/antTasks.html">AspectJ Development Environment Guide<i class="fa fa-external-link"></i></span>）或者使用加载时织入（参见 <span class="exturl" data-url="aHR0cDovL3d3dy5zaG91Y2UucmVuL2FwaS9zcHJpbmcyLjUvY2gwNnMwOC5odG1sI2FvcC1hai1sdHc=" title="http://www.shouce.ren/api/spring2.5/ch06s08.html#aop-aj-ltw">第 6.8.4 节 “在Spring应用中使用AspectJ加载时织入（LTW）”<i class="fa fa-external-link"></i></span>）。 类<code>AnnotationBeanConfigurerAspect</code>本身也需要Spring来配置（获得bean factory的引用，使用bean factory配置新的对象）。为此Spring的 <a href="http://www.shouce.ren/api/spring2.5/apas02.html#xsd-config-body-schemas-context" target="_blank" rel="noopener"><code>context</code>命名空间</a> 定义了一个非常方便的标签。只要简单的在application context配置中包含下面的内容。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:spring-configured</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你使用DTD代替Schema，对应的定义如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">factory-method</span>=<span class="string">"aspectOf"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>在切面配置完成<em>之前</em>创建的<code>@Configurable</code> 对象实例会导致在log中留下一个warning，并且任何对于该对象的配置都不会生效。 举一个例子，一个Spring管理配置的bean在被Spring初始化的时候创建了一个domain object。 对于这样的情况，你需要定义bean属性中的”depends-on”属性来手动指定该bean依赖于configuration切面。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myService"</span> <span class="attr">class</span>=<span class="string">"com.xzy.myapp.service.MyService"</span><span class="attr">depends-on</span>=<span class="string">"org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>不要通过bean配置程序方面激活@<code>Configurable</code> 处理方法，除非您确实打算在运行时依赖它的语义。特别是，确保在容器中注册为普通Spring bean的bean类上不使用@<code>Configurable</code> .否则，您将会得到两次初始化，一次是通过容器，一次是通过Aspect。</strong></p>
<h2 id="11-2-Working-with-multiple-application-contexts"><a href="#11-2-Working-with-multiple-application-contexts" class="headerlink" title="11.2 Working with multiple application contexts"></a>11.2 Working with multiple application contexts</h2><p><code>AnnotationBeanConfigurerAspect</code>通过一个AspectJ singleton切面来实现对 <code>@Configurable</code>的支持。一个singleton切面的作用域和一个 静态变量的作用域是一样的，那就是说，对于每一个classloader有一个切面来定义类型。 这就意味着如果你在一个classloader层次结构中定义了多个application context的时候就需要考虑 在哪里定义<code>&lt;aop:spring-configured/&gt;</code> bean和在哪个classpath下 放置<code>spring-aspects.jar</code>。</p>
<p>考虑一下典型的Spring web项目，一般都是由一个父application context定义大部分business service和 所需要的其他资源，然后每一个servlet拥有一个子application context定义。所有这些context共存于 同一个classloader体系下，因此<code>AnnotationBeanConfigurerAspect</code>仅保持 一个对context的引用。在这样的情况下，我们推荐在父application context中定义 <code>&lt;aop:spring-configured/&gt;</code> bean：这里所定义的service可能是 你希望注入domain object的。这样做的结果是你不能为子application context中 使用@Configurable的domain object配置bean引用（可能你也根本就不希望那么做！）。</p>
<p>当在一个容器中部署多个web-app的时候，请确保每一个web-application使用自己的classloader 来加载spring-aspects.jar中的类（例如将spring-aspects.jar放在WEB-INF/lib目录下）。 如果spring-aspects.jar被放在了容器的classpath下（因此也被父classloader加载），则所有的 web application将共享一个aspect实例，这可能并不是你所想要的。</p>
<h2 id="11-3-Spring中其他的AspectJ切面"><a href="#11-3-Spring中其他的AspectJ切面" class="headerlink" title="11.3 Spring中其他的AspectJ切面"></a>11.3 Spring中其他的AspectJ切面</h2><p>除了<code>@Configurable</code>切面， <code>spring-aspects.jar</code>包含了一个AspectJ切面可以用来为 那些使用了<code>@Transactional</code>注解的类型和方法驱动Spring事务管理。 提供这个的主要目的是有些用户希望脱离Spring容器使用Spring的事务管理。</p>
<p>解析<code>@Transactional</code>注解的切面是 <code>AnnotationTransactionAspect</code>。当使用这个切面时， 你必须注解这个<em>实现类<em>（和/或这个类中的方法），而</em>不是</em> 这个类实现的接口（如果有）。AspectJ允许在接口上注解的Java规则 <em>不被继承</em>。</p>
<p>类之上的一个<code>@Transactional</code>注解为该类中任何 <em>public</em>操作的执行指定了默认的事务语义。</p>
<p>类内部方法上的一个<code>@Transactional</code>注解会覆盖类注解（如果存在） 所给定的默认的事务语义。具有public、protected和default修饰符的方法都可以被注解。 直接注解protected和default方法是让这个操作的执行获得事务划分的唯一途径。</p>
<p>对于AspectJ程序员，希望使用Spring管理配置和事务管理支持，不过他们不想（或者不能）使用注解， <code>spring-aspects.jar</code>也包含了一些<code>抽象</code> 切面供你继承来提供你自己的切入点定义。参见<code>AbstractBeanConfigurerAspect</code> 和<code>AbstractTransactionAspect</code>的Javadoc获取更多信息。 作为一个例子，下面的代码片断展示了如何编写一个切面，然后通过和类全名匹配的bean原型定义来 配置domian object中定义的所有实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> aspect DomainObjectConfiguration extends AbstractBeanConfigurerAspect &#123;</span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DomainObjectConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setBeanWiringInfoResolver(<span class="keyword">new</span> ClassNameBeanWiringInfoResolver());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the creation of a new bean (any object in the domain model)</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> pointcut <span class="title">beanCreation</span><span class="params">(Object beanInstance)</span> :</span></span><br><span class="line"><span class="function">    <span class="title">initialization</span><span class="params">(new(..)</span>) &amp;&amp;</span></span><br><span class="line"><span class="function">        SystemArchitecture.<span class="title">inDomainModel</span><span class="params">()</span> &amp;&amp; </span></span><br><span class="line"><span class="function">        <span class="title">this</span><span class="params">(beanInstance)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11-4-使用Spring-IoC来配置AspectJ的切面"><a href="#11-4-使用Spring-IoC来配置AspectJ的切面" class="headerlink" title="11.4 使用Spring IoC来配置AspectJ的切面"></a>11.4 使用Spring IoC来配置AspectJ的切面</h2><p>当在Spring application中使用AspectJ的时候，很自然的会想到用Spring来管理这些切面。 AspectJ runtime自身负责切面的创建，这意味着通过Spring来管理AspectJ 创建切面依赖于切面所使用的AspectJ instantiation model(per-clause)。</p>
<p>大多数AspectJ切面都是<em>singleton</em>切面。管理这些切面非常容易， 和通常一样创建一个bean定义引用该切面类型就可以了，并且在bean定义中包含 <code>&#39;factory-method=&quot;aspectOf&quot;&#39;</code>这个属性。 这确保Spring从AspectJ获取切面实例而不是尝试自己去创建该实例。示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"profiler"</span> <span class="attr">class</span>=<span class="string">"com.xyz.profiler.Profiler"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">"aspectOf"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"profilingStrategy"</span> <span class="attr">ref</span>=<span class="string">"jamonProfilingStrategy"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>non-singleton切面的配置稍难一点，然而它可以通过定义一个bean原型定义并且使用 <code>spring-aspects.jar</code>中的@Configurable支持， 当切面实例由AspectJ runtime创建后进行配置。</p>
<p>如果你希望一些@AspectJ切面使用AspectJ来织入（例如使用load-time织入domain object） 而另一些@AspectJ切面使用Spring AOP，并且这些切面都由Spring来管理，那你就需要告诉Spring AOP @AspectJ自动代理支持那些切面需要被自动代理。你可以通过在 <code>&lt;aop:aspectj-autoproxy&gt;</code>声明中使用一个或多个 <code>&lt;include/&gt;</code>元素。每个元素指定了一种命名格式， 只有bean命名至少符合其中一种情况下才会使用Spring AOP自动代理配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:include</span> <span class="attr">name</span>=<span class="string">"thisBean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:include</span> <span class="attr">name</span>=<span class="string">"thatBean"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<p>不要被<code>&lt;aop:aspectj-autoproxy/&gt;</code>元素的名字所误导： 用它会导致<em>Spring AOP 代理</em>的创建。在这中只是使用@AspectJ 类型的切面声明，但并不会涉及AspectJ运行时。</p>
<h2 id="11-5-在Spring应用中使用AspectJ加载时织入（LTW）"><a href="#11-5-在Spring应用中使用AspectJ加载时织入（LTW）" class="headerlink" title="11.5 在Spring应用中使用AspectJ加载时织入（LTW）"></a>11.5 在Spring应用中使用AspectJ加载时织入（LTW）</h2><p>加载时织入（Load-time weaving（LTW））<strong>指的是在虚拟机载入字节码文件时动态织入AspectJ切面</strong>。 <strong>本节关注于在Spring Framework中特的定context下配置和使用LTW：并没有LTW的介绍</strong>。 关于LTW和仅使用AspectJ配置LTW的详细信息（根本不涉及Spring），请查看 <span class="exturl" data-url="aHR0cDovL3d3dy5lY2xpcHNlLm9yZy9hc3BlY3RqL2RvYy9yZWxlYXNlZC9kZXZndWlkZS9sdHcuaHRtbA==" title="http://www.eclipse.org/aspectj/doc/released/devguide/ltw.html">LTW section of the AspectJ Development Environment Guide<i class="fa fa-external-link"></i></span>。</p>
<p>Spring框架的值添加为AspectJ LTW在动态织入过程中提供了更细粒度的控制。使用Java（5+）的代理 能使用一个叫‘Vanilla’的AspectJ LTW，这需要在启动JVM的时候将某个VM参数设置为开。 这种JVM范围的设置在一些情况下或许不错，但通常情况下显得有些粗颗粒。而用Spring的LTW能让你在 <em>per-ClassLoader</em>的基础上打开LTW， 这显然更加细粒度并且对“单JVM多应用”的环境更具意义（例如在一个典型应用服务器环境中一样）。</p>
<p>另外，<span class="exturl" data-url="aHR0cDovL3d3dy5zaG91Y2UucmVuL2FwaS9zcHJpbmcyLjUvY2gwNnMwOC5odG1sI2FvcC1hai1sdHctZW52aXJvbm1lbnRz" title="http://www.shouce.ren/api/spring2.5/ch06s08.html#aop-aj-ltw-environments">在某些环境下<i class="fa fa-external-link"></i></span>，这能让你使用LTW而 <em>不对应用服务器的启动脚本做任何改动</em>，不然则需要添加 -javaagent:path/to/aspectjweaver.jar或者(以下将会提及的)-javaagent:path/to/spring-agent.jar。 开发人员只需简单修改应用上下文的一个或几个文件就能使用LTW，而不需依靠那些管理着部署配置 比如启动脚本的系统管理员。</p>
<p>经过以上讲解之后，先让我们来过一遍一个使用Spring的AspectJ LTW的快速示例，接着是一个 有对元素详细讲解的示例。如果想要一个完整的示例，请参看Petclinic（宠物诊所）的应用实例。</p>
<h3 id="11-5-1-第一个例子"><a href="#11-5-1-第一个例子" class="headerlink" title="11.5.1 第一个例子"></a>11.5.1 第一个例子</h3><p>假设你是一个应用开人员，被指派诊断一个系统的若干性能问题。与其拿出性能分析工具， 我们不如开启一个简单的分析切面，使我们能很快地得到一些性能指标，这样我们就能马上针对特定区域使用一些较细粒度的分析工具。</p>
<p>这就是一个分析切面。没什么特别的，只是一个快餐式的基于时间的模拟分析器， 使用类@AspectJ风格的切面声明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> foo;</span><br><span class="line">                    </span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfilingAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"methodsToBeProfiled()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">profile</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        StopWatch sw = <span class="keyword">new</span> StopWatch(getClass().getSimpleName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sw.start(pjp.getSignature().getName());</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            sw.stop();</span><br><span class="line">            System.out.println(sw.prettyPrint());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public * foo..*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodsToBeProfiled</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们还需要创建一个“<code>META-INF/aop.xml</code>”文件，以告知AspectJ weaver 我们要把<code>ProfilingAspect</code>织入到类中。这个文件惯例，即在Java classpath中 出现一个文件称作“<code>META-INF/aop.xml</code>”是标准的AspectJ。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">aspectj</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">                    <span class="meta-string">"-//AspectJ//DTD//EN"</span> <span class="meta-string">"http://www.eclipse.org/aspectj/dtd/aspectj.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aspectj</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">weaver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- only weave classes in our application-specific packages --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">within</span>=<span class="string">"foo.*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">weaver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aspects</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- weave in just this aspect --&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">aspect</span> <span class="attr">name</span>=<span class="string">"foo.ProfilingAspect"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aspects</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">aspectj</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在来看Spring特定的配置部分。我们需要配置一个<code>LoadTimeWeaver</code> （稍后会有解释，暂时不多深究）。当将一个或多个“<code>META-INF/aop.xml</code>”文件中的切面 配置织入你的应用程序的类中时，这个加载时织入器是必须的。这样的好处是不需要很多的配置， 正如下面你看到的一样（还有另外一些参数供你指定，我们将在后面详细介绍）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a service object; we will be profiling it's methods --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"entitlementCalculationService"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"foo.StubEntitlementCalculationService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- this switches on the load-time weaving --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:load-time-weaver</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在万事俱备 - 切面，<code>META-INF/aop.xml</code>文件，以及Spring的配置 - 让我们创建一个带有<code>main(..)</code>方法的简单驱动类来演示LTW的作用吧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> foo;</span><br><span class="line">                    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>, Main<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        EntitlementCalculationService entitlementCalculationService</span><br><span class="line">            = (EntitlementCalculationService) ctx.getBean(<span class="string">"entitlementCalculationService"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the profiling aspect is 'woven' around this method execution</span></span><br><span class="line">        entitlementCalculationService.calculateEntitlement();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后还有一件事要做。此节之前的介绍说过可以有选择性的基于Spring的 per-<code>ClassLoader</code>来启动LTW，而且的确如此。不过，对此例来说， 我们将使用Java代理（由Spring提供）来启动LTW。这个就是用以运行上面<code>Main</code> 类的命令行语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -javaagent:C:&#x2F;projects&#x2F;foo&#x2F;lib&#x2F;global&#x2F;spring-agent.jar foo.Main</span><br></pre></td></tr></table></figure>

<p><code>-javaagent</code>是一个Java 5+标记，用来指定和激活 <span class="exturl" data-url="aHR0cDovL2phdmEuc3VuLmNvbS9qMnNlLzEuNS4wL2RvY3MvYXBpL2phdmEvbGFuZy9pbnN0cnVtZW50L3BhY2thZ2Utc3VtbWFyeS5odG1s" title="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/instrument/package-summary.html">使JVM上的程序运行的代理<i class="fa fa-external-link"></i></span>。Spring框架装载了一个<code>InstrumentationSavingAgent</code> 代理，在上面的例子中被作为了<code>-javaagent</code>参数的值打包在 <code>spring-agent.jar</code>中。</p>
<p><code>Main</code>程序运行的输出如下所示。（我已经在 <code>calculateEntitlement()</code>的实现中插入了<code>Thread.sleep(..)</code> 语句，以免让模拟分析器获取0毫秒 - 这里的<code>01234</code>毫秒并非是AOP引入的系统开销。）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Calculating entitlement</span><br><span class="line"></span><br><span class="line">StopWatch &#39;ProfilingAspect&#39;: running time (millis) &#x3D; 1234</span><br><span class="line">------ ----- ----------------------------</span><br><span class="line">ms     %     Task name</span><br><span class="line">------ ----- ----------------------------</span><br><span class="line">01234  100%  calculateEntitlement</span><br></pre></td></tr></table></figure>

<p>因为这个LTW使用成熟的AspectJ，我们并不局限于通知Spring beans的方法；接下来这个稍有变化的 <code>Main</code>程序将生成同样的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> foo;</span><br><span class="line">                    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>, Main<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        EntitlementCalculationService entitlementCalculationService =</span><br><span class="line">            <span class="keyword">new</span> StubEntitlementCalculationService();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the profiling aspect will be 'woven' around this method execution</span></span><br><span class="line">        entitlementCalculationService.calculateEntitlement();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意以上程序我们只是引导了Spring容器，然后完全在Spring上下文之外创建了一个 <code>StubEntitlementCalculationService</code>的实例…分析通知仍然得到织入。</p>
<p>上面的例子虽然简单了些，但Spring中基本的LTW支持都已介绍完了， 此节余下内容将对使用这些配置和用法背后的理由作详细解释。</p>
<p>注意</p>
<p>类<code>ProfilingAspect</code>在此例中虽然基本但是颇为有用。这是一个很好的开发时切面的例子，开发者可以在开发过程中使用它（废话）， 然后也能从已部署到UAT或者生产环境的应用中轻易的脱离。</p>
<h3 id="11-5-2-切面"><a href="#11-5-2-切面" class="headerlink" title="11.5.2 切面"></a>11.5.2 切面</h3><p>你在LTW中使用的切面必须是AspectJ切面。你可以使用AspectJ语言或者类@AspectJ风格来编写你的切面。 后一种方式当然只能在Java 5+中使用，但它说明了你的切面可以同时对AspectJ和Spring AOP切面有效。 此外，编译后的切面类需要被注册到classpath下。</p>
<h3 id="11-5-3-‘META-INF-aop-xml‘"><a href="#11-5-3-‘META-INF-aop-xml‘" class="headerlink" title="11.5.3 ‘META-INF/aop.xml‘"></a>11.5.3 ‘<code>META-INF/aop.xml</code>‘</h3><p>AspectJ LTW的基础设施是用一个或多个位于Java classpath上的（可以是直接的文件形式， 也可以是更典型的jar包形式）<code>META-INF/aop.xml</code>文件配置起来的。</p>
<p>有关文件的结构和内容都在AspectJ的参考文档中有详细介绍，有兴趣的读者 <span class="exturl" data-url="aHR0cDovL3d3dy5lY2xpcHNlLm9yZy9hc3BlY3RqL2RvYy9yZWxlYXNlZC9kZXZndWlkZS9sdHctY29uZmlndXJhdGlvbi5odG1s" title="http://www.eclipse.org/aspectj/doc/released/devguide/ltw-configuration.html">请参考这些资源<i class="fa fa-external-link"></i></span>。（很庆幸这一节比较简短，但<code>aop.xml</code>文件 是100% AspectJ的 - 没有任何使用Spring特定的信息或语义，因此我也没有什么可贡献的。 与其重写这些已由AspectJ开发者提供的令人满意的章节，我不如领你到这里。）</p>
<h3 id="11-5-4-相关类库（JARS）"><a href="#11-5-4-相关类库（JARS）" class="headerlink" title="11.5.4 相关类库（JARS）"></a>11.5.4 相关类库（JARS）</h3><p>你至少需要以下类库来让Spring框架支持AspectJ LTW：</p>
<ol>
<li><code>spring.jar</code>（2.5或更高版本）</li>
<li><code>aspectjrt.jar</code> （1.5或更高版本）</li>
<li><code>aspectjweaver.jar</code> （1.5或更高版本）</li>
</ol>
<p>如果你正在使用<span class="exturl" data-url="aHR0cDovL3d3dy5zaG91Y2UucmVuL2FwaS9zcHJpbmcyLjUvY2gwNnMwOC5odG1sI2FvcC1hai1sdHctZW52aXJvbm1lbnQtZ2VuZXJpYw==" title="http://www.shouce.ren/api/spring2.5/ch06s08.html#aop-aj-ltw-environment-generic"> 由Spring提供的代理来激活检测（instrumentation）功能<i class="fa fa-external-link"></i></span>，你会需要：</p>
<ol>
<li><code>spring-agent.jar</code></li>
</ol>
<h3 id="11-5-5-Spring配置"><a href="#11-5-5-Spring配置" class="headerlink" title="11.5.5 Spring配置"></a>11.5.5 Spring配置</h3><p>Spring LTW功能的关键组件是<code>LoadTimeWeaver</code>接口 （在<code>org.springframework.instrument.classloading</code>包中）， 以及Spring分发包中大量的实现。<code>LoadTimeWeaver</code>的实现负责 在运行时把一个或多个<code>java.lang.instrument.ClassFileTransformers</code>类添加到 <code>ClassLoader</code>中，这能产生各种各样有趣的应用，LTW切面恰好便是其中之一。</p>
<ul>
<li><strong>提示</strong></li>
</ul>
<p>如果你对运行时类文件变换的思想还不熟悉，推荐你在继续之前阅读 <code>java.lang.instrument</code>包的Javadoc API文档。 这其实并不难-反而有些恼人-因为有用的文件并不多…关键的接口和类都将会在此节呈现给你。</p>
<p>用XML为<code>ApplicationContext</code>配置一个 <code>LoadTimeWeaver</code>简单得只需要添加一行。 （请注意几乎肯定你需要使用<code>ApplicationContext</code>作为你的 Spring容器 - 一般来说只有<code>BeanFactory</code>是不够的， <strong>因为LTW功能需要用到<code>BeanFactoryPostProcessors</code></strong>。）</p>
<p>当要使用Spring框架的LTW功能时，你需要配置一个<code>LoadTimeWeaver</code>， 一般可以用<code>&lt;context:load-time-weaver/&gt;</code>元素来完成。 下面为一个有效的使用默认设置的<code>&lt;context:load-time-weaver/&gt;</code>定义。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:load-time-weaver</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面<code>&lt;context:load-time-weaver/&gt;</code> bean的定义会自动为你定义和注册若干 特定LTW的基础设施beans，比如一个<code>LoadTimeWeaver</code> 和一个<code>AspectJWeavingEnabler</code>。请注意 <code>&lt;context:load-time-weaver/&gt;</code>是怎样在<code>context</code> 命名空间下被定义的；还要注意被引用的XML Schema文件只在Spring 2.5或更高版本中才可用。</p>
<p>上面的配置为你定义并注册了一个默认的<code>LoadTimeWeaver</code> bean。 默认的<code>LoadTimeWeaver</code>是一个 <code>DefaultContextLoadTimeWeaver</code>类，它更倾向于去装饰一个能自动检测的<code>LoadTimeWeaver</code>类：<code>LoadTimeWeaver</code> 的确切类型会根据你的运行时环境“自动检测”出来（概述如下表）。</p>
<p><strong>表 6.1. DefaultContextLoadTimeWeaver LoadTimeWeaversDefaultContextLoadTimeWeaver类和LoadTimeWeavers接口</strong></p>
<table>
<thead>
<tr>
<th>运行时环境</th>
<th><code>LoadTimeWeaver</code>的接口实现</th>
</tr>
</thead>
<tbody><tr>
<td><span class="exturl" data-url="aHR0cDovL3d3dy5iZWEuY29tL2ZyYW1ld29yay5qc3A/Q05UPWluZGV4Lmh0bSYlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBGUD0vY29udGVudC9wcm9kdWN0cy93ZWJsb2dpYy9zZXJ2ZXI=" title="http://www.bea.com/framework.jsp?CNT=index.htm&%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20FP=/content/products/weblogic/server">BEA’s Weblogic 10<i class="fa fa-external-link"></i></span>环境下</td>
<td><code>WebLogicLoadTimeWeaver</code></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2hub2xvZ3kvcHJvZHVjdHMvb2M0ai9pbmRleC5odG1s" title="http://www.oracle.com/technology/products/oc4j/index.html">Oracle’s OC4J<i class="fa fa-external-link"></i></span>环境下</td>
<td><code>OC4JLoadTimeWeaver</code></td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cDovL2dsYXNzZmlzaC5kZXYuamF2YS5uZXQv" title="http://glassfish.dev.java.net/">GlassFish<i class="fa fa-external-link"></i></span>环境下</td>
<td><code>GlassFishLoadTimeWeaver</code></td>
</tr>
<tr>
<td>以Spring<code>InstrumentationSavingAgent</code>启动的JVM中<em>(java -javaagent:path/to/spring-agent.jar)</em></td>
<td><code>InstrumentationLoadTimeWeaver</code></td>
</tr>
<tr>
<td>不过，我们更希望这些类加载器能遵循共同的规范 (例如适用<code>TomcatInstrumentableClassLoader</code>和Resin)</td>
<td><code>ReflectiveLoadTimeWeaver</code></td>
</tr>
</tbody></table>
<p>请注意当使用<code>DefaultContextLoadTimeWeaver</code>时只有 <code>LoadTimeWeavers</code>实现类能进行自动检测： 当然，你也可以通过指定将类的完全限定名作为<code>&lt;context:load-time-weaver/&gt;</code> 元素中<code>weaver-class</code>属性的值 来指定究竟想使用哪个<code>LoadTimeWeaver</code>的实现。如下例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:load-time-weaver</span> </span></span><br><span class="line"><span class="tag"><span class="attr">weaver-class</span>=<span class="string">"org.springframework.instrument.classloading.ReflectiveLoadTimeWeaver"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>&lt;context:load-time-weaver/&gt;</code>元素上定义和注册的 <code>LoadTimeWeaver</code>接口可以在Spring容器中以 <code>loadTimeWeaver</code>名字找到。 记住<code>LoadTimeWeaver</code>接口只是作为Spring LTW基础设施的一个机制 用来添加一个或多个<code>ClassFileTransformers</code>的。<code>ClassFileTransformer</code>类实际是利用 <code>ClassPreProcessorAgentAdapter</code>类（包含在 <code>org.aspectj.weaver.loadtime</code>中）来进行LTW的。 有关<code>ClassPreProcessorAgentAdapter</code>的细节请参见 类级别的javadoc，织入实际怎样生效的具体内容已经超出本节讨论范围。</p>
<p>让我们来讨论<code>&lt;context:load-time-weaver/&gt;</code>的最后一个属性： <code>aspectj-weaving</code>。 这是一个简单的LTW开关，就这么简单。 它可以接受如下所述的三种值，如果不显示设置此属性则其默认值为<code>autodetect</code></p>
<p><strong>表 6.2. aspectj-weaving属性值</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td><code>on</code></td>
<td>AspectJ织入功能开启，切面将会在加载时适当时机被织入。</td>
</tr>
<tr>
<td><code>off</code></td>
<td>LTW功能关闭…不会在加载时织入切面。</td>
</tr>
<tr>
<td><code>autodetect</code></td>
<td>如果Spring LTW基础设施能找到至少一个<code>META-INF/aop.xml</code> 文件，那么AspectJ织入将会开启，否则关闭。此为默认值。</td>
</tr>
</tbody></table>
<h4 id="11-5-5-1-特定环境的配置"><a href="#11-5-5-1-特定环境的配置" class="headerlink" title="11.5.5.1 特定环境的配置"></a>11.5.5.1 特定环境的配置</h4><p>这最后一节包括所有你在诸如应用服务器和web容器中使用Spring的LTW功能时需要的额外设置和配置。</p>
<h4 id="11-5-5-2-通用Java应用"><a href="#11-5-5-2-通用Java应用" class="headerlink" title="11.5.5.2 通用Java应用"></a>11.5.5.2 通用Java应用</h4><p>你可能在各种Java应用中通过使用由Spring提供的检测代理启用Spring的LTW功能 （独立应用或者基于应用服务器的应用）。这样的话，可以通过指定 <code>-javaagent:path/to/spring-agent.jar</code>选项来启动虚拟机。 请注意这需要修改虚拟机的启动脚本，但在某些应用服务器环境下是禁止这么做的 （这取决于你的操作策略）。</p>
<h4 id="11-5-5-3-Tomcat"><a href="#11-5-5-3-Tomcat" class="headerlink" title="11.5.5.3 Tomcat"></a>11.5.5.3 Tomcat</h4><p>对于部署在Apache Tomcat 5.0或更高版本上的web应用，Spring将一个 <code>TomcatInstrumentableClassLoader</code>注册成为web应用的类加载器。 必须的Tomcat设置如下所示，你可以把它放在Tomcat WAR包根目录下的核心文件<code>server.xml</code>中或放到应用特定的<code>META-INF/context.xml</code>文件中。 Spring的<code>spring-tomcat-weaver.jar</code>需要被包含到Tomcat 的common lib路径下以确保设置生效。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/myWebApp"</span> <span class="attr">docBase</span>=<span class="string">"/my/webApp/location"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loader</span> <span class="attr">loaderClass</span>=<span class="string">"org.springframework.instrument.classloading.tomcat.TomcatInstrumentableClassLoader"</span> <span class="attr">useSystemClassLoaderAsParent</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：<em>当使用LTW时，我们一般推荐使用Tomcat 5.5.20或更高版本。</em> 先前的版本对定制的<code>ClassLoader</code>设置会产生问题。</p>
<p>另外，请考虑使用在Tomcat启动脚本中（见上面）指定由Spring提供的通用虚拟机代理。 这样才能使检测功能在所有已部署的web应用中可用，无论其上运行的是哪种类加载器。</p>
<p>有关更多基于Tomcat织入设置的详细讨论，请参考讨论各种不同Tomcat版本内容的 <span class="exturl" data-url="aHR0cDovL3d3dy5zaG91Y2UucmVuL2FwaS9zcHJpbmcyLjUvY2gxMnMwNi5odG1sI29ybS1qcGEtc2V0dXAtbGNlbWZiLXRvbWNhdA==" title="http://www.shouce.ren/api/spring2.5/ch12s06.html#orm-jpa-setup-lcemfb-tomcat">第 12.6.1.3.1 节 “Tomcat（5.0以上）加载时的织入配置”<i class="fa fa-external-link"></i></span>一节。虽然本节主要关注于 JPA persistence提供者的设置，但也谈到了Tomcat各种特定设置适用于一般加载时织入的情况。</p>
<h4 id="11-5-5-4-WebLogic-OC4J-Resin-GlassFish"><a href="#11-5-5-4-WebLogic-OC4J-Resin-GlassFish" class="headerlink" title="11.5.5.4 WebLogic, OC4J, Resin, GlassFish"></a>11.5.5.4 WebLogic, OC4J, Resin, GlassFish</h4><p>BEA WebLogic（版本10或更高），Oracle的JavaEE容器（OC4J 10.1.3.1或更高）以及 Resin（版本3.1或更高）提供具有本地检测能力的类加载器。 Srping的原生LTW利用这些类加载器来激活AspectJ织入。你可以通过简单地激活之前提到的 <code>context:load-time-weaver</code>来启动LTW功能。具体来说，即你 <em>不</em>需要通过修改启动脚本来添加 <code>-javaagent:path/to/spring-agent.jar</code>。</p>
<p>GlassFish同样也提供了检测能力的类加载器，不过只能在它的EAR环境下使用。 对于GlassFish的web应用，可以使用跟上面tomcat相同的设置。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>8-webmvc-2</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/8-webmvc-2/</url>
    <content><![CDATA[<h1 id="1-Annotated-Controllers"><a href="#1-Annotated-Controllers" class="headerlink" title="1 Annotated Controllers"></a>1 Annotated Controllers</h1><h2 id="1-1-Declaration"><a href="#1-1-Declaration" class="headerlink" title="1.1 Declaration"></a>1.1 Declaration</h2><p>配置后置处理器容器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"org.example.web"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>The following example shows the XML configuration equivalent of the preceding example:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.example.web"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>@RestController</code> is a <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNiZWFucy1tZXRhLWFubm90YXRpb25z" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-meta-annotations">composed annotation<i class="fa fa-external-link"></i></span> that is itself meta-annotated with <code>@Controller</code> and <code>@ResponseBody</code> to indicate a controller whose every method inherits the type-level <code>@ResponseBody</code> annotation and, therefore, writes directly to the response body versus view resolution and rendering with an HTML template.</p>
<h3 id="1-1-1-AOP-Proxies"><a href="#1-1-1-AOP-Proxies" class="headerlink" title="1.1.1 AOP Proxies"></a>1.1.1 AOP Proxies</h3><p>In some cases, you many need to decorate a controller with an AOP proxy at runtime. One example is if you choose to have <code>@Transactional</code> annotations directly on the controller. When this is the case, for controllers specifically, we recommend using class-based proxying. This is typically the default choice with controllers.<br> However, if a controller must implement an interface that is not a Spring Context callback (such as <code>InitializingBean</code>, <code>*Aware</code>, and others), you may need to explicitly configure class-based proxying. <strong>For example, with <code>&lt;tx:annotation-driven/&gt;</code>, you can change to <code>&lt;tx:annotation-driven proxy-target-class=&quot;true&quot;/&gt;</code>.</strong></p>
<h2 id="1-2-Request-Mapping"><a href="#1-2-Request-Mapping" class="headerlink" title="1.2 Request Mapping"></a>1.2 Request Mapping</h2><p>You can use the <code>@RequestMapping</code> annotation to map requests to controllers methods. It has various attributes to <strong>match by URL, HTTP method, request parameters, headers, and media types.</strong> You can use it at the class level to express shared mappings or at the method level to narrow down to a specific endpoint mapping.</p>
<p>There are also HTTP method specific shortcut variants of <code>@RequestMapping</code>:</p>
<ul>
<li><code>@GetMapping</code></li>
<li><code>@PostMapping</code></li>
<li><code>@PutMapping</code></li>
<li><code>@DeleteMapping</code></li>
<li><code>@PatchMapping</code></li>
</ul>
<p>The following example has type and method level mappings:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/persons"</span>) <span class="comment">// 匹配所有http方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.CREATED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(@RequestBody Person person)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-1-URI样式"><a href="#1-2-1-URI样式" class="headerlink" title="1.2.1 URI样式"></a>1.2.1 URI样式</h3><p>You can map requests by using the following glob patterns and wildcards:</p>
<ul>
<li><code>?</code> matches one character</li>
<li><code>*</code> matches zero or more characters within a path segment</li>
<li><code>**</code> match zero or more path segments</li>
</ul>
<p>You can also declare URI variables and access their values with <code>@PathVariable</code>, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/test3/*/&#123;name&#125;"</span>) <span class="comment">// 匹配浏览器访问路径</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">(@PathVariable String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Pet <span class="title">findPet</span><span class="params">(@PathVariable Long ownerId, @PathVariable Long petId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can declare URI variables at the class and method levels, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OwnerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/pets/&#123;petId&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">findPet</span><span class="params">(@PathVariable Long ownerId, @PathVariable Long petId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>URI variables are automatically converted to the appropriate type, or <code>TypeMismatchException</code> is raised. Simple types (<code>int</code>, <code>long</code>, <code>Date</code>, and so on) are supported by default and you can register support for any other data type. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tdHlwZWNvbnZlcnNpb24=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-typeconversion">Type Conversion<i class="fa fa-external-link"></i></span> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-initbinder" target="_blank" rel="noopener">Using <code>DataBinder</code></a>.</p>
<p>您可以显式地命名URI变量(例如，@PathVariable(“customId”))，但是如果名称相同，并且您的代码使用调试信息或Java 8上的-parameters编译器标记进行编译，那么您可以省略这个细节。</p>
<p>The syntax <code>{varName:regex}</code> declares a URI variable with a regular expression that has syntax of <code>{varName:regex}</code>. For example, given URL <code>&quot;/spring-web-3.0.5 .jar&quot;</code>, the following method extracts the name, version, and file extension:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求：http://localhost:8080/ha-1.2.3.haha</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;name:[a-z-]+&#125;-&#123;version:\\d\\.\\d\\.\\d&#125;&#123;ext:\\.[a-z]+&#125;"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle</span><span class="params">(@PathVariable String version, @PathVariable String ext)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> version+<span class="string">"------"</span>+ext; <span class="comment">//1.2.3------.haha</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>URI path patterns can also have embedded <code>${…}</code> placeholders that are resolved on startup by using <code>PropertyPlaceHolderConfigurer</code> against local, system, environment, and other property sources. You can use this, for example, to parameterize a base URL based on some external configuration.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/test2"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(@Value(<span class="string">"$&#123;my.props.name&#125;"</span>)</span> String name)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// application.properties</span></span><br><span class="line"><span class="comment">//my.props.name=张三</span></span><br></pre></td></tr></table></figure>

<p>Spring MVC uses the <code>PathMatcher</code> contract and the <code>AntPathMatcher</code> implementation from <code>spring-core</code> for URI path matching.</p>
<h3 id="1-2-2-样式比较"><a href="#1-2-2-样式比较" class="headerlink" title="1.2.2 样式比较"></a>1.2.2 样式比较</h3><p>When multiple patterns match a URL, they must be compared to find the best match. This is done by using <code>AntPathMatcher.getPatternComparator(String path)</code>, which looks for patterns that are more specific.</p>
<p>如果模式的URI变量计数较低，且单个通配符计数为1，双通配符计数为2，那么模式的特异性就不那么强。在相同的分数下，选择较长的图案。在相同的分数和长度下，选择的模式比通配符有更多的URI变量。</p>
<p>The default mapping pattern (<code>/**</code>) is excluded from scoring and always sorted last. Also, prefix patterns (such as <code>/public/**</code>) are considered less specific than other pattern that do not have double wildcards.</p>
<p>For the full details, see <a href="https://docs.spring.io/spring-framework/docs/5.1.0.RELEASE/javadoc-api/org/springframework/util/AntPathMatcher.AntPatternComparator.html" target="_blank" rel="noopener"><code>AntPatternComparator</code></a> in <a href="https://docs.spring.io/spring-framework/docs/5.1.0.RELEASE/javadoc-api/org/springframework/util/AntPathMatcher.html" target="_blank" rel="noopener"><code>AntPathMatcher</code></a> and also keep mind that you can customize the <a href="https://docs.spring.io/spring-framework/docs/5.1.0.RELEASE/javadoc-api/org/springframework/util/PathMatcher.html" target="_blank" rel="noopener"><code>PathMatcher</code></a>implementation. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctcGF0aC1tYXRjaGluZw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-path-matching">Path Matching<i class="fa fa-external-link"></i></span> in the configuration section.</p>
<h4 id="1-2-2-1-后缀匹配"><a href="#1-2-2-1-后缀匹配" class="headerlink" title="1.2.2.1 后缀匹配"></a>1.2.2.1 后缀匹配</h4><p>By default, Spring MVC performs <code>.*</code> suffix pattern matching so that a controller mapped to <code>/person</code> is also implicitly mapped to <code>/person.*</code>. The file extension is then used to interpret the requested content type to use for the response (that is, instead of the <code>Accept</code> header) — for example, <code>/person.pdf</code>, <code>/person.xml</code>, and others.</p>
<p>当浏览器用于发送难以一致解释的Accept标头时，以这种方式使用文件扩展名是必要的。目前，这已经不再是必须的，使用Accept标头应该是首选的选择。</p>
<p>随着时间的推移，使用文件名扩展在很多方面都存在问题。当与URI变量、路径参数和URI编码的使用重叠时，它会导致歧义。关于基于url的授权和安全性(有关更多细节，请参阅下一节)的推理也变得更加困难。</p>
<p><strong>To completely disable the use of file extensions, you must set both of the following:</strong></p>
<ul>
<li><code>useSuffixPatternMatching(false)</code>, see <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctcGF0aC1tYXRjaGluZw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-path-matching">PathMatchConfigurer<i class="fa fa-external-link"></i></span></li>
<li><code>favorPathExtension(false)</code>, see <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctY29udGVudC1uZWdvdGlhdGlvbg==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-content-negotiation">ContentNeogiationConfigurer<i class="fa fa-external-link"></i></span></li>
</ul>
<p>基于URL的内容协商仍然很有用(例如，在浏览器中输入URL时)。为了实现这一点，我们推荐一种基于查询参数的策略，以避免文件扩展名带来的大多数问题。或者，如果必须使用文件扩展名，可以考虑通过ContentNeogiationConfigurer的mediaTypes属性将它们限制为一组显式注册的扩展名。</p>
<h4 id="1-2-2-2-Suffix-Match-and-RFD"><a href="#1-2-2-2-Suffix-Match-and-RFD" class="headerlink" title="1.2.2.2 Suffix Match and RFD"></a>1.2.2.2 Suffix Match and RFD</h4><p>反射文件下载(RFD)攻击与XSS类似，它依赖于响应中反映的请求输入(例如查询参数和URI变量)。然而，RFD攻击并没有将JavaScript插入HTML中，而是依赖于浏览器切换来执行下载，并将响应作为可执行脚本在双击之后处理。</p>
<p>在Spring MVC中，@ResponseBody和ResponseEntity方法存在风险，因为它们可以呈现不同的内容类型，客户可以通过URL路径扩展请求这些内容类型。禁用后缀模式匹配和使用路径扩展进行内容协商降低了风险，但不足以防止RFD攻击。</p>
<p>To prevent RFD attacks, prior to rendering the response body, Spring MVC adds a <code>Content-Disposition:inline;filename=f.txt</code>header to suggest a fixed and safe download file. </p>
<p>只有当URL路径包含一个文件扩展名时才会这样做，该文件扩展名既不是白名单也不是为内容协商显式注册的。然而，当url被直接输入到浏览器中时，它可能会有潜在的副作用。</p>
<p>Many common path extensions are whitelisted by default. Applications with custom <code>HttpMessageConverter</code> implementations can explicitly register file extensions for content negotiation to avoid having a <code>Content-Disposition</code> header added for those extensions. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctY29udGVudC1uZWdvdGlhdGlvbg==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-content-negotiation">Content Types<i class="fa fa-external-link"></i></span>.</p>
<p>See <span class="exturl" data-url="aHR0cHM6Ly9waXZvdGFsLmlvL3NlY3VyaXR5L2N2ZS0yMDE1LTUyMTE=" title="https://pivotal.io/security/cve-2015-5211">CVE-2015-5211<i class="fa fa-external-link"></i></span> for additional recommendations related to RFD.</p>
<h4 id="1-2-2-3-Consumable-Media-Types"><a href="#1-2-2-3-Consumable-Media-Types" class="headerlink" title="1.2.2.3 Consumable Media Types"></a>1.2.2.3 Consumable Media Types</h4><p><strong>匹配浏览器请求的Content-Type类型。</strong></p>
<p><strong>You can narrow the request mapping based on the <code>Content-Type</code> of the request, as the following example shows:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(path = <span class="string">"/pets"</span>, consumes = <span class="string">"application/json"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPet</span><span class="params">(@RequestBody Pet pet)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <code>consumes</code> attribute also supports negation expressions — for example, <code>!text/plain</code> means any content type other than <code>text/plain</code>.</p>
<p>可以在类上设置，但方法设置的会覆盖类级别上的。</p>
<h3 id="1-2-3-Producible-Media-Types"><a href="#1-2-3-Producible-Media-Types" class="headerlink" title="1.2.3 Producible Media Types"></a>1.2.3 Producible Media Types</h3><p><strong>匹配浏览器请求的Accept类型。</strong></p>
<p><strong>You can narrow the request mapping based on the <code>Accept</code> request header and the list of content types that a controller method produces, as the following example shows:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(path = <span class="string">"/pets/&#123;petId&#125;"</span>, produces = <span class="string">"application/json;charset=UTF-8"</span>) </span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pet <span class="title">getPet</span><span class="params">(@PathVariable String petId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Using a <code>produces</code> attribute to narrow the mapping by the content type.</p>
<p>The media type can specify a character set. Negated expressions are supported — for example, <code>!text/plain</code> means any content type other than “text/plain”.</p>
<p>对于JSON内容类型，应该指定UTF-8字符集，即使RFC7159明确声明“本次注册不定义字符集参数”，因为一些浏览器要求它正确解释UTF-8特殊字符。</p>
<p>可以在类级别声明一个shared produces属性。然而，与大多数其他请求映射属性不同的是，当在类级别使用时，方法级别生成属性覆盖而不是扩展类级别声明。</p>
<h3 id="1-2-4-Parameters-headers"><a href="#1-2-4-Parameters-headers" class="headerlink" title="1.2.4 Parameters, headers"></a>1.2.4 Parameters, headers</h3><p>You can narrow request mappings based on request parameter conditions. You can test for the presence of a request parameter (<code>myParam</code>), for the absence of one (<code>!myParam</code>), or for a specific value (<code>myParam=myValue</code>). The following example shows how to test for a specific value:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(path = <span class="string">"/pets/&#123;petId&#125;"</span>, params = <span class="string">"myParam=myValue"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(@PathVariable String petId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Testing whether <code>myParam</code> equals <code>myValue</code>.</p>
</blockquote>
<p>You can also use the same with request header conditions, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(path = <span class="string">"/pets"</span>, headers = <span class="string">"myHeader=myValue"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(@PathVariable String petId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Testing whether <code>myHeader</code> equals <code>myValue</code>.    </p>
</blockquote>
<h3 id="1-2-5-HTTP-HEAD-OPTIONS"><a href="#1-2-5-HTTP-HEAD-OPTIONS" class="headerlink" title="1.2.5 HTTP HEAD, OPTIONS"></a>1.2.5 HTTP HEAD, OPTIONS</h3><p><code>@GetMapping</code> (and <code>@RequestMapping(method=HttpMethod.GET)</code>) support HTTP HEAD transparently for request mapping. Controller methods do not need to change. A response wrapper, applied in <code>javax.servlet.http.HttpServlet</code>, ensures a <code>Content-Length</code> header is set to the number of bytes written (without actually writing to the response).</p>
<p><code>@GetMapping</code> (and <code>@RequestMapping(method=HttpMethod.GET)</code>) are implicitly mapped to and support HTTP HEAD. An HTTP HEAD request is processed as if it were HTTP GET except that, instead of writing the body, the number of bytes are counted and the <code>Content-Length</code> header is set.</p>
<p>By default, HTTP OPTIONS is handled by setting the <code>Allow</code> response header to the list of HTTP methods listed in all <code>@RequestMapping</code> methods that have matching URL patterns.</p>
<p>For a <code>@RequestMapping</code> without HTTP method declarations, the <code>Allow</code> header is set to<code>GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS</code>. Controller methods should always declare the supported HTTP methods (for example, by using the HTTP method specific variants: <code>@GetMapping</code>, <code>@PostMapping</code>, and others).</p>
<p>You can explicitly map the <code>@RequestMapping</code> method to HTTP HEAD and HTTP OPTIONS, but that is not necessary in the common case.</p>
<h3 id="1-2-6-Custom-Annotations"><a href="#1-2-6-Custom-Annotations" class="headerlink" title="1.2.6 Custom Annotations"></a>1.2.6 Custom Annotations</h3><p>Spring MVC supports the use of <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNiZWFucy1tZXRhLWFubm90YXRpb25z" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-meta-annotations">composed annotations<i class="fa fa-external-link"></i></span> for request mapping. Those are annotations that are themselves meta-annotated with <code>@RequestMapping</code> and composed to redeclare a subset (or all) of the <code>@RequestMapping</code> attributes with a narrower, more specific purpose.</p>
<p><code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, and <code>@PatchMapping</code> are examples of composed annotations. They are provided because, arguably, most controller methods should be mapped to a specific HTTP method versus using <code>@RequestMapping</code>, which, by default, matches to all HTTP methods. If you need an example of composed annotations, look at how those are declared.</p>
<p>Spring MVC also supports custom request-mapping attributes with custom request-matching logic. This is a more advanced option that requires subclassing <code>RequestMappingHandlerMapping</code> and overriding the <code>getCustomMethodCondition</code> method, where you can check the custom attribute and return your own <code>RequestCondition</code>.</p>
<h3 id="1-2-7-Explicit-Registrations-编程式"><a href="#1-2-7-Explicit-Registrations-编程式" class="headerlink" title="1.2.7 Explicit Registrations(编程式)"></a>1.2.7 Explicit Registrations(编程式)</h3><p>You can programmatically register handler methods, which you can use for dynamic registrations or for advanced cases, such as different instances of the same handler under different URLs. The following example registers a handler method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1. Inject the target handler and the handler mapping for controllers.</span></span><br><span class="line">	<span class="comment">//2. Prepare the request mapping meta data.</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHandlerMapping</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        RequestMappingHandlerMapping mapping, </span></span></span><br><span class="line"><span class="function"><span class="params">        UserHandler handler)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">	</span><br><span class="line">        RequestMappingInfo info = RequestMappingInfo</span><br><span class="line">                .paths(<span class="string">"/user/&#123;id&#125;"</span>).methods(RequestMethod.GET).build(); </span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 3.Get the handler method.</span></span><br><span class="line">        Method method = UserHandler.class.getMethod("getUser", Long.class); </span><br><span class="line">		<span class="comment">// 4.Add the registration.</span></span><br><span class="line">        mapping.registerMapping(info, handler, method); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-3-Handler-Methods"><a href="#1-3-Handler-Methods" class="headerlink" title="1.3 Handler Methods"></a>1.3 Handler Methods</h2><p><code>@RequestMapping</code> handler methods have a flexible signature and can choose from a range of supported controller method arguments and return values.</p>
<h3 id="1-3-1-方法参数"><a href="#1-3-1-方法参数" class="headerlink" title="1.3.1 方法参数"></a>1.3.1 方法参数</h3><p>The next table describes the supported controller method arguments. <strong>Reactive types are not supported for any arguments.</strong></p>
<p>JDK 8’s <code>java.util.Optional</code> is supported as a method argument in combination with annotations that have a <code>required</code>attribute (for example, <code>@RequestParam</code>, <code>@RequestHeader</code>, and others) and is equivalent to <code>required=false</code>.</p>
<table>
<thead>
<tr>
<th>Controller method argument</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>WebRequest</code>, <code>NativeWebRequest</code></td>
<td>Generic access to request parameters and request and session attributes, without direct use of the Servlet API.</td>
</tr>
<tr>
<td><code>javax.servlet.ServletRequest</code>, <code>javax.servlet.ServletResponse</code></td>
<td>Choose any specific request or response type — for example, <code>ServletRequest</code>, <code>HttpServletRequest</code>, or Spring’s <code>MultipartRequest</code>, <code>MultipartHttpServletRequest</code>.</td>
</tr>
<tr>
<td><code>javax.servlet.http.HttpSession</code></td>
<td>Enforces the presence of a session. As a consequence, such an argument is never <code>null</code>. Note that session access is not thread-safe. Consider setting the<code>RequestMappingHandlerAdapter</code> instance’s <code>synchronizeOnSession</code> flag to <code>true</code> if multiple requests are allowed to concurrently access a session.</td>
</tr>
<tr>
<td><code>javax.servlet.http.PushBuilder</code></td>
<td>Servlet 4.0 push builder API for programmatic HTTP/2 resource pushes. Note that, per the Servlet specification, the injected <code>PushBuilder</code> instance can be null if the client does not support that HTTP/2 feature.</td>
</tr>
<tr>
<td><code>java.security.Principal</code></td>
<td>Currently authenticated user — possibly a specific <code>Principal</code> implementation class if known.</td>
</tr>
<tr>
<td><code>HttpMethod</code>获取访问方法Get|Put等</td>
<td>The HTTP method of the request.</td>
</tr>
<tr>
<td><code>java.util.Locale</code></td>
<td>The current request locale, determined by the most specific <code>LocaleResolver</code>available (in effect, the configured <code>LocaleResolver</code> or <code>LocaleContextResolver</code>).</td>
</tr>
<tr>
<td><code>java.util.TimeZone</code> + <code>java.time.ZoneId</code></td>
<td>The time zone associated with the current request, as determined by a <code>LocaleContextResolver</code>.</td>
</tr>
<tr>
<td><code>java.io.InputStream</code>, <code>java.io.Reader</code></td>
<td>For access to the raw request body as exposed by the Servlet API.</td>
</tr>
<tr>
<td><code>java.io.OutputStream</code>, <code>java.io.Writer</code></td>
<td>For access to the raw response body as exposed by the Servlet API.</td>
</tr>
<tr>
<td><code>@PathVariable</code></td>
<td>For access to URI template variables. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tcmVxdWVzdG1hcHBpbmctdXJpLXRlbXBsYXRlcw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestmapping-uri-templates">URI patterns<i class="fa fa-external-link"></i></span>.</td>
</tr>
<tr>
<td><code>@MatrixVariable</code></td>
<td>For access to name-value pairs in URI path segments. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tbWF0cml4LXZhcmlhYmxlcw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-matrix-variables">Matrix Variables<i class="fa fa-external-link"></i></span>.</td>
</tr>
<tr>
<td><code>@RequestParam</code></td>
<td>For access to the Servlet request parameters. Parameter values are converted to the declared method argument type. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestparam" target="_blank" rel="noopener">Using <code>@RequestParam</code></a>.Note that use of <code>@RequestParam</code> is optional (for example, to set its attributes). See “Any other argument”, at the end of this table.</td>
</tr>
<tr>
<td><code>@RequestHeader</code></td>
<td>For access to request headers. Header values are converted to the declared method argument type. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestheader" target="_blank" rel="noopener">Using <code>@RequestHeader</code></a>.</td>
</tr>
<tr>
<td><code>@CookieValue</code></td>
<td>For access to cookies. Cookies values are converted to the declared method argument type. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-cookievalue" target="_blank" rel="noopener">Using <code>@CookieValue</code></a>.</td>
</tr>
<tr>
<td><code>@RequestBody</code></td>
<td>For access to the HTTP request body. Body content is converted to the declared method argument type by using <code>HttpMessageConverter</code> implementations. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestbody" target="_blank" rel="noopener">Using <code>@RequestBody</code></a>.</td>
</tr>
<tr>
<td><code>HttpEntity&lt;B&gt;</code></td>
<td>For access to request headers and body. The body is converted with <code>HttpMessageConverter</code> implementations. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4taHR0cGVudGl0eQ==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-httpentity">HttpEntity<i class="fa fa-external-link"></i></span>.</td>
</tr>
<tr>
<td><code>@RequestPart</code></td>
<td>For access to a part in a <code>multipart/form-data</code> request. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1tdWx0aXBhcnQtZm9ybXM=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-multipart-forms">Multipart<i class="fa fa-external-link"></i></span>.</td>
</tr>
<tr>
<td><strong><code>java.util.Map</code>, <code>org.springframework.ui.Model</code>, <code>org.springframework.ui.ModelMap</code></strong></td>
<td><strong>For access to the model that is used in HTML controllers and exposed to templates as part of view rendering.</strong></td>
</tr>
<tr>
<td><code>RedirectAttributes</code></td>
<td>Specify attributes to use in case of a redirect (that is, to be appended to the query string) and flash attributes to be stored temporarily until the request after redirect. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1yZWRpcmVjdGluZy1wYXNzaW5nLWRhdGE=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-redirecting-passing-data">Redirect Attributes<i class="fa fa-external-link"></i></span> and <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1mbGFzaC1hdHRyaWJ1dGVz" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-flash-attributes">Flash Attributes<i class="fa fa-external-link"></i></span>.</td>
</tr>
<tr>
<td><code>@ModelAttribute</code></td>
<td>For access to an existing attribute in the model (instantiated if not present) with data binding and validation applied. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-modelattrib-method-args" target="_blank" rel="noopener">Using <code>@ModelAttribute</code></a> as well as <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tbW9kZWxhdHRyaWItbWV0aG9kcw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-modelattrib-methods">Model<i class="fa fa-external-link"></i></span>and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-initbinder" target="_blank" rel="noopener">Using <code>DataBinder</code></a>.Note that use of <code>@ModelAttribute</code> is optional (for example, to set its attributes). See “Any other argument” at the end of this table.</td>
</tr>
<tr>
<td><code>Errors</code>, <code>BindingResult</code></td>
<td>For access to errors from validation and data binding for a command object (that is, a <code>@ModelAttribute</code> argument) or errors from the validation of a <code>@RequestBody</code>or <code>@RequestPart</code> arguments. You must declare an <code>Errors</code>, or <code>BindingResult</code>argument immediately after the validated method argument.</td>
</tr>
<tr>
<td><code>SessionStatus</code> + class-level <code>@SessionAttributes</code></td>
<td>For marking form processing complete, which triggers cleanup of session attributes declared through a class-level <code>@SessionAttributes</code> annotation. See<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-sessionattributes" target="_blank" rel="noopener">Using <code>@SessionAttributes</code></a> for more details.</td>
</tr>
<tr>
<td><code>UriComponentsBuilder</code></td>
<td>For preparing a URL relative to the current request’s host, port, scheme, context path, and the literal part of the servlet mapping. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy11cmktYnVpbGRpbmc=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-uri-building">URI Links<i class="fa fa-external-link"></i></span>.</td>
</tr>
<tr>
<td><code>@SessionAttribute</code></td>
<td>For access to any session attribute, in contrast to model attributes stored in the session as a result of a class-level <code>@SessionAttributes</code> declaration. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-sessionattribute" target="_blank" rel="noopener">Using <code>@SessionAttribute</code></a> for more details.</td>
</tr>
<tr>
<td><code>@RequestAttribute</code></td>
<td>For access to request attributes. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestattrib" target="_blank" rel="noopener">Using <code>@RequestAttribute</code></a> for more details.</td>
</tr>
<tr>
<td>Any other argument</td>
<td>If a method argument is not matched to any of the earlier values in this table and it is a simple type (as determined by <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZnJhbWV3b3JrL2RvY3MvNS4xLjAuUkVMRUFTRS9qYXZhZG9jLWFwaS9vcmcvc3ByaW5nZnJhbWV3b3JrL2JlYW5zL0JlYW5VdGlscy5odG1sI2lzU2ltcGxlUHJvcGVydHktamF2YS5sYW5nLkNsYXNzLQ==" title="https://docs.spring.io/spring-framework/docs/5.1.0.RELEASE/javadoc-api/org/springframework/beans/BeanUtils.html#isSimpleProperty-java.lang.Class-">BeanUtils#isSimpleProperty<i class="fa fa-external-link"></i></span>, it is a resolved as a <code>@RequestParam</code>. Otherwise, it is resolved as a <code>@ModelAttribute</code>.</td>
</tr>
</tbody></table>
<p>1.3.2  </p>
<h3 id="1-3-2-返回值"><a href="#1-3-2-返回值" class="headerlink" title="1.3.2 返回值"></a>1.3.2 返回值</h3><p>The next table describes the supported controller method return values. Reactive types are supported for all return values.</p>
<table>
<thead>
<tr>
<th>Controller method return value</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>@ResponseBody</code></td>
<td>The return value is converted through <code>HttpMessageConverter</code>implementations and written to the response. See <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-responsebody" target="_blank" rel="noopener">Using <code>@ResponseBody</code></a>.</td>
</tr>
<tr>
<td><code>HttpEntity&lt;B&gt;</code>, <code>ResponseEntity&lt;B&gt;</code></td>
<td>The return value that specifies the full response (including HTTP headers and body) is to be converted through <code>HttpMessageConverter</code>implementations and written to the response. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tcmVzcG9uc2VlbnRpdHk=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-responseentity">ResponseEntity<i class="fa fa-external-link"></i></span>.</td>
</tr>
<tr>
<td><code>HttpHeaders</code></td>
<td>For returning a response with headers and no body.</td>
</tr>
<tr>
<td><code>String</code></td>
<td>A view name to be resolved with <code>ViewResolver</code> implementations and used together with the implicit model — determined through command objects and <code>@ModelAttribute</code> methods. The handler method can also programmatically enrich the model by declaring a <code>Model</code> argument (see <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tcmVxdWVzdG1hcHBpbmctcmVnaXN0cmF0aW9u" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestmapping-registration">Explicit Registrations<i class="fa fa-external-link"></i></span>).</td>
</tr>
<tr>
<td><code>View</code></td>
<td>A <code>View</code> instance to use for rendering together with the implicit model — determined through command objects and <code>@ModelAttribute</code> methods. The handler method can also programmatically enrich the model by declaring a <code>Model</code> argument (see <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tcmVxdWVzdG1hcHBpbmctcmVnaXN0cmF0aW9u" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-requestmapping-registration">Explicit Registrations<i class="fa fa-external-link"></i></span>).</td>
</tr>
<tr>
<td><code>java.util.Map</code>, <code>org.springframework.ui.Model</code></td>
<td>Attributes to be added to the implicit model, with the view name implicitly determined through a <code>RequestToViewNameTranslator</code>.</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><code>@ModelAttribute</code></th>
<th>An attribute to be added to the model, with the view name implicitly determined through a <code>RequestToViewNameTranslator</code>.Note that <code>@ModelAttribute</code> is optional. See “Any other return value” at the end of this table.</th>
</tr>
</thead>
<tbody><tr>
<td><code>ModelAndView</code> object</td>
<td>The view and model attributes to use and, optionally, a response status.</td>
</tr>
<tr>
<td><code>void</code></td>
<td>A method with a <code>void</code> return type (or <code>null</code> return value) is considered to have fully handled the response if it also has a <code>ServletResponse</code>, an <code>OutputStream</code> argument, or an <code>@ResponseStatus</code> annotation. The same is also true if the controller has made a positive <code>ETag</code> or <code>lastModified</code>timestamp check (see <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jYWNoaW5nLWV0YWctbGFzdG1vZGlmaWVk" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-caching-etag-lastmodified">Controllers<i class="fa fa-external-link"></i></span> for details).If none of the above is true, a <code>void</code> return type can also indicate “no response body” for REST controllers or a default view name selection for HTML controllers.</td>
</tr>
<tr>
<td><strong><code>DeferredResult&lt;V&gt;</code></strong></td>
<td><strong>Produce any of the preceding return values asynchronously from any thread — for example, as a result of some event or callback. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmM=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async">Asynchronous Requests<i class="fa fa-external-link"></i></span> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-deferredresult" target="_blank" rel="noopener">Using <code>DeferredResult</code></a>.</strong></td>
</tr>
<tr>
<td><strong><code>Callable&lt;V&gt;</code></strong></td>
<td><strong>Produce any of the above return values asynchronously in a Spring MVC-managed thread. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmM=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async">Asynchronous Requests<i class="fa fa-external-link"></i></span> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-callable" target="_blank" rel="noopener">Using <code>Callable</code></a>.</strong></td>
</tr>
</tbody></table>
<h3 id="1-3-3-Matrix-Variables"><a href="#1-3-3-Matrix-Variables" class="headerlink" title="1.3.3   Matrix  Variables"></a>1.3.3   Matrix  Variables</h3><ul>
<li>示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET /pets/42;q=11;r=22</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/pets/&#123;petId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(@PathVariable String petId, @MatrixVariable <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// petId == 42</span></span><br><span class="line">    <span class="comment">// q == 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Given that all path segments may contain matrix variables, you may sometimes need to disambiguate which path variable the matrix variable is expected to be in. The following example shows how to do so:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET /owners/42;q=11/pets/21;q=22</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @MatrixVariable(name=<span class="string">"q"</span>, pathVar=<span class="string">"ownerId"</span>)</span> <span class="keyword">int</span> q1,</span></span><br><span class="line"><span class="function">        @<span class="title">MatrixVariable</span><span class="params">(name=<span class="string">"q"</span>, pathVar=<span class="string">"petId"</span>)</span> <span class="keyword">int</span> q2) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// q1 == 11</span></span><br><span class="line">    <span class="comment">// q2 == 22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A matrix variable may be defined as optional and a default value specified, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET /pets/42</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/pets/&#123;petId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(@MatrixVariable(required=<span class="keyword">false</span>, defaultValue=<span class="string">"1"</span>)</span> <span class="keyword">int</span> q) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// q == 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To get all matrix variables, you can use a <code>MultiValueMap</code>, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET /owners/42;q=11;r=12/pets/21;q=22;s=23</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @MatrixVariable MultiValueMap&lt;String, String&gt; matrixVars,</span></span></span><br><span class="line"><span class="function"><span class="params">        @MatrixVariable(pathVar=<span class="string">"petId"</span>)</span> MultiValueMap&lt;String, String&gt; petMatrixVars) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// matrixVars: ["q" : [11,22], "r" : 12, "s" : 23]</span></span><br><span class="line">    <span class="comment">// petMatrixVars: ["q" : 22, "s" : 23]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Note that you need to enable the use of matrix variables. In the MVC Java configuration, you need to set a <code>UrlPathHelper</code> with <code>removeSemicolonContent=false</code> through <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctcGF0aC1tYXRjaGluZw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-path-matching">Path Matching<i class="fa fa-external-link"></i></span>. In the MVC XML namespace, you can set <code>&lt;mvc:annotation-driven enable-matrix-variables=&quot;true&quot;/&gt;</code>.</p>
<h3 id="1-3-4-Using-RequestParam"><a href="#1-3-4-Using-RequestParam" class="headerlink" title="1.3.4 Using @RequestParam"></a>1.3.4 Using @RequestParam</h3><p>You can use the <code>@RequestParam</code> annotation to bind Servlet request parameters (that is, query parameters or form data) to a method argument in a controller.</p>
<p>The following example shows how to do so:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test2"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(@RequestParam(required = <span class="keyword">false</span>, value = <span class="string">"name"</span>)</span> String name) 	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"姓名："</span> + name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-5-Using-RequestHeader"><a href="#1-3-5-Using-RequestHeader" class="headerlink" title="1.3.5 Using @RequestHeader"></a>1.3.5 Using @RequestHeader</h3><p>You can use the <code>@RequestHeader</code> annotation to bind a request header to a method argument in a controller.</p>
<p>Consider the following request, with headers:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host                    localhost:8080</span><br><span class="line">Accept                  text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9</span><br><span class="line">Accept-Language         fr,en-gb;q&#x3D;0.7,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding         gzip,deflate</span><br><span class="line">Accept-Charset          ISO-8859-1,utf-8;q&#x3D;0.7,*;q&#x3D;0.7</span><br><span class="line">Keep-Alive              300</span><br></pre></td></tr></table></figure>

<p>The following example gets the value of the <code>Accept-Encoding</code> and <code>Keep-Alive</code> headers:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestHeader(<span class="string">"Accept-Encoding"</span>)</span> String encoding, </span></span><br><span class="line"><span class="function">        @<span class="title">RequestHeader</span><span class="params">(<span class="string">"Keep-Alive"</span>)</span> <span class="keyword">long</span> keepAlive) </span>&#123; </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If the target method parameter type is not <code>String</code>, type conversion is automatically applied. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tdHlwZWNvbnZlcnNpb24=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-typeconversion">Type Conversion<i class="fa fa-external-link"></i></span>.</p>
<p>When an <code>@RequestHeader</code> annotation is used on a <code>Map&lt;String, String&gt;</code>, <code>MultiValueMap&lt;String, String&gt;</code>, or <code>HttpHeaders</code>argument, the map is populated with all header values.</p>
<p>Built-in support is available for converting a comma-separated string into an array or collection of strings or other types known to the type conversion system. For example, a method parameter annotated with <code>@RequestHeader(&quot;Accept&quot;)</code> can be of type <code>String</code> but also <code>String[]</code> or <code>List&lt;String&gt;</code>.</p>
<h3 id="1-3-6-Using-CookieValue"><a href="#1-3-6-Using-CookieValue" class="headerlink" title="1.3.6 Using @CookieValue"></a>1.3.6 Using @<code>CookieValue</code></h3><p>You can use the <code>@CookieValue</code> annotation to bind the value of an HTTP cookie to a method argument in a controller.</p>
<p>Consider a request with the following cookie:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSESSIONID&#x3D;415A4AC178C59DACE0B2C9CA727CDD84</span><br></pre></td></tr></table></figure>

<p>The following example shows how to get the cookie value:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span> String cookie) </span>&#123; </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-7-Using-ModelAttribute"><a href="#1-3-7-Using-ModelAttribute" class="headerlink" title="1.3.7 Using @ModelAttribute"></a>1.3.7 Using <code>@ModelAttribute</code></h3><p>您可以在方法参数上使用@ModelAttribute注释从模型访问属性，或者在不存在的情况下实例化属性。模型属性还与HTTP Servlet请求参数的值重叠，这些参数的名称与字段名称匹配。这被称为数据绑定，它使您不必解析和转换单个查询参数和表单字段。下面的例子展示了如何做到这一点:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processSubmit</span><span class="params">(@ModelAttribute Pet pet)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>The <code>Pet</code> instance above is resolved as follows:</p>
<ul>
<li>From the model if already added by using <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tbW9kZWxhdHRyaWItbWV0aG9kcw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-modelattrib-methods">Model<i class="fa fa-external-link"></i></span>.</li>
<li>From the HTTP session by using <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-sessionattributes" target="_blank" rel="noopener">Using <code>@SessionAttributes</code></a>.</li>
<li>From a URI path variable passed through a <code>Converter</code> (see the next example).</li>
<li>From the invocation of a default constructor.</li>
<li>From the invocation of a “primary constructor” with arguments that match to Servlet request parameters. Argument names are determined through JavaBeans <code>@ConstructorProperties</code> or through runtime-retained parameter names in the bytecode.</li>
</ul>
<p>While it is common to use a <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tbW9kZWxhdHRyaWItbWV0aG9kcw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-modelattrib-methods">Model<i class="fa fa-external-link"></i></span> to populate the model with attributes, one other alternative is to rely on a <code>Converter&lt;String, T&gt;</code> in combination with a URI path variable convention. In the following example, the model attribute name, <code>account</code>, matches the URI path variable, <code>account</code>, and the <code>Account</code> is loaded by passing the <code>String</code> account number through a registered <code>Converter&lt;String, Account&gt;</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/accounts/&#123;account&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@ModelAttribute(<span class="string">"account"</span>)</span> Account account) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After the model attribute instance is obtained, data binding is applied. The <code>WebDataBinder</code> class matches Servlet request parameter names (query parameters and form fields) to field names on the target <code>Object</code>. Matching fields are populated after type conversion is applied, where necessary. For more on data binding (and validation), see <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCN2YWxpZGF0aW9u" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation">Validation<i class="fa fa-external-link"></i></span>. For more on customizing data binding, see <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-initbinder" target="_blank" rel="noopener">Using <code>DataBinder</code></a>.</p>
<p>Data binding can result in errors. By default, a <code>BindException</code> is raised. However, to check for such errors in the controller method, you can add a <code>BindingResult</code> argument immediately next to the <code>@ModelAttribute</code>, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processSubmit</span><span class="params">(@ModelAttribute(<span class="string">"pet"</span>)</span> Pet pet, BindingResult result) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"petForm"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In some cases, you may want access to a model attribute without data binding. For such cases, you can inject the <code>Model</code> into the controller and access it directly or, alternatively, set <code>@ModelAttribute(binding=false)</code>, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AccountForm <span class="title">setUpForm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AccountForm();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">findAccount</span><span class="params">(@PathVariable String accountId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accountRepository.findOne(accountId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"update"</span>)  <span class="comment">// 数据不绑定</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@Valid AccountUpdateForm form, BindingResult result,</span></span></span><br><span class="line"><span class="function"><span class="params">        @ModelAttribute(binding=<span class="keyword">false</span>)</span> Account account) </span>&#123; </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>绑定时验证</strong></li>
</ul>
<p>You can automatically apply validation after data binding by adding the <code>javax.validation.Valid</code> annotation or Spring’s <code>@Validated</code> annotation (ee <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCN2YWxpZGF0aW9uLWJlYW52YWxpZGF0aW9u" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation-beanvalidation">Bean validation<i class="fa fa-external-link"></i></span> and <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCN2YWxpZGF0aW9u" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation">Spring validation<i class="fa fa-external-link"></i></span>). The following example shows how to do so:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;/edit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processSubmit</span><span class="params">(@Valid @ModelAttribute(<span class="string">"pet"</span>)</span> Pet pet, BindingResult result) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"petForm"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-8-Using-SessionAttributes"><a href="#1-3-8-Using-SessionAttributes" class="headerlink" title="1.3.8 Using @SessionAttributes"></a>1.3.8 Using <code>@SessionAttributes</code></h3><p>@SessionAttributes用于在请求之间的HTTP Servlet会话中存储模型属性。它是一个类类型级注释，声明特定控制器使用的会话属性。这通常列出模型属性的名称或模型属性的类型，这些属性应该透明地存储在会话中，以便后续请求访问。</p>
<p>The following example uses a <code>@SessionAttributes</code> annotation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"pet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在第一个请求中，当一个名为pet的模型属性添加到模型中时，它会自动提升到HTTP Servlet会话中并保存。直到另一个控制器方法使用一个SessionStatus方法参数来清除存储为止，它仍然存在，如下例所示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"pet"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditPetForm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/pets/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle</span><span class="params">(Pet pet, BindingResult errors, SessionStatus status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (errors.hasErrors) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">            status.setComplete();</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-9-Using-SessionAttribute"><a href="#1-3-9-Using-SessionAttribute" class="headerlink" title="1.3.9 Using @SessionAttribute"></a>1.3.9 Using <code>@SessionAttribute</code></h3><p>If you need access to pre-existing session attributes that are managed globally (that is, outside the controller — for example, by a filter) and may or may not be present, you can use the <code>@SessionAttribute</code> annotation on a method parameter, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle</span><span class="params">(@SessionAttribute User user)</span> </span>&#123; </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>For use cases that require adding or removing session attributes, consider injecting<code>org.springframework.web.context.request.WebRequest</code> or <code>javax.servlet.http.HttpSession</code> into the controller method.</p>
<p>For temporary storage of model attributes in the session as part of a controller workflow, consider using <code>@SessionAttributes</code> as described in <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-sessionattributes" target="_blank" rel="noopener">Using <code>@SessionAttributes</code></a>.</p>
<h3 id="1-3-10-Using-RequestAttribute"><a href="#1-3-10-Using-RequestAttribute" class="headerlink" title="1.3.10  Using @RequestAttribute"></a>1.3.10  Using <code>@RequestAttribute</code></h3><p>Similar to <code>@SessionAttribute</code>, you can use the <code>@RequestAttribute</code> annotations to access pre-existing request attributes created earlier (for example, by a Servlet <code>Filter</code> or <code>HandlerInterceptor</code>):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle</span><span class="params">(@RequestAttribute Client client)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-11-Redirect-Attributes"><a href="#1-3-11-Redirect-Attributes" class="headerlink" title="1.3.11 Redirect Attributes"></a>1.3.11 Redirect Attributes</h3><p>默认情况下，所有模型属性都被认为是作为URI模板变量在重定向URL中公开的。在其余的属性中，那些是基本类型或基本类型集合或数组的属性被自动附加为查询参数。</p>
<p>如果专门为重定向准备了模型实例，那么将原始类型属性附加为查询参数可能是所需的结果。<strong>但是，在带注释的控制器中，模型可以包含为呈现目的而添加的其他属性(例如，下拉字段值)</strong>。为了避免在URL中出现这样的属性，@RequestMapping方法可以声明类型为RedirectAttributes的参数，并使用它指定精确的属性以使RedirectView可用。如果方法重定向，则使用RedirectAttributes的内容。否则，将使用模型的内容。</p>
<p>RequestMappingHandlerAdapter提供了一个名为ignoreDefaultModelOnRedirect的标记，您可以使用它来指示，如果控制器方法重定向，则不应该使用默认模型的内容。相反，控制器方法应该声明类型为RedirectAttributes的属性，否则，不应该将任何属性传递给RedirectView。MVC名称空间和MVC Java配置都将此标志设置为false，以保持向后兼容性。然而，对于新应用程序，我们建议将其设置为true。</p>
<p>Note that URI template variables from the present request are automatically made available when expanding a redirect URL, and you need explicitly add them through <code>Model</code> or <code>RedirectAttributes</code>. The following example shows how to define a redirect:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/files/&#123;path&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:files/&#123;path&#125;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Another way of passing data to the redirect target is by using flash attributes. Unlike other redirect attributes, flash attributes are saved in the HTTP session (and, hence, do not appear in the URL). See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1mbGFzaC1hdHRyaWJ1dGVz" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-flash-attributes">Flash Attributes<i class="fa fa-external-link"></i></span> for more information.</p>
<h3 id="1-3-12-Flash-Attributes"><a href="#1-3-12-Flash-Attributes" class="headerlink" title="1.3.12  Flash Attributes"></a>1.3.12  Flash Attributes</h3><p>Flash属性为一个请求提供了一种方法来存储用于另一个请求的属性。这是重定向时最常见的需求——例如，后直接获取模式。Flash属性在重定向(通常在会话中)之前被临时保存，以便在重定向后对请求可用，并立即删除。</p>
<p>Spring MVC有两个支持flash属性的主要抽象。FlashMap用于保存flash属性，而FlashMapManager用于存储、检索和管理FlashMap实例。</p>
<p>Flash属性支持总是“on”，不需要显式启用。但是，如果不使用，它就不会导致HTTP会话创建。对于每个请求，都有一个“输入”FlashMap，其中包含从前一个请求传递的属性(如果有的话)，以及一个“输出”FlashMap，其中包含为后续请求保存的属性。两个FlashMap实例都可以通过requestcontext中的静态方法从Spring MVC的任何地方访问。</p>
<p>带注释的控制器通常不需要直接使用FlashMap。相反，@RequestMapping方法可以接受类型为RedirectAttributes的参数，并用它为重定向场景添加flash属性。通过RedirectAttributes添加的Flash属性会自动传播到“output”FlashMap。同样，在重定向之后，“输入”FlashMap的属性将自动添加到服务于目标URL的控制器的模型中。</p>
<ul>
<li>将请求匹配到flash属性</li>
</ul>
<p>flash属性的概念存在于许多其他web框架中，并且有时会暴露于并发问题中。这是因为，根据定义，flash属性要存储到下一个请求。然而，下一个请求可能不是预期的接收者，而是另一个异步请求(例如，轮询或资源请求)，在这种情况下，flash属性删除得太早。为了减少发生这种问题的可能性，RedirectView会自动用目标重定向URL的路径和查询参数来标记FlashMap实例。反过来，默认的FlashMapManager在查找输入FlashMap时，会将该信息与传入的请求匹配。这并没有完全消除并发问题的可能性，但是通过重定向URL中已经提供的信息，可以大大减少并发问题。因此，我们建议您将flash属性主要用于重定向场景。</p>
<h3 id="1-3-13-Multipart-RequestPart"><a href="#1-3-13-Multipart-RequestPart" class="headerlink" title="1.3.13 Multipart-@RequestPart"></a>1.3.13 Multipart-<code>@RequestPart</code></h3><p>After a <code>MultipartResolver</code> has been <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1tdWx0aXBhcnQ=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-multipart">enabled<i class="fa fa-external-link"></i></span>, the content of POST requests with <code>multipart/form-data</code> is parsed and accessible as regular request parameters. The following example accesses one regular form field and one uploaded file:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/form"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleFormUpload</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(<span class="string">"file"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = file.getBytes();</span><br><span class="line">            <span class="comment">// store the bytes somewhere</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:uploadSuccess"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:uploadFailure"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>WEB3.0 文件解析</li>
</ul>
<p>When you use Servlet 3.0 multipart parsing, you can also use <code>javax.servlet.http.Part</code>, instead of Spring’s <code>MultipartFile</code>, as a method argument</p>
<ul>
<li>绑定文件到对象上</li>
</ul>
<p>You can also use multipart content as part of data binding to a <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tbW9kZWxhdHRyaWItbWV0aG9kLWFyZ3M=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-modelattrib-method-args">command object<i class="fa fa-external-link"></i></span>. For example, the form field and file from the preceding example could be fields on a form object, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MultipartFile file;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/form"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleFormUpload</span><span class="params">(MyForm form, BindingResult errors)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!form.getFile().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = form.getFile().getBytes();</span><br><span class="line">            <span class="comment">// store the bytes somewhere</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:uploadSuccess"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:uploadFailure"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>RESTful service scenario</li>
</ul>
<p>Multipart requests can also be submitted from non-browser clients in a RESTful service scenario. The following example shows a file with JSON:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;someUrl</span><br><span class="line">Content-Type: multipart&#x2F;mixed</span><br><span class="line"></span><br><span class="line">--edt7Tfrdusa7r3lNQc79vXuhIIMlatb7PQg7Vp</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;meta-data&quot;</span><br><span class="line">Content-Type: application&#x2F;json; charset&#x3D;UTF-8</span><br><span class="line">Content-Transfer-Encoding: 8bit</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;value&quot;</span><br><span class="line">&#125;</span><br><span class="line">--edt7Tfrdusa7r3lNQc79vXuhIIMlatb7PQg7Vp</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;file-data&quot;; filename&#x3D;&quot;file.properties&quot;</span><br><span class="line">Content-Type: text&#x2F;xml</span><br><span class="line">Content-Transfer-Encoding: 8bit</span><br><span class="line">... File Data ...</span><br></pre></td></tr></table></figure>

<p>You can access the “meta-data” part with <code>@RequestParam</code> as a <code>String</code> but you’ll probably want it deserialized from JSON (similar to <code>@RequestBody</code>). Use the <code>@RequestPart</code> annotation to access a multipart after converting it with an<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2ludGVncmF0aW9uLmh0bWwjcmVzdC1tZXNzYWdlLWNvbnZlcnNpb24=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#rest-message-conversion">HttpMessageConverter<i class="fa fa-external-link"></i></span>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle</span><span class="params">(@RequestPart(<span class="string">"meta-data"</span>)</span> MetaData metadata,</span></span><br><span class="line"><span class="function">        @<span class="title">RequestPart</span><span class="params">(<span class="string">"file-data"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can use <code>@RequestPart</code> in combination with <code>javax.validation.Valid</code> or use Spring’s <code>@Validated</code> annotation, both of which cause Standard Bean Validation to be applied. By default, validation errors cause a <code>MethodArgumentNotValidException</code>, which is turned into a 400 (BAD_REQUEST) response. Alternatively, you can handle validation errors locally within the controller through an <code>Errors</code> or <code>BindingResult</code> argument, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle</span><span class="params">(@Valid @RequestPart(<span class="string">"meta-data"</span>)</span> MetaData metadata,</span></span><br><span class="line"><span class="function">        BindingResult result) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-14-Using-RequestBody"><a href="#1-3-14-Using-RequestBody" class="headerlink" title="1.3.14 Using @RequestBody"></a>1.3.14 Using <code>@RequestBody</code></h3><p>You can use the <code>@RequestBody</code> annotation to have the request body read and deserialized into an <code>Object</code> through an <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#rest-message-conversion" target="_blank" rel="noopener"><code>HttpMessageConverter</code></a>. The following example uses a <code>@RequestBody</code> argument:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/accounts"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@RequestBody Account account)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can use the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctbWVzc2FnZS1jb252ZXJ0ZXJz" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-message-converters">Message Converters<i class="fa fa-external-link"></i></span> option of the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWc=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config">MVC Config<i class="fa fa-external-link"></i></span> to configure or customize message conversion.</p>
<p>You can use <code>@RequestBody</code> in combination with <code>javax.validation.Valid</code> or Spring’s <code>@Validated</code> annotation, both of which cause Standard Bean Validation to be applied. By default, validation errors cause a <code>MethodArgumentNotValidException</code>, which is turned into a 400 (BAD_REQUEST) response. Alternatively, you can handle validation errors locally within the controller through an <code>Errors</code> or <code>BindingResult</code> argument, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/accounts"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@Valid @RequestBody Account account, BindingResult result)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-15-Using-ResponseBody"><a href="#1-3-15-Using-ResponseBody" class="headerlink" title="1.3.15 Using @ResponseBody"></a>1.3.15 Using <code>@ResponseBody</code></h3><p>You can use the <code>@ResponseBody</code> annotation on a method to have the return serialized to the response body through an<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2ludGVncmF0aW9uLmh0bWwjcmVzdC1tZXNzYWdlLWNvbnZlcnNpb24=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#rest-message-conversion">HttpMessageConverter<i class="fa fa-external-link"></i></span>. The following listing shows an example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/accounts/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@ResponseBody</code> is also supported at the class level, in which case it is inherited by all controller methods. This is the effect of <code>@RestController</code>, which is nothing more than a meta-annotation marked with <code>@Controller</code> and <code>@ResponseBody</code>.</p>
<p>You can use <code>@ResponseBody</code> with reactive types. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmM=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async">Asynchronous Requests<i class="fa fa-external-link"></i></span> and <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmMtcmVhY3RpdmUtdHlwZXM=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-reactive-types">Reactive Types<i class="fa fa-external-link"></i></span> for more details.</p>
<p>You can use the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctbWVzc2FnZS1jb252ZXJ0ZXJz" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-message-converters">Message Converters<i class="fa fa-external-link"></i></span> option of the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWc=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config">MVC Config<i class="fa fa-external-link"></i></span> to configure or customize message conversion.</p>
<p>You can combine <code>@ResponseBody</code> methods with JSON serialization views. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tamFja3Nvbg==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-jackson">Jackson JSON<i class="fa fa-external-link"></i></span> for details.</p>
<h3 id="1-3-16-ResponseEntity"><a href="#1-3-16-ResponseEntity" class="headerlink" title="1.3.16 ResponseEntity"></a>1.3.16 ResponseEntity</h3><p><code>ResponseEntity</code> is more or less identical to using <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-responsebody" target="_blank" rel="noopener">Using <code>@ResponseBody</code></a> but is based on a container object that specifies request headers and body. The following listing shows an example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/something"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    URI location = ... ;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.created(location).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-17-Jackson-JSON-JsonView"><a href="#1-3-17-Jackson-JSON-JsonView" class="headerlink" title="1.3.17  Jackson JSON-@JsonView"></a>1.3.17  Jackson JSON-<code>@JsonView</code></h3><p>Spring MVC provides built-in support for <span class="exturl" data-url="aHR0cDovL3dpa2kuZmFzdGVyeG1sLmNvbS9KYWNrc29uSnNvblZpZXdz" title="http://wiki.fasterxml.com/JacksonJsonViews">Jackson’s Serialization Views<i class="fa fa-external-link"></i></span>, which allow rendering only a subset of all fields in an <code>Object</code>. To use it with <code>@ResponseBody</code> or <code>ResponseEntity</code> controller methods, you can use Jackson’s <code>@JsonView</code> annotation to activate a serialization view class, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="meta">@JsonView</span>(User.WithoutPasswordView<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">User</span> <span class="title">getUser</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"eric"</span>, <span class="string">"7!jd#h23"</span>); <span class="comment">// 浏览器显示为&#123;"username":"eric"&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WithoutPasswordView</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WithPasswordView</span> <span class="keyword">extends</span> <span class="title">WithoutPasswordView</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView</span>(WithoutPasswordView<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">getUsername</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView</span>(WithPasswordView<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">getPassword</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@JsonView</code> allows an array of view classes, but you can specify only one per controller method. If you need to activate multiple views, you can use a composite interface.</p>
<p>For controllers that rely on view resolution, you can add the serialization view class to the model, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">AbstractController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, <span class="keyword">new</span> User(<span class="string">"eric"</span>, <span class="string">"7!jd#h23"</span>));</span><br><span class="line">        model.addAttribute(JsonView<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(),</span></span><br><span class="line"><span class="class">                           <span class="title">User</span>.<span class="title">WithoutPasswordView</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"userView"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-Model-ModelAttribute"><a href="#1-4-Model-ModelAttribute" class="headerlink" title="1.4 Model-@ModelAttribute"></a>1.4 Model-<code>@ModelAttribute</code></h2><p>You can use the <code>@ModelAttribute</code> annotation:</p>
<ul>
<li>On a <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tbW9kZWxhdHRyaWItbWV0aG9kLWFyZ3M=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-modelattrib-method-args">method argument<i class="fa fa-external-link"></i></span> in <code>@RequestMapping</code> methods to create or access an <code>Object</code> from the model and to bind it to the request through a <code>WebDataBinder</code>.-<strong>方法级别数据绑定</strong></li>
<li>As a method-level annotation in <code>@Controller</code> or <code>@ControllerAdvice</code> classes that help to initialize the model prior to any <code>@RequestMapping</code> method invocation.-<strong>类级别使用</strong></li>
<li>On a <code>@RequestMapping</code> method to mark its return value is a model attribute.-<strong>响应值</strong></li>
</ul>
<p>A controller can have any number of <code>@ModelAttribute</code> methods. All such methods <strong>are invoked before <code>@RequestMapping</code> methods in the same controller.</strong> </p>
<p>A <code>@ModelAttribute</code> method can also be shared across controllers through <code>@ControllerAdvice</code>. See the section on <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tY29udHJvbGxlci1hZHZpY2U=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-controller-advice">Controller Advice<i class="fa fa-external-link"></i></span> for more details.</p>
<p><code>@ModelAttribute</code> methods have flexible method signatures. They support many of the same arguments as <code>@RequestMapping</code>methods, except for <code>@ModelAttribute</code> itself or anything related to the request body.</p>
<p>The following example shows a <code>@ModelAttribute</code> method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">populateModel</span><span class="params">(@RequestParam String number, Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(accountRepository.findAccount(number));</span><br><span class="line">    <span class="comment">// add more ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The following example adds only one attribute:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">addAccount</span><span class="params">(@RequestParam String number)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accountRepository.findAccount(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还可以使用@ModelAttribute作为@RequestMapping方法上的方法级注释，在这种情况下，@RequestMapping方法的返回值被解释为模型属性。这通常不是必需的，因为这是HTML控制器的默认行为，除非返回值是一个字符串，否则将被解释为一个视图名。</p>
<p> <code>@ModelAttribute</code> can also help to customize the model attribute name, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/accounts/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@ModelAttribute</span>(<span class="string">"myAccount"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> account;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-5-DataBind"><a href="#1-5-DataBind" class="headerlink" title="1.5 DataBind"></a>1.5 DataBind</h2><p><code>@Controller</code> or <code>@ControllerAdvice</code> classes can have <code>@InitBinder</code> methods that initialize instances of <code>WebDataBinder</code>, and those, in turn, can:</p>
<ul>
<li>Bind request parameters (that is, form or query data) to a model object.</li>
<li>Convert String-based request values (such as request parameters, path variables, headers, cookies, and others) to the target type of controller method arguments.</li>
<li>Format model object values as <code>String</code> values when rendering HTML forms.</li>
</ul>
<p><code>@InitBinder</code> methods can register controller-specific <code>java.bean.PropertyEditor</code> or Spring <code>Converter</code> and <code>Formatter</code>components. In addition, you can use the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctY29udmVyc2lvbg==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-conversion">MVC config<i class="fa fa-external-link"></i></span> to register <code>Converter</code> and <code>Formatter</code> types in a globally shared <code>FormattingConversionService</code>.</p>
<p><code>@InitBinder</code> methods support many of the same arguments that <code>@RequestMapping</code> methods do, <strong>except for <code>@ModelAttribute</code>(command object) arguments.</strong> Typically, they are declared with a <code>WebDataBinder</code> argument (for registrations) and a <code>void</code> return value. The following listing shows an example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        dateFormat.setLenient(<span class="keyword">false</span>);</span><br><span class="line">        binder.registerCustomEditor(Date<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">CustomDateEditor</span>(<span class="title">dateFormat</span>, <span class="title">false</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Alternatively, when you use a <code>Formatter</code>-based setup through a shared <code>FormattingConversionService</code>, you can re-use the same approach and register controller-specific <code>Formatter</code> implementations, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder</span> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        binder.addCustomFormatter(<span class="keyword">new</span> DateFormatter(<span class="string">"yyyy-MM-dd"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-6-Exceptions"><a href="#1-6-Exceptions" class="headerlink" title="1.6 Exceptions"></a>1.6 Exceptions</h2><p><code>@Controller</code> and <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tY29udHJvbGxlci1hZHZpY2U=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-controller-advice">@ControllerAdvice<i class="fa fa-external-link"></i></span> classes can have <code>@ExceptionHandler</code> methods to handle exceptions from controller methods, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handle</span><span class="params">(IOException ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该异常可以与正在传播的顶级异常(即直接抛出IOException)匹配，也可以与顶级包装器异常中的直接原因匹配(例如，包装在IllegalStateException中的IOException)。</p>
<p>对于匹配异常类型，最好将目标异常声明为方法参数，如前面的示例所示。当多个异常方法匹配时，根异常匹配通常优于原因异常匹配。更具体地说，ExceptionDepthComparator用于根据抛出异常类型的深度对异常进行排序。</p>
<p>Alternatively, the annotation declaration may narrow the exception types to match, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(&#123;FileSystemException<span class="class">.<span class="keyword">class</span>, <span class="title">RemoteException</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">String</span>&gt; <span class="title">handle</span>(<span class="title">IOException</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can even use a list of specific exception types with a very generic argument signature, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(&#123;FileSystemException<span class="class">.<span class="keyword">class</span>, <span class="title">RemoteException</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">String</span>&gt; <span class="title">handle</span>(<span class="title">Exception</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>异常处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">// 全局,跨控制器。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ExceptionHandler</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">doException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> e.getMessage()+<span class="string">"错误！11"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-7-Controller-Advice"><a href="#1-7-Controller-Advice" class="headerlink" title="1.7 Controller Advice"></a>1.7 Controller Advice</h2><p>Typically <code>@ExceptionHandler</code>, <code>@InitBinder</code>, and <code>@ModelAttribute</code> methods apply within the <code>@Controller</code> class (or class hierarchy) in which they are declared. If you want such methods to <strong>apply more globally (across controllers)</strong>, you can declare them in a class marked with <code>@ControllerAdvice</code> or <code>@RestControllerAdvice</code>.</p>
<p><code>@ControllerAdvice</code> is marked with <code>@Component</code>, which means such classes can be registered as Spring beans through <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNiZWFucy1qYXZhLWluc3RhbnRpYXRpbmctY29udGFpbmVyLXNjYW4=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-java-instantiating-container-scan">component scanning<i class="fa fa-external-link"></i></span>. <code>@RestControllerAdvice</code> is also a meta-annotation marked with both <code>@ControllerAdvice</code> and<code>@ResponseBody</code>, which essentially means <code>@ExceptionHandler</code> methods are rendered to the response body through message conversion (versus view resolution or template rendering).</p>
<p>On startup, the infrastructure classes for <code>@RequestMapping</code> and <code>@ExceptionHandler</code> methods detect Spring beans of type <code>@ControllerAdvice</code> and then apply their methods at runtime. Global <code>@ExceptionHandler</code> methods (from an <code>@ControllerAdvice</code>) are applied <em>after</em> local ones (from the <code>@Controller</code>). By contrast, global <code>@ModelAttribute</code> and <code>@InitBinder</code> methods are applied <em>before</em> local ones.</p>
<ul>
<li><strong>默认在所有控制器之前，可控制处理范围</strong></li>
</ul>
<p>By default, <code>@ControllerAdvice</code> methods apply to every request (that is, all controllers), but you can narrow that down to a subset of controllers by using attributes on the annotation, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Target all Controllers annotated with @RestController</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span>(annotations = RestController<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ExampleAdvice1</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target all Controllers within specific packages</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span>(<span class="string">"org.example.controllers"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleAdvice2</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target all Controllers assignable to specific classes</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span>(assignableTypes = &#123;ControllerInterface<span class="class">.<span class="keyword">class</span>, <span class="title">AbstractController</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ExampleAdvice3</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>The selectors in the preceding example are evaluated at runtime and may negatively impact performance if used extensively. See the <a href="https://docs.spring.io/spring-framework/docs/5.1.0.RELEASE/javadoc-api/org/springframework/web/bind/annotation/ControllerAdvice.html" target="_blank" rel="noopener"><code>@ControllerAdvice</code></a> Javadoc for more details.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>4-SpEL</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/4-SpEl/</url>
    <content><![CDATA[<p>SpEL supports a wide range of features, such as calling methods, accessing properties, and calling constructors.</p>
<p>As an example of method invocation, we call the <code>concat</code> method on the string literal.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">Expression exp = parser.parseExpression(<span class="string">"'Hello World'.concat('!')"</span>);</span><br><span class="line">String message = (String) exp.getValue();</span><br></pre></td></tr></table></figure>

<p>The value of message is now ‘Hello World!’.</p>
<p>As an example of calling a JavaBean property, the String property <code>Bytes</code> can be called as shown below.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line"></span><br><span class="line"><span class="comment">// invokes 'getBytes()'</span></span><br><span class="line">Expression exp = parser.parseExpression(<span class="string">"'Hello World'.bytes"</span>);</span><br><span class="line"><span class="keyword">byte</span>[] bytes = (<span class="keyword">byte</span>[]) exp.getValue();</span><br></pre></td></tr></table></figure>

<p>SpEL also supports nested properties using standard <em>dot</em> notation, i.e. <code>prop1.prop2.prop3</code> and the setting of property values</p>
<p>Public fields may also be accessed.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line"></span><br><span class="line"><span class="comment">// invokes 'getBytes().length'</span></span><br><span class="line">Expression exp = parser.parseExpression(<span class="string">"'Hello World'.bytes.length"</span>);</span><br><span class="line"><span class="keyword">int</span> length = (Integer) exp.getValue();</span><br></pre></td></tr></table></figure>

<p>The String’s constructor can be called instead of using a string literal.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">Expression exp = parser.parseExpression(<span class="string">"new String('hello world').toUpperCase()"</span>);</span><br><span class="line">String message = exp.getValue(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>Note the use of the generic method <code>public &lt;T&gt; T getValue(Class&lt;T&gt; desiredResultType)</code>. Using this method removes the need to cast the value of the expression to the desired result type. An <code>EvaluationException</code> will be thrown if the value cannot be cast to the type <code>T</code> or converted using the registered type converter.</p>
<h1 id="1-XML-configuration"><a href="#1-XML-configuration" class="headerlink" title="1 XML configuration"></a>1 XML configuration</h1><p>A property or constructor-arg value can be set using expressions as shown below.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"numberGuess"</span> <span class="attr">class</span>=<span class="string">"org.spring.samples.NumberGuess"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"randomNumber"</span> <span class="attr">value</span>=<span class="string">"#&#123; T(java.lang.Math).random() * 100.0 &#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- other properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The variable <code>systemProperties</code> is predefined, so you can use it in your expressions as shown below. Note that you do not have to prefix the predefined variable with the <code>#</code> symbol in this context.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taxCalculator"</span> <span class="attr">class</span>=<span class="string">"org.spring.samples.TaxCalculator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultLocale"</span> <span class="attr">value</span>=<span class="string">"#&#123; systemProperties['user.region'] &#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- other properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>You can also refer to other bean properties by name, for example.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"numberGuess"</span> <span class="attr">class</span>=<span class="string">"org.spring.samples.NumberGuess"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"randomNumber"</span> <span class="attr">value</span>=<span class="string">"#&#123; T(java.lang.Math).random() * 100.0 &#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- other properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shapeGuess"</span> <span class="attr">class</span>=<span class="string">"org.spring.samples.ShapeGuess"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialShapeSeed"</span> <span class="attr">value</span>=<span class="string">"#&#123; numberGuess.randomNumber &#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- other properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-Annotation-config"><a href="#2-Annotation-config" class="headerlink" title="2 Annotation config"></a>2 Annotation config</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 字段 Field</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123; systemProperties['user.region'] &#125;"</span>)</span><br><span class="line">   <span class="keyword">private</span> String defaultLocale;</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">   <span class="meta">@Value</span>(<span class="string">"#&#123; systemProperties['user.region'] &#125;"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultLocale</span><span class="params">(String defaultLocale)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.defaultLocale = defaultLocale;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 参数 parameter</span></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(MovieFinder movieFinder,</span></span></span><br><span class="line"><span class="function"><span class="params">           @Value(<span class="string">"#&#123; systemProperties['user.region'] &#125;"</span>)</span> String defaultLocale) </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">       <span class="keyword">this</span>.defaultLocale = defaultLocale;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-Literal-expressions"><a href="#3-Literal-expressions" class="headerlink" title="3 Literal expressions"></a>3 Literal expressions</h1><p>The expression language supports the following functionality:</p>
<ul>
<li>Literal expressions</li>
<li>Boolean and relational operators</li>
<li>Regular expressions</li>
<li>Class expressions</li>
<li>Accessing properties, arrays, lists, maps</li>
<li>Method invocation</li>
<li>Relational operators</li>
<li>Assignment</li>
<li>Calling constructors</li>
<li>Bean references</li>
<li>Array construction</li>
<li>Inline lists</li>
<li>Inline maps</li>
<li>Ternary operator</li>
<li>Variables</li>
<li>User defined functions</li>
<li>Collection projection</li>
<li>Collection selection</li>
<li>Templated expressions</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>6-AOP-APIS</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/6-Spring%20AOP%20APIs/</url>
    <content><![CDATA[<p>见：</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>9-数据操作-ORM</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/9-%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C-ORM/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2RhdGEtYWNjZXNzLmh0bWwjb3Jt" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/data-access.html#orm">https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/data-access.html#orm<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>1-IOC-DI</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/1-IOC-DI/</url>
    <content><![CDATA[<h1 id="0-IOC-DI"><a href="#0-IOC-DI" class="headerlink" title="0 IOC DI"></a>0 IOC DI</h1><h2 id="1、IOC是什么"><a href="#1、IOC是什么" class="headerlink" title="1、IOC是什么"></a>1、IOC是什么</h2><p>IOC—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p>
<p><strong>谁控制谁，控制什么</strong>：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IOC是有专门一个容器来创建这些对象，即由IOC容器来控制对象的创建而不再显式地使用new；谁控制谁？当然是IOC容器控制了对象；控制什么？那就是主要控制了外部资源获取和生命周期（不只是对象也包括文件等）。<br><strong>为何是反转，哪些方面反转了</strong>：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p>
<a id="more"></a>

<p>用图例说明一下，传统程序设计如图1，都是主动去创建相关对象然后再组合起来：</p>
<p><img src="/images/springofficial/1-%E4%BC%A0%E7%BB%9F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="img"></p>
<pre><code>图1 传统应用程序结构图</code></pre><p>当有了IOC的容器后，在客户端类中不再主动去创建这些对象了，程序的结构图变成如图2所示：</p>
<p><img src="/images/springofficial/2-%E6%9C%89IOC%E5%AE%B9%E5%99%A8%E5%90%8E%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="img"></p>
<pre><code>图2 有IOC容器后的程序结构图</code></pre><h2 id="2、IoC能做什么"><a href="#2、IoC能做什么" class="headerlink" title="2、IoC能做什么"></a>2、IoC能做什么</h2><p>IOC不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IOC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。<br>其实IOC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IOC/DI思想中，应用程序就变成被动的了，被动的等待IOC容器来创建并注入它所需要的资源了。<br>IOC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IOC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p>
<h2 id="3、IOC和DI"><a href="#3、IOC和DI" class="headerlink" title="3、IOC和DI"></a>3、IOC和DI</h2><p>DI—Dependency Injection，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。<br>理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p>
<p><strong>谁依赖于谁</strong>：当然是应用程序依赖于IOC容器；<br><strong>为什么需要依赖</strong>：应用程序需要IOC容器来提供对象需要的外部资源；<br><strong>谁注入谁</strong>：很明显是IOC容器注入应用程序某个对象，应用程序依赖的对象；<br><strong>注入了什么</strong>：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。<br>IOC和DI有什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IOC 而言，“依赖注入”明确描述了“被注入对象依赖IOC容器配置依赖对象”。</p>
<h2 id="4、IOC和DI的意义"><a href="#4、IOC和DI的意义" class="headerlink" title="4、IOC和DI的意义"></a>4、IOC和DI的意义</h2><p>在平时的java应用开发中，我们要实现某一个功能或者说是完成某个业务逻辑时至少需要两个或以上的对象来协作完成，在没有使用Spring的时候，每个对象在需要使用他的合作对象或者依赖对象时，自己均要使用像new object() 这样的语法来将合作对象创建出来，这个合作对象是由自己主动创建出来的，创建合作对象的主动权在自己手上，自己需要哪个合作对象，就主动去创建，创建合作对象的主动权和创建时机是由自己把控的，而这样就会使得对象间的耦合度高了，A对象需要使用合作对象B来共同完成一件事，A要使用B，那么A就对B产生了依赖，也就是A和B之间存在一种耦合关系，并且是紧密耦合在一起，而使用了Spring之后就不一样了，创建合作对象B的工作是由Spring来做的，Spring创建好B对象，然后存储到一个容器里面，当A对象需要使用B对象时，Spring就从存放对象的那个容器里面取出A要使用的那个B对象，然后交给A对象使用，至于Spring是如何创建那个对象，以及什么时候创建好对象的，A对象不需要关心这些细节问题(你是什么时候生的，怎么生出来的我可不关心，能帮我干活就行)，A得到Spring给我们的对象之后，两个人一起协作完成要完成的工作即可。</p>
<p>　　所以控制反转IOC(Inversion of Control)是说创建对象的控制权进行转移，以前创建对象的主动权和创建时机是由自己把控的，而现在这种权力转移到第三方，比如转移交给了IOC容器，它就是一个专门用来创建对象的工厂，你要什么对象，它就给你什么对象，有了 IOC容器，依赖关系就变了，原先的依赖关系就没了，它们都依赖IOC容器了，通过IOC容器来建立它们之间的关系。<br>　　DI(依赖注入)其实就是IOC的另外一种说法，DI是由Martin Fowler 在2004年初的一篇论文中首次提出的。他总结道：控制的什么被反转了？就是获得依赖对象的方式反转了。    </p>
<h1 id="1-XML方式"><a href="#1-XML方式" class="headerlink" title="1 XML方式"></a>1 XML方式</h1><h2 id="1-1-Instantiating-a-container"><a href="#1-1-Instantiating-a-container" class="headerlink" title="1.1 Instantiating a container"></a>1.1 Instantiating a container</h2><p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"services.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"resources/messageSource.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"/resources/themeSource.xml"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">As you can see, a leading slash is ignored, but given that these paths are relative, it is better form not to use the slash at all. 前斜线可不需要</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用classpath:??，应使用绝对路径。如：classpath:/config/services.xml，而不是</span></span><br><span class="line"><span class="comment">classpath:../services.xml</span></span><br><span class="line"><span class="comment">运行时解析过程在其中选择“最近的”classpath根目录，然后查看它的父目录。类路径配置更改可能导致选择不同的、不正确的目录。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">You can always use fully qualified resource locations instead of relative paths: for example, "file:C:/config/services.xml" or "classpath:/config/services.xml". However, be aware that you are coupling your application’s configuration to specific absolute locations. It is generally preferable to keep an indirection for such absolute locations, for example, through "$&#123;…&#125;" placeholders that are resolved against JVM system properties at runtime.</span></span><br><span class="line"><span class="comment">配置绝对路径在配置文件中，使用&lt;import resource="$&#123;service.path&#125;"/&gt;读取，</span></span><br><span class="line"><span class="comment">运行VMOptions:</span></span><br><span class="line"><span class="comment">-Dservice.path=c:/service.xml</span></span><br><span class="line"><span class="comment">或者是设置Environment Variable</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean1"</span> <span class="attr">class</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean2"</span> <span class="attr">class</span>=<span class="string">"..."</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"itemDao"</span> <span class="attr">class</span>=<span class="string">"org.springframework.samples.jpetstore.dao.jpa.JpaItemDao"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions for data access objects go here --&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create and configure beans</span></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"services.xml"</span>, <span class="string">"daos.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// retrieve configured instance</span></span><br><span class="line">PetStoreService service = context.getBean(<span class="string">"petStore"</span>, PetStoreService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line"><span class="keyword">new</span> XmlBeanDefinitionReader(context).loadBeanDefinitions(<span class="string">"services.xml"</span>, <span class="string">"daos.xml"</span>);</span><br><span class="line">context.refresh();</span><br></pre></td></tr></table></figure>

<h2 id="1-2-Naming-beans"><a href="#1-2-Naming-beans" class="headerlink" title="1.2 Naming beans"></a>1.2 Naming beans</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zx.springtest1.App"</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">name</span>=<span class="string">"app++"</span> <span class="attr">lazy-init</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"app++"</span> <span class="attr">alias</span>=<span class="string">"ap"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"app++"</span> <span class="attr">alias</span>=<span class="string">"apd"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">		App bean = (App) context.getBean(<span class="string">"ap"</span>);</span><br><span class="line">		System.out.println(bean);</span><br><span class="line">		System.out.println(context.getBean(<span class="string">"app++"</span>));</span><br><span class="line">		System.out.println(context.getBean(<span class="string">"apd"</span>));</span><br><span class="line">		System.out.println(bean.getName());</span><br><span class="line"><span class="comment">// 默认单例，一个对象，都一样</span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-初始化bean"><a href="#1-3-初始化bean" class="headerlink" title="1.3 初始化bean"></a>1.3 初始化bean</h2><blockquote>
<p> <strong>初始化静态内部类定义：</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*If you want to configure a bean definition for a static nested class, you have to use the binary name of the nested class.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">For example, if you have a class called Foo in the com.example package, and this Foo class has a static nested class called Bar, the value of the 'class' attribute on a bean definition would be*/</span></span><br><span class="line"></span><br><span class="line">com.example.Foo$Bar</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Notice the use of the $ character in the name to separate the nested class name from the outer class name.*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userName = userName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.userName = userName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMing</span> <span class="keyword">extends</span> <span class="title">User</span></span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">XiaoMing</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">super</span>(userName);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">XiaoMing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="comment">// 必须要空构造</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zx.xml.User$XiaoMing"</span> id=<span class="string">"xiaoMing"</span>&gt;</span><br><span class="line">		&lt;property name=<span class="string">"userName"</span> value=<span class="string">"小明"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">User.XiaoMing xiaoMing = context.getBean(<span class="string">"xiaoMing"</span>, User.XiaoMing<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(xiaoMing.getUserName());  <span class="comment">// 小明</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"exampleBean"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"examples.ExampleBean"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean name=<span class="string">"anotherExample"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"examples.ExampleBeanTwo"</span>/&gt;</span><br><span class="line"></span><br><span class="line">必需要空构造器，无注入时。</span><br></pre></td></tr></table></figure>
</li>
<li><p>静态工厂方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"clientService"</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">"examples.ClientService"</span></span><br><span class="line">    factory-method=<span class="string">"createInstance"</span>/&gt;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClientService clientService = <span class="keyword">new</span> ClientService();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ClientService</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClientService <span class="title">createInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实例工厂方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"serviceLocator"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"examples.DefaultServiceLocator"</span>&gt;</span><br><span class="line">    &lt;!-- inject any dependencies required by <span class="keyword">this</span> locator bean --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"clientService"</span></span><br><span class="line">    factory-bean=<span class="string">"serviceLocator"</span></span><br><span class="line">    factory-method=<span class="string">"createClientServiceInstance"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"accountService"</span></span><br><span class="line">    factory-bean=<span class="string">"serviceLocator"</span></span><br><span class="line">    factory-method=<span class="string">"createAccountServiceInstance"</span>/&gt;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultServiceLocator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClientService clientService = <span class="keyword">new</span> ClientServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AccountService accountService = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientService <span class="title">createClientServiceInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountService <span class="title">createAccountServiceInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-4-依赖注入"><a href="#1-4-依赖注入" class="headerlink" title="1.4 依赖注入"></a>1.4 依赖注入</h2><h3 id="1-4-1-构造方法"><a href="#1-4-1-构造方法" class="headerlink" title="1.4.1 构造方法"></a>1.4.1 构造方法</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   1.....</span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"x.y.Foo"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"bar"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"baz"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   2.........</span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"7500000"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"42"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   3.....</span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"7500000"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"42"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   4........</span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exampleBean"</span> <span class="attr">class</span>=<span class="string">"examples.ExampleBean"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"years"</span> <span class="attr">value</span>=<span class="string">"7500000"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ultimateAnswer"</span> <span class="attr">value</span>=<span class="string">"42"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">请记住，要使这个功能发挥作用，您的代码必须在启用调试标志的情况下进行编译，以便Spring可以从构造函数中查找参数名称。如果不能使用调试标志(或不想使用)编译代码，可以使用@ConstructorProperties JDK注释显式地为构造函数参数命名。然后示例类必须如下所示:</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   5.........</span><br><span class="line">       @ConstructorProperties(&#123;"years", "ultimateAnswer"&#125;)</span><br><span class="line">       public ExampleBean(int years, String ultimateAnswer) &#123;</span><br><span class="line">           this.years = years;</span><br><span class="line">           this.ultimateAnswer = ultimateAnswer;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="1-4-2-setter方法"><a href="#1-4-2-setter方法" class="headerlink" title="1.4.2 setter方法"></a>1.4.2 setter方法</h3><p>构造器注入还是setter方法注入：</p>
<p>由于可以混合使用基于构造函数和基于setter.net的DI，因此使用<strong>构造函数处理强制依赖关系</strong>和<strong>setter方法或配置方法处理可选依赖关系</strong>是一个很好的经验法则。注意，在setter方法上使用<strong>@Required注释</strong>可以使属性成为必需的依赖项。</p>
<p>Spring团队通常支持构造函数注入，因为它允许将应用程序组件实现为不可变对象，并确保所需的依赖项不为空。此外，构造注入的组件总是以完全初始化的状态返回给客户端(调用)代码。作为补充说明，大量的构造函数参数是一种糟糕的代码味道，这意味着类可能有太多的职责，应该重构，以便更好地处理关注点的适当分离。</p>
<p>Setter注入主要应该只用于可选的依赖项，这些依赖项可以在类中分配合理的默认值。否则，在代码使用依赖项的任何地方都必须执行非空检查。setter注入的一个好处是，setter方法使该类的对象可以稍后重新配置或重新注入。因此，通过JMX mbean进行管理是setter注入的一个引人注目的用例。</p>
<p>使用对特定类最有意义的DI样式。有时候，在处理<strong>没有源代码的第三方类</strong>时，会为您做出选择。例如，如果第三方类不公开任何setter方法，那么构造函数注入可能是惟一可用的DI形式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"exampleBean"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"examples.ExampleBean"</span>&gt;</span><br><span class="line">    &lt;!-- setter injection using the nested ref element --&gt;</span><br><span class="line">    &lt;property name=<span class="string">"beanOne"</span>&gt;</span><br><span class="line">        &lt;ref bean=<span class="string">"anotherExampleBean"</span>/&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- setter injection using the neater ref attribute --&gt;</span><br><span class="line">    &lt;property name=<span class="string">"beanTwo"</span> ref=<span class="string">"yetAnotherBean"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"integerProperty"</span> value=<span class="string">"1"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"anotherExampleBean"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"examples.AnotherBean"</span>/&gt;</span><br><span class="line">&lt;bean id=<span class="string">"yetAnotherBean"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"examples.YetAnotherBean"</span>/&gt;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AnotherBean beanOne;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> YetAnotherBean beanTwo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanOne</span><span class="params">(AnotherBean beanOne)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanOne = beanOne;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanTwo</span><span class="params">(YetAnotherBean beanTwo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanTwo = beanTwo;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@required</span>  <span class="comment">// 必须注入-》类似构造器注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntegerProperty</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在创建容器时，Spring容器验证每个bean的配置。然而，直到真正创建bean时，才会设置bean属性本身。当创建容器时，将<strong>创建单例bean并设置为预实例化的bean</strong>(默认)。否则，只有在请求bean时才会创建它。创建bean可能会导致创建bean的图，因为bean的依赖关系及其依赖关系(等等)是创建和分配的。注意，这些依赖项之间的解析不匹配可能出现得较晚，即在第一次创建受影响的bean时。</p>
<blockquote>
<p> 循环注入问题解决</p>
<p>您通常可以相信Spring会做正确的事情。它在容器装载时检测配置问题，例如对不存在的bean和循环依赖项的引用。在实际创建bean时，Spring尽可能晚地设置属性并解析依赖关系。这意味着，如果在创建该对象或其依赖项时出现问题，那么在以后请求对象时，正确加载的Spring容器可以生成异常。例如，bean由于丢失或无效属性而抛出异常。某些配置问题可能会延迟可见性，这就是为什么ApplicationContext实现在默认情况下预实例化单例bean。在实际需要这些bean之前先花一些时间和内存来创建它们，在创建ApplicationContext时(而不是稍后)，您会发现配置问题。您仍然可以覆盖这个默认行为，这样单例bean就可以延迟初始化，而不是预先实例化。</p>
<p>如果不存在循环依赖项，当一个或多个协作bean被注入到依赖bean中时，每个协作bean在被注入到依赖bean之前都被完全配置好了。这意味着如果bean依赖bean B,B Spring IoC容器完全配置bean之前调用bean的setter方法A。换句话说,bean实例化<strong>(如果不是一个单例预先实例化：单例bean)</strong>,其设置依赖项,相关的生命周期方法(如InitializingBean init方法或配置回调方法)调用。</p>
</blockquote>
<h3 id="1-4-3-Straight-values-DI"><a href="#1-4-3-Straight-values-DI" class="headerlink" title="1.4.3  Straight values DI"></a>1.4.3  Straight values DI</h3><p>以下功能相同</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1......</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- results in a setDriverClassName(String) call --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mydb"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"masterkaoli"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2....p名称空间</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myDataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">destroy-method</span>=<span class="string">"close"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:url</span>=<span class="string">"jdbc:mysql://localhost:3306/mydb"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:username</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:password</span>=<span class="string">"masterkaoli"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">3....... 配置文件</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mappings"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- typed as a java.util.Properties --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">				name=李四</span><br><span class="line">			<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zx.springtest1.App"</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">name</span>=<span class="string">"app++"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">lazy-init</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-4-注入其他类、集合类型、p名称空间、c名称空间、空、混合等等"><a href="#1-4-4-注入其他类、集合类型、p名称空间、c名称空间、空、混合等等" class="headerlink" title="1.4.4 注入其他类、集合类型、p名称空间、c名称空间、空、混合等等"></a>1.4.4 注入其他类、集合类型、p名称空间、c名称空间、空、混合等等</h3><p><em>The value of a map key or value, or a set value, can also again be any of the following elements:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bean | ref | idref | list | set | map | props | value | null</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"moreComplexObject"</span> <span class="attr">class</span>=<span class="string">"example.ComplexObject"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- results in a setAdminEmails(java.util.Properties) call --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminEmails"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"administrator"</span>&gt;</span>administrator@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"support"</span>&gt;</span>support@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"development"</span>&gt;</span>development@example.org<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- results in a setSomeList(java.util.List) call --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>a list element followed by a reference<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myDataSource"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- results in a setSomeMap(java.util.Map) call --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"an entry"</span> <span class="attr">value</span>=<span class="string">"just some string"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span> =<span class="string">"a ref"</span> <span class="attr">value-ref</span>=<span class="string">"myDataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- results in a setSomeSet(java.util.Set) call --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"someSet"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>just some string<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myDataSource"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- p空间  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"john-modern"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"com.example.Person"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:name</span>=<span class="string">"John Doe"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:spouse-ref</span>=<span class="string">"jane"</span>/&gt;</span>   ==== <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"spouse"</span> <span class="attr">ref</span>=<span class="string">"jane"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- C空间  --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- traditional declaration --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"x.y.Foo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"bar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"baz"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"foo@bar.com"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- c-namespace declaration --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"x.y.Foo"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">c:bar-ref</span>=<span class="string">"bar"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">c:baz-ref</span>=<span class="string">"baz"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">c:email</span>=<span class="string">"foo@bar.com"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- c-namespace index declaration --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"x.y.Foo"</span> <span class="attr">c:_0-ref</span>=<span class="string">"bar"</span> <span class="attr">c:_1-ref</span>=<span class="string">"baz"</span>/&gt;</span></span><br><span class="line">    由于采用了XML语法，索引符号要求出现前导_，因为XML属性名不能以数字开头(尽管某些IDE允许这样做)。</span><br><span class="line">    实际上，构造函数解析机制在匹配参数方面非常有效，因此除非确实需要，否则我们建议在配置中使用名称符号。</span><br><span class="line">    </span><br><span class="line">    Compound property names</span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">class</span>=<span class="string">"foo.Bar"</span>&gt;</span></span><br><span class="line">   	 	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fred.bob.sammy"</span> <span class="attr">value</span>=<span class="string">"123"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    foo bean有一个fred属性，它有一个bob属性，它有一个sammy属性，最后的sammy属性被设置为123。为了使其工作，在构建bean或抛出NullPointerException之后，foo的fred属性和fred的bob属性必须不为空。</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-5-Using-depands-on"><a href="#1-5-Using-depands-on" class="headerlink" title="1.5 Using depands on"></a>1.5 Using depands on</h2><p>The <code>depends-on</code>attribute can explicitly force one or more beans to be initialized before the bean using this element is initialized</p>
<p>在初始化bean之前初始化另一个bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanOne"</span> <span class="attr">class</span>=<span class="string">"ExampleBean"</span> <span class="attr">depends-on</span>=<span class="string">"manager,accountDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"manager"</span> <span class="attr">ref</span>=<span class="string">"manager"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"manager"</span> <span class="attr">class</span>=<span class="string">"ManagerBean"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"x.y.jdbc.JdbcAccountDao"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>bean定义中的依赖项属性可以指定初始化时间依赖项，<strong>对于单例</strong>bean，还可以指定相应的销毁时间依赖项。定义与给定bean之间依赖关系的依赖bean首先被销毁，然后再销毁给定bean本身。因此，依赖也可以控制销毁顺序。</p>
<h2 id="1-6-懒加载"><a href="#1-6-懒加载" class="headerlink" title="1.6 懒加载"></a>1.6 懒加载</h2><p>默认情况下，ApplicationContext实现在初始化过程中急切地创建和配置所有单例bean。通常，这种预实例化是可取的，因为配置或周围环境中的错误会立即被发现，而不是几个小时甚至几天之后。当这种行为不可取时，可以通过将bean定义标记为延迟初始化来防止单例bean的预实例化。延迟初始化bean告诉IoC容器在第一次请求bean时(而不是在启动时)创建bean实例。</p>
<p>但是，当惰性初始化bean是单例bean的依赖项而不是惰性初始化bean时，ApplicationContext在启动时创建惰性初始化bean，因为它必须满足单例bean的依赖项。惰性初始化的bean被注入到其他没有惰性初始化的单例bean中。</p>
<p>可以设置全局默认懒加载bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">default-lazy-init</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- no beans will be pre-instantiated... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lazy"</span> <span class="attr">class</span>=<span class="string">"com.foo.ExpensiveToCreateBean"</span> <span class="attr">lazy-init</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"not.lazy"</span> <span class="attr">class</span>=<span class="string">"com.foo.AnotherBean"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">default-lazy-init</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- no beans will be pre-instantiated... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="1-7-autowire和autowire-candidate"><a href="#1-7-autowire和autowire-candidate" class="headerlink" title="*1.7 autowire和autowire-candidate"></a>*1.7 autowire和autowire-candidate</h2><blockquote>
<p>自动连接可以显著减少指定属性或构造函数参数的需要。(本章其他地方讨论的其他机制，如bean模板，在这方面也很有价值。)</p>
<p>自动连接可以随着对象的发展而更新配置。例如，如果需要向类添加依赖项，则无需修改配置即可自动满足该依赖项。因此，自动连接在开发过程中特别有用，当代码库变得更加稳定时，它不会否定切换到显式连接的选项。</p>
</blockquote>
<p>自动配置模型：</p>
<table>
<thead>
<tr>
<th>Mode</th>
<th>Explanation</th>
</tr>
</thead>
<tbody><tr>
<td>no</td>
<td>(Default) No autowiring. Bean references must be defined via a <code>ref</code> element. Changing the default setting is not recommended for larger deployments, because specifying collaborators explicitly gives greater control and clarity. To some extent, it documents the structure of a system.</td>
</tr>
<tr>
<td>byName</td>
<td>Autowiring by property name. Spring looks for a bean with the same name as the property that needs to be autowired. For example, if a bean definition is set to autowire by name, and it contains a <em>master</em> property (that is, it has a<em>setMaster(..)</em> method), Spring looks for a bean definition named <code>master</code>, and uses it to set the property.</td>
</tr>
<tr>
<td>byType</td>
<td>Allows a property to be autowired if exactly one bean of the property type exists in the container. If more than one exists, a fatal exception is thrown, which indicates that you may not use <em>byType</em> autowiring for that bean. If there are no matching beans, nothing happens; the property is not set.</td>
</tr>
<tr>
<td>constructor</td>
<td>Analogous to <em>byType</em>, but applies to constructor arguments. If there is not exactly one bean of the constructor argument type in the container, a fatal error is raised.</td>
</tr>
</tbody></table>
<p>使用byType或构造函数自动连接模式，您可以连接数组和类型集合。在这种情况下，会提供容器中匹配预期类型的所有autowire候选对象，以满足依赖性。如果预期的键类型是String，则可以自动连接强类型映射。自动连接的映射值将由所有匹配预期类型的bean实例组成，映射键将包含相应的bean名称。</p>
<p><strong>autowire:</strong></p>
<p>自动装配类，自动连接类关系，可以通过name type construct.</p>
<p><strong>autowire-candidate:</strong></p>
<p>在每个bean的基础上，可以将bean排除在自动连接之外。在Spring的XML格式中，将元素的autowire-candidate属性设置为false;容器使自动连接基础设施无法使用特定bean定义。</p>
<p>autowire-candidate属性仅用于影响基于类型的自动连接。<strong>它不会影响显式引用的名称，即使指定的bean没有被标记为自动连接候选对象，也会得到解析。因此，如果名称匹配，按名称自动连接仍然会注入bean。</strong></p>
<p>还可以根据模式匹配对bean名称限制自动连接候选对象。顶层元素在其default-autowire-candidate属性中接受一个或多个模式。例如，要将autowire候选状态限制为任何名称以Repository结尾的bean，请提供*Repository的值。要提供多个模式，请在逗号分隔的列表中定义它们。对于bean定义autowire-candidate属性，显式的true或false值总是优先，对于这种bean，模式匹配规则不适用。</p>
<p>这些技术对于那些永远不希望通过自动连接将其注入其他bean的bean非常有用。这并不意味着被排除的bean本身不能使用autowiring配置。相反，bean本身不是自动连接其他bean的候选对象。</p>
<h2 id="1-8-方法注入"><a href="#1-8-方法注入" class="headerlink" title="1.8 方法注入"></a>1.8 方法注入</h2><h3 id="1-8-1-Lookup-method-injection"><a href="#1-8-1-Lookup-method-injection" class="headerlink" title="1.8.1 Lookup method injection"></a>1.8.1 Lookup method injection</h3><p>lookup method注入是容器覆盖容器管理bean上的方法，以返回容器中另一个命名bean的查找结果。查找通常涉及原型bean，如前一节所述。Spring框架通过使用CGLIB库的字节码生成来动态生成覆盖该方法的子类，从而实现了该方法的注入。</p>
<p>要使这个动态子类化工作，</p>
<p>Spring bean容器将子类化的类不能是final，要重写的方法也不能是final。</p>
<p>单元测试具有抽象方法的类需要您自己对类进行子类化，并提供抽象方法的存根实现。组件扫描也需要具体的方法，这需要具体的类来提取。</p>
<p>另一个关键限制是，lookup method不会与工厂方法一起工作，<strong>特别是与配置类中的@Bean方法不一起工作</strong>，因为容器不负责在这种情况下创建实例，因此不能动态创建运行时生成的子类。</p>
<p>例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">process</span><span class="params">(Object commandState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// grab a new instance of the appropriate Command interface</span></span><br><span class="line">        Command command = createCommand();</span><br><span class="line">        <span class="comment">// set the state on the (hopefully brand new) Command instance</span></span><br><span class="line">        command.setState(commandState);</span><br><span class="line">        <span class="keyword">return</span> command.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// okay... but where is the implementation of this method?</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Command <span class="title">createCommand</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a stateful bean deployed as a prototype (non-singleton) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myCommand"</span> <span class="attr">class</span>=<span class="string">"fiona.apple.AsyncCommand"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- inject dependencies here as required --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">上面类中个方法格式是：</span><br><span class="line"><span class="tag">&lt;<span class="name">public|protected</span>&gt;</span> [abstract] <span class="tag">&lt;<span class="name">return-type</span>&gt;</span> theMethodName(no-arguments);</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- commandProcessor uses statefulCommandHelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"commandManager"</span> <span class="attr">class</span>=<span class="string">"fiona.apple.CommandManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lookup-method</span> <span class="attr">name</span>=<span class="string">"createCommand"</span> <span class="attr">bean</span>=<span class="string">"myCommand"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>只要需要myCommand bean的新实例，标识为commandManager的bean就会调用它自己的方法createCommand()。您必须小心地将myCommand bean部署为原型，如果这是实际需要的。如果它是单例，那么每次都会返回myCommand bean的相同实例。</p>
<p>其他方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">process</span><span class="params">(Object commandState)</span> </span>&#123;</span><br><span class="line">        Command command = createCommand();</span><br><span class="line">        command.setState(commandState);</span><br><span class="line">        <span class="keyword">return</span> command.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lookup</span>(<span class="string">"myCommand"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Command <span class="title">createCommand</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span>......</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">process</span><span class="params">(Object commandState)</span> </span>&#123;</span><br><span class="line">        MyCommand command = createCommand();</span><br><span class="line">        command.setState(commandState);</span><br><span class="line">        <span class="keyword">return</span> command.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lookup</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> MyCommand <span class="title">createCommand</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-8-2-Arbitrary-method-replacement"><a href="#1-8-2-Arbitrary-method-replacement" class="headerlink" title="1.8.2 Arbitrary method replacement"></a>1.8.2 Arbitrary method replacement</h3><p>任意的方法替换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyValueCalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">computeValue</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// some real code...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// some other methods...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 替代类中方法，创建时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替代类中的替代方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * meant to be used to override the existing computeValue(String)</span></span><br><span class="line"><span class="comment"> * implementation in MyValueCalculator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReplacementComputeValue</span> <span class="keyword">implements</span> <span class="title">MethodReplacer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">reimplement</span><span class="params">(Object o, Method m, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// get the input value, work with it, and return a computed result</span></span><br><span class="line">        String input = (String) args[<span class="number">0</span>];</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> ...;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line">&lt;bean id=<span class="string">"myValueCalculator"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"x.y.z.MyValueCalculator"</span>&gt;</span><br><span class="line">    &lt;!-- arbitrary method replacement --&gt;</span><br><span class="line">    &lt;replaced-method name=<span class="string">"computeValue"</span> replacer=<span class="string">"replacementComputeValue"</span>&gt;</span><br><span class="line">        &lt;arg-type&gt;String&lt;/arg-type&gt;  // 可以Str String java.lang.String</span><br><span class="line">    &lt;/replaced-method&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"replacementComputeValue"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"a.b.c.ReplacementComputeValue"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>因为参数的数量通常足以区分每个可能的选择，所以这个快捷方式可以节省大量的输入，因为它允许您只输入与参数类型匹配的最短字符串。</p>
<h2 id="1-9-Bean-scopes"><a href="#1-9-Bean-scopes" class="headerlink" title="*1.9 Bean scopes"></a>*1.9 Bean scopes</h2><table>
<thead>
<tr>
<th>Scope</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNiZWFucy1mYWN0b3J5LXNjb3Blcy1zaW5nbGV0b24=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-singleton">singleton<i class="fa fa-external-link"></i></span></td>
<td><strong>(Default)</strong> Scopes a single bean definition to a single object instance per Spring IoC container.</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNiZWFucy1mYWN0b3J5LXNjb3Blcy1wcm90b3R5cGU=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-prototype">prototype<i class="fa fa-external-link"></i></span></td>
<td>Scopes a single bean definition to any number of object instances.</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNiZWFucy1mYWN0b3J5LXNjb3Blcy1yZXF1ZXN0" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-request">request<i class="fa fa-external-link"></i></span></td>
<td>Scopes a single bean definition to the lifecycle of a single HTTP request; that is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNiZWFucy1mYWN0b3J5LXNjb3Blcy1zZXNzaW9u" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-session">session<i class="fa fa-external-link"></i></span></td>
<td>Scopes a single bean definition to the lifecycle of an HTTP <code>Session</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNiZWFucy1mYWN0b3J5LXNjb3Blcy1hcHBsaWNhdGlvbg==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-application">application<i class="fa fa-external-link"></i></span></td>
<td>Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI3dlYnNvY2tldC1zdG9tcC13ZWJzb2NrZXQtc2NvcGU=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#websocket-stomp-websocket-scope">websocket<i class="fa fa-external-link"></i></span></td>
<td>Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td>
</tr>
</tbody></table>
<p>作用域bean作为依赖项</p>
<p>Spring IoC容器不仅管理对象(bean)的实例化，还管理协作者(或依赖关系)的连接。如果您想将(例如)HTTP请求作用域bean注入长时间作用域的另一个bean，您可以选择在作用域bean的位置注入AOP代理。也就是说，您需要注入一个代理对象，该代理对象公开与作用域对象相同的公共接口，但它也可以从相关的作用域(例如HTTP请求)检索实际目标对象，并将方法调用委托给实际对象。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- an HTTP Session-scoped bean exposed as a proxy --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userPreferences"</span> <span class="attr">class</span>=<span class="string">"com.foo.UserPreferences"</span> <span class="attr">scope</span>=<span class="string">"session"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- instructs the container to proxy the surrounding bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:scoped-proxy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- a singleton-scoped bean injected with a proxy to the above bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.foo.SimpleUserService"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- a reference to the proxied userPreferences bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userPreferences"</span> <span class="attr">ref</span>=<span class="string">"userPreferences"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>要创建这样的代理，您需要将一个子元素插入到作用域bean定义中.</p>
<p>在前面的示例中，向单例bean userManager注入了对HTTP会话作用域bean userPreferences的引用。这里的重点是userManager bean是单例对象:它在每个容器中只实例化一次，它的依赖项(在本例中只有一个，userPreferences bean)也只注入一次。这意味着userManager bean将只对完全相同的userPreferences对象进行操作，也就是它最初被注入的对象。</p>
<p>当将一个寿命较短的scoped bean注入一个寿命较长的scoped bean时，这不是你想要的行为，例如将一个HTTP Session-scoped合作bean作为依赖注入singleton bean。相反，您需要一个userManager对象，并且在HTTP会话的生命周期中，您需要一个特定于所述HTTP会话的userPreferences对象。因此，容器创建一个对象，该对象公开与UserPreferences类（理想情况下是UserPreferences实例的对象）完全相同的公共接口，该对象可以从作用域机制（HTTP请求，会话等）中获取真实的UserPreferences对象。容器将此代理对象注入userManager bean，该bean不知道此UserPreferences引用是代理。在此示例中，当UserManager实例在依赖注入的UserPreferences对象上调用方法时，它实际上是在代理上调用方法。然后，代理从（在这种情况下）HTTP会话中获取真实的UserPreferences对象，并将方法调用委托给检索到的真实UserPreferences对象。</p>
<blockquote>
<p><strong>定制域范围</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scope threadScope = <span class="keyword">new</span> SimpleThreadScope();</span><br><span class="line">beanFactory.registerScope(<span class="string">"thread"</span>, threadScope);</span><br></pre></td></tr></table></figure>

<p>You then create bean definitions that adhere to the scoping rules of your custom <code>Scope</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"..."</span> <span class="attr">scope</span>=<span class="string">"thread"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="1-10-定制类"><a href="#1-10-定制类" class="headerlink" title="1.10 定制类"></a>1.10 定制类</h2><h3 id="1-10-1-类生命周期"><a href="#1-10-1-类生命周期" class="headerlink" title="1.10.1 类生命周期"></a>1.10.1 类生命周期</h3><p>定义类的初始化方法。三种方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. The JSR-250 @PostConstruct and @PreDestroy annotations</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line">&lt;bean id=<span class="string">"exampleInitBean"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"examples.ExampleBean"</span> init-method=<span class="string">"init"</span>/&gt;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do some initialization work</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.</span></span><br><span class="line">&lt;bean id=<span class="string">"exampleInitBean"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"examples.AnotherExampleBean"</span>/&gt;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherExampleBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do some initialization work</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁</span></span><br><span class="line">&lt;bean id=<span class="string">"exampleInitBean"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"examples.ExampleBean"</span> destroy-method=<span class="string">"cleanup"</span>/&gt;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do some destruction work (like releasing pooled connections)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2...</span></span><br><span class="line">&lt;bean id=<span class="string">"exampleInitBean"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"examples.AnotherExampleBean"</span>/&gt;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherExampleBean</span> <span class="keyword">implements</span> <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do some destruction work (like releasing pooled connections)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>操作</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultBlogService</span> <span class="keyword">implements</span> <span class="title">BlogService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BlogDao blogDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBlogDao</span><span class="params">(BlogDao blogDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.blogDao = blogDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this is (unsurprisingly) the initialization callback method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.blogDao == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The [blogDao] property must be set."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;beans <span class="keyword">default</span>-init-method=<span class="string">"init"</span>&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"blogService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.foo.DefaultBlogService"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"blogDao"</span> ref=<span class="string">"blogDao"</span> /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Aware interfaces</strong></p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Injected Dependency</th>
<th>Explained in…</th>
</tr>
</thead>
<tbody><tr>
<td><code>ApplicationContextAware</code></td>
<td>Declaring <code>ApplicationContext</code></td>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNiZWFucy1mYWN0b3J5LWF3YXJl" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#beans-factory-aware">ApplicationContextAware and BeanNameAware<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td><code>ApplicationEventPublisherAware</code></td>
<td>Event publisher of the enclosing <code>ApplicationContext</code></td>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNjb250ZXh0LWludHJvZHVjdGlvbg==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#context-introduction">Additional capabilities of the ApplicationContext<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td><code>BeanClassLoaderAware</code></td>
<td>Class loader used to load the bean classes.</td>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNiZWFucy1mYWN0b3J5LWNsYXNz" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#beans-factory-class">Instantiating beans<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td><code>BeanFactoryAware</code></td>
<td>Declaring <code>BeanFactory</code></td>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNiZWFucy1mYWN0b3J5LWF3YXJl" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#beans-factory-aware">ApplicationContextAware and BeanNameAware<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td><code>BeanNameAware</code></td>
<td>Name of the declaring bean</td>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNiZWFucy1mYWN0b3J5LWF3YXJl" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#beans-factory-aware">ApplicationContextAware and BeanNameAware<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td><code>BootstrapContextAware</code></td>
<td>Resource adapter <code>BootstrapContext</code>the container runs in. Typically available only in JCA aware <code>ApplicationContext</code>s</td>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2ludGVncmF0aW9uLmh0bWwjY2Np" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/integration.html#cci">JCA CCI<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td><code>LoadTimeWeaverAware</code></td>
<td>Defined <em>weaver</em> for processing class definition at load time</td>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNhb3AtYWotbHR3" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#aop-aj-ltw">Load-time weaving with AspectJ in the Spring Framework<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td><code>MessageSourceAware</code></td>
<td>Configured strategy for resolving messages (with support for parametrization and internationalization)</td>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNjb250ZXh0LWludHJvZHVjdGlvbg==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#context-introduction">Additional capabilities of the ApplicationContext<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td><code>NotificationPublisherAware</code></td>
<td>Spring JMX notification publisher</td>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2ludGVncmF0aW9uLmh0bWwjam14LW5vdGlmaWNhdGlvbnM=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/integration.html#jmx-notifications">Notifications<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td><code>ResourceLoaderAware</code></td>
<td>Configured loader for low-level access to resources</td>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNyZXNvdXJjZXM=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#resources">Resources<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td><code>ServletConfigAware</code></td>
<td>Current <code>ServletConfig</code> the container runs in. Valid only in a web-aware Spring <code>ApplicationContext</code></td>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yw==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#mvc">Spring MVC<i class="fa fa-external-link"></i></span></td>
</tr>
<tr>
<td><code>ServletContextAware</code></td>
<td>Current <code>ServletContext</code> the container runs in. Valid only in a web-aware Spring <code>ApplicationContext</code></td>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yw==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#mvc">Spring MVC<i class="fa fa-external-link"></i></span></td>
</tr>
</tbody></table>
<p>再次注意，这些接口的使用将代码与Spring API绑定在一起，而不遵循控制反转风格。因此，对于需要对容器进行编程访问的基础架构bean，建议使用它们。</p>
<h3 id="1-10-2-类定义继承"><a href="#1-10-2-类定义继承" class="headerlink" title="1.10.2 类定义继承"></a>1.10.2 类定义继承</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"inheritedTestBean"</span> <span class="attr">abstract</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.beans.TestBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"parent"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"inheritsWithDifferentClass"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.beans.DerivedTestBean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">parent</span>=<span class="string">"inheritedTestBean"</span> <span class="attr">init-method</span>=<span class="string">"initialize"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"override"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- the age property value of 1 will be inherited from parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 抽象</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"inheritedTestBeanWithoutClass"</span> <span class="attr">abstract</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"parent"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"inheritsWithClass"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.DerivedTestBean"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">parent</span>=<span class="string">"inheritedTestBeanWithoutClass"</span> <span class="attr">init-method</span>=<span class="string">"initialize"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"override"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- age will inherit the value of 1 from the parent bean definition--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ApplicationContext在默认情况下<strong>预实例化所有单例</strong>。因此,它是重要的(至少对单例bean),如果你有一个(父)bean定义你只打算使用作为模板,这个定义指定了一个类,您必须确保设置抽象属性为true,否则应用程序上下文会(试图)pre-instantiate抽象的bean。</p>
<h2 id="1-11-容器扩展点"><a href="#1-11-容器扩展点" class="headerlink" title="1.11 容器扩展点"></a>1.11 容器扩展点</h2><p>通常，应用程序开发人员不需要子类化ApplicationContext实现类。相反，可以通过插入特殊集成接口的实现来扩展Spring IoC容器。</p>
<h3 id="1-11-1-使用BeanPostProcessor定制bean"><a href="#1-11-1-使用BeanPostProcessor定制bean" class="headerlink" title="1.11.1 使用BeanPostProcessor定制bean"></a>1.11.1 使用BeanPostProcessor定制bean</h3><p>BeanPostProcessor接口定义了回调方法，您可以实现这些方法来提供您自己的(或覆盖容器的默认)实例化逻辑、依赖解析逻辑等等。如果您想在Spring容器完成bean的实例化、配置和初始化之后实现一些自定义逻辑，您可以插入一个或多个BeanPostProcessor实现。</p>
<p>您可以配置多个BeanPostProcessor实例，还可以通过设置order属性来控制这些BeanPostProcessor执行的顺序。只有当BeanPostProcessor实现有序接口时，才能设置此属性;如果您编写自己的BeanPostProcessor，您也应该考虑实现有序的接口。</p>
<p>如果您在一个容器中定义了一个<strong>BeanPostProcessor</strong>，那么它只会对容器中的bean进行后处理。换句话说，在一个容器中定义的bean不会由在另一个容器中定义的BeanPostProcessor进行后处理，即使两个容器都属于同一个层次结构。</p>
<p>BeanPostProcessor接口由两个回调方法组成。当这样一个类注册为后处理器的容器,每个容器创建bean实例,后处理器从容器之前得到一个回调容器初始化方法被称为以及任何bean初始化后回调。后处理器可以对bean实例采取任何操作，包括完全忽略回调。bean后处理器通常检查回调接口或使用代理包装bean。为了提供代理包装逻辑，一些Spring AOP基础结构类被实现为bean后处理器。</p>
<p>ApplicationContext自动检测在实现bean后处理器接口的配置元数据中定义的任何bean。ApplicationContext将这些bean注册为后处理器，以便稍后在bean创建时可以调用它们。与其他Bean一样，Bean后处理器也可以部署在容器中。</p>
<p>注意，在配置类上使用@Bean工厂方法声明bean后处理器时，工厂方法的返回类型应该是实现类本身，或者至少是org.springframework.beans.factory.config。BeanPostProcessor接口，清楚地指示该bean的后处理器特性。否则，ApplicationContext将无法在完全创建它之前按类型自动检测它。由于需要尽早实例化bean后处理器，以便应用于上下文中的其他bean的初始化，因此这种早期类型检测非常重要。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每个类创建的时候都执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstantiationTracingBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// simply return the instantiated bean as-is</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bean; <span class="comment">// we could potentially return any object reference here...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bean '"</span> + beanName + <span class="string">"' created : "</span> + bean.toString());</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-11-2-使用BeanFactoryPostProcessor定制配置元数据"><a href="#1-11-2-使用BeanFactoryPostProcessor定制配置元数据" class="headerlink" title="1.11.2 使用BeanFactoryPostProcessor定制配置元数据"></a>1.11.2 使用BeanFactoryPostProcessor定制配置元数据</h3><p>接口的语义与BeanPostProcessor的语义相似，但有一个主要区别:    </p>
<p>BeanFactoryPostProcessor对bean配置元数据进行操作;也就是说，Spring IoC容器允许BeanFactoryPostProcessor读取配置元数据，并可能在容器实例化除<strong>BeanFactoryPostProcessor</strong>之外的任何bean之前更改它。</p>
<p>您可以配置多个beanfactorypostprocessor，您可以通过设置order属性来控制这些beanfactorypostprocessor执行的顺序。但是，只有当BeanFactoryPostProcessor实现有序接口时，才能设置此属性。如果您编写自己的BeanFactoryPostProcessor，那么也应该考虑实现有序接口。有关更多细节，请参考BeanFactoryPostProcessor的javadocs和有序接口。</p>
<p>在ApplicationContext中声明bean工厂后处理器时，将自动执行，以便对定义容器的配置元数据应用更改。Spring包括许多预定义的bean工厂后处理器，例如PropertyOverrideConfigurer和PropertyPlaceholderConfigurer。例如，还可以使用自定义BeanFactoryPostProcessor注册自定义属性编辑器。</p>
<p>ApplicationContext会自动检测部署到其中以实现BeanFactoryPostProcessor接口的任何bean。它在适当的时候使用这些bean作为bean工厂后处理器。您可以像部署其他bean一样部署这些后处理器bean</p>
<p>与beanpostprocessor一样，您通常不希望为延迟初始化配置beanfactorypostprocessor。如果没有其他bean引用bean(工厂)后处理器，则该后处理器将不会被实例化。因此，将其标记为延迟初始化将被忽略，即使您在元素的声明中将default-lazy-init属性设置为true, Bean(工厂)后处理器也将被热心地实例化。</p>
<p><strong>PropertyPlaceholderConfigurer</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/foo/jdbc.properties"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>With the <code>context</code> namespace introduced in Spring 2.5, it is possible to configure property placeholders with a dedicated configuration element. One or more locations can be provided as a comma-separated list in the <code>location</code> attribute.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;context:property-placeholder location&#x3D;&quot;classpath:com&#x2F;foo&#x2F;jdbc.properties&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>The <code>PropertyPlaceholderConfigurer</code> not only looks for properties in the <code>Properties</code> file you specify. By default it also checks against the Java <code>System</code> properties if it cannot find a property in the specified properties files. You can customize this behavior by setting the <code>systemPropertiesMode</code> property of the configurer with one of the following three supported integer values:</p>
<ul>
<li><em>never</em> (0): Never check system properties</li>
<li><em>fallback</em> (1): Check system properties if not resolvable in the specified properties files. This is the default.</li>
<li><em>override</em> (2): Check system properties first, before trying the specified properties files. This allows system properties to override any other property source.</li>
</ul>
<p><strong>PropertyOverrideConfigurer</strong></p>
<p>另一个bean工厂后处理器PropertyOverrideConfigurer类似于PropertyPlaceholderConfigurer，但与后者不同的是，最初的定义对于bean属性可以有默认值或根本没有值。如果覆盖属性文件没有特定bean属性的条目，则使用默认上下文定义。</p>
<p>请注意，bean定义不知道被重写，因此从XML定义文件中不能立即看出正在使用覆盖配置程序。对于为同一bean属性定义不同值的多个PropertyOverrideConfigurer实例，由于覆盖机制，最后一个实例获胜。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-override</span> <span class="attr">location</span>=<span class="string">"classpath:override.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-注解方式"><a href="#2-注解方式" class="headerlink" title="2 注解方式"></a>2 注解方式</h1><p><strong>注释注入是在XML注入之前执行的，因此对于通过这两种方法连接的属性，后一种配置将覆盖前一种配置。</strong></p>
<ul>
<li><strong>扫描组件(隐式注册)</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>(隐式注册的<code>post-processor</code>包括<code>AutowiredAnnotationBeanPostProcessor</code>、<code>CommonAnnotationBeanPostProcessor</code>、<code>PersistenceAnnotationBeanPostProcessor</code>以及前面的<code>RequiredAnnotationBeanPostProcessor</code>)。</p>
<p><code>&lt;context:annotation-config/&gt;</code> only looks for annotations on beans in the <strong>same</strong> application context in which it is defined. This means that, if you put <code>&lt;context:annotation-config/&gt;</code> in a <code>WebApplicationContext</code> for a <code>DispatcherServlet</code>, it only checks for <code>@Autowired</code> beans in your controllers, and not your services. </p>
<h2 id="2-1-Required"><a href="#2-1-Required" class="headerlink" title="2.1 @Required"></a>2.1 @Required</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Required</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="comment">// 创建SimplemovieLister时必须赋值属性MovieFinder对象</span></span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"a.b.vSimpleMovieLister"</span>&gt;</span><br><span class="line">	&lt;property name=<span class="string">"movieFinder"</span> ref=<span class="string">"movieFinder"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>



<h2 id="2-2-Autowire"><a href="#2-2-Autowire" class="headerlink" title="2.2 @Autowire"></a>2.2 @Autowire</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 构造方法上</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieRecommender</span><span class="params">(CustomerPreferenceDao customerPreferenceDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在Spring Framework 4.3中，如果目标bean一开始只定义了一个构造函数，那么在这样的构造函数上不再需要@Autowired注释。但是，如果有几个构造函数可用，那么至少必须对一个构造函数进行注释，以指导容器使用哪个构造函数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 方法上</span></span><br><span class="line">	<span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 形参上</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(MovieCatalog movieCatalog,</span></span></span><br><span class="line"><span class="function"><span class="params">            CustomerPreferenceDao customerPreferenceDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieCatalog = movieCatalog;</span><br><span class="line">        <span class="keyword">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;	</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 混合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieRecommender</span><span class="params">(CustomerPreferenceDao customerPreferenceDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 自动注入数组集合类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog[] movieCatalogs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;MovieCatalog&gt; movieCatalogs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieCatalogs</span><span class="params">(Set&lt;MovieCatalog&gt; movieCatalogs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieCatalogs = movieCatalogs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, MovieCatalog&gt; movieCatalogs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieCatalogs</span><span class="params">(Map&lt;String, MovieCatalog&gt; movieCatalogs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieCatalogs = movieCatalogs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 是否必须注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java8 Option注入和JSR305 @Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(Optional&lt;MovieFinder&gt; movieFinder)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(@Nullable MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6 自动注入spring内置对象</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">您还可以使用@Autowired来处理众所周知的可解析依赖关系:BeanFactory、ApplicationContext、环境、ResourceLoader、ApplicationEventPublisher和MessageSource。这些接口及其扩展接口(如ConfigurableApplicationContext或ResourcePatternResolver)是自动解析的，不需要特殊的设置。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieRecommender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> Your target beans can implement the <code>org.springframework.core.Ordered</code> interface or use the <code>@Order</code> or standard <code>@Priority</code> annotation if you want items in the array or list to be sorted in a specific order. Otherwise their order will follow the registration order of the corresponding target bean definitions in the container.</p>
<p>@Order注释可以在目标类级别上声明，也可以在@Bean方法上声明，每个bean定义都可能是非常独立的(对于具有相同bean类的多个定义)。@Order值可能会影响注入点的优先级，但是请注意，它们不会影响单例启动顺序，单例启动顺序是由依赖关系和@DependsOn声明决定的。</p>
<p>Note that the standard <code>javax.annotation.Priority</code>在@Bean级别不可用，因为它不能在方法上声明。它的语义可以通过每个类型的单个bean上的@Order值与@Primary组合来建模。</p>
<h2 id="2-3-Qualifier"><a href="#2-3-Qualifier" class="headerlink" title="2.3 @Qualifier"></a>2.3 @Qualifier</h2><p>注入有标识的类，根据标识获取。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"main"</span>)</span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &lt;bean class="example.SimpleMovieCatalog"&gt;</span></span><br><span class="line"><span class="comment">        &lt;qualifier value="main"/&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &lt;!-- inject any dependencies required by this bean --&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(@Qualifier(<span class="string">"main"</span>)</span>MovieCatalog movieCatalog, <span class="comment">// 指定获取容器中有标识name属性值为main的类</span></span></span><br><span class="line"><span class="function">            CustomerPreferenceDao customerPreferenceDao) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieCatalog = movieCatalog;</span><br><span class="line">        <span class="keyword">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>限定符注入类，事由@Resource(name=”xx”)获取容器中指定的类更好。</strong></p>
<p><strong>@Autowired应用于字段、构造函数和多参数方法，允许在参数级别通过限定符注释缩小范围。相比之下，@Resource只支持具有单个参数的字段和bean属性setter方法。因此，如果注入目标是构造函数或多参数方法，请坚持使用限定符。</strong></p>
<h3 id="2-3-1-自定义标识符"><a href="#2-3-1-自定义标识符" class="headerlink" title="2.3.1 自定义标识符"></a>2.3.1 自定义标识符</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD, ElementType.PARAMETER&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MovieQualifier &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">genre</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Format <span class="title">format</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Format &#123;</span><br><span class="line">    VHS, DVD, BLURAY</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@MovieQualifier</span>(format=Format.VHS, genre=<span class="string">"Action"</span>)</span><br><span class="line">    <span class="keyword">private</span> MovieCatalog actionVhsCatalog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@MovieQualifier</span>(format=Format.VHS, genre=<span class="string">"Comedy"</span>)</span><br><span class="line">    <span class="keyword">private</span> MovieCatalog comedyVhsCatalog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@MovieQualifier</span>(format=Format.DVD, genre=<span class="string">"Action"</span>)</span><br><span class="line">    <span class="keyword">private</span> MovieCatalog actionDvdCatalog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@MovieQualifier</span>(format=Format.BLURAY, genre=<span class="string">"Comedy"</span>)</span><br><span class="line">    <span class="keyword">private</span> MovieCatalog comedyBluRayCatalog;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// XML方式：例</span></span><br><span class="line">	&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"example.SimpleMovieCatalog"</span>&gt;</span><br><span class="line">        &lt;qualifier type=<span class="string">"MovieQualifier"</span>&gt;</span><br><span class="line">            &lt;attribute key=<span class="string">"format"</span> value=<span class="string">"VHS"</span>/&gt;</span><br><span class="line">            &lt;attribute key=<span class="string">"genre"</span> value=<span class="string">"Action"</span>/&gt;</span><br><span class="line">        &lt;/qualifier&gt;</span><br><span class="line">        &lt;!-- inject any dependencies required by <span class="keyword">this</span> bean --&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-使用泛型作为连接符"><a href="#2-3-2-使用泛型作为连接符" class="headerlink" title="2.3.2 使用泛型作为连接符"></a>2.3.2 使用泛型作为连接符</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringStore <span class="title">stringStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringStore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IntegerStore <span class="title">integerStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IntegerStore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注入</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Store&lt;String&gt; s1; <span class="comment">// &lt;String&gt; qualifier, injects the stringStore bean</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Store&lt;Integer&gt; s2; <span class="comment">// &lt;Integer&gt; qualifier, injects the integerStore bean</span></span><br></pre></td></tr></table></figure>

<p>也可以是数组、集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Inject all Store beans as long as they have an &lt;Integer&gt; generic</span></span><br><span class="line"><span class="comment">// Store&lt;String&gt; beans will not appear in this list</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Store&lt;Integer&gt;&gt; s;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-CustomAutowireConfigurer"><a href="#2-4-CustomAutowireConfigurer" class="headerlink" title="2.4 CustomAutowireConfigurer"></a>2.4 CustomAutowireConfigurer</h2><p>CustomAutowireConfigurer是一个BeanFactoryPostProcessor，它允许您注册自己的自定义限定符注释类型，即使它们没有<strong>使用Spring的@Qualifier注释</strong>进行注释。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"customAutowireConfigurer"</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.beans.factory.annotation.CustomAutowireConfigurer"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"customQualifierTypes"</span>&gt;</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;value&gt;example.CustomQualifier&lt;/value&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>The <code>AutowireCandidateResolver</code> determines autowire candidates by:</p>
<ul>
<li>the <code>autowire-candidate</code> value of each bean definition</li>
<li>any <code>default-autowire-candidates</code> pattern(s) available on the <code>&lt;beans/&gt;</code> element</li>
<li>the presence of <code>@Qualifier</code> annotations and any custom annotations registered with the <code>CustomAutowireConfigurer</code></li>
</ul>
<p>When multiple beans qualify as autowire candidates, the determination of a “primary” is the following: if exactly one bean definition among the candidates has a <code>primary</code> attribute set to <code>true</code>, it will be selected.</p>
<h2 id="2-5-Resource"><a href="#2-5-Resource" class="headerlink" title="2.5 @Resource"></a>2.5 @Resource</h2><p><strong>like @Autowire(require=””),指定注入，@Resource(name=””).JSR-250规范。</strong></p>
<p><strong>@Resource只支持具有单个参数的字段和bean属性setter方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"myMovieFinder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-6-PostConstruct-and-PreDestroy"><a href="#2-6-PostConstruct-and-PreDestroy" class="headerlink" title="2.6 @PostConstruct and @PreDestroy"></a>2.6 @PostConstruct and @PreDestroy</h2><p>JSR250规范，bean生命周期。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachingMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">populateMovieCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// populates the movie cache upon initialization...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearMovieCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// clears the movie cache upon destruction...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-7-组件扫描方式自动注入"><a href="#2-7-组件扫描方式自动注入" class="headerlink" title="2.7 组件扫描方式自动注入"></a>2.7 组件扫描方式自动注入</h2><p>Spring提供了进一步的原型注释:@Component， @Service和@Controller。@Component是任何spring托管组件的通用原型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// Spring will see this and treat @Service in the same way as @Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>元注释还可以组合起来创建组合注释。例如，Spring MVC中的@RestController注释由@Controller和@ResponseBody组成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleMovieLister</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 扫描</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"org.example"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span>  </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-8-定制扫描规则"><a href="#2-8-定制扫描规则" class="headerlink" title="2.8 定制扫描规则"></a>2.8 定制扫描规则</h2><table>
<thead>
<tr>
<th>Filter Type</th>
<th>Example Expression</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>annotation (default)</td>
<td><code>org.example.SomeAnnotation</code></td>
<td>An annotation to be present at the type level in target components.</td>
</tr>
<tr>
<td>assignable</td>
<td><code>org.example.SomeClass</code></td>
<td>A class (or interface) that the target components are assignable to (extend/implement).</td>
</tr>
<tr>
<td>aspectj</td>
<td><code>org.example..*Service+</code></td>
<td>An AspectJ type expression to be matched by the target components.</td>
</tr>
<tr>
<td>regex</td>
<td><code>org\.example\.Default.*</code></td>
<td>A regex expression to be matched by the target components class names.</td>
</tr>
<tr>
<td>custom</td>
<td><code>org.example.MyTypeFilter</code></td>
<td>A custom implementation of the <code>org.springframework.core.type .TypeFilter</code> interface.</td>
</tr>
</tbody></table>
<p>示例： ignoring all <code>@Repository</code> annotations and using “stub” repositories instead.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"org.example"</span>,</span><br><span class="line">        includeFilters = </span><br><span class="line">               <span class="meta">@Filter</span>(type = FilterType.REGEX, pattern = <span class="string">".*Stub.*Repository"</span>),</span><br><span class="line">        excludeFilters = <span class="meta">@Filter</span>(Repository<span class="class">.<span class="keyword">class</span>))</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// XML方式</span></span><br><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"org.example"</span>&gt;</span><br><span class="line">        &lt;context:include-filter type=<span class="string">"regex"</span></span><br><span class="line">                expression=<span class="string">".*Stub.*Repository"</span>/&gt;</span><br><span class="line">        &lt;context:exclude-filter type=<span class="string">"annotation"</span></span><br><span class="line">                expression=<span class="string">"org.springframework.stereotype.Repository"</span>/&gt;</span><br><span class="line">    &lt;/context:component-scan&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>还可以通过在注释上设置useDefaultFilters=false或将use-default filters=”false”作为元素的属性来禁用默认过滤器。这实际上会禁用用@Component、@Repository、@Service、@Controller或@Configuration注释的类的自动检测。</p>
<h2 id="2-9-组件和-Bean和InjectPoint使用"><a href="#2-9-组件和-Bean和InjectPoint使用" class="headerlink" title="2.9 组件和@Bean和InjectPoint使用"></a>2.9 组件和@Bean和InjectPoint使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryMethodComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"public"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestBean <span class="title">publicInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestBean(<span class="string">"publicInstance"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use of a custom qualifier and autowiring of method parameters</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> TestBean <span class="title">protectedInstance</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @Qualifier(<span class="string">"public"</span>)</span> TestBean spouse,</span></span><br><span class="line"><span class="function">            @<span class="title">Value</span><span class="params">(<span class="string">"#&#123;privateInstance.age&#125;"</span>)</span> String country) </span>&#123;</span><br><span class="line">        TestBean tb = <span class="keyword">new</span> TestBean(<span class="string">"protectedInstance"</span>, <span class="number">1</span>);</span><br><span class="line">        tb.setSpouse(spouse);</span><br><span class="line">        tb.setCountry(country);</span><br><span class="line">        <span class="keyword">return</span> tb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TestBean <span class="title">privateInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestBean(<span class="string">"privateInstance"</span>, i++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@RequestScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestBean <span class="title">requestScopedInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestBean(<span class="string">"requestScopedInstance"</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.3中，您还可以声明类型为InjectionPoint(或其更特定的子类DependencyDescriptor)的工厂方法参数，以便访问触发当前bean创建的请求注入点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryMethodComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestBean <span class="title">prototypeInstance</span><span class="params">(InjectionPoint injectionPoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestBean(<span class="string">"prototypeInstance for "</span> + injectionPoint.getMember());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>您可以将@Bean方法声明为<strong>静态方法</strong>，这样就可以在不创建包含配置类的实例的情况下调用它们。这在定义后处理器bean(例如BeanFactoryPostProcessor或BeanPostProcessor的类型)时特别有意义，因为这些bean将在容器生命周期的早期被初始化，并且应该避免在那时触发配置的其他部分。</p>
<p>注意，对静态@Bean方法的调用<strong>永远不会被容器拦截</strong>，甚至在@Configuration类中也不会被拦截(请参阅上面)。这是由于技术限制:<strong>CGLIB子类化只能覆盖非静态方法</strong>。因此，直接调用另一个@Bean方法将具有标准的Java语义，从而直接从工厂方法本身返回独立的实例。</p>
<p>@Bean方法的Java语言可见性不会立即影响Spring容器中生成的bean定义。您可以自由地声明您的工厂方法，因为您认为它适合于非-@Configuration类以及任何位置的静态方法。然而，@Configuration类中的常规@Bean方法需要被覆盖，即它们不能声明为私有或final。    </p>
<p>@Bean方法还将在给定组件或配置类的基类上以及在组件或配置类实现的接口中声明的Java 8默认方法上发现。这使得在组合复杂的配置安排时具有很大的灵活性，甚至可以通过Spring 4.2的Java 8默认方法实现多重继承。</p>
<p>最后，请注意，单个类可能为同一个bean持有多个@Bean方法，这是根据运行时可用依赖关系安排的多个工厂方法。这与在其他配置场景中选择“最贪婪的”构造函数或工厂方法的算法相同:具有最多可满足依赖项的变体将在构建时被选中，类似于容器如何在多个@Autowired构造函数之间进行选择。</p>
<h2 id="2-10-生成候选组件的索引"><a href="#2-10-生成候选组件的索引" class="headerlink" title="*2.10 生成候选组件的索引"></a>*2.10 生成候选组件的索引</h2><p>虽然类路径扫描非常快，但是通过在编译时创建一个候选的静态列表，可以提高大型应用程序的启动性能。在这种模式下，应用程序的所有模块都必须使用这种机制，因为当ApplicationContext检测到这样的索引时，它将自动使用它而不是扫描类路径。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-indexer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>That process will generate a <code>META-INF/spring.components</code> file that is going to be included in the jar.</p>
<p>在IDE中使用这种模式时，spring-context-indexer必须注册为注释处理器，以确保在更新候选组件时索引是最新的。</p>
<p>当在类路径中找到<code>META-INF/spring.components</code>时，自动启用索引。如果某个索引对于某些库(或用例)是部分可用的，但是不能为整个应用程序构建，那么setting <code>spring.index.ignore</code>to <code>true</code>, either as a system property or in a <code>spring.properties</code> file at the root of the classpath.</p>
<h2 id="2-11-JSR330-Annotations"><a href="#2-11-JSR330-Annotations" class="headerlink" title="2.11 JSR330 Annotations"></a>2.11 JSR330 Annotations</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-11-1-Inject-Named"><a href="#2-11-1-Inject-Named" class="headerlink" title="2.11.1@Inject @Named"></a>2.11.1@Inject @Named</h3><p><strong>@Inject 等价于 @Autowired 无required属性。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"><span class="keyword">import</span> javax.inject.Named;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(@Named(<span class="string">"main"</span>)</span> MovieFinder movieFinder) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Named和@ManagedBean:与@Component注解等同</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.inject.Inject;</span><br><span class="line"><span class="keyword">import</span> javax.inject.Named;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Named</span>(<span class="string">"movieListener"</span>)  <span class="comment">// @ManagedBean("movieListener") could be used as well</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Spring</th>
<th>javax.inject.*</th>
<th>javax.inject restrictions / comments</th>
</tr>
</thead>
<tbody><tr>
<td>@Autowired</td>
<td>@Inject</td>
<td><code>@Inject</code> has no ‘required’ attribute; can be used with Java 8’s <code>Optional</code> instead.</td>
</tr>
<tr>
<td>@Component</td>
<td>@Named / @ManagedBean</td>
<td>JSR-330 does not provide a composable model, just a way to identify named components.</td>
</tr>
<tr>
<td>@Scope(“singleton”)</td>
<td>@Singleton</td>
<td>The JSR-330 default scope is like Spring’s <code>prototype</code>. However, in order to keep it consistent with Spring’s general defaults, a JSR-330 bean declared in the Spring container is a <code>singleton</code> by default. In order to use a scope other than <code>singleton</code>, you should use Spring’s <code>@Scope</code> annotation. <code>javax.inject</code> also provides a <span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5vcmFjbGUuY29tL2phdmFlZS82L2FwaS9qYXZheC9pbmplY3QvU2NvcGUuaHRtbA==" title="https://download.oracle.com/javaee/6/api/javax/inject/Scope.html">@Scope<i class="fa fa-external-link"></i></span>annotation. Nevertheless, this one is only intended to be used for creating your own annotations.</td>
</tr>
<tr>
<td>@Qualifier</td>
<td>@Qualifier / @Named</td>
<td><code>javax.inject.Qualifier</code> is just a meta-annotation for building custom qualifiers. Concrete String qualifiers (like Spring’s <code>@Qualifier</code> with a value) can be associated through <code>javax.inject.Named</code>.</td>
</tr>
<tr>
<td>@Value</td>
<td>-</td>
<td>no equivalent</td>
</tr>
<tr>
<td>@Required</td>
<td>-</td>
<td>no equivalent</td>
</tr>
<tr>
<td>@Lazy</td>
<td>-</td>
<td>no equivalent</td>
</tr>
<tr>
<td>ObjectFactory</td>
<td>Provider</td>
<td><code>javax.inject.Provider</code> is a direct alternative to Spring’s <code>ObjectFactory</code>, just with a shorter <code>get()</code> method name. It can also be used in combination with Spring’s <code>@Autowired</code>or with non-annotated constructors and setter methods.</td>
</tr>
</tbody></table>
<h2 id="2-12-Configuration和-Bean"><a href="#2-12-Configuration和-Bean" class="headerlink" title="2.12 @Configuration和@Bean"></a>2.12 @Configuration和@Bean</h2><h3 id="2-12-1-基本容器配置："><a href="#2-12-1-基本容器配置：" class="headerlink" title="2.12.1 基本容器配置："></a>2.12.1 基本容器配置：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransferServiceImpl <span class="title">transferService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransferServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Foo <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"cleanup"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bar <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-12-2-Lookup-method-injection"><a href="#2-12-2-Lookup-method-injection" class="headerlink" title="2.12.2  Lookup method injection"></a>2.12.2  Lookup method injection</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">process</span><span class="params">(Object commandState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// grab a new instance of the appropriate Command interface</span></span><br><span class="line">        Command command = createCommand();</span><br><span class="line">        <span class="comment">// set the state on the (hopefully brand new) Command instance</span></span><br><span class="line">        command.setState(commandState);</span><br><span class="line">        <span class="keyword">return</span> command.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// okay... but where is the implementation of this method?</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Command <span class="title">createCommand</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> AsyncCommand <span class="title">asyncCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AsyncCommand command = <span class="keyword">new</span> AsyncCommand();</span><br><span class="line">    <span class="comment">// inject dependencies here as required</span></span><br><span class="line">    <span class="keyword">return</span> command;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommandManager <span class="title">commandManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// return new anonymous implementation of CommandManager with command() overridden</span></span><br><span class="line">    <span class="comment">// to return a new prototype Command object</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommandManager() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Command <span class="title">createCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> asyncCommand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-12-3-组合容器配置："><a href="#2-12-3-组合容器配置：" class="headerlink" title="2.12.3 组合容器配置："></a>2.12.3 组合容器配置：</h3><p><strong>基于参数的注入</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransferService <span class="title">transferService</span><span class="params">(AccountRepository accountRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransferServiceImpl(accountRepository);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountRepository <span class="title">accountRepository</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcAccountRepository(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;ServiceConfig<span class="class">.<span class="keyword">class</span>, <span class="title">RepositoryConfig</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SystemTestConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// return new DataSource</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(SystemTestConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// everything wires up across configuration classes...</span></span><br><span class="line">    TransferService transferService = ctx.getBean(TransferService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    transferService.transfer(<span class="number">100.00</span>, <span class="string">"A123"</span>, <span class="string">"C456"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过@Bean对BeanPostProcessor和BeanFactoryPostProcessor定义要特别小心。这些方法通常应该声明为静态@Bean方法，而不是触发其包含的配置类的实例化。否则，@Autowired和@Value将无法在配置类本身上工作，因为它被过早地创建为bean实例。</p>
<p><strong>利用@Autowire注入</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountRepository accountRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransferService <span class="title">transferService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransferServiceImpl(accountRepository);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RepositoryConfig</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountRepository <span class="title">accountRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcAccountRepository(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;ServiceConfig<span class="class">.<span class="keyword">class</span>, <span class="title">RepositoryConfig</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SystemTestConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// return new DataSource</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext(SystemTestConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// everything wires up across configuration classes...</span></span><br><span class="line">    TransferService transferService = ctx.getBean(TransferService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    transferService.transfer(<span class="number">100.00</span>, <span class="string">"A123"</span>, <span class="string">"C456"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Configuration类中的构造函数注入仅在Spring Framework 4.3时受到支持。还要注意，如果目标bean只定义一个构造函数，则不需要指定@Autowired;在上面的示例中，在RepositoryConfig构造函数中不需要@Autowired。</p>
<h2 id="2-13-Conditional-Profile"><a href="#2-13-Conditional-Profile" class="headerlink" title="2.13 @Conditional @Profile"></a>2.13 @Conditional @Profile</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Conditional &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * All &#123;<span class="doctag">@link</span> Condition&#125;s that must &#123;<span class="doctag">@linkplain</span> Condition#matches match&#125;</span></span><br><span class="line"><span class="comment">    * in order for the component to be registered.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Class&lt;? extends Condition&gt;[] value();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional</span>(ProfileCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">Profile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The set of profiles for which the annotated component should be registered.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   String[] value();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据条件注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">      MultiValueMap&lt;String, Object&gt; attrs = metadata.getAllAnnotationAttributes(Profile<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">      <span class="keyword">if</span> (attrs != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">for</span> (Object value : attrs.get(<span class="string">"value"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (context.getEnvironment().acceptsProfiles((String[]) value)) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置不同环境配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"default"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultDataConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedDatabaseBuilder()</span><br><span class="line">            .setType(EmbeddedDatabaseType.HSQL)</span><br><span class="line">            .addScript(<span class="string">"classpath:com/bank/config/sql/schema.sql"</span>)</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>激活</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1....</span></span><br><span class="line">AnnotationConfigApplicationContext ctx = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line">ctx.getEnvironment().setActiveProfiles(<span class="string">"development"</span>);</span><br><span class="line">ctx.register(SomeConfig<span class="class">.<span class="keyword">class</span>, <span class="title">StandaloneDataConfig</span>.<span class="title">class</span>, <span class="title">JndiDataConfig</span>.<span class="title">class</span>)</span>;</span><br><span class="line">ctx.refresh();</span><br><span class="line"><span class="comment">// 2....</span></span><br><span class="line">ApplicationContext ctx</span><br><span class="line">ctx.getEnvironment().setActiveProfiles(<span class="string">"profile1"</span>, <span class="string">"profile2"</span>);</span><br><span class="line"><span class="comment">// 3....</span></span><br><span class="line">-Dspring.profiles.active=<span class="string">"profile1,profile2"</span></span><br></pre></td></tr></table></figure>

<h2 id="2-14-注入配置文件"><a href="#2-14-注入配置文件" class="headerlink" title="2.14 注入配置文件"></a>2.14 注入配置文件</h2><p>For a common <code>StandardServletEnvironment</code>, the full hierarchy looks as follows, with the highest-precedence entries at the top:</p>
<ul>
<li>ServletConfig parameters (if applicable, e.g. in case of a <code>DispatcherServlet</code> context)</li>
<li>ServletContext parameters (web.xml context-param entries)</li>
<li>JNDI environment variables (“java:comp/env/“ entries)</li>
<li>JVM system properties (“-D” command-line arguments)</li>
<li>JVM system environment (operating system environment variables)</li>
</ul>
<h3 id="2-14-1-xml方式"><a href="#2-14-1-xml方式" class="headerlink" title="2.14.1 xml方式"></a>2.14.1 xml方式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- picks up and registers AppConfig as a bean definition --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.acme"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:/com/acme/jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-14-2-配置类方式"><a href="#2-14-2-配置类方式" class="headerlink" title="2.14.2 配置类方式"></a>2.14.2 配置类方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:/com/acme/properties-config.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DriverManagerDataSource(url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-13-3-PropertySource"><a href="#2-13-3-PropertySource" class="headerlink" title="2.13.3 @PropertySource"></a>2.13.3 @PropertySource</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:/com/$&#123;my.placeholder:default/path&#125;/app.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestBean <span class="title">testBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TestBean testBean = <span class="keyword">new</span> TestBean();</span><br><span class="line">        testBean.setName(env.getProperty(<span class="string">"testbean.name"</span>));</span><br><span class="line">        <span class="keyword">return</span> testBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// xml 方式</span></span><br><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;<span class="keyword">import</span> resource=<span class="string">"com/bank/service/$&#123;customer&#125;-config.xml"</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>占位符”出现在已注册的属性源中，例如系统属性或环境变量，占位符将解析为相应的值。如果没有，那么“default/path”将用作默认值。如果没有指定默认值，且无法解析属性，则会抛出IllegalArgumentException。</p>
<h3 id="2-13-4-注册LoadTimeWeaver"><a href="#2-13-4-注册LoadTimeWeaver" class="headerlink" title="2.13.4 注册LoadTimeWeaver"></a>2.13.4 注册LoadTimeWeaver</h3><p>Spring使用LoadTimeWeaver在类加载到Java虚拟机(JVM)中时动态地转换它们。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableLoadTimeWeaving</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// xml</span></span><br><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;context:load-time-weaver/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>Once configured for the <code>ApplicationContext</code>. Any bean within that <code>ApplicationContext</code> may implement <code>LoadTimeWeaverAware</code>, thereby receiving a reference to the load-time weaver instance. This is particularly useful in combination with <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2RhdGEtYWNjZXNzLmh0bWwjb3JtLWpwYQ==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/data-access.html#orm-jpa">Spring’s JPA support<i class="fa fa-external-link"></i></span> where load-time weaving may be necessary for JPA class transformation. Consult the <code>LocalContainerEntityManagerFactoryBean</code> javadocs for more detail. For more on AspectJ load-time weaving, see <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNhb3AtYWotbHR3" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#aop-aj-ltw">Load-time weaving with AspectJ in the Spring Framework<i class="fa fa-external-link"></i></span>.</p>
<h2 id="3-ApplicationContext"><a href="#3-ApplicationContext" class="headerlink" title="3 ApplicationContext"></a>3 ApplicationContext</h2><p>To enhance <code>BeanFactory</code> functionality in a more framework-oriented style the context package also provides the following functionality:</p>
<ul>
<li><em>Access to messages in i18n-style</em>, through the <code>MessageSource</code> interface.</li>
<li><em>Access to resources</em>, such as URLs and files, through the <code>ResourceLoader</code> interface.</li>
<li><em>Event publication</em> to namely beans implementing the <code>ApplicationListener</code> interface, through the use of the <code>ApplicationEventPublisher</code> interface.</li>
<li><em>Loading of multiple (hierarchical) contexts</em>, allowing each to be focused on one particular layer, such as the web layer of an application, through the <code>HierarchicalBeanFactory</code> interface.</li>
</ul>
<h3 id="3-1-使用MessageSource国际化"><a href="#3-1-使用MessageSource国际化" class="headerlink" title="3.1 使用MessageSource国际化"></a>3.1 使用MessageSource国际化</h3><ul>
<li><code>String getMessage(String code, Object[] args, String default, Locale loc)</code>: The basic method used to retrieve a message from the <code>MessageSource</code>. When no message is found for the specified locale, the default message is used. Any arguments passed in become replacement values, using the <code>MessageFormat</code> functionality provided by the standard library.</li>
<li><code>String getMessage(String code, Object[] args, Locale loc)</code>: Essentially the same as the previous method, but with one difference: no default message can be specified; if the message cannot be found, a <code>NoSuchMessageException</code> is thrown.</li>
<li><code>String getMessage(MessageSourceResolvable resolvable, Locale locale)</code>: All properties used in the preceding methods are also wrapped in a class named <code>MessageSourceResolvable</code>, which you can use with this method.</li>
</ul>
<p>加载ApplicationContext时，它会自动搜索上下文中定义的MessageSource bean。<strong>bean必须具有名称messageSource</strong>。如果找到这样的bean，对前面方法的所有调用都将委托给消息源。如果没有找到消息源，ApplicationContext将尝试查找包含同名bean的父节点。如果有，则使用该bean作为MessageSource。如果ApplicationContext不能为消息找到任何源，则实例化一个空的delegate messagesource，以便能够接受对上面定义的方法的调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"messageSource"</span></span><br><span class="line">            <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"basenames"</span>&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;format&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;exceptions&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;windows&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"></span><br><span class="line"># in format.properties</span><br><span class="line">message=Alligators rock!</span><br><span class="line"></span><br><span class="line"># in exceptions.properties</span><br><span class="line">argument.required=The &#123;<span class="number">0</span>&#125; argument is required.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MessageSource resources = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    String message = resources.getMessage(<span class="string">"message"</span>, <span class="keyword">null</span>, <span class="string">"Default"</span>, <span class="keyword">null</span>);</span><br><span class="line">    System.out.println(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Alligators rock!</span><br></pre></td></tr></table></figure>

<p>So to summarize, the <code>MessageSource</code> is defined in a file called <code>beans.xml</code>, which exists at the root of your classpath. The <code>messageSource</code> bean definition refers to a number of resource bundles through its <code>basenames</code> property. The three files that are passed in the list to the <code>basenames</code> property exist as files at the root of your classpath and are called <code>format.properties</code>, <code>exceptions.properties</code>, and <code>windows.properties</code> respectively.</p>
<h3 id="3-2-标准和自定义事件"><a href="#3-2-标准和自定义事件" class="headerlink" title="3.2 标准和自定义事件"></a>3.2 标准和自定义事件</h3><h4 id="3-2-1-标准事件"><a href="#3-2-1-标准事件" class="headerlink" title="3.2.1 标准事件"></a>3.2.1 标准事件</h4><table>
<thead>
<tr>
<th>Event</th>
<th>Explanation</th>
</tr>
</thead>
<tbody><tr>
<td><code>ContextRefreshedEvent</code></td>
<td>Published when the <code>ApplicationContext</code> is initialized or refreshed, for example, using the <code>refresh()</code> method on the <code>ConfigurableApplicationContext</code> interface. “Initialized” here means that all beans are loaded, post-processor beans are detected and activated, singletons are pre-instantiated, and the <code>ApplicationContext</code> object is ready for use. As long as the context has not been closed, a refresh can be triggered multiple times, provided that the chosen <code>ApplicationContext</code> actually supports such “hot” refreshes. For example, <code>XmlWebApplicationContext</code> supports hot refreshes, but <code>GenericApplicationContext</code> does not.</td>
</tr>
<tr>
<td><code>ContextStartedEvent</code></td>
<td>Published when the <code>ApplicationContext</code> is started, using the <code>start()</code> method on the <code>ConfigurableApplicationContext</code>interface. “Started” here means that all <code>Lifecycle</code> beans receive an explicit start signal. Typically this signal is used to restart beans after an explicit stop, but it may also be used to start components that have not been configured for autostart , for example, components that have not already started on initialization.</td>
</tr>
<tr>
<td><code>ContextStoppedEvent</code></td>
<td>Published when the <code>ApplicationContext</code> is stopped, using the <code>stop()</code> method on the <code>ConfigurableApplicationContext</code>interface. “Stopped” here means that all <code>Lifecycle</code> beans receive an explicit stop signal. A stopped context may be restarted through a <code>start()</code> call.</td>
</tr>
<tr>
<td><code>ContextClosedEvent</code></td>
<td>Published when the <code>ApplicationContext</code> is closed, using the <code>close()</code> method on the <code>ConfigurableApplicationContext</code>interface. “Closed” here means that all singleton beans are destroyed. A closed context reaches its end of life; it cannot be refreshed or restarted.</td>
</tr>
<tr>
<td><code>RequestHandledEvent</code></td>
<td>A web-specific event telling all beans that an HTTP request has been serviced. This event is published <em>after</em> the request is complete. This event is only applicable to web applications using Spring’s <code>DispatcherServlet</code>.</td>
</tr>
</tbody></table>
<h4 id="3-2-3-自定义事件"><a href="#3-2-3-自定义事件" class="headerlink" title="3.2.3 自定义事件"></a>3.2.3 自定义事件</h4><h4 id="3-2-3-1-XML方式"><a href="#3-2-3-1-XML方式" class="headerlink" title="3.2.3.1 XML方式"></a>3.2.3.1 XML方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 事件类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String address;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String test;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">BlackListEvent</span><span class="params">(Object source, String address, String test)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(source);</span><br><span class="line">      <span class="keyword">this</span>.address = address;</span><br><span class="line">      <span class="keyword">this</span>.test = test;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"do something ..."</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务类，发布事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailService</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> List&lt;String&gt; blackList;</span><br><span class="line">	<span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBlackList</span><span class="params">(List&lt;String&gt; blackList)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.blackList = blackList;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher publisher)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.publisher = publisher;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(String address, String text)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (blackList.contains(address)) &#123;</span><br><span class="line">			BlackListEvent event = <span class="keyword">new</span> BlackListEvent(<span class="keyword">this</span>, address, text);</span><br><span class="line">			publisher.publishEvent(event);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// send email...</span></span><br><span class="line">		System.out.println(<span class="string">"send email..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听类，处理（调用）事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListNotifier</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">BlackListEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String notificationAddress;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNotificationAddress</span><span class="params">(String notificationAddress)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.notificationAddress = notificationAddress;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 发布事件后自动调用下面内容</span></span><br><span class="line">		System.out.println(<span class="string">"notificationAddress："</span> + notificationAddress);</span><br><span class="line">		event.doSomething();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="comment">// 注入</span></span><br><span class="line">	&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zx.event.EmailService"</span>&gt;</span><br><span class="line">		&lt;property name=<span class="string">"blackList"</span>&gt;</span><br><span class="line">			&lt;list&gt;</span><br><span class="line">				&lt;value&gt;known.spammer@example.org&lt;/value&gt;</span><br><span class="line">				&lt;value&gt;known.hacker@example.org&lt;/value&gt;</span><br><span class="line">				&lt;value&gt;john.doe@example.org&lt;/value&gt;</span><br><span class="line">			&lt;/list&gt;</span><br><span class="line">		&lt;/property&gt;</span><br><span class="line">	&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">	&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zx.event.BlackListNotifier"</span>&gt;</span><br><span class="line">		&lt;property name=<span class="string">"notificationAddress"</span> value=<span class="string">"blacklist@example.org"</span>/&gt;</span><br><span class="line">	&lt;/bean&gt;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	当调用emailService bean的sendEmail()方法时，如果有任何电子邮件应该被列入黑名单，就会发布BlackListEvent类型的自定义事件。blackListNotifier bean注册为ApplicationListener，从而接收BlackListEvent，此时它可以通知相关方。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">        <span class="comment">// 测试类</span></span><br><span class="line">        <span class="meta">@org</span>.junit.Test</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:application.xml"</span>);</span><br><span class="line"></span><br><span class="line">		EmailService bean = ctx.getBean(EmailService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		bean.sendEmail(<span class="string">"john.doe@example.org"</span>,<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结果</span></span><br><span class="line">        notificationAddress：blacklist<span class="meta">@example</span>.org</span><br><span class="line">		<span class="keyword">do</span> something ...</span><br></pre></td></tr></table></figure>

<h4 id="3-2-3-2-注解方式"><a href="#3-2-3-2-注解方式" class="headerlink" title="3.2.3.2 注解方式"></a>3.2.3.2 注解方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackListNotifier</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String notificationAddress;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNotificationAddress</span><span class="params">(String notificationAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.notificationAddress = notificationAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// notify appropriate parties via notificationAddress...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>监听多个事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"notificationAddress："</span> + notificationAddress);</span><br><span class="line">event.doSomething();</span><br></pre></td></tr></table></figure>

<p>条件判断监听事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener</span>(condition = <span class="string">"#blEvent.test == 'foo'"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent blEvent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// notify appropriate parties via notificationAddress...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If you need to publish an event as the result of processing another, just change the method signature to return the event that should be published, something like:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListUpdateEvent <span class="title">handleBlackListEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// notify appropriate parties via notificationAddress and</span></span><br><span class="line">    <span class="comment">// then publish a ListUpdateEvent...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Asynchronous-Listeners"><a href="#Asynchronous-Listeners" class="headerlink" title="Asynchronous Listeners"></a>Asynchronous Listeners</h5><p>If you want a particular listener to process events asynchronously, simply reuse the <a href="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/integration.html#scheduling-annotation-support-async" target="_blank" rel="noopener">regular <code>@Async</code> support</a>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// BlackListEvent is processed in a separate thread</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Ordering-listeners"><a href="#Ordering-listeners" class="headerlink" title="Ordering listeners"></a>Ordering listeners</h5><p>If you need the listener to be invoked before another one, just add the <code>@Order</code> annotation to the method declaration:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">42</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processBlackListEvent</span><span class="params">(BlackListEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// notify appropriate parties via notificationAddress...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Generic-events"><a href="#Generic-events" class="headerlink" title="Generic events"></a>Generic events</h5><p>You may also use generics to further define the structure of your event. Consider an <code>EntityCreatedEvent&lt;T&gt;</code> where <code>T</code> is the type of the actual entity that got created. You can create the following listener definition to only receive <code>EntityCreatedEvent</code> for a <code>Person</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPersonCreated</span><span class="params">(EntityCreatedEvent&lt;Person&gt; event)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-Convenient-ApplicationContext-instantiation-for-web-applications"><a href="#3-3-Convenient-ApplicationContext-instantiation-for-web-applications" class="headerlink" title="3.3 Convenient ApplicationContext instantiation for web applications"></a>3.3 Convenient ApplicationContext instantiation for web applications</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/daoContext.xml /WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-Application-Or-BeanFactory"><a href="#3-4-Application-Or-BeanFactory" class="headerlink" title="3.4 Application Or BeanFactory"></a>3.4 Application Or BeanFactory</h3><table>
<thead>
<tr>
<th>Feature</th>
<th><code>BeanFactory</code></th>
<th><code>ApplicationContext</code></th>
</tr>
</thead>
<tbody><tr>
<td>Bean instantiation/wiring</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Automatic <code>BeanPostProcessor</code>registration</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>Automatic <code>BeanFactoryPostProcessor</code>registration</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>Convenient <code>MessageSource</code> access (for i18n)</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td><code>ApplicationEvent</code> publication</td>
<td>No</td>
<td>Yes</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>9-数据操作-JPA</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/9-%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C-JPA/</url>
    <content><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h1><p>Java持久性API(JPA)是Java的一个规范。 它用于在Java对象和关系数据库之间保存数据。 JPA充当面向对象的领域模型和关系数据库系统之间的桥梁。</p>
<p>由于JPA只是一个规范，它本身不执行任何操作。 它需要一个实现。 因此，像Hibernate，TopLink和iBatis这样的ORM工具实现了JPA数据持久性规范。</p>
<ul>
<li><p>JPA 是 hibernate 的一个抽象（就像JDBC和JDBC驱动的关系）：</p>
<ul>
<li>JPA 是规范：JPA 本质上就是一种  ORM 规范，不是ORM 框架 —— 因为 JPA 并未提供 ORM 实现，它只是制订了一些规范，提供了一些编程的 API 接口，但具体实现则由 ORM 厂商提供实现</li>
<li>Hibernate 是实现：Hibernate 除了作为 ORM 框架之外，它也是一种 JPA 实现</li>
</ul>
</li>
<li><p>从功能上来说， JPA 是 Hibernate 功能的一个子集</p>
</li>
</ul>
<p><strong>包含3方面的技术</strong></p>
<ol>
<li><p>ORM  映射元数据：JPA 支持 XML 和  JDK 5.0 注解两种元数据的形式，元数据描述对象和表之间的映射关系，框架据此将实体对象持久化到数据库表中。  </p>
</li>
<li><p>JPA 的 API：用来操作实体对象，执行CRUD操作，框架在后台完成所有的事情，开发者从繁琐的 JDBC和 SQL代码中解脱出来。  </p>
</li>
<li><p>查询语言（JPQL）：这是持久化操作中很重要的一个方面，通过面向对象而非面向数据库的查询语言查询数据，避免程序和具体的  SQL 紧密耦合。</p>
<a id="more"></a>
<h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2 实现"></a>2 实现</h1></li>
</ol>
<h2 id="2-1-创建persistence-xml"><a href="#2-1-创建persistence-xml" class="headerlink" title="2.1 创建persistence.xml"></a>2.1 创建persistence.xml</h2><p>规范要求在类路径下/META-INF/目录下创建文件，文件名称固定。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">version</span>=<span class="string">"2.0"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/persistence"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">"jpa-1"</span> <span class="attr">transaction-type</span>=<span class="string">"RESOURCE_LOCAL"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            配置使用什么 ORM 产品来作为 JPA 的实现 </span></span><br><span class="line"><span class="comment">            1. 实际上配置的是  javax.persistence.spi.PersistenceProvider 接口的实现类</span></span><br><span class="line"><span class="comment">            2. 若 JPA 项目中只有一个 JPA 的实现产品, 则也可以不配置该节点. </span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.ejb.HibernatePersistence<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		<span class="comment">&lt;!-- 添加持久化类 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">class</span>&gt;</span>com.atguigu.jpa.helloworld.Customer<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">class</span>&gt;</span>com.atguigu.jpa.helloworld.Order<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		<span class="tag">&lt;<span class="name">class</span>&gt;</span>com.atguigu.jpa.helloworld.Department<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">class</span>&gt;</span>com.atguigu.jpa.helloworld.Manager<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		<span class="tag">&lt;<span class="name">class</span>&gt;</span>com.atguigu.jpa.helloworld.Item<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">class</span>&gt;</span>com.atguigu.jpa.helloworld.Category<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            配置二级缓存的策略 </span></span><br><span class="line"><span class="comment">            ALL：所有的实体类都被缓存</span></span><br><span class="line"><span class="comment">            NONE：所有的实体类都不被缓存. </span></span><br><span class="line"><span class="comment">            ENABLE_SELECTIVE：标识 @Cacheable(true) 注解的实体类将被缓存</span></span><br><span class="line"><span class="comment">            DISABLE_SELECTIVE：缓存除标识 @Cacheable(false) 以外的所有实体类</span></span><br><span class="line"><span class="comment">            UNSPECIFIED：默认值，JPA 产品默认值将被使用</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">shared-cache-mode</span>&gt;</span>ENABLE_SELECTIVE<span class="tag">&lt;/<span class="name">shared-cache-mode</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 连接数据库的基本信息 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///jpatest"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.user"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javax.persistence.jdbc.password"</span> <span class="attr">value</span>=<span class="string">"Gepoint"</span>/&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- 配置 JPA 实现产品的基本属性. 配置 hibernate 的基本属性 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span> <span class="attr">value</span>=<span class="string">"update"</span>/&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- 二级缓存相关 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_second_level_cache"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.region.factory_class"</span> <span class="attr">value</span>=<span class="string">"org.hibernate.cache.ehcache.EhCacheRegionFactory"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_query_cache"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2-保存数据示例"><a href="#2-2-保存数据示例" class="headerlink" title="2.2 保存数据示例"></a>2.2 保存数据示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;	</span><br><span class="line"><span class="comment">//1. 创建 EntitymanagerFactory</span></span><br><span class="line">	String persistenceUnitName = <span class="string">"jpa-1"</span>;</span><br><span class="line">	</span><br><span class="line">	Map&lt;String, Object&gt; properites = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">	properites.put(<span class="string">"hibernate.show_sql"</span>, <span class="keyword">true</span>);</span><br><span class="line">	</span><br><span class="line">	EntityManagerFactory entityManagerFactory = </span><br><span class="line">			<span class="comment">//Persistence.createEntityManagerFactory(persistenceUnitName);</span></span><br><span class="line">			Persistence.createEntityManagerFactory(persistenceUnitName, properites);</span><br><span class="line">			</span><br><span class="line">	<span class="comment">//2. 创建 EntityManager. 类似于 Hibernate 的 SessionFactory</span></span><br><span class="line">	EntityManager entityManager = entityManagerFactory.createEntityManager();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3. 开启事务</span></span><br><span class="line">	EntityTransaction transaction = entityManager.getTransaction();</span><br><span class="line">	transaction.begin();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//4. 进行持久化操作</span></span><br><span class="line">	Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">	customer.setAge(<span class="number">12</span>);</span><br><span class="line">	customer.setEmail(<span class="string">"tom@atguigu.com"</span>);</span><br><span class="line">	customer.setLastName(<span class="string">"Tom"</span>);</span><br><span class="line">	customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line">	customer.setCreatedTime(<span class="keyword">new</span> Date());</span><br><span class="line">	</span><br><span class="line">	entityManager.persist(customer); <span class="comment">// 保存</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//5. 提交事务</span></span><br><span class="line">	transaction.commit();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//6. 关闭 EntityManager</span></span><br><span class="line">	entityManager.close();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//7. 关闭 EntityManagerFactory</span></span><br><span class="line">	entityManagerFactory.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-注解配置"><a href="#3-注解配置" class="headerlink" title="3 注解配置"></a>3 注解配置</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@NamedQuery</span>(name=<span class="string">"testNamedQuery"</span>, query=<span class="string">"FROM Customer c WHERE c.id = ?"</span>)</span><br><span class="line"><span class="meta">@Cacheable</span>(<span class="keyword">true</span>) <span class="comment">// 二级缓存 ENABLE_SELECTIVE</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"JPA_CUTOMERS"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String email;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Date createdTime;</span><br><span class="line">	<span class="keyword">private</span> Date birth;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String lastName, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Set&lt;Order&gt; orders = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//	@TableGenerator(name="ID_GENERATOR",</span></span><br><span class="line"><span class="comment">//			table="jpa_id_generators",</span></span><br><span class="line"><span class="comment">//			pkColumnName="PK_NAME",</span></span><br><span class="line"><span class="comment">//			pkColumnValue="CUSTOMER_ID",</span></span><br><span class="line"><span class="comment">//			valueColumnName="PK_VALUE",</span></span><br><span class="line"><span class="comment">//			allocationSize=100)</span></span><br><span class="line"><span class="comment">//	@GeneratedValue(strategy=GenerationType.TABLE,generator="ID_GENERATOR")</span></span><br><span class="line">	<span class="meta">@GeneratedValue</span>(strategy=GenerationType.AUTO)</span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Column</span>(name=<span class="string">"LAST_NAME"</span>,length=<span class="number">50</span>,nullable=<span class="keyword">false</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> lastName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> email;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.email = email;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Temporal</span>(TemporalType.TIMESTAMP)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getCreatedTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> createdTime;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatedTime</span><span class="params">(Date createdTime)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.createdTime = createdTime;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Temporal</span>(TemporalType.DATE)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> birth;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.birth = birth;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//映射单向 1-n 的关联关系</span></span><br><span class="line">	<span class="comment">//使用 @OneToMany 来映射 1-n 的关联关系</span></span><br><span class="line">	<span class="comment">//使用 @JoinColumn 来映射外键列的名称</span></span><br><span class="line">	<span class="comment">//可以使用 @OneToMany 的 fetch 属性来修改默认的加载策略</span></span><br><span class="line">	<span class="comment">//可以通过 @OneToMany 的 cascade 属性来修改默认的删除策略. </span></span><br><span class="line">	<span class="comment">//注意: 若在 1 的一端的 @OneToMany 中使用 mappedBy 属性, 则 @OneToMany 端就不能再使用 @JoinColumn 属性了. </span></span><br><span class="line"><span class="comment">//	@JoinColumn(name="CUSTOMER_ID")</span></span><br><span class="line">	<span class="meta">@OneToMany</span>(fetch=FetchType.LAZY,cascade=&#123;CascadeType.REMOVE&#125;,mappedBy=<span class="string">"customer"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Order&gt; <span class="title">getOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> orders;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrders</span><span class="params">(Set&lt;Order&gt; orders)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.orders = orders;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//工具方法. 不需要映射为数据表的一列. </span></span><br><span class="line">	<span class="meta">@Transient</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"lastName: "</span> + lastName + <span class="string">", email: "</span> + email;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Customer [id="</span> + id + <span class="string">", lastName="</span> + lastName + <span class="string">", email="</span></span><br><span class="line">				+ email + <span class="string">", age="</span> + age + <span class="string">", createdTime="</span> + createdTime</span><br><span class="line">				+ <span class="string">", birth="</span> + birth + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>@Entity</strong> ：修饰实体类，指明该类将映射到指定的数据表，例如：Customer 类默认的数据表名为 customer</p>
</li>
<li><p><strong>@Table</strong> ：当实体类与映射的数据库表名不同名时需要使用 @Table 注解，该注解与 @Entity 注解并列使用，使用其 <strong>name 属性</strong>指明数据库的表名</p>
</li>
<li><p><strong>@Id 标注用于声明一个实体类的属性映射为数据库的主键列</strong>。该属性通常置于属性声明语句之前，可与声明语句同行，也可写在单独行上。<br>@Id标注也可置于属性的getter方法之前。</p>
</li>
<li><p>@GeneratedValue：<br><strong>@GeneratedValue 用于标注主键的生成策略，通过strategy 属性指定。默认情况下，JPA 自动选择一个最适合底层数据库的主键生成策略：SqlServer对应identity，MySQL 对应 auto increment。</strong><br>在javax.persistence.GenerationType中定义了以下几种可供选择的策略：<br>–IDENTITY：<strong>采用数据库ID自增长的方式来自增主键字段</strong>，Oracle 不支持这种方式；<br>–AUTO： JPA自动选择合适的策略，是默认选项；<br>–SEQUENCE：通过序列产生主键，通过@SequenceGenerator 注解指定序列名，MySql不支持这种方式<br>–TABLE：通过表产生主键，框架借由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植。</p>
</li>
<li><p><strong>@Basic</strong> ：用于<strong>没有任何标注的 getXxx() 方法</strong>，默认即为 @Basic,所以若一个 getter 方法无任何注解，可以使用 @Basic 注解，也可以不使用</p>
</li>
<li><p><strong>@Column</strong> ：当<strong>实体的属性与其映射的数据表的列不同名时使用</strong>，一般用于 getter 方法上。其 <strong>name 属性用来指明此属性在数据表中对应的列名</strong>；<strong>unique 属性</strong>指明<strong>是否为唯一约束</strong>；<strong>nullable 属性</strong>用来<strong>指明是否可以为空，false 为不能为空</strong>；<strong>length 属性</strong>指明<strong>此列的长度</strong>。</p>
</li>
<li><p><strong>@Transient</strong> ：<strong>标注此注解后在创建数据表的时候将会忽略该属性</strong>  Customer 类并没有 info 这个属性，所以数据库中也不应该有 info 这个字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工具方法. 不需要映射为数据表的一列. </span></span><br><span class="line">	<span class="meta">@Transient</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"lastName: "</span> + lastName + <span class="string">", email: "</span> + email;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>@Temporal</strong> ：向数据库<strong>映射日期（Date）属性时用来调整映射的精度</strong>.</p>
</li>
</ol>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="meta">@Temporal</span>(TemporalType.TIMESTAMP)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getCreatedTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> createdTime;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="meta">@Temporal</span>(TemporalType.DATE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> birth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>使用 TABLE 生成主键详解</strong></li>
</ul>
<p>1.创建一个数据表 jpa_id_generators，并添加几条数据</p>
<p> <img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021113033381-394453727.png" alt="img"></p>
<ol start="2">
<li>配置使用 TABLE 主键生成策略</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> 　　 <span class="comment">//使用 TABLE 主键生成策略</span></span><br><span class="line"> <span class="number">2</span>     <span class="meta">@TableGenerator</span>(name=<span class="string">"ID_GENERATOR"</span>, <span class="comment">//该主键生成策略的名称，与 @GeneratedValue 的 generator 属性值对应</span></span><br><span class="line"> <span class="number">3</span>     table=<span class="string">"jpa_id_generators"</span>, <span class="comment">// 指明根据哪个表生成主键</span></span><br><span class="line"> <span class="number">4</span>     pkColumnName=<span class="string">"PK_NAME"</span>, <span class="comment">// 使用 pkColumnName pkColumnValue valueColumnName 三个属性唯一的定位一个点</span></span><br><span class="line"> <span class="number">5</span>     pkColumnValue=<span class="string">"CUSTOMER_ID"</span>,</span><br><span class="line"> <span class="number">6</span>     valueColumnName=<span class="string">"PK_VALUE"</span>,</span><br><span class="line"> <span class="number">7</span>     allocationSize=<span class="number">100</span>) <span class="comment">//指定每次增加的数量</span></span><br><span class="line"> <span class="number">8</span>     <span class="meta">@GeneratedValue</span>(strategy=GenerationType.TABLE, generator=<span class="string">"ID_GENERATOR"</span>)</span><br><span class="line"> <span class="number">9</span>     <span class="meta">@Id</span></span><br><span class="line"><span class="number">10</span>     <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">11</span>         <span class="keyword">return</span> id;</span><br><span class="line"><span class="number">12</span>     &#125;</span><br></pre></td></tr></table></figure>

<p>附一张表说明：</p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021113500099-1494273921.png" alt="img"></p>
<h1 id="4-API"><a href="#4-API" class="headerlink" title="4 API"></a>4 API</h1><ol>
<li><p><strong>Persistence</strong> ：用于<strong>获取 EntiryManagerFactory 的实例</strong></p>
<p>1）常用方法：Persistence.<strong>createEntityManagerFactory(persistenceUnitName)</strong> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> String persistenceUnitName = <span class="string">"jpa-1"</span>;        </span><br><span class="line"><span class="number">2</span> EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory(persistenceUnitName);</span><br></pre></td></tr></table></figure>
</li>
<li><p>EntiryManagerFactory** ：常用方法</p>
<p>1）<strong>获取 EntiryManager</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="comment">//创建 EntityManager,类似于 Hibernate 的 SessionFactory</span></span><br><span class="line"><span class="number">2</span> EntityManager entityManager = entityManagerFactory.createEntityManager();</span><br></pre></td></tr></table></figure>

<p>2）close() 方法，关闭自身，此方法不再演示</p>
</li>
</ol>
<ol start="3">
<li><p><strong>EntityManager</strong> 的常用 API</p>
<p>1）<strong>find() 方法</strong>，类似于 Hibernate 中的 Session 的 get() 方法<strong>，</strong>在执行 find 方法时就发送 SQL 语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类似于 Hibernate 中 Session 的 get 方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Customer customer = entityManager.find(Customer<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(customer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果为：查看横线的位置便可证明结论。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> Hibernate: </span><br><span class="line"> <span class="number">2</span>     select</span><br><span class="line"> <span class="number">3</span>         customer0_.id as id1_2_0_,</span><br><span class="line"> <span class="number">4</span>         customer0_.age as age2_2_0_,</span><br><span class="line"> <span class="number">5</span>         customer0_.birth as birth3_2_0_,</span><br><span class="line"> <span class="number">6</span>         customer0_.createTime as createTi4_2_0_,</span><br><span class="line"> <span class="number">7</span>         customer0_.email as email5_2_0_,</span><br><span class="line"> <span class="number">8</span>         customer0_.LAST_NAME as LAST_NAM6_2_0_ </span><br><span class="line"> <span class="number">9</span>     from</span><br><span class="line"><span class="number">10</span>         JPA_CUSTOMER customer0_ </span><br><span class="line"><span class="number">11</span>     where</span><br><span class="line"><span class="number">12</span>         customer0_.id=?</span><br><span class="line"><span class="number">13</span> ----------------------------------------</span><br><span class="line"><span class="number">14</span> Customer [id=<span class="number">1</span>, lastName=AA, email=aa@<span class="number">163</span>.com, age=<span class="number">21</span>, birth=<span class="number">2015</span>-<span class="number">10</span>-<span class="number">22</span>, createTime=<span class="number">2017</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">39</span>:<span class="number">13.0</span>]</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>   2）<strong>getReference()</strong> 方法，类似于 Hibernate 的 Session 的 load() 方法</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> 　　 <span class="comment">//相当于 Hibernate 中 Session 的 load 方法，若不使用查询的对象则返回一个代理对象，到真正使用时才发送 SQL 语句查询</span></span><br><span class="line"> <span class="number">2</span>     <span class="comment">//可能会发生懒加载异常</span></span><br><span class="line"> <span class="number">3</span>     <span class="meta">@Test</span></span><br><span class="line"> <span class="number">4</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">5</span>         Customer customer = entityManager.getReference(Customer<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line"> <span class="number">6</span>         System.out.println(customer.getClass().getName());</span><br><span class="line"> <span class="number">7</span>         </span><br><span class="line"> <span class="number">8</span>         System.out.println(<span class="string">"---------------------------------------"</span>);</span><br><span class="line"> <span class="number">9</span>         </span><br><span class="line"><span class="number">10</span> <span class="comment">//      transaction.commit();</span></span><br><span class="line"><span class="number">11</span> <span class="comment">//      entityManager.close();</span></span><br><span class="line"><span class="number">12</span>         </span><br><span class="line"><span class="number">13</span>         System.out.println(customer);</span><br><span class="line"><span class="number">14</span>     &#125;</span><br></pre></td></tr></table></figure>

<p>   打印结果为：打印的是一个代理对象，并且横线打印在  SQL 前面。</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.software.jpa.helloworld.Customer_$$_javassist_1</span><br><span class="line">---------------------------------------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        customer0_.id as id1_2_0_,</span><br><span class="line">        customer0_.age as age2_2_0_,</span><br><span class="line">        customer0_.birth as birth3_2_0_,</span><br><span class="line">        customer0_.createTime as createTi4_2_0_,</span><br><span class="line">        customer0_.email as email5_2_0_,</span><br><span class="line">        customer0_.LAST_NAME as LAST_NAM6_2_0_ </span><br><span class="line">    from</span><br><span class="line">        JPA_CUSTOMER customer0_ </span><br><span class="line">    where</span><br><span class="line">        customer0_.id=?</span><br><span class="line">Customer [id=<span class="number">1</span>, lastName=AA, email=aa@<span class="number">163</span>.com, age=<span class="number">21</span>, birth=<span class="number">2015</span>-<span class="number">10</span>-<span class="number">22</span>, createTime=<span class="number">2017</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">39</span>:<span class="number">13.0</span>]</span><br></pre></td></tr></table></figure>



<p>   3）<strong>persistence()</strong> 方法，类似于 Hibernate 的 save() 方法，<strong>与 Hibernate 的 save() 方法不同的是</strong>其不能插入一个有 id 属性的对象</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> 　　 <span class="comment">//类似于 Hibernate 的 save 方法，使对象由临时状态变为持久化对象</span></span><br><span class="line"> <span class="number">2</span>     <span class="comment">//和 Hibernate 的 save 方法的区别为若有 id 属性，则不会执行插入操作而会抛出异常</span></span><br><span class="line"> <span class="number">3</span>     <span class="meta">@Test</span></span><br><span class="line"> <span class="number">4</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPersistence</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">5</span>         Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line"> <span class="number">6</span>         customer.setLastName(<span class="string">"BB"</span>);</span><br><span class="line"> <span class="number">7</span>         customer.setEmail(<span class="string">"bb@163.com"</span>);</span><br><span class="line"> <span class="number">8</span>         customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line"> <span class="number">9</span>         customer.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="number">10</span>         customer.setAge(<span class="number">21</span>);</span><br><span class="line"><span class="number">11</span>         </span><br><span class="line"><span class="number">12</span> <span class="comment">//      customer.setId(100);</span></span><br><span class="line"><span class="number">13</span>         </span><br><span class="line"><span class="number">14</span>         entityManager.persist(customer);</span><br><span class="line"><span class="number">15</span>         </span><br><span class="line"><span class="number">16</span>         System.out.println(customer.getId());</span><br><span class="line"><span class="number">17</span>         </span><br><span class="line"><span class="number">18</span>     &#125;</span><br></pre></td></tr></table></figure>



<p>   4）<strong>remove()</strong> 方法，<strong>类似于 Hibernate 中 Session 的 delete 方法</strong>，但是其不能删除 游离化对象（仅有 id），执行 5，6行会抛出异常，因为 5 行的 customer 对象为游离化对象</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> 　　 <span class="comment">//类似于 Hibernate Session 的 delete 方法，把对象对应的记录从数据库中删除</span></span><br><span class="line"> <span class="number">2</span>     <span class="comment">//注：该方法只能移出 持久化 对象，而 Hibernate 的 delete 方法可以移除游离对象</span></span><br><span class="line"> <span class="number">3</span>     <span class="meta">@Test</span></span><br><span class="line"> <span class="number">4</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">5</span> <span class="comment">//      Customer customer = new Customer();</span></span><br><span class="line"> <span class="number">6</span> <span class="comment">//      customer.setId(2);</span></span><br><span class="line"> <span class="number">7</span>         </span><br><span class="line"> <span class="number">8</span>         Customer customer = entityManager.find(Customer<span class="class">.<span class="keyword">class</span>, 2)</span>;</span><br><span class="line"> <span class="number">9</span>         </span><br><span class="line"><span class="number">10</span>         entityManager.remove(customer);</span><br><span class="line"><span class="number">11</span>         </span><br><span class="line"><span class="number">12</span>     &#125;</span><br></pre></td></tr></table></figure>



<p>   5）<strong>merge()</strong> 方法，类似于 Hibernate 中 Session 的 saveOrUpdate() 方法</p>
<p>   ① 传入的是一个临时对象（没有 id）：会创建一个新的对象，把临时对象的属性复制到新的对象中，然后对新的对象执行持久化操作，13行执行了 merge() 方法，传入了一个临时对象，返回了一个新的对象，产看 15，16 行的结果可知，新的对象有 id，传入的对象木有id，说明是将新的对象插入了数据库</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> 　　 <span class="comment">//1.若传入的是一个临时对象（没有 Id）</span></span><br><span class="line"> <span class="number">2</span>     <span class="comment">//会创建一个新的对象，把临时对象的属性复制到新的对象中，然后对新的对象执行持久化操作</span></span><br><span class="line"> <span class="number">3</span>     <span class="comment">//所以 新的对象中有 id，而之前的临时对象中没有 id</span></span><br><span class="line"> <span class="number">4</span>     <span class="meta">@Test</span></span><br><span class="line"> <span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMerge1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">6</span>         Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line"> <span class="number">7</span>         customer.setAge(<span class="number">23</span>);</span><br><span class="line"> <span class="number">8</span>         customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line"> <span class="number">9</span>         customer.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="number">10</span>         customer.setEmail(<span class="string">"cc@126.com"</span>);</span><br><span class="line"><span class="number">11</span>         customer.setLastName(<span class="string">"CC"</span>);</span><br><span class="line"><span class="number">12</span>         </span><br><span class="line"><span class="number">13</span>         Customer customer2 = entityManager.merge(customer);        </span><br><span class="line"><span class="number">14</span>         </span><br><span class="line"><span class="number">15</span>         System.out.println(<span class="string">"customer's id:"</span> + customer.getId());<span class="comment">// null</span></span><br><span class="line"><span class="number">16</span>         System.out.println(<span class="string">"customer's id:"</span> + customer2.getId());<span class="comment">// 2</span></span><br><span class="line"><span class="number">17</span>     &#125;</span><br></pre></td></tr></table></figure>



<p>   ② 传入的是一个游离对象（有 ID）：若在 EntityManager 缓存中没有该对象，在数据库中也没有对应的记录，JPA 会创建一个新的对象，把当前游离对象的属性复制到新的对象中，对新创建的对象执行 insert 操作，楼主的数据库对应的表中并没有 id 为 100 customer，15 行同样返回了一个新的对象，根据返回结果可知 ，确实插入的是新的对象</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> 　　 <span class="comment">//2.若传入的是一个游离对象，即传入的对象有 OID</span></span><br><span class="line"> <span class="number">2</span>     <span class="comment">//若在 EntityManager 缓存中没有该对象，在数据库中也没有对应的记录，JPA 会创建一个新的对象，</span></span><br><span class="line"> <span class="number">3</span>     <span class="comment">//把当前游离对象的属性复制到新的对象中，对新创建的对象执行 insert 操作</span></span><br><span class="line"> <span class="number">4</span>     <span class="meta">@Test</span></span><br><span class="line"> <span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMerge2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">6</span>         Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line"> <span class="number">7</span>         customer.setAge(<span class="number">23</span>);</span><br><span class="line"> <span class="number">8</span>         customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line"> <span class="number">9</span>         customer.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="number">10</span>         customer.setEmail(<span class="string">"dd@126.com"</span>);</span><br><span class="line"><span class="number">11</span>         customer.setLastName(<span class="string">"DD"</span>);</span><br><span class="line"><span class="number">12</span>         </span><br><span class="line"><span class="number">13</span>         customer.setId(<span class="number">100</span>);</span><br><span class="line"><span class="number">14</span>         </span><br><span class="line"><span class="number">15</span>         Customer customer2 = entityManager.merge(customer);</span><br><span class="line"><span class="number">16</span>         </span><br><span class="line"><span class="number">17</span>         System.out.println(<span class="string">"customer's id:"</span> + customer.getId());<span class="comment">// 100</span></span><br><span class="line"><span class="number">18</span>         System.out.println(<span class="string">"customer's id:"</span> + customer2.getId());<span class="comment">// 3</span></span><br><span class="line"><span class="number">19</span>     &#125;</span><br></pre></td></tr></table></figure>



<p>   ③ 传入的是游离对象，即传入的对象有 OID，缓存中没有，但数据库中有对应的对象：JPA 会查询对应的记录，然后返回该记录对应的对象把当前游离对象的属性复制到查询到的对象中，对查询到的对象执行 update 操作</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> 　　 <span class="comment">//3.若传入的是一个游离对象，即传入的对象有 OID</span></span><br><span class="line"> <span class="number">2</span>     <span class="comment">//若在 EntityManager 缓存中没有该对象，在数据库中有对应的记录，JPA 会查询对应的记录，然后返回该记录对应的对象</span></span><br><span class="line"> <span class="number">3</span>     <span class="comment">//把当前游离对象的属性复制到查询到的对象中，对查询到的对象执行 update 操作</span></span><br><span class="line"> <span class="number">4</span>     <span class="meta">@Test</span></span><br><span class="line"> <span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMerge3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">6</span>         Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line"> <span class="number">7</span>         customer.setAge(<span class="number">23</span>);</span><br><span class="line"> <span class="number">8</span>         customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line"> <span class="number">9</span>         customer.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="number">10</span>         customer.setEmail(<span class="string">"ff@126.com"</span>);</span><br><span class="line"><span class="number">11</span>         customer.setLastName(<span class="string">"FF"</span>);</span><br><span class="line"><span class="number">12</span>         </span><br><span class="line"><span class="number">13</span>         customer.setId(<span class="number">3</span>);</span><br><span class="line"><span class="number">14</span>         </span><br><span class="line"><span class="number">15</span>         Customer customer2 = entityManager.merge(customer);</span><br><span class="line"><span class="number">16</span>         </span><br><span class="line"><span class="number">17</span>         System.out.println(customer == customer2); <span class="comment">//false</span></span><br><span class="line"><span class="number">18</span>     &#125;</span><br></pre></td></tr></table></figure>



<p>   ④ 传入的是游离对象，即传入的对象有 OID，EntityManager 缓存中有对应的对象：JPA 会把当前游离对象的属性复制到查询到的 EntityManager 缓存中的对象，对 EntityManager 缓存中的对象执行 update 操作</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> 　　 <span class="comment">//4.若传入的是一个游离对象，即传入的对象有 OID</span></span><br><span class="line"> <span class="number">2</span>     <span class="comment">//若在 EntityManager 缓存中有对应的对象，JPA 会把当前游离对象的属性复制到查询到的 EntityManager 缓存中的对象，</span></span><br><span class="line"> <span class="number">3</span>     <span class="comment">//对 EntityManager 缓存中的对象执行 update 操作</span></span><br><span class="line"> <span class="number">4</span>     <span class="meta">@Test</span></span><br><span class="line"> <span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMerge4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">6</span>         Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line"> <span class="number">7</span>         customer.setAge(<span class="number">23</span>);</span><br><span class="line"> <span class="number">8</span>         customer.setBirth(<span class="keyword">new</span> Date());</span><br><span class="line"> <span class="number">9</span>         customer.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="number">10</span>         customer.setEmail(<span class="string">"dd@126.com"</span>);</span><br><span class="line"><span class="number">11</span>         customer.setLastName(<span class="string">"DD"</span>);</span><br><span class="line"><span class="number">12</span>         </span><br><span class="line"><span class="number">13</span>         customer.setId(<span class="number">3</span>);</span><br><span class="line"><span class="number">14</span>         Customer customer2 = entityManager.find(Customer<span class="class">.<span class="keyword">class</span>, 3)</span>;</span><br><span class="line"><span class="number">15</span>         </span><br><span class="line"><span class="number">16</span>         entityManager.merge(customer);</span><br><span class="line"><span class="number">17</span>         </span><br><span class="line"><span class="number">18</span>         System.out.println(customer == customer2); <span class="comment">//false</span></span><br><span class="line"><span class="number">19</span>     &#125;</span><br></pre></td></tr></table></figure>


<ol start="4">
<li><p><strong>EntityTransaction</strong>：JPA 中的事务操作</p>
<p>常用 API： begin()      commit()     rollback()  代码不再演示</p>
</li>
</ol>
<h1 id="5-JPA-中映射关联关系"><a href="#5-JPA-中映射关联关系" class="headerlink" title="5 JPA 中映射关联关系"></a>5 JPA 中映射关联关系</h1><h2 id="5-1-单向多对"><a href="#5-1-单向多对" class="headerlink" title="5.1 单向多对"></a>5.1 单向多对</h2><ol>
<li>映射<strong>单向多对一</strong>的关联关系：Order : Customer  n:1 ,<strong>Order</strong> <strong>中有 Customer 属性，而 Customer 中没有 Order 属性</strong>（<strong>单向多对一区别于单向一对多</strong>）</li>
</ol>
<p>1）创建 Order 实体类，标注注解，生成数据表，使用 @ManyToOne 映射多对一的关联关系，使用 @JoinColumn 来标注外键</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> com.software.jpa.helloworld;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> javax.persistence.FetchType;</span><br><span class="line"> <span class="number">6</span> <span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"> <span class="number">7</span> <span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"> <span class="number">8</span> <span class="keyword">import</span> javax.persistence.JoinColumn;</span><br><span class="line"> <span class="number">9</span> <span class="keyword">import</span> javax.persistence.ManyToOne;</span><br><span class="line"><span class="number">10</span> <span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span> <span class="meta">@Table</span>(name=<span class="string">"JPA_ORDERS"</span>)</span><br><span class="line"><span class="number">13</span> <span class="meta">@Entity</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"><span class="number">15</span>     </span><br><span class="line"><span class="number">16</span>     <span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="number">17</span>     </span><br><span class="line"><span class="number">18</span>     <span class="keyword">private</span> String orderName;</span><br><span class="line"><span class="number">19</span>     </span><br><span class="line"><span class="number">20</span>     <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="number">21</span>     <span class="meta">@Id</span></span><br><span class="line"><span class="number">22</span>     <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">23</span>         <span class="keyword">return</span> id;</span><br><span class="line"><span class="number">24</span>     &#125;</span><br><span class="line"><span class="number">25</span> </span><br><span class="line"><span class="number">26</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="number">27</span>         <span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="number">28</span>     &#125;</span><br><span class="line"><span class="number">29</span> </span><br><span class="line"><span class="number">30</span>     <span class="meta">@Column</span>(name=<span class="string">"ORDER_NAME"</span>)</span><br><span class="line"><span class="number">31</span>     <span class="function"><span class="keyword">public</span> String <span class="title">getOrderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">32</span>         <span class="keyword">return</span> orderName;</span><br><span class="line"><span class="number">33</span>     &#125;</span><br><span class="line"><span class="number">34</span> </span><br><span class="line"><span class="number">35</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderName</span><span class="params">(String orderName)</span> </span>&#123;</span><br><span class="line"><span class="number">36</span>         <span class="keyword">this</span>.orderName = orderName;</span><br><span class="line"><span class="number">37</span>     &#125;</span><br><span class="line"><span class="number">38</span>     </span><br><span class="line"><span class="number">39</span>     <span class="keyword">private</span> Customer customer;</span><br><span class="line"><span class="number">40</span>     </span><br><span class="line"><span class="number">41</span>     <span class="comment">/**</span></span><br><span class="line"><span class="comment">42      * 映射单项 n-1 的关联关系（Customer 和 Order，Order 中有 Customer 属性，而 Customer 中没有 Order 属性）</span></span><br><span class="line"><span class="comment">43      * 使用 <span class="doctag">@ManyToOne</span> 来映射多对一的关联关系</span></span><br><span class="line"><span class="comment">44      * 使用 <span class="doctag">@JoinColumn</span> 来映射外键</span></span><br><span class="line"><span class="comment">45      * 可以使用 <span class="doctag">@ManyToOne</span> 的 fetch 属性来修改默认的关联属性的加载策略</span></span><br><span class="line"><span class="comment">46      */</span></span><br><span class="line"><span class="number">47</span>     <span class="meta">@JoinColumn</span>(name=<span class="string">"CUSTOMER_ID"</span>)</span><br><span class="line"><span class="number">48</span>     <span class="meta">@ManyToOne</span>(fetch=FetchType.LAZY)</span><br><span class="line"><span class="number">49</span>     <span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">50</span>         <span class="keyword">return</span> customer;</span><br><span class="line"><span class="number">51</span>     &#125;</span><br><span class="line"><span class="number">52</span> </span><br><span class="line"><span class="number">53</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line"><span class="number">54</span>         <span class="keyword">this</span>.customer = customer;</span><br><span class="line"><span class="number">55</span>     &#125;</span><br><span class="line"><span class="number">56</span>     </span><br><span class="line"><span class="number">57</span> &#125;</span><br></pre></td></tr></table></figure>



<p>2）单向多对一的<strong>保存（persist）</strong>：<strong>保存多对一时，建议先保存 1 的一端</strong>，后保存 n 的一端，这样不会多出额外的 UPDATE 语句</p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021161238412-5138144.png" alt="img"></p>
<p>3）<strong>获取操作（find）</strong>：<strong>默认情况下使用左外连接的方式来获取 n 的一端的对象和其关联的 1 的一端的对象</strong>，可以使用 <strong>@ManyToOne 的 fetch 属性</strong>来<strong>修改默认的关联属性的加载策略</strong></p>
<p><strong><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021161331459-1275649756.png" alt="img"></strong></p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021161341959-1504171335.png" alt="img"></p>
<p>4）<strong>删除操作（remove）</strong>：不能直接删除 1 的一端，因为有外键约束</p>
<p> <img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021161445631-1597664588.png" alt="img"></p>
<p>5）修改操作：</p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021161503193-421266444.png" alt="img"></p>
<h2 id="5-2-单向一对多"><a href="#5-2-单向一对多" class="headerlink" title="5.2 单向一对多"></a>5.2 单向一对多</h2><ol start="2">
<li>映射<strong>单向 1-n</strong> 的关联关系 <strong>Customer ：Order</strong>  <strong>1</strong> <strong>： n</strong>，<strong>Customer 中有 Order 的 Set 集合属性，Order 中没有 Customer的属性</strong></li>
</ol>
<p>1）<strong>在 Customer 中添加 Order 的 Set 集合属性，并映射 1-n 关联关系</strong>，重新生成数据表</p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021161615802-713501391.png" alt="img"></p>
<p>2）<strong>保存操作（persist）</strong>：<strong>总会多出 UPDATE 语句，n 的一端在插入时不会同时插入外键列</strong></p>
<p><strong><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021161645490-175802889.png" alt="img"></strong></p>
<p>3）<strong>查询操作（find）</strong>:<strong>默认使用懒加载</strong></p>
<p> <img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021161735068-886057935.png" alt="img"></p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021161741115-1014776929.png" alt="img"></p>
<p>4）<strong>删除操作（remove</strong>）：默认情况下，若删除 1 的一端，会先把关联的 n 的一端的外键置空，然后再进行删除，可以通过 @OneToMany 的 cascade 属性修改默认的删除策略（CascadeType.REMOVE 为级联删除）</p>
<p> <img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021161803490-2050995358.png" alt="img"></p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021161809287-483107731.png" alt="img"></p>
<h2 id="5-3-双向一对多"><a href="#5-3-双向一对多" class="headerlink" title="5.3 双向一对多"></a>5.3 双向一对多</h2><p>3.<strong>映射双向多对一的关联关系</strong>（<strong>注：双向多对一 同 双向一对多</strong>）</p>
<p>1）实体：<strong>Customer 中有 Order 的 Set 集合属性，Order 中有 Customer 的属性，注两个实体映射的外键列必须一致，都为 CUSTOMER_ID</strong></p>
<p> <img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021161913412-816511709.png" alt="img"></p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021161926084-1935675900.png" alt="img"></p>
<p>2)<strong>保存操作（persist）</strong>：</p>
<p> <img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021161945802-57051209.png" alt="img"></p>
<p> <img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021162002381-270510207.png" alt="img"></p>
<h2 id="5-4-双向一对一"><a href="#5-4-双向一对一" class="headerlink" title="5.4 双向一对一"></a>5.4 双向一对一</h2><p>4.<strong>映射双向一对一的关联关系</strong></p>
<p>1）实体：<strong>Manager 和 Department ，一个部门有一个经理，一个经理管一个部门</strong></p>
<p>2）创建 Manager 类和 Department 类，<strong>Manager 类中有 Department 的引用，Department 中有 Manager 的引用</strong>，由 <strong>Department 来维护关联关系（实际上双向 1- 1 双方均可以维护关联关系）</strong>，使用 <strong>@OneToOne</strong> 来<strong>映射 1-1 关联关系</strong>。添加必要注解，生成数据表。</p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021162024349-592063253.png" alt="img"></p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021162030959-1955676761.png" alt="img"></p>
<p>3）<strong>保存操作：</strong></p>
<p><strong><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021162049287-518801843.png" alt="img"></strong></p>
<p>4）<strong>查询操作：</strong></p>
<p><strong><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021162101740-1415465702.png" alt="img"></strong></p>
<h2 id="5-5-双向多对多"><a href="#5-5-双向多对多" class="headerlink" title="5.5 双向多对多"></a>5.5 双向多对多</h2><p>5.<strong>映射双向多对多的关联关系</strong></p>
<p>1）实体：<strong>Item 和 Category ，一个类别有多个商品，一个商品对应多个类别</strong>。<strong>双方都包含对方的 Set 集合。</strong>创建实体类，添加对应的注解，生成数据表。</p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021162118427-659635790.png" alt="img"></p>
<p>2）<strong>保存操作：</strong></p>
<p><strong><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021162130193-2105658680.png" alt="img"></strong></p>
<p>3）<strong>查询操作</strong>：</p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171021162143662-196068483.png" alt="img"></p>
<h1 id="6-JPA-的二级缓存"><a href="#6-JPA-的二级缓存" class="headerlink" title="6 JPA 的二级缓存"></a>6 JPA 的<strong>二级缓存</strong></h1><ol>
<li>大家对一级缓存比较熟悉，即若查询一条同样的记录，因为一级缓存的存在只发送一条 SQL 语句。那么 JPA 的二级缓存又体现在哪呢？楼主给大家解释为：查询一条同样的记录，在第一次查询后关闭 EntityManager、提交事务后，再重新获取 EntityManager 并开启事务再查询同样的记录，因为有二级缓存的存在也会只发送一条记录。如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> 　　 <span class="comment">//测试 JPA 的二级缓存</span></span><br><span class="line"> <span class="number">2</span>     <span class="meta">@Test</span></span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSecondLevelCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         Customer customer1 = entityManager.find(Customer<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line"> <span class="number">5</span>         </span><br><span class="line"> <span class="number">6</span>         transaction.commit();</span><br><span class="line"> <span class="number">7</span>         entityManager.close();</span><br><span class="line"> <span class="number">8</span>         </span><br><span class="line"> <span class="number">9</span>         entityManager = entityManagerFactory.createEntityManager();</span><br><span class="line"><span class="number">10</span>         transaction = entityManager.getTransaction();</span><br><span class="line"><span class="number">11</span>         transaction.begin();</span><br><span class="line"><span class="number">12</span>         </span><br><span class="line"><span class="number">13</span>         Customer customer2 = entityManager.find(Customer<span class="class">.<span class="keyword">class</span>, 1)</span>;</span><br><span class="line"><span class="number">14</span>     &#125;</span><br></pre></td></tr></table></figure>

<p>大家可以看到，4 行和 13 行的查询语句一样，6 行，7 行 提交了事务关闭了 EntityManager。若不进行二级缓存的配置，这样的操作会发送两次一模一样的 SQL 语句，结果就不贴上了，大家可以试一试。若配置了二级缓存，同样的操作便只会发送一条 SQL ,这样可以减小服务器的压力，减少访问数据库的次数。那么如何来配置二级缓存呢？</p>
<ol start="2">
<li>如何配置二级缓存：</li>
</ol>
<p>1）persistence.xml 文件中配置二级缓存相关</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">version</span>=<span class="string">"2.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/persistence"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">"jpa-1"</span> <span class="attr">transaction-type</span>=<span class="string">"RESOURCE_LOCAL"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置使用什么 ORM 产品来作为 JPA 的实现 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.ejb.HibernatePersistence<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 二级缓存相关 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_second_level_cache"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.region.factory_class"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"org.hibernate.cache.ehcache.EhCacheRegionFactory"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_query_cache"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2）导入 ehcache 的 jar 包和配置文件 ehcache.xml </p>
<p>jar 包：</p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171023203955676-1924436734.png" alt="img"></p>
<p>配置文件：对二级缓存参数的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Sets the path to the directory where cache .data files are created.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         If the path is a Java System Property it is replaced by</span></span><br><span class="line"><span class="comment">         its value in the running VM.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         The following properties are translated:</span></span><br><span class="line"><span class="comment">         user.home - User's home directory</span></span><br><span class="line"><span class="comment">         user.dir - User's current working directory</span></span><br><span class="line"><span class="comment">         java.io.tmpdir - Default temp file path --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Default Cache configuration. These will applied to caches programmatically created through</span></span><br><span class="line"><span class="comment">        the CacheManager.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        The following attributes are required for defaultCache:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        maxInMemory       - Sets the maximum number of objects that will be created in memory</span></span><br><span class="line"><span class="comment">        eternal           - Sets whether elements are eternal. If eternal,  timeouts are ignored and the element</span></span><br><span class="line"><span class="comment">                            is never expired.</span></span><br><span class="line"><span class="comment">        timeToIdleSeconds - Sets the time to idle for an element before it expires. Is only used</span></span><br><span class="line"><span class="comment">                            if the element is not eternal. Idle time is now - last accessed time</span></span><br><span class="line"><span class="comment">        timeToLiveSeconds - Sets the time to live for an element before it expires. Is only used</span></span><br><span class="line"><span class="comment">                            if the element is not eternal. TTL is now - creation time</span></span><br><span class="line"><span class="comment">        overflowToDisk    - Sets whether elements can overflow to disk when the in-memory cache</span></span><br><span class="line"><span class="comment">                            has reached the maxInMemory limit.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Predefined caches.  Add your cache configuration settings here.</span></span><br><span class="line"><span class="comment">        If you do not have a configuration for your cache a WARNING will be issued when the</span></span><br><span class="line"><span class="comment">        CacheManager starts</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        The following attributes are required for defaultCache:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        name              - Sets the name of the cache. This is used to identify the cache. It must be unique.</span></span><br><span class="line"><span class="comment">        maxInMemory       - Sets the maximum number of objects that will be created in memory</span></span><br><span class="line"><span class="comment">        eternal           - Sets whether elements are eternal. If eternal,  timeouts are ignored and the element</span></span><br><span class="line"><span class="comment">                            is never expired.</span></span><br><span class="line"><span class="comment">        timeToIdleSeconds - Sets the time to idle for an element before it expires. Is only used</span></span><br><span class="line"><span class="comment">                            if the element is not eternal. Idle time is now - last accessed time</span></span><br><span class="line"><span class="comment">        timeToLiveSeconds - Sets the time to live for an element before it expires. Is only used</span></span><br><span class="line"><span class="comment">                            if the element is not eternal. TTL is now - creation time</span></span><br><span class="line"><span class="comment">        overflowToDisk    - Sets whether elements can overflow to disk when the in-memory cache</span></span><br><span class="line"><span class="comment">                            has reached the maxInMemory limit.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Sample cache named sampleCache1</span></span><br><span class="line"><span class="comment">        This cache contains a maximum in memory of 10000 elements, and will expire</span></span><br><span class="line"><span class="comment">        an element if it is idle for more than 5 minutes and lives for more than</span></span><br><span class="line"><span class="comment">        10 minutes.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        If there are more than 10000 elements it will overflow to the</span></span><br><span class="line"><span class="comment">        disk cache, which in this configuration will go to wherever java.io.tmp is</span></span><br><span class="line"><span class="comment">        defined on your system. On a standard Linux system this will be /tmp"</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"sampleCache1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Sample cache named sampleCache2</span></span><br><span class="line"><span class="comment">        This cache contains 1000 elements. Elements will always be held in memory.</span></span><br><span class="line"><span class="comment">        They are not expired. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"sampleCache2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span> --&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Place configuration for your caches following --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）给需要缓存的类添加 @Cacheable(true) 注解，有前面的代码可知，楼主获取的是 Customer 对象</p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171023204152598-1839645945.png" alt="img"></p>
<p>二级缓存就给大家介绍到这里。</p>
<h1 id="7-JPQL"><a href="#7-JPQL" class="headerlink" title="7 JPQL"></a>7 JPQL</h1><ol>
<li><p>什么是 JPQL:JPQL语言，即 Java Persistence Query Language 的简称。</p>
</li>
<li><p>然后来看一个 JPQL 的 Helloworld：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> 　　 <span class="comment">//JPQL 的 HelloWorld</span></span><br><span class="line"> <span class="number">2</span>     <span class="meta">@Test</span></span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloJPQL</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         String jpql = <span class="string">"FROM Customer c WHERE c.age &gt; ?"</span>;</span><br><span class="line"> <span class="number">5</span>         Query query = entityManager.createQuery(jpql);</span><br><span class="line"> <span class="number">6</span>         </span><br><span class="line"> <span class="number">7</span>         <span class="comment">//占位符的索引是从 1 开始</span></span><br><span class="line"> <span class="number">8</span>         query.setParameter(<span class="number">1</span>, <span class="number">21</span>);</span><br><span class="line"> <span class="number">9</span>         </span><br><span class="line"><span class="number">10</span>         List&lt;Customer&gt; lists = query.getResultList();</span><br><span class="line"><span class="number">11</span>         System.out.println(lists.size());</span><br><span class="line"><span class="number">12</span>         </span><br><span class="line"><span class="number">13</span>     &#125;</span><br></pre></td></tr></table></figure>

<p>乍一看，大家可能感觉 JPQL 像极了 Hibernate 的 HQL 查询，没错，这两种查询的相似度极高。需要注意的是，使用 Query 的 setParameter() 的方法填占位符是，索引是从 1</p>
<p>开始的。</p>
<ol start="3">
<li><strong>查询部分属性：</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> 　　 <span class="meta">@Test</span></span><br><span class="line"> <span class="number">2</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPartlyProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">3</span>         String jpql = <span class="string">"SELECT new Customer(c.lastName, c.age) FROM Customer c WHERE c.id &gt; ?"</span>;</span><br><span class="line"> <span class="number">4</span>         Query query = entityManager.createQuery(jpql);</span><br><span class="line"> <span class="number">5</span>         </span><br><span class="line"> <span class="number">6</span>         query.setParameter(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"> <span class="number">7</span>         </span><br><span class="line"> <span class="number">8</span>         List lists = query.getResultList();</span><br><span class="line"> <span class="number">9</span>         System.out.println(lists);</span><br><span class="line"><span class="number">10</span>     &#125;</span><br></pre></td></tr></table></figure>

<p>默认情况下若只查询部分属性，则将返回 Object[] 类型的结果或 Object[] 类型的 List，可以在实体类中创建对应的构造器，然后在 jpql 中利用对应的构造器返回实体类对应的对象，这样得到的结果可以很令人满意，也很方便我们来操作。</p>
<p> 4.<strong>命名查询 NamedQuery：</strong></p>
<p>1）在需要查询的对象类上添加 @NamedQuery 注解：</p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171024115954660-1782203382.png" alt="img"></p>
<p>2）创建测试方法：</p>
<p><img src="https://images2017.cnblogs.com/blog/1105175/201710/1105175-20171024120007223-1607836470.png" alt="img"></p>
<ol start="5">
<li><strong>本地 SQL 查询使用 EntityManager 的 createNativeQuery() 方法：</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 　　 <span class="comment">//本地 SQL 查询</span></span><br><span class="line"><span class="number">2</span>     <span class="meta">@Test</span></span><br><span class="line"><span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNativeQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">4</span>         String sql = <span class="string">"SELECT age FROM jpa_customer WHERE id = ?"</span>;</span><br><span class="line"><span class="number">5</span>         Query query = entityManager.createNativeQuery(sql).setParameter(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="number">6</span>         Object result = query.getSingleResult();</span><br><span class="line"><span class="number">7</span>         System.out.println(result);</span><br><span class="line"><span class="number">8</span>     &#125;</span><br></pre></td></tr></table></figure>



<ol start="6">
<li><strong>可以使用 Order By 字句：</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> 　　 <span class="comment">// jpql 中的 Order By 子句</span></span><br><span class="line"> <span class="number">2</span>     <span class="meta">@Test</span></span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrderBy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         String jpql = <span class="string">"FROM Customer c WHERE c.age &gt; ? ORDER BY c.age DESC"</span>;</span><br><span class="line"> <span class="number">5</span>         Query query = entityManager.createQuery(jpql);</span><br><span class="line"> <span class="number">6</span>         </span><br><span class="line"> <span class="number">7</span>         <span class="comment">//占位符的索引是从 1 开始</span></span><br><span class="line"> <span class="number">8</span>         query.setParameter(<span class="number">1</span>, <span class="number">21</span>);</span><br><span class="line"> <span class="number">9</span>         </span><br><span class="line"><span class="number">10</span>         List&lt;Customer&gt; lists = query.getResultList();</span><br><span class="line"><span class="number">11</span>         System.out.println(lists.size());</span><br><span class="line"><span class="number">12</span>     &#125;</span><br></pre></td></tr></table></figure>



<ol start="7">
<li><strong>还可以使用 Group By 子句：</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 　　 <span class="comment">//查询 order 数量大于 2 的那些 Customer</span></span><br><span class="line"><span class="number">2</span>     <span class="meta">@Test</span></span><br><span class="line"><span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGroupBy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">4</span>         String jpql = <span class="string">"SELECT o.customer FROM Order o GROUP BY o.customer HAVING count(o.id) &gt;= 2"</span>;</span><br><span class="line"><span class="number">5</span>         List&lt;Customer&gt; lists = entityManager.createQuery(jpql).getResultList();</span><br><span class="line"><span class="number">6</span>         System.out.println(lists);</span><br><span class="line"><span class="number">7</span>     &#125;</span><br></pre></td></tr></table></figure>



<ol start="8">
<li><strong>也可以使用子查询</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 　　 <span class="comment">//子查询</span></span><br><span class="line"><span class="number">2</span>     <span class="meta">@Test</span></span><br><span class="line"><span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSubQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">4</span>         <span class="comment">//查询所有 Customer 的 lastName 为 YY 的 Order</span></span><br><span class="line"><span class="number">5</span>         String jpql = <span class="string">"SELECT o FROM Order o"</span></span><br><span class="line"><span class="number">6</span>                 + <span class="string">" WHERE o.customer = (SELECT c FROM Customer c WHERE c.lastName = ?)"</span>;</span><br><span class="line"><span class="number">7</span>         List&lt;Order&gt; orders = entityManager.createQuery(jpql).setParameter(<span class="number">1</span>, <span class="string">"YY"</span>).getResultList();</span><br><span class="line"><span class="number">8</span>         System.out.println(orders.size());</span><br><span class="line"><span class="number">9</span>     &#125;</span><br></pre></td></tr></table></figure>



<h1 id="9-Spring-整合-JPA"><a href="#9-Spring-整合-JPA" class="headerlink" title="9 Spring 整合 JPA"></a>9 <strong>Spring</strong> <strong>整合 JPA</strong></h1><p>JPA 的一些 API 也可以放到 Spring 的 IOC 容器中，交由 Spring 容器管理，那么如何用 Spring 来整合 JPA 呢？</p>
<p>1.新建 JPA 工程，导入所需的 jar包（Hibernate、JPA、c3p0、Spring、MySQL 驱动）</p>
<p>2.类路径下创建 db.properties 数据库配置文件，配置数据库的链接信息(楼主在这只配置了必须属性)</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">1</span> <span class="string">jdbc.user=root</span></span><br><span class="line"><span class="attr">2</span> <span class="string">jdbc.password=qiqingqing</span></span><br><span class="line"><span class="attr">3</span> <span class="string">jdbc.driverClass=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">4</span> <span class="string">jdbc.jdbcUrl=jdbc:mysql://localhost:3306/jpa</span></span><br></pre></td></tr></table></figure>

<p>3.类路径下创建 Spring 的配置文件 applicationContext.xml，配置自动扫描的包，将 db.propertiest 文件导入，并配置 c3p0 数据源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> 1 　　 <span class="comment">&lt;!-- 配置自动扫描的包 --&gt;</span></span><br><span class="line"> 2     <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.software.jpa"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"> 3 </span><br><span class="line"> 4     <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"> 5     <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"> 6     </span><br><span class="line"> 7     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"> 8         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> 9         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">10         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">11         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">12     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>4.在 applicationContext.xml 中配置 JPA 的 EntityManagerFactory</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> 1 　　 <span class="comment">&lt;!-- 配置 EntityManagerFactory --&gt;</span></span><br><span class="line"> 2     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"entityManagerFactory"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">3</span>                  <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"</span>&gt;</span></span><br><span class="line"> 4         <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"> 5         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> 6         <span class="comment">&lt;!-- 配置 JPA 提供商的适配器，可以通过内部 bean 的方式来配置 --&gt;</span></span><br><span class="line"> 7         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaVendorAdapter"</span>&gt;</span></span><br><span class="line"> 8             <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> 9         <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">10         <span class="comment">&lt;!-- 配置实体类所在的包 --&gt;</span></span><br><span class="line">11         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span> <span class="attr">value</span>=<span class="string">"com.software.jpa.spring.entities"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">12         <span class="comment">&lt;!-- 配置 JPA 的基本属性，比如，JPA 实现产品的属性 --&gt;</span></span><br><span class="line">13         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaProperties"</span>&gt;</span></span><br><span class="line">14             <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">15                 <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">16                 <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">17                 <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">18             <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">19         <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">20     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>5.配置 JPA 使用的事务管理器及配置支持基于注解的事务配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1 　　 <span class="comment">&lt;!-- 配置  JPA 使用的事务管理器 --&gt;</span></span><br><span class="line">2     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></span><br><span class="line">3         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">4     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">5     </span><br><span class="line">6     <span class="comment">&lt;!-- 配置支持基于注解的事务配置 --&gt;</span></span><br><span class="line">7     <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>6.为了测试创建实体类 Person，添加相应的 JPA 注解，生成对应的数据表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> com.software.jpa.spring.entities;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"> <span class="number">6</span> <span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"> <span class="number">7</span> <span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> <span class="meta">@Table</span>(name=<span class="string">"JPA_PERSONS"</span>)</span><br><span class="line"><span class="number">10</span> <span class="meta">@Entity</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="number">12</span>     </span><br><span class="line"><span class="number">13</span>     <span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="number">14</span>     </span><br><span class="line"><span class="number">15</span>     <span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="number">16</span>     </span><br><span class="line"><span class="number">17</span>     <span class="keyword">private</span> String email;</span><br><span class="line"><span class="number">18</span>     </span><br><span class="line"><span class="number">19</span>     <span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="number">20</span> </span><br><span class="line"><span class="number">21</span>     <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="number">22</span>     <span class="meta">@Id</span></span><br><span class="line"><span class="number">23</span>     <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">24</span>         <span class="keyword">return</span> id;</span><br><span class="line"><span class="number">25</span>     &#125;</span><br><span class="line"><span class="number">26</span> </span><br><span class="line"><span class="number">27</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="number">28</span>         <span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="number">29</span>     &#125;</span><br><span class="line"><span class="number">30</span> </span><br><span class="line"><span class="number">31</span>     <span class="meta">@Column</span>(name=<span class="string">"LAST_NAME"</span>)</span><br><span class="line"><span class="number">32</span>     <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">33</span>         <span class="keyword">return</span> lastName;</span><br><span class="line"><span class="number">34</span>     &#125;</span><br><span class="line"><span class="number">35</span> </span><br><span class="line"><span class="number">36</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line"><span class="number">37</span>         <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line"><span class="number">38</span>     &#125;</span><br><span class="line"><span class="number">39</span> </span><br><span class="line"><span class="number">40</span>     <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">41</span>         <span class="keyword">return</span> email;</span><br><span class="line"><span class="number">42</span>     &#125;</span><br><span class="line"><span class="number">43</span> </span><br><span class="line"><span class="number">44</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="number">45</span>         <span class="keyword">this</span>.email = email;</span><br><span class="line"><span class="number">46</span>     &#125;</span><br><span class="line"><span class="number">47</span> </span><br><span class="line"><span class="number">48</span>     <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">49</span>         <span class="keyword">return</span> age;</span><br><span class="line"><span class="number">50</span>     &#125;</span><br><span class="line"><span class="number">51</span> </span><br><span class="line"><span class="number">52</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="number">53</span>         <span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="number">54</span>     &#125;</span><br><span class="line"><span class="number">55</span>     </span><br><span class="line"><span class="number">56</span> &#125;</span><br></pre></td></tr></table></figure>



<p>7.创建 PersonDao 使用 @PersistenceContext 获取和当前事务关联的 EntityManager 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> com.software.jpa.dao;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> javax.persistence.PersistenceContext;</span><br><span class="line"> <span class="number">5</span> </span><br><span class="line"> <span class="number">6</span> <span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"> <span class="number">7</span> </span><br><span class="line"> <span class="number">8</span> <span class="keyword">import</span> com.software.jpa.spring.entities.Person;</span><br><span class="line"> <span class="number">9</span> </span><br><span class="line"><span class="number">10</span> <span class="meta">@Repository</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"><span class="number">12</span>     </span><br><span class="line"><span class="number">13</span>     <span class="comment">//使用 @PersistenceContext 获取和当前事务关联的 EntityManager 对象</span></span><br><span class="line"><span class="number">14</span>     <span class="meta">@PersistenceContext</span></span><br><span class="line"><span class="number">15</span>     <span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line"><span class="number">16</span>     </span><br><span class="line"><span class="number">17</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line"><span class="number">18</span>         entityManager.persist(p);</span><br><span class="line"><span class="number">19</span>     &#125;</span><br><span class="line"><span class="number">20</span> </span><br><span class="line"><span class="number">21</span> &#125;</span><br></pre></td></tr></table></figure>



<p>8.创建 PersonService ，模拟事务操作，20 行设计了一个算数异常，若整合成功，因为添加了事务操作，所以 18 行和 22 行的两条记录都没有插入进数据库。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> com.software.jpa.service;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span> <span class="keyword">import</span> com.software.jpa.dao.PersonDao;</span><br><span class="line"> <span class="number">8</span> <span class="keyword">import</span> com.software.jpa.spring.entities.Person;</span><br><span class="line"> <span class="number">9</span> </span><br><span class="line"><span class="number">10</span> <span class="meta">@Service</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"><span class="number">12</span>     </span><br><span class="line"><span class="number">13</span>     <span class="meta">@Autowired</span></span><br><span class="line"><span class="number">14</span>     <span class="keyword">private</span> PersonDao dao;</span><br><span class="line"><span class="number">15</span> </span><br><span class="line"><span class="number">16</span>     <span class="meta">@Transactional</span></span><br><span class="line"><span class="number">17</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Person p1, Person p2)</span> </span>&#123;</span><br><span class="line"><span class="number">18</span>         dao.save(p1);</span><br><span class="line"><span class="number">19</span>         </span><br><span class="line"><span class="number">20</span>         <span class="keyword">int</span> i = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line"><span class="number">21</span>         </span><br><span class="line"><span class="number">22</span>         dao.save(p2);</span><br><span class="line"><span class="number">23</span>     &#125;</span><br><span class="line"><span class="number">24</span>     </span><br><span class="line"><span class="number">25</span> &#125;</span><br></pre></td></tr></table></figure>



<p>9.创建测试方法，并执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> com.software.jpa.spring;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> org.junit.Test;</span><br><span class="line"> <span class="number">6</span> <span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"> <span class="number">7</span> <span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"> <span class="number">8</span> </span><br><span class="line"> <span class="number">9</span> <span class="keyword">import</span> com.software.jpa.service.PersonService;</span><br><span class="line"><span class="number">10</span> <span class="keyword">import</span> com.software.jpa.spring.entities.Person;</span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JPATest</span> </span>&#123;</span><br><span class="line"><span class="number">13</span>     </span><br><span class="line"><span class="number">14</span>     <span class="keyword">private</span> ApplicationContext ctx = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">15</span>     </span><br><span class="line"><span class="number">16</span>     <span class="keyword">private</span> PersonService personService = <span class="keyword">null</span>;</span><br><span class="line"><span class="number">17</span>     </span><br><span class="line"><span class="number">18</span>     &#123;</span><br><span class="line"><span class="number">19</span>         ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="number">20</span>         </span><br><span class="line"><span class="number">21</span>         personService = ctx.getBean(PersonService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="number">22</span>     &#125;</span><br><span class="line"><span class="number">23</span>     </span><br><span class="line"><span class="number">24</span>     <span class="meta">@Test</span></span><br><span class="line"><span class="number">25</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">26</span>         Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="number">27</span>         p1.setAge(<span class="number">11</span>);</span><br><span class="line"><span class="number">28</span>         p1.setEmail(<span class="string">"aa@163.com"</span>);</span><br><span class="line"><span class="number">29</span>         p1.setLastName(<span class="string">"AA"</span>);</span><br><span class="line"><span class="number">30</span>         </span><br><span class="line"><span class="number">31</span>         Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="number">32</span>         p2.setAge(<span class="number">12</span>);</span><br><span class="line"><span class="number">33</span>         p2.setEmail(<span class="string">"bb@163.com"</span>);</span><br><span class="line"><span class="number">34</span>         p2.setLastName(<span class="string">"BB"</span>);</span><br><span class="line"><span class="number">35</span>         </span><br><span class="line"><span class="number">36</span>         System.out.println(personService.getClass().getName());</span><br><span class="line"><span class="number">37</span>         personService.save(p1, p2);</span><br><span class="line"><span class="number">38</span>     &#125;</span><br><span class="line"><span class="number">39</span> </span><br><span class="line"><span class="number">40</span>     <span class="meta">@Test</span></span><br><span class="line"><span class="number">41</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDataSourct</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="number">42</span>         DataSource dataSource = ctx.getBean(DataSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="number">43</span>         System.out.println(dataSource.getConnection());</span><br><span class="line"><span class="number">44</span>     &#125;</span><br><span class="line"><span class="number">45</span> </span><br><span class="line"><span class="number">46</span> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>8-webmvc-1</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/8-webmvc-1/</url>
    <content><![CDATA[<h1 id="1-Servlet3-0"><a href="#1-Servlet3-0" class="headerlink" title="1 Servlet3.0"></a>1 Servlet3.0</h1><p>不使用web.xml和WebServlet注解，配置启动web应用。</p>
<p>在类路径下<code>/META-INF/services/</code>创建文件<code>javax.servlet.ServletContainerInitializer</code>,文件中写入加载WEB应用的类的全路径。如：<code>com.zx.config.MyServletContainerInitializer</code>。</p>
<p>配置web应用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HandlesTypes</span>(UserService<span class="class">.<span class="keyword">class</span>) // 感兴趣的类，会扫描<span class="title">Class</span>子类放入<span class="title">set</span>集合中</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; set, ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (set != <span class="keyword">null</span>) &#123; <span class="comment">// 获取感兴趣的类</span></span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; aClass : set) &#123;</span><br><span class="line">                System.out.println(aClass.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 注入Servlet</span></span><br><span class="line">        ServletRegistration.Dynamic loginServlet =</span><br><span class="line">                servletContext.addServlet(<span class="string">"loginServlet"</span>, UserAction<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        loginServlet.addMapping(<span class="string">"/login"</span>); <span class="comment">// 访问路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>对应的Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(req.getParameter(<span class="string">"userName"</span>));</span><br><span class="line">        user.setUserPwd(req.getParameter(<span class="string">"userPwd"</span>));</span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf8"</span>);</span><br><span class="line">        <span class="keyword">if</span> (userService.ValidateUser(user) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resp.getWriter().print(<span class="string">"&lt;h1&gt;登录成功@bb&lt;/h1&gt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().print(<span class="string">"&lt;h1&gt;登录失败@aa&lt;/h1&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-springMVC加载web容器"><a href="#2-springMVC加载web容器" class="headerlink" title="2 springMVC加载web容器"></a>2 springMVC加载web容器</h1><h2 id="2-1-SpringContainerInitializer"><a href="#2-1-SpringContainerInitializer" class="headerlink" title="2.1 SpringContainerInitializer"></a>2.1 SpringContainerInitializer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HandlesTypes</span>(WebApplicationInitializer<span class="class">.<span class="keyword">class</span>) // 感兴趣类</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义一个springweb应用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebApplicationInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletCxt)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load Spring web application configuration</span></span><br><span class="line">        AnnotationConfigWebApplicationContext ac = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">        ac.register(AppConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        ac.refresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create and register the DispatcherServlet</span></span><br><span class="line">        DispatcherServlet servlet = <span class="keyword">new</span> DispatcherServlet(ac); <span class="comment">// ac -&gt; webConfig</span></span><br><span class="line">        ServletRegistration.Dynamic registration = servletCxt.addServlet(<span class="string">"app"</span>, servlet);</span><br><span class="line">        registration.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registration.addMapping(<span class="string">"/app/*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Below is an example of <code>web.xml</code> configuration to register and initialize the <code>DispatcherServlet</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/app-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>app<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>app<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/app/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2-层级的容器配置"><a href="#2-2-层级的容器配置" class="headerlink" title="2.2 层级的容器配置"></a>2.2 层级的容器配置</h2><p><code>DispatcherServlet</code> expects a <code>WebApplicationContext</code>, an extension of a plain <code>ApplicationContext</code>, for its own configuration. <code>WebApplicationContext</code> has a link to the <code>ServletContext</code> and <code>Servlet</code> it is associated with. It is also bound to the <code>ServletContext</code> such that applications can use static methods on <code>RequestContextUtils</code> to look up the <code>WebApplicationContext</code>if they need access to it.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注解层级配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebAppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; RootConfig<span class="class">.<span class="keyword">class</span> &#125;</span>; <span class="comment">// dao层、 service层</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; App1Config<span class="class">.<span class="keyword">class</span> &#125;</span>; <span class="comment">// web层</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; <span class="string">"/app1/*"</span> &#125;; <span class="comment">// DispatcherServlet 映射路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// xml</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebAppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createServletApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        XmlWebApplicationContext cxt = <span class="keyword">new</span> XmlWebApplicationContext();</span><br><span class="line">        cxt.setConfigLocation(<span class="string">"/WEB-INF/spring/dispatcher-config.xml"</span>);</span><br><span class="line">        <span class="keyword">return</span> cxt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; <span class="string">"/"</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>And the <code>web.xml</code> equivalent:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/root-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>app1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/app1-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>app1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/app1/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="3-DispatcherServlet功能介绍"><a href="#3-DispatcherServlet功能介绍" class="headerlink" title="3 DispatcherServlet功能介绍"></a>3 DispatcherServlet功能介绍</h1><h2 id="3-1-Special-Bean-Types"><a href="#3-1-Special-Bean-Types" class="headerlink" title="3.1 Special Bean Types"></a>3.1 Special Bean Types</h2><p>DispatcherServlet将委托给特殊bean来处理请求并呈现适当的响应。所谓“特殊bean”，我们指的是实现WebFlux框架契约的spring托管对象实例。它们通常带有内置的契约，但是您可以定制它们的属性、扩展或替换它们。</p>
<table>
<thead>
<tr>
<th>Bean type</th>
<th>Explanation</th>
</tr>
</thead>
<tbody><tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1oYW5kbGVybWFwcGluZw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-handlermapping">HandlerMapping<i class="fa fa-external-link"></i></span></td>
<td>Map a request to a handler along with a list of <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1oYW5kbGVybWFwcGluZy1pbnRlcmNlcHRvcg==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-handlermapping-interceptor">interceptors<i class="fa fa-external-link"></i></span> for pre- and post-processing. The mapping is based on some criteria the details of which vary by <code>HandlerMapping</code> implementation.The two main <code>HandlerMapping</code> implementations are <code>RequestMappingHandlerMapping</code> which supports <code>@RequestMapping</code> annotated methods and <code>SimpleUrlHandlerMapping</code> which maintains explicit registrations of URI path patterns to handlers.</td>
</tr>
<tr>
<td>HandlerAdapter</td>
<td>Help the <code>DispatcherServlet</code> to invoke a handler mapped to a request regardless of how the handler is actually invoked. For example, invoking an annotated controller requires resolving annotations. The main purpose of a <code>HandlerAdapter</code>is to shield the <code>DispatcherServlet</code> from such details. —&gt;&gt;&gt;&gt;保护DispatcherServlet不受处理类细节影响</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1leGNlcHRpb25oYW5kbGVycw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-exceptionhandlers">HandlerExceptionResolver<i class="fa fa-external-link"></i></span></td>
<td>Strategy to resolve exceptions possibly mapping them to handlers, or to HTML error views, or other. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1leGNlcHRpb25oYW5kbGVycw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-exceptionhandlers">Exceptions<i class="fa fa-external-link"></i></span>.</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy12aWV3cmVzb2x2ZXI=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-viewresolver">ViewResolver<i class="fa fa-external-link"></i></span></td>
<td>Resolve logical String-based view names returned from a handler to an actual <code>View</code> to render to the response with. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy12aWV3cmVzb2x2ZXI=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-viewresolver">View Resolution<i class="fa fa-external-link"></i></span> and <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy12aWV3" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-view">View Technologies<i class="fa fa-external-link"></i></span>.</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1sb2NhbGVyZXNvbHZlcg==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-localeresolver">LocaleResolver<i class="fa fa-external-link"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy10aW1lem9uZQ==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-timezone">LocaleContextResolver<i class="fa fa-external-link"></i></span></td>
<td>Resolve the <code>Locale</code> a client is using and possibly their time zone, in order to be able to offer internationalized views. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1sb2NhbGVyZXNvbHZlcg==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-localeresolver">Locale<i class="fa fa-external-link"></i></span>.</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy10aGVtZXJlc29sdmVy" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-themeresolver">ThemeResolver<i class="fa fa-external-link"></i></span></td>
<td>Resolve themes your web application can use, for example, to offer personalized layouts. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy10aGVtZXJlc29sdmVy" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-themeresolver">Themes<i class="fa fa-external-link"></i></span>.</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1tdWx0aXBhcnQ=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-multipart">MultipartResolver<i class="fa fa-external-link"></i></span></td>
<td>Abstraction for parsing a multi-part request (e.g. browser form file upload) with the help of some multipart parsing library. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1tdWx0aXBhcnQ=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-multipart">Multipart resolver<i class="fa fa-external-link"></i></span>.</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1mbGFzaC1hdHRyaWJ1dGVz" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-flash-attributes">FlashMapManager<i class="fa fa-external-link"></i></span></td>
<td>Store and retrieve the “input” and the “output” <code>FlashMap</code> that can be used to pass attributes from one request to another, usually across a redirect. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1mbGFzaC1hdHRyaWJ1dGVz" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-flash-attributes">Flash attributes<i class="fa fa-external-link"></i></span>.</td>
</tr>
</tbody></table>
<h2 id="3-2-processing-requests"><a href="#3-2-processing-requests" class="headerlink" title="3.2 processing requests"></a>3.2 processing requests</h2><p>The <code>DispatcherServlet</code> processes requests as follows:</p>
<ul>
<li><p>The <code>WebApplicationContext</code> is searched for and bound in the request as an attribute that the controller and other elements in the process can use. It is bound by default under the <code>DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE</code> key.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Request attribute to hold the current web application context.</span></span><br><span class="line"><span class="comment"> * Otherwise only the global web app context is obtainable by tags etc.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.servlet.support.RequestContextUtils#findWebApplicationContext</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String </span><br><span class="line">WEB_APPLICATION_CONTEXT_ATTRIBUTE</span><br><span class="line">= </span><br><span class="line">DispatcherServlet.class.getName() + ".CONTEXT";</span><br></pre></td></tr></table></figure>
</li>
<li><p>The locale resolver is bound to the request to let elements in the process resolve the locale to use when processing the request (rendering the view, preparing data, and so on). If you do not need locale resolving, you do not need the locale resolver.</p>
</li>
<li><p>The theme resolver is bound to the request to let elements such as views determine which theme to use. If you do not use themes, you can ignore it.</p>
</li>
<li><p>If you specify a multipart file resolver, the request is inspected for multiparts. If multiparts are found, the request is wrapped in a <code>MultipartHttpServletRequest</code> for further processing by other elements in the process.</p>
</li>
<li><p>An appropriate handler is searched for. If a handler is found, the execution chain associated with the handler (preprocessors, postprocessors, and controllers) is executed in order to prepare a model or rendering. Alternatively, <strong>for annotated controllers, the response can be rendered (within the <code>HandlerAdapter</code>) instead of returning a view.</strong></p>
</li>
<li><p>If a model is returned, the view is rendered. If no model is returned (maybe due to a preprocessor or postprocessor intercepting the request, perhaps for security reasons), no view is rendered, because the request could already have been fulfilled.</p>
</li>
</ul>
<p>The <code>HandlerExceptionResolver</code> beans declared in the <code>WebApplicationContext</code> are used to resolve exceptions thrown during request processing. Those exception resolvers allow customizing the logic to address exceptions.</p>
<p>Spring DispatcherServlet还支持返回Servlet API指定的最后修改日期。确定特定请求的最后修改日期的过程很简单:DispatcherServlet查找适当的处理程序映射并测试找到的处理程序是否实现LastModified接口。如果是，LastModified接口的long getLastModified(request)方法的值将返回给客户端。</p>
<p>You can customize individual <code>DispatcherServlet</code> instances by adding Servlet initialization parameters (<code>init-param</code> elements) to the Servlet declaration in the <code>web.xml</code> file. The following table lists the supported parameters:</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Explanation</th>
</tr>
</thead>
<tbody><tr>
<td><code>contextClass</code></td>
<td>Class that implements <code>WebApplicationContext</code>, which instantiates the context used by this Servlet. By default, <code>XmlWebApplicationContext</code> is used.</td>
</tr>
<tr>
<td><code>contextConfigLocation</code></td>
<td>String that is passed to the context instance (specified by <code>contextClass</code>) to indicate where contexts can be found. The string consists potentially of multiple strings (using a comma as a delimiter) to support multiple contexts. In the case of multiple context locations with beans that are defined twice, the latest location takes precedence.</td>
</tr>
<tr>
<td><code>namespace</code></td>
<td>Namespace of the <code>WebApplicationContext</code>. Defaults to <code>[servlet-name]-servlet</code>.</td>
</tr>
<tr>
<td><code>throwExceptionIfNoHandlerFound</code></td>
<td>Whether to throw a <code>NoHandlerFoundException</code> when no handler was found for a request. The exception can then be caught with a <code>HandlerExceptionResolver</code> (for example, by using an <code>@ExceptionHandler</code> controller method) and handled as any others. \n By default, this is set to <code>false</code>, in which case the <code>DispatcherServlet</code> sets the response status to 404 (NOT_FOUND) without raising an exception.Note that, if <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1kZWZhdWx0LXNlcnZsZXQtaGFuZGxlcg==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-default-servlet-handler">default servlet handling<i class="fa fa-external-link"></i></span> is also configured, unresolved requests are always forwarded to the default servlet and a 404 is never raised.</td>
</tr>
</tbody></table>
<h2 id="3-3-Interception"><a href="#3-3-Interception" class="headerlink" title="3.3 Interception"></a>3.3 Interception</h2><p>All <code>HandlerMapping</code> implementations support handler interceptors that are useful when you want to apply specific functionality to certain requests — for example, checking for a principal. Interceptors must implement <code>HandlerInterceptor</code> from the<code>org.springframework.web.servlet</code> package with three methods that should provide enough flexibility to do all kinds of pre-processing and post-processing:</p>
<ul>
<li><code>preHandle(..)</code>: Before the actual handler is executed</li>
<li><code>postHandle(..)</code>: After the handler is executed</li>
<li><code>afterCompletion(..)</code>: After the complete request has finished</li>
</ul>
<p>The <code>preHandle(..)</code> method returns a boolean value. You can use this method to break or continue the processing of the execution chain. When this method returns <code>true</code>, the handler execution chain continues. When it returns false, the <code>DispatcherServlet</code> assumes the interceptor itself has taken care of requests (and, for example, rendered an appropriate view) and does not continue executing the other interceptors and the actual handler in the execution chain.</p>
<p>See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctaW50ZXJjZXB0b3Jz" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-interceptors">Interceptors<i class="fa fa-external-link"></i></span> in the section on MVC configuration for examples of how to configure interceptors. You can also register them directly by using setters on individual <code>HandlerMapping</code> implementations.</p>
<p>Note that <code>postHandle</code> is less useful with <code>@ResponseBody</code> and <code>ResponseEntity</code> methods for which the response is written and committed within the <code>HandlerAdapter</code> and before <code>postHandle</code>. That means it is too late to make any changes to the response, such as adding an extra header. For such scenarios, you can implement <code>ResponseBodyAdvice</code> and either declare it as an <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tY29udHJvbGxlci1hZHZpY2U=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-controller-advice">Controller Advice<i class="fa fa-external-link"></i></span> bean or configure it directly on <code>RequestMappingHandlerAdapter</code>.</p>
<h2 id="3-4-Exceptions"><a href="#3-4-Exceptions" class="headerlink" title="3.4 Exceptions"></a>3.4 Exceptions</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtZGlzcGF0Y2hlci1leGNlcHRpb25z" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-dispatcher-exceptions">Same as in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>If an exception occurs during request mapping or is thrown from a request handler (such as a <code>@Controller</code>), the <code>DispatcherServlet</code> delegates to a chain of <code>HandlerExceptionResolver</code> beans to resolve the exception and provide alternative handling, which is typically an error response.</p>
<p>The following table lists the available <code>HandlerExceptionResolver</code> implementations:</p>
<table>
<thead>
<tr>
<th><code>HandlerExceptionResolver</code></th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>SimpleMappingExceptionResolver</code></td>
<td>A mapping between exception class names and error view names. Useful for rendering error pages in a browser application.</td>
</tr>
<tr>
<td><a href="https://docs.spring.io/spring-framework/docs/5.1.0.RELEASE/javadoc-api/org/springframework/web/servlet/mvc/support/DefaultHandlerExceptionResolver.html" target="_blank" rel="noopener"><code>DefaultHandlerExceptionResolver</code></a></td>
<td>Resolves exceptions raised by Spring MVC and maps them to HTTP status codes. See also alternative <code>ResponseEntityExceptionHandler</code> and <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tcmVzdC1leGNlcHRpb25z" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-rest-exceptions">REST API exceptions<i class="fa fa-external-link"></i></span>.</td>
</tr>
<tr>
<td><code>ResponseStatusExceptionResolver</code></td>
<td>Resolves exceptions with the <code>@ResponseStatus</code> annotation and maps them to HTTP status codes based on the value in the annotation.</td>
</tr>
<tr>
<td><code>ExceptionHandlerExceptionResolver</code></td>
<td>Resolves exceptions by invoking an <code>@ExceptionHandler</code> method in a <code>@Controller</code>or a <code>@ControllerAdvice</code> class. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tZXhjZXB0aW9uaGFuZGxlcg==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-exceptionhandler">@ExceptionHandler methods<i class="fa fa-external-link"></i></span>.</td>
</tr>
</tbody></table>
<h3 id="Chain-of-Resolvers"><a href="#Chain-of-Resolvers" class="headerlink" title="Chain of Resolvers"></a>Chain of Resolvers</h3><p>You can form an exception resolver chain by declaring multiple <code>HandlerExceptionResolver</code> beans in your Spring configuration and setting their <code>order</code> properties as needed. The higher the order property, the later the exception resolver is positioned.</p>
<p>The contract of <code>HandlerExceptionResolver</code> specifies that it can return:</p>
<ul>
<li>a <code>ModelAndView</code> that points to an error view.</li>
<li>An empty <code>ModelAndView</code> if the exception was handled within the resolver.</li>
<li><code>null</code> if the exception remains unresolved, for subsequent resolvers to try, and, if the exception remains at the end, it is allowed to bubble up to the Servlet container.</li>
</ul>
<p>The <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWc=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config">MVC Config<i class="fa fa-external-link"></i></span> automatically declares built-in resolvers for default Spring MVC exceptions, for <code>@ResponseStatus</code> annotated exceptions, and for support of <code>@ExceptionHandler</code> methods. You can customize that list or replace it.</p>
<h3 id="Container-Error-Page"><a href="#Container-Error-Page" class="headerlink" title="Container Error Page"></a>Container Error Page</h3><p>If an exception remains unresolved by any <code>HandlerExceptionResolver</code> and is, therefore, left to propagate or if the response status is set to an error status (that is, 4xx, 5xx), Servlet containers ca render a default error page in HTML. To customize the default error page of the container, you can declare an error page mapping in <code>web.xml</code>. The following example shows how to do so:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Given the preceding example, when an exception bubbles up or the response has an error status, the Servlet container makes an ERROR dispatch within the container to the configured URL (for example, <code>/error</code>). This is then processed by the <code>DispatcherServlet</code>, possibly mapping it to a <code>@Controller</code>, which could be implemented to return an error view name with a model or to render a JSON response, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/error"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">handle</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(<span class="string">"status"</span>, request.getAttribute(<span class="string">"javax.servlet.error.status_code"</span>));</span><br><span class="line">        map.put(<span class="string">"reason"</span>, request.getAttribute(<span class="string">"javax.servlet.error.message"</span>));</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>More ActionsThe Servlet API does not provide a way to create error page mappings in Java. You can, however, use both a <code>WebApplicationInitializer</code> and a minimal <code>web.xml</code>.</p>
<h2 id="3-5-View-Resolution"><a href="#3-5-View-Resolution" class="headerlink" title="3.5 View Resolution"></a>3.5 View Resolution</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtdmlld3Jlc29sdXRpb24=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-viewresolution">Same as in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>Spring MVC defines the <code>ViewResolver</code> and <code>View</code> interfaces that let you render models in a browser without tying you to a specific view technology. <code>ViewResolver</code> provides a mapping between view names and actual views. <code>View</code> addresses the preparation of data before handing over to a specific view technology.</p>
<p>The following table provides more details on the <code>ViewResolver</code> hierarchy:</p>
<table>
<thead>
<tr>
<th>ViewResolver</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>AbstractCachingViewResolver</code></td>
<td>Sub-classes of <code>AbstractCachingViewResolver</code> cache view instances that they resolve. Caching improves performance of certain view technologies. You can turn off the cache by setting the <code>cache</code> property to <code>false</code>. Furthermore, if you must refresh a certain view at runtime (for example, when a FreeMarker template is modified), you can use the <code>removeFromCache(String viewName, Locale loc)</code> method.</td>
</tr>
<tr>
<td><code>XmlViewResolver</code></td>
<td>Implementation of <code>ViewResolver</code> that accepts a configuration file written in XML with the same DTD as Spring’s XML bean factories. The default configuration file is<code>/WEB-INF/views.xml</code>.</td>
</tr>
<tr>
<td><code>ResourceBundleViewResolver</code></td>
<td>Implementation of <code>ViewResolver</code> that uses bean definitions in a <code>ResourceBundle</code>, specified by the bundle base name. For each view it is supposed to resolve, it uses the value of the property <code>[viewname].(class)</code> as the view class and the value of the property <code>[viewname].url</code> as the view URL. You can find examples in the chapter on <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy12aWV3" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-view">View Technologies<i class="fa fa-external-link"></i></span>.</td>
</tr>
<tr>
<td><code>UrlBasedViewResolver</code></td>
<td>Simple implementation of the <code>ViewResolver</code> interface that affects the direct resolution of logical view names to URLs without an explicit mapping definition. This is appropriate if your logical names match the names of your view resources in a straightforward manner, without the need for arbitrary mappings.</td>
</tr>
<tr>
<td><code>InternalResourceViewResolver</code></td>
<td>Convenient subclass of <code>UrlBasedViewResolver</code> that supports <code>InternalResourceView</code> (in effect, Servlets and JSPs) and subclasses such as <code>JstlView</code> and <code>TilesView</code>. You can specify the view class for all views generated by this resolver by using <code>setViewClass(..)</code>. See the <a href="https://docs.spring.io/spring-framework/docs/5.1.0.RELEASE/javadoc-api/org/springframework/web/reactive/result/view/UrlBasedViewResolver.html" target="_blank" rel="noopener"><code>UrlBasedViewResolver</code>Javadoc</a> for details.</td>
</tr>
<tr>
<td><code>FreeMarkerViewResolver</code></td>
<td>Convenient subclass of <code>UrlBasedViewResolver</code> that supports <code>FreeMarkerView</code> and custom subclasses of them.</td>
</tr>
<tr>
<td><code>ContentNegotiatingViewResolver</code></td>
<td>Implementation of the <code>ViewResolver</code> interface that resolves a view based on the request file name or <code>Accept</code> header. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1tdWx0aXBsZS1yZXByZXNlbnRhdGlvbnM=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-multiple-representations">Content Negotiation<i class="fa fa-external-link"></i></span>.</td>
</tr>
</tbody></table>
<h3 id="Handling"><a href="#Handling" class="headerlink" title="Handling"></a>Handling</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtdmlld3Jlc29sdXRpb24taGFuZGxpbmc=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-viewresolution-handling">Same as in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>You can chain view resolvers by declaring more than one resolver bean and, if necessary, by setting the <code>order</code> property to specify ordering. Remember, the higher the order property, the later the view resolver is positioned in the chain.</p>
<p>The contract of a <code>ViewResolver</code> specifies that it can return null to indicate that the view could not be found. However, in the case of JSPs and <code>InternalResourceViewResolver</code>, the only way to figure out if a JSP exists is to perform a dispatch through<code>RequestDispatcher</code>. Therefore, you must always configure an <code>InternalResourceViewResolver</code> to be last in the overall order of view resolvers.</p>
<p>Configuring view resolution is as simple as adding <code>ViewResolver</code> beans to your Spring configuration. The <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWc=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config">MVC Config<i class="fa fa-external-link"></i></span> provides a dedicated configuration API for <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctdmlldy1yZXNvbHZlcnM=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-view-resolvers">View Resolvers<i class="fa fa-external-link"></i></span> and for adding logic-less <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctdmlldy1jb250cm9sbGVy" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-view-controller">View Controllers<i class="fa fa-external-link"></i></span> which are useful for HTML template rendering without controller logic.</p>
<h3 id="Redirecting"><a href="#Redirecting" class="headerlink" title="Redirecting"></a>Redirecting</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtcmVkaXJlY3RpbmctcmVkaXJlY3QtcHJlZml4" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-redirecting-redirect-prefix">Same as in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>The special <code>redirect:</code> prefix in a view name lets you perform a redirect. The <code>UrlBasedViewResolver</code> (and its subclasses) recognize this as an instruction that a redirect is needed. The rest of the view name is the redirect URL.</p>
<p>The net effect is the same as if the controller had returned a <code>RedirectView</code>, but now the controller itself can operate in terms of logical view names. A logical view name (such as <code>redirect:/myapp/some/resource</code>) redirects relative to the current Servlet context, while a name such as <code>redirect:http://myhost.com/some/arbitrary/path</code> redirects to an absolute URL.</p>
<p>Note that, if a controller method is annotated with the <code>@ResponseStatus</code>, the annotation value takes precedence over the response status set by <code>RedirectView</code>.</p>
<h3 id="Forwarding"><a href="#Forwarding" class="headerlink" title="Forwarding"></a>Forwarding</h3><p>You can also use a special <code>forward:</code> prefix for view names that are ultimately resolved by <code>UrlBasedViewResolver</code> and subclasses. This creates an <code>InternalResourceView</code>, which does a <code>RequestDispatcher.forward()</code>. Therefore, this prefix is not useful with <code>InternalResourceViewResolver</code> and <code>InternalResourceView</code> (for JSPs), but it can be helpful if you use another view technology but still want to force a forward of a resource to be handled by the Servlet/JSP engine. Note that you may also chain multiple view resolvers, instead.</p>
<h3 id="Content-Negotiation"><a href="#Content-Negotiation" class="headerlink" title="Content Negotiation"></a>Content Negotiation</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtbXVsdGlwbGUtcmVwcmVzZW50YXRpb25z" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-multiple-representations">Same as in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p><a href="https://docs.spring.io/spring-framework/docs/5.1.0.RELEASE/javadoc-api/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html" target="_blank" rel="noopener"><code>ContentNegotiatingViewResolver</code></a> does not resolve views itself but rather delegates to other view resolvers and selects the view that resembles the representation requested by the client. The representation can be determined from the <code>Accept</code> header or from a query parameter (for example, <code>&quot;/path?format=pdf&quot;</code>).</p>
<p>The <code>ContentNegotiatingViewResolver</code> selects an appropriate <code>View</code> to handle the request by comparing the request media types with the media type (also known as <code>Content-Type</code>) supported by the <code>View</code> associated with each of its <code>ViewResolvers</code>. The first <code>View</code> in the list that has a compatible <code>Content-Type</code> returns the representation to the client. If a compatible view cannot be supplied by the <code>ViewResolver</code> chain, the list of views specified through the <code>DefaultViews</code> property is consulted. This latter option is appropriate for singleton <code>Views</code> that can render an appropriate representation of the current resource regardless of the logical view name. The <code>Accept</code> header can include wildcards (for example <code>text/*</code>), in which case a <code>View</code> whose <code>Content-Type</code> is <code>text/xml</code> is a compatible match.</p>
<p>See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctdmlldy1yZXNvbHZlcnM=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config-view-resolvers">View Resolvers<i class="fa fa-external-link"></i></span> under <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWc=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config">MVC Config<i class="fa fa-external-link"></i></span> for configuration details.</p>
<h2 id="3-6-Locale"><a href="#3-6-Locale" class="headerlink" title="3.6 Locale"></a>3.6 Locale</h2><p>Most parts of Spring’s architecture support internationalization, as the Spring web MVC framework does. <code>DispatcherServlet</code>lets you automatically resolve messages by using the client’s locale. This is done with <code>LocaleResolver</code> objects.</p>
<p>When a request comes in, the <code>DispatcherServlet</code> looks for a locale resolver and, if it finds one, it tries to use it to set the locale. By using the <code>RequestContext.getLocale()</code> method, you can always retrieve the locale that was resolved by the locale resolver.</p>
<p>In addition to automatic locale resolution, you can also attach an interceptor to the handler mapping (see <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1oYW5kbGVybWFwcGluZy1pbnRlcmNlcHRvcg==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-handlermapping-interceptor">Interception<i class="fa fa-external-link"></i></span> for more information on handler mapping interceptors) to change the locale under specific circumstances (for example, based on a parameter in the request).</p>
<p>Locale resolvers and interceptors are defined in the <code>org.springframework.web.servlet.i18n</code> package and are configured in your application context in the normal way. The following selection of locale resolvers is included in Spring.</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy10aW1lem9uZQ==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-timezone">Time Zone<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1sb2NhbGVyZXNvbHZlci1hY2NlcHRoZWFkZXI=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-localeresolver-acceptheader">Header Resolver<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1sb2NhbGVyZXNvbHZlci1jb29raWU=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-localeresolver-cookie">Cookie Resolver<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1sb2NhbGVyZXNvbHZlci1zZXNzaW9u" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-localeresolver-session">Session Resolver<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1sb2NhbGVyZXNvbHZlci1pbnRlcmNlcHRvcg==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-localeresolver-interceptor">Locale Interceptor<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="Time-Zone"><a href="#Time-Zone" class="headerlink" title="Time Zone"></a>Time Zone</h3><p>In addition to obtaining the client’s locale, it is often useful to know its time zone. The <code>LocaleContextResolver</code> interface offers an extension to <code>LocaleResolver</code> that lets resolvers provide a richer <code>LocaleContext</code>, which may include time zone information.</p>
<p>When available, the user’s <code>TimeZone</code> can be obtained by using the <code>RequestContext.getTimeZone()</code> method. Time zone information is automatically used by any Date/Time <code>Converter</code> and <code>Formatter</code> objects that are registered with Spring’s<code>ConversionService</code>.</p>
<h3 id="Header-Resolver"><a href="#Header-Resolver" class="headerlink" title="Header Resolver"></a>Header Resolver</h3><p>This locale resolver inspects the <code>accept-language</code> header in the request that was sent by the client (for example, a web browser). Usually, this header field contains the locale of the client’s operating system. Note that this resolver does not support time zone information.</p>
<h3 id="Cookie-Resolver"><a href="#Cookie-Resolver" class="headerlink" title="Cookie Resolver"></a>Cookie Resolver</h3><p>This locale resolver inspects a <code>Cookie</code> that might exist on the client to see if a <code>Locale</code> or <code>TimeZone</code> is specified. If so, it uses the specified details. By using the properties of this locale resolver, you can specify the name of the cookie as well as the maximum age. The following example defines a <code>CookieLocaleResolver</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localeResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.CookieLocaleResolver"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cookieName"</span> <span class="attr">value</span>=<span class="string">"clientlanguage"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- in seconds. If set to -1, the cookie is not persisted (deleted when browser shuts down) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cookieMaxAge"</span> <span class="attr">value</span>=<span class="string">"100000"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The following table describes the properties <code>CookieLocaleResolver</code>:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>cookieName</code></td>
<td>classname + LOCALE</td>
<td>The name of the cookie</td>
</tr>
<tr>
<td><code>cookieMaxAge</code></td>
<td>Servlet container default</td>
<td>The maximum time a cookie persists on the client. If <code>-1</code> is specified, the cookie will not be persisted. It is available only until the client shuts down the browser.</td>
</tr>
<tr>
<td><code>cookiePath</code></td>
<td>/</td>
<td>Limits the visibility of the cookie to a certain part of your site. When <code>cookiePath</code> is specified, the cookie is visible only to that path and the paths below it.</td>
</tr>
</tbody></table>
<h3 id="Session-Resolver"><a href="#Session-Resolver" class="headerlink" title="Session Resolver"></a>Session Resolver</h3><p>The <code>SessionLocaleResolver</code> lets you retrieve <code>Locale</code> and <code>TimeZone</code> from the session that might be associated with the user’s request. In contrast to <code>CookieLocaleResolver</code>, this strategy stores locally chosen locale settings in the Servlet container’s <code>HttpSession</code>. As a consequence, those settings are temporary for each session and are, therefore, lost when each session terminates.</p>
<p>Note that there is no direct relationship with external session management mechanisms, such as the Spring Session project. This <code>SessionLocaleResolver</code> evaluates and modifies the corresponding <code>HttpSession</code> attributes against the current <code>HttpServletRequest</code>.</p>
<h3 id="Locale-Interceptor"><a href="#Locale-Interceptor" class="headerlink" title="Locale Interceptor"></a>Locale Interceptor</h3><p>You can enable changing of locales by adding the <code>LocaleChangeInterceptor</code> to one of the handler mappings (see <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1oYW5kbGVybWFwcGluZw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-handlermapping">[mvc-handlermapping]<i class="fa fa-external-link"></i></span>). It detects a parameter in the request and changes the locale. It calls <code>setLocale()</code> on the <code>LocaleResolver</code>that also exists in the context. The next example shows that calls to all <code>*.view</code> resources that contain a parameter named <code>siteLanguage</code> now changes the locale. So, for example, a request for the URL, <code>http://www.sf.net/home.view?siteLanguage=nl</code>, changes the site language to Dutch. The following example shows how to intercept the locale:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localeChangeInterceptor"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.LocaleChangeInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"paramName"</span> <span class="attr">value</span>=<span class="string">"siteLanguage"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localeResolver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.CookieLocaleResolver"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"urlMapping"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptors"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"localeChangeInterceptor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/**/*.view=someController<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-7-Themes"><a href="#3-7-Themes" class="headerlink" title="3.7 Themes"></a>3.7 Themes</h2><p>You can apply Spring Web MVC framework themes to set the overall look-and-feel of your application, thereby enhancing user experience. A theme is a collection of static resources, typically style sheets and images, that affect the visual style of the application.</p>
<h3 id="Defining-a-theme"><a href="#Defining-a-theme" class="headerlink" title="Defining a theme"></a>Defining a theme</h3><p>To use themes in your web application, you must set up an implementation of the<code>org.springframework.ui.context.ThemeSource</code> interface. The <code>WebApplicationContext</code> interface extends <code>ThemeSource</code> but delegates its responsibilities to a dedicated implementation. By default, the delegate is an<code>org.springframework.ui.context.support.ResourceBundleThemeSource</code> implementation that loads properties files from the root of the classpath. To use a custom <code>ThemeSource</code> implementation or to configure the base name prefix of the <code>ResourceBundleThemeSource</code>, you can register a bean in the application context with the reserved name, <code>themeSource</code>. The web application context automatically detects a bean with that name and uses it.</p>
<p>When you use the <code>ResourceBundleThemeSource</code>, a theme is defined in a simple properties file. The properties file lists the resources that make up the theme, as the following example shows:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">styleSheet&#x3D;&#x2F;themes&#x2F;cool&#x2F;style.css</span><br><span class="line">background&#x3D;&#x2F;themes&#x2F;cool&#x2F;img&#x2F;coolBg.jpg</span><br></pre></td></tr></table></figure>

<p>The keys of the properties are the names that refer to the themed elements from view code. For a JSP, you typically do this using the <code>spring:theme</code> custom tag, which is very similar to the <code>spring:message</code> tag. The following JSP fragment uses the theme defined in the previous example to customize the look and feel:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"spring"</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&lt;spring:theme code='styleSheet'/&gt;"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"background=&lt;spring:theme code='background'/&gt;"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>By default, the <code>ResourceBundleThemeSource</code> uses an empty base name prefix. As a result, the properties files are loaded from the root of the classpath. Thus, you would put the <code>cool.properties</code> theme definition in a directory at the root of the classpath (for example, in <code>/WEB-INF/classes</code>). The <code>ResourceBundleThemeSource</code> uses the standard Java resource bundle loading mechanism, allowing for full internationalization of themes. For example, we could have a <code>/WEB-INF/classes/cool_nl.properties</code> that references a special background image with Dutch text on it.</p>
<h3 id="Resolving-Themes"><a href="#Resolving-Themes" class="headerlink" title="Resolving Themes"></a>Resolving Themes</h3><p>After you define themes, as described in the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy10aGVtZXJlc29sdmVyLWRlZmluaW5n" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-themeresolver-defining">preceding section<i class="fa fa-external-link"></i></span>, you decide which theme to use. The <code>DispatcherServlet</code> looks for a bean named <code>themeResolver</code> to find out which <code>ThemeResolver</code> implementation to use. A theme resolver works in much the same way as a <code>LocaleResolver</code>. It detects the theme to use for a particular request and can also alter the request’s theme. The following table describes the theme resolvers provided by Spring:</p>
<table>
<thead>
<tr>
<th>Class</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>FixedThemeResolver</code></td>
<td>Selects a fixed theme, set by using the <code>defaultThemeName</code> property.</td>
</tr>
<tr>
<td><code>SessionThemeResolver</code></td>
<td>The theme is maintained in the user’s HTTP session. It needs to be set only once for each session but is not persisted between sessions.</td>
</tr>
<tr>
<td><code>CookieThemeResolver</code></td>
<td>The selected theme is stored in a cookie on the client.</td>
</tr>
</tbody></table>
<p>Spring also provides a <code>ThemeChangeInterceptor</code> that lets theme changes on every request with a simple request parameter.</p>
<h2 id="3-8-Multipart-Resolver"><a href="#3-8-Multipart-Resolver" class="headerlink" title="3.8 Multipart Resolver"></a>3.8 Multipart Resolver</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtbXVsdGlwYXJ0" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-multipart">Same as in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p><code>MultipartResolver</code> from the <code>org.springframework.web.multipart</code> package is a strategy for parsing multipart requests including file uploads. There is one implementation based on <span class="exturl" data-url="aHR0cHM6Ly9qYWthcnRhLmFwYWNoZS5vcmcvY29tbW9ucy9maWxldXBsb2Fk" title="https://jakarta.apache.org/commons/fileupload">Commons FileUpload<i class="fa fa-external-link"></i></span> and another based on Servlet 3.0 multipart request parsing.</p>
<p>To enable multipart handling, you need to declare a <code>MultipartResolver</code> bean in your <code>DispatcherServlet</code> Spring configuration with a name of <code>multipartResolver</code>. The <code>DispatcherServlet</code> detects it and applies it to the incoming request. When a POST with content-type of <code>multipart/form-data</code> is received, the resolver parses the content and wraps the current <code>HttpServletRequest</code> as <code>MultipartHttpServletRequest</code> to provide access to resolved parts in addition to exposing them as request parameters.</p>
<h3 id="Apache-FileUpload"><a href="#Apache-FileUpload" class="headerlink" title="Apache FileUpload"></a>Apache <code>FileUpload</code></h3><p>To use Apache Commons <code>FileUpload</code>, you can configure a bean of type <code>CommonsMultipartResolver</code> with a name of <code>multipartResolver</code>. You also need to have <code>commons-fileupload</code> as a dependency on your classpath.</p>
<h3 id="Servlet-3-0"><a href="#Servlet-3-0" class="headerlink" title="Servlet 3.0"></a>Servlet 3.0</h3><p>Servlet 3.0 multipart parsing needs to be enabled through Servlet container configuration. To do so:</p>
<ul>
<li>In Java, set a <code>MultipartConfigElement</code> on the Servlet registration.</li>
<li>In <code>web.xml</code>, add a <code>&quot;&lt;multipart-config&gt;&quot;</code> section to the servlet declaration.</li>
</ul>
<p>The following example shows how to set a <code>MultipartConfigElement</code> on the Servlet registration:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeRegistration</span><span class="params">(ServletRegistration.Dynamic registration)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Optionally also set maxFileSize, maxRequestSize, fileSizeThreshold</span></span><br><span class="line">        registration.setMultipartConfig(<span class="keyword">new</span> MultipartConfigElement(<span class="string">"/tmp"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Once the Servlet 3.0 configuration is in place, you can add a bean of type <code>StandardServletMultipartResolver</code> with a name of <code>multipartResolver</code>.</p>
<h2 id="3-9-Logging"><a href="#3-9-Logging" class="headerlink" title="3.9 Logging"></a>3.9 Logging</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtbG9nZ2luZw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-logging">Same as in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>DEBUG-level logging in Spring MVC is designed to be compact, minimal, and human-friendly. It focuses on high-value bits of information that are useful over and over again versus others that are useful only when debugging a specific issue.</p>
<p>TRACE-level logging generally follows the same principles as DEBUG (and, for example, also should not be a fire hose) but can be used for debugging any issue. In addition, some log messages may show a different level of detail at TRACE versus DEBUG.</p>
<p>Good logging comes from the experience of using the logs. If you spot anything that does not meet the stated goals, please let us know.</p>
<h3 id="Sensitive-Data"><a href="#Sensitive-Data" class="headerlink" title="Sensitive Data"></a>Sensitive Data</h3><p>DEBUG and TRACE logging may log sensitive information. This is why request parameters and headers are masked by default and their logging in full must be enabled explicitly through the <code>enableLoggingRequestDetails</code> property on <code>DispatcherServlet</code>.</p>
<p>The following example shows how to do so by using Java configuration:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInitializer</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> ... ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> ... ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> ... ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeRegistration</span><span class="params">(Dynamic registration)</span> </span>&#123;</span><br><span class="line">        registration.setInitParameter(<span class="string">"enableLoggingRequestDetails"</span>, <span class="string">"true"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-Filters"><a href="#4-Filters" class="headerlink" title="4 Filters"></a>4 Filters</h1><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtZmlsdGVycw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-filters">Same as in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>The <code>spring-web</code> module provides some useful filters:</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI2ZpbHRlcnMtaHR0cC1wdXQ=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#filters-http-put">Form Data<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI2ZpbHRlcnMtZm9yd2FyZGVkLWhlYWRlcnM=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#filters-forwarded-headers">Forwarded Headers<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI2ZpbHRlcnMtc2hhbGxvdy1ldGFn" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#filters-shallow-etag">Shallow ETag<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI2ZpbHRlcnMtY29ycw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#filters-cors">CORS<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="Form-Data"><a href="#Form-Data" class="headerlink" title="Form Data"></a>Form Data</h2><p>Browsers can submit form data only through HTTP GET or HTTP POST but non-browser clients can also use HTTP PUT, PATCH, and DELETE. The Servlet API requires <code>ServletRequest.getParameter*()</code> methods to support form field access only for HTTP POST.</p>
<p>The <code>spring-web</code> module provides <code>FormContentFilter</code> to intercept HTTP PUT, PATCH, and DELETE requests with a content type of <code>application/x-www-form-urlencoded</code>, read the form data from the body of the request, and wrap the <code>ServletRequest</code> to make the form data available through the <code>ServletRequest.getParameter*()</code> family of methods.</p>
<h2 id="Forwarded-Headers"><a href="#Forwarded-Headers" class="headerlink" title="Forwarded Headers"></a>Forwarded Headers</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtZm9yd2FyZGVkLWhlYWRlcnM=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-forwarded-headers">Same as in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>As a request goes through proxies (such as load balancers) the host, port, and scheme may change, and that makes it a challenge to create links that point to the correct host, port, and scheme from a client perspective.</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzk=" title="https://tools.ietf.org/html/rfc7239">RFC 7239<i class="fa fa-external-link"></i></span> defines the <code>Forwarded</code> HTTP header that proxies can use to provide information about the original request. There are other non-standard headers, too, including <code>X-Forwarded-Host</code>, <code>X-Forwarded-Port</code>, <code>X-Forwarded-Proto</code>, <code>X-Forwarded-Ssl</code>, and <code>X-Forwarded-Prefix</code>.</p>
<p><code>ForwardedHeaderFilter</code> is a Servlet filter that modifies the host, port, and scheme of the request, based on <code>Forwarded</code> headers, and then removes those headers.</p>
<p>There are security considerations for forwarded headers since an application cannot know if the headers were added by a proxy, as intended, or by a malicious client. This is why a proxy at the boundary of trust should be configured to remove untrusted <code>Forwarded</code> headers that come from the outside. You can also configure the <code>ForwardedHeaderFilter</code> with <code>removeOnly=true</code>, in which case it removes but does not use the headers.</p>
<h2 id="Shallow-ETag"><a href="#Shallow-ETag" class="headerlink" title="Shallow ETag"></a>Shallow ETag</h2><p>The <code>ShallowEtagHeaderFilter</code> filter creates a “shallow” ETag by caching the content written to the response and computing an MD5 hash from it. The next time a client sends, it does the same, but it also compares the computed value against the <code>If-None-Match</code> request header and, if the two are equal, returns a 304 (NOT_MODIFIED).</p>
<p>This strategy saves network bandwidth but not CPU, as the full response must be computed for each request. Other strategies at the controller level, described earlier, can avoid the computation. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jYWNoaW5n" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-caching">HTTP Caching<i class="fa fa-external-link"></i></span>.</p>
<p>This filter has a <code>writeWeakETag</code> parameter that configures the filter to write weak ETags similar to the following: <code>W/&quot;02a2d595e6ed9a0b24f027f2b63b134d6&quot;</code> (as defined in <span class="exturl" data-url="aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzIjc2VjdGlvbi0yLjM=" title="https://tools.ietf.org/html/rfc7232#section-2.3">RFC 7232 Section 2.3<i class="fa fa-external-link"></i></span>).</p>
<p>CORS</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtZmlsdGVycy1jb3Jz" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-filters-cors">Same as in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>Spring MVC provides fine-grained support for CORS configuration through annotations on controllers. However, when used with Spring Security, we advise relying on the built-in <code>CorsFilter</code> that must be ordered ahead of Spring Security’s chain of filters.</p>
<p>See the sections on <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb3Jz" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-cors">CORS<i class="fa fa-external-link"></i></span> and the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb3JzLWZpbHRlcg==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-cors-filter">CORS Filter<i class="fa fa-external-link"></i></span> for more details.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>8-webmvc-3</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/8-webmvc-3/</url>
    <content><![CDATA[<h1 id="2-URI-Links"><a href="#2-URI-Links" class="headerlink" title="2 URI Links"></a>2 URI Links</h1><h2 id="2-1-UriComponents"><a href="#2-1-UriComponents" class="headerlink" title="2.1 UriComponents"></a>2.1 UriComponents</h2><p><code>UriComponentsBuilder</code> helps to build URI’s from URI templates with variables, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UriComponents uriComponents = UriComponentsBuilder</span><br><span class="line">        .fromUriString(<span class="string">"http://example.com/hotels/&#123;hotel&#125;"</span>)  <span class="comment">// 1</span></span><br><span class="line">        .queryParam(<span class="string">"q"</span>, <span class="string">"&#123;q&#125;"</span>)  <span class="comment">// 2</span></span><br><span class="line">        .encode() <span class="comment">// 3</span></span><br><span class="line">        .build(); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">URI uri = uriComponents.expand(<span class="string">"Westin"</span>, <span class="string">"123"</span>).toUri();  <span class="comment">// 5</span></span><br><span class="line">System.out.println(uri.toString());</span><br><span class="line"><span class="comment">// http://example.com/hotels/Westin?q=123</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>1</th>
<th>Static factory method with a URI template.</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>Add or replace URI components.</td>
</tr>
<tr>
<td>3</td>
<td>Request to have the URI template and URI variables encoded.</td>
</tr>
<tr>
<td>4</td>
<td>Build a <code>UriComponents</code>.</td>
</tr>
<tr>
<td>5</td>
<td>Expand variables and obtain the <code>URI</code>.</td>
</tr>
</tbody></table>
<ul>
<li>其他方式<a id="more"></a>
The preceding example can be consolidated into one chain and shortened with <code>buildAndExpand</code>, as the following example shows:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URI uri = UriComponentsBuilder</span><br><span class="line">        .fromUriString(<span class="string">"http://example.com/hotels/&#123;hotel&#125;"</span>)</span><br><span class="line">        .queryParam(<span class="string">"q"</span>, <span class="string">"&#123;q&#125;"</span>)</span><br><span class="line">        .encode()</span><br><span class="line">        .buildAndExpand(<span class="string">"Westin"</span>, <span class="string">"123"</span>)</span><br><span class="line">        .toUri();</span><br></pre></td></tr></table></figure>

<p>You can shorten it further by going directly to a URI (which implies encoding), as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URI uri = UriComponentsBuilder</span><br><span class="line">        .fromUriString(<span class="string">"http://example.com/hotels/&#123;hotel&#125;"</span>)</span><br><span class="line">        .queryParam(<span class="string">"q"</span>, <span class="string">"&#123;q&#125;"</span>)</span><br><span class="line">        .build(<span class="string">"Westin"</span>, <span class="string">"123"</span>);</span><br></pre></td></tr></table></figure>

<p>You shorter it further still with a full URI template, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URI uri = UriComponentsBuilder</span><br><span class="line">        .fromUriString(<span class="string">"http://example.com/hotels/&#123;hotel&#125;?q=&#123;q&#125;"</span>)</span><br><span class="line">        .build(<span class="string">"Westin"</span>, <span class="string">"123"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="2-2-UriBuilder"><a href="#2-2-UriBuilder" class="headerlink" title="2.2 UriBuilder"></a>2.2 UriBuilder</h2><p>UriComponentsBuilder实现UriBuilder。您可以依次使用UriBuilderFactory创建一个UriBuilder。UriBuilderFactory和UriBuilder一起提供了一种可插入的机制，可以基于共享配置(如基本URL、编码首选项和其他细节)从URI模板构建URI。</p>
<p>您可以使用UriBuilderFactory配置RestTemplate和WebClient，以定制uri的准备。DefaultUriBuilderFactory是UriBuilderFactory的默认实现，它在内部使用UriComponentsBuilder并公开共享配置选项。</p>
<p>The following example shows how to configure a <code>RestTemplate</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import org.springframework.web.util.DefaultUriBuilderFactory.EncodingMode;</span></span><br><span class="line"></span><br><span class="line">String baseUrl = <span class="string">"http://example.org"</span>;</span><br><span class="line">DefaultUriBuilderFactory factory = <span class="keyword">new</span> DefaultUriBuilderFactory(baseUrl);</span><br><span class="line">factory.setEncodingMode(EncodingMode.TEMPLATE_AND_VARIABLES);</span><br><span class="line"></span><br><span class="line">RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">restTemplate.setUriTemplateHandler(factory);</span><br></pre></td></tr></table></figure>

<p>The following example configures a <code>WebClient</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import org.springframework.web.util.DefaultUriBuilderFactory.EncodingMode;</span></span><br><span class="line"></span><br><span class="line">String baseUrl = <span class="string">"http://example.org"</span>;</span><br><span class="line">DefaultUriBuilderFactory factory = <span class="keyword">new</span> DefaultUriBuilderFactory(baseUrl);</span><br><span class="line">factory.setEncodingMode(EncodingMode.TEMPLATE_AND_VARIABLES);</span><br><span class="line"></span><br><span class="line">WebClient client = WebClient.builder().uriBuilderFactory(factory).build();</span><br></pre></td></tr></table></figure>

<p>In addition, you can also use <code>DefaultUriBuilderFactory</code> directly. It is similar to using <code>UriComponentsBuilder</code> but, instead of static factory methods, it is an actual instance that holds configuration and preferences, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String baseUrl = <span class="string">"http://example.com"</span>;</span><br><span class="line">DefaultUriBuilderFactory uriBuilderFactory = <span class="keyword">new</span> DefaultUriBuilderFactory(baseUrl);</span><br><span class="line"></span><br><span class="line">URI uri = uriBuilderFactory.uriString(<span class="string">"/hotels/&#123;hotel&#125;"</span>)</span><br><span class="line">        .queryParam(<span class="string">"q"</span>, <span class="string">"&#123;q&#125;"</span>)</span><br><span class="line">        .build(<span class="string">"Westin"</span>, <span class="string">"123"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="2-3-URI-Encoding"><a href="#2-3-URI-Encoding" class="headerlink" title="2.3 URI Encoding"></a>2.3 URI Encoding</h2><p>The following example uses the first option:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URI uri = UriComponentsBuilder.fromPath(<span class="string">"/hotel list/&#123;city&#125;"</span>)</span><br><span class="line">            .queryParam(<span class="string">"q"</span>, <span class="string">"&#123;q&#125;"</span>)</span><br><span class="line">            .encode()</span><br><span class="line">            .buildAndExpand(<span class="string">"New York"</span>, <span class="string">"foo+bar"</span>)</span><br><span class="line">            .toUri();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Result is "/hotel%20list/New%20York?q=foo%2Bbar"</span></span><br></pre></td></tr></table></figure>

<p>You can shorten the preceding example by going directly to the URI (which implies encoding), as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URI uri = UriComponentsBuilder.fromPath(<span class="string">"/hotel list/&#123;city&#125;"</span>)</span><br><span class="line">            .queryParam(<span class="string">"q"</span>, <span class="string">"&#123;q&#125;"</span>)</span><br><span class="line">            .build(<span class="string">"New York"</span>, <span class="string">"foo+bar"</span>)</span><br></pre></td></tr></table></figure>

<p>You can shorten it further still with a full URI template, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URI uri = UriComponentsBuilder.fromPath(<span class="string">"/hotel list/&#123;city&#125;?q=&#123;q&#125;"</span>)</span><br><span class="line">            .build(<span class="string">"New York"</span>, <span class="string">"foo+bar"</span>)</span><br></pre></td></tr></table></figure>

<p>The <code>WebClient</code> and the <code>RestTemplate</code> expand and encode URI templates internally through the <code>UriBuilderFactory</code> strategy. Both can be configured with a custom strategy. as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String baseUrl = <span class="string">"http://example.com"</span>;</span><br><span class="line">DefaultUriBuilderFactory factory = <span class="keyword">new</span> DefaultUriBuilderFactory(baseUrl)</span><br><span class="line">factory.setEncodingMode(EncodingMode.TEMPLATE_AND_VALUES);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Customize the RestTemplate..</span></span><br><span class="line">RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">restTemplate.setUriTemplateHandler(factory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Customize the WebClient..</span></span><br><span class="line">WebClient client = WebClient.builder().uriBuilderFactory(factory).build();</span><br></pre></td></tr></table></figure>

<h2 id="2-4-Relative-Servlet-Requests"><a href="#2-4-Relative-Servlet-Requests" class="headerlink" title="2.4 Relative Servlet Requests"></a>2.4 Relative Servlet Requests</h2><p>You can use <code>ServletUriComponentsBuilder</code> to create URIs relative to the current request, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpServletRequest request = ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Re-uses host, scheme, port, path and query string...</span></span><br><span class="line"></span><br><span class="line">ServletUriComponentsBuilder ucb = ServletUriComponentsBuilder.fromRequest(request)</span><br><span class="line">        .replaceQueryParam(<span class="string">"accountId"</span>, <span class="string">"&#123;id&#125;"</span>).build()</span><br><span class="line">        .expand(<span class="string">"123"</span>)</span><br><span class="line">        .encode();</span><br></pre></td></tr></table></figure>

<p>You can create URIs relative to the context path, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Re-uses host, port and context path...</span></span><br><span class="line"></span><br><span class="line">ServletUriComponentsBuilder ucb = ServletUriComponentsBuilder.fromContextPath(request)</span><br><span class="line">        .path(<span class="string">"/accounts"</span>).build()</span><br></pre></td></tr></table></figure>

<p>You can create URIs relative to a Servlet (for example, <code>/main/*</code>), as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Re-uses host, port, context path, and Servlet prefix...</span></span><br><span class="line"></span><br><span class="line">ServletUriComponentsBuilder ucb = ServletUriComponentsBuilder.fromServletMapping(request)</span><br><span class="line">        .path(<span class="string">"/accounts"</span>).build()</span><br></pre></td></tr></table></figure>

<h2 id="2-5-Links-to-Controllers"><a href="#2-5-Links-to-Controllers" class="headerlink" title="2.5 Links to Controllers"></a>2.5 Links to Controllers</h2><p>Spring MVC provides a mechanism to prepare links to controller methods. For example, the following MVC controller allows for link creation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hotels/&#123;hotel&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/bookings/&#123;booking&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">getBooking</span><span class="params">(@PathVariable Long booking)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can prepare a link by referring to the method by name, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UriComponents uriComponents = MvcUriComponentsBuilder</span><br><span class="line">    .fromMethodName(BookingController.class, "getBooking", 21).buildAndExpand(42);</span><br><span class="line"></span><br><span class="line">URI uri = uriComponents.encode().toUri();</span><br></pre></td></tr></table></figure>

<p>在前面的示例中，我们提供了实际的方法参数值(在本例中是long值:21)作为路径变量插入到URL中。此外，我们提供了值42，以填充任何剩余的URI变量，例如继承自类型级请求映射的hotel变量。如果方法有更多的参数，我们可以为URL不需要的参数提供null。通常，只有@PathVariable和@RequestParam参数与构造URL相关。</p>
<p>There are additional ways to use <code>MvcUriComponentsBuilder</code>. For example, you can use a technique akin to mock testing through proxies to avoid referring to the controller method by name, as the following example shows (the example assumes static import of <code>MvcUriComponentsBuilder.on</code>):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UriComponents uriComponents = MvcUriComponentsBuilder</span><br><span class="line">    .fromMethodCall(on(BookingController<span class="class">.<span class="keyword">class</span>).<span class="title">getBooking</span>(21)).<span class="title">buildAndExpand</span>(42)</span>;</span><br><span class="line"></span><br><span class="line">URI uri = uriComponents.encode().toUri();</span><br></pre></td></tr></table></figure>

<h2 id="2-6-Links-in-Views"><a href="#2-6-Links-in-Views" class="headerlink" title="2.6 Links in Views"></a>2.6 Links in Views</h2><p>In views such as Thymeleaf, FreeMarker, or JSP, you can build links to annotated controllers by referring to the implicitly or explicitly assigned name for each request mapping.</p>
<p>Consider the following example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/people/&#123;id&#125;/addresses"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonAddressController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;country&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpEntity <span class="title">getAddress</span><span class="params">(@PathVariable String country)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Given the preceding controller, you can prepare a link from a JSP, as follows:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">"http://www.springframework.org/tags"</span> prefix=<span class="string">"s"</span> %&gt;</span><br><span class="line">...</span><br><span class="line">&lt;a href=<span class="string">"$&#123;s:mvcUrl('PAC#getAddress').arg(0,'US').buildAndExpand('123')&#125;"</span>&gt;</span><br><span class="line">    Get Address&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>The preceding example relies on the <code>mvcUrl</code> function declared in the Spring tag library (that is, META-INF/spring.tld), but it is easy to define your own function or prepare a similar one for other templating technologies.</p>
<p>Here is how this works. On startup, every <code>@RequestMapping</code> is assigned a default name through <code>HandlerMethodMappingNamingStrategy</code>, whose default implementation uses the capital letters of the class and the method name (for example, the <code>getThing</code> method in <code>ThingController</code> becomes “TC#getThing”). If there is a name clash, you can use<code>@RequestMapping(name=&quot;..&quot;)</code> to assign an explicit name or implement your own <code>HandlerMethodMappingNamingStrategy</code>.</p>
<h1 id="3-异步请求"><a href="#3-异步请求" class="headerlink" title="3 异步请求"></a>3 异步请求</h1><p>Spring MVC has an extensive integration with Servlet 3.0 asynchronous request <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmMtcHJvY2Vzc2luZw==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-processing">processing<i class="fa fa-external-link"></i></span>:</p>
<ul>
<li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-deferredresult" target="_blank" rel="noopener"><code>DeferredResult</code></a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-callable" target="_blank" rel="noopener"><code>Callable</code></a> return values in controller methods and provide basic support for a single asynchronous return value.</li>
<li>Controllers can <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmMtaHR0cC1zdHJlYW1pbmc=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-http-streaming">stream<i class="fa fa-external-link"></i></span> multiple values, including <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmMtc3Nl" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-sse">SSE<i class="fa fa-external-link"></i></span> and <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmMtb3V0cHV0LXN0cmVhbQ==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-output-stream">raw data<i class="fa fa-external-link"></i></span>.</li>
<li>Controllers can use reactive clients and return <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmMtcmVhY3RpdmUtdHlwZXM=" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-reactive-types">reactive types<i class="fa fa-external-link"></i></span> for response handling.</li>
</ul>
<h2 id="3-1-Using-DeferredResult"><a href="#3-1-Using-DeferredResult" class="headerlink" title="3.1 Using DeferredResult"></a>3.1 Using <code>DeferredResult</code></h2><p>Once the asynchronous request processing feature is <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmMtY29uZmlndXJhdGlvbg==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-configuration">enabled<i class="fa fa-external-link"></i></span> in the Servlet container, controller methods can wrap any supported controller method return value with <code>DeferredResult</code>, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/quotes"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">quotes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DeferredResult&lt;String&gt; deferredResult = <span class="keyword">new</span> DeferredResult&lt;String&gt;();</span><br><span class="line">    <span class="comment">// Save the deferredResult somewhere..</span></span><br><span class="line">    <span class="keyword">return</span> deferredResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// From some other thread...</span></span><br><span class="line">deferredResult.setResult(data);</span><br></pre></td></tr></table></figure>

<p>The controller can produce the return value asynchronously, from a different thread — for example, in response to an external event (JMS message), a scheduled task, or other event.</p>
<h2 id="3-2-Using-Callable"><a href="#3-2-Using-Callable" class="headerlink" title="3.2 Using Callable"></a>3.2 Using <code>Callable</code></h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmMtdnMtd2ViZmx1eA==" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-vs-webflux">Compared to WebFlux<i class="fa fa-external-link"></i></span></p>
<p>A controller can wrap any supported return value with <code>java.util.concurrent.Callable</code>, as the following example shows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title">processUpload</span><span class="params">(<span class="keyword">final</span> MultipartFile file)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"someView"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The return value can then be obtained by running the the given task through the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmMtY29uZmlndXJhdGlvbi1zcHJpbmctbXZj" title="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-async-configuration-spring-mvc">configured<i class="fa fa-external-link"></i></span> <code>TaskExecutor</code>.</p>
<h2 id="3-3-异步处理细节"><a href="#3-3-异步处理细节" class="headerlink" title="3.3 异步处理细节"></a>3.3 异步处理细节</h2><p>Here is a very concise overview of Servlet asynchronous request processing:</p>
<ul>
<li>A <code>ServletRequest</code> can be put in asynchronous mode by calling <code>request.startAsync()</code>. The main effect of doing so is that the Servlet, as well as any Filters, can exit but the response will remain open to allow processing to complete later.</li>
<li>The call to <code>request.startAsync()</code> returns <code>AsyncContext</code> which can be used for further control over async processing. For example it provides the method <code>dispatch</code>, that is similar to a forward from the Servlet API except it allows an application to resume request processing on a Servlet container thread.</li>
<li>The <code>ServletRequest</code> provides access to the current <code>DispatcherType</code> that can be used to distinguish between processing the initial request, an async dispatch, a forward, and other dispatcher types.</li>
</ul>
<p><code>DeferredResult</code> processing:</p>
<ul>
<li>Controller returns a <code>DeferredResult</code> and saves it in some in-memory queue or list where it can be accessed.</li>
<li>Spring MVC calls <code>request.startAsync()</code>.</li>
<li>Meanwhile the <code>DispatcherServlet</code> and all configured Filter’s exit the request processing thread but the response remains open.</li>
<li>The application sets the <code>DeferredResult</code> from some thread and Spring MVC dispatches the request back to the Servlet container.</li>
<li>The <code>DispatcherServlet</code> is invoked again and processing resumes with the asynchronously produced return value.</li>
</ul>
<p><code>Callable</code> processing:</p>
<ul>
<li>Controller returns a <code>Callable</code>.</li>
<li>Spring MVC calls <code>request.startAsync()</code> and submits the <code>Callable</code> to a <code>TaskExecutor</code> for processing in a separate thread.</li>
<li>Meanwhile the <code>DispatcherServlet</code> and all Filter’s exit the Servlet container thread but the response remains open.</li>
<li>Eventually the <code>Callable</code> produces a result and Spring MVC dispatches the request back to the Servlet container to complete processing.</li>
<li>The <code>DispatcherServlet</code> is invoked again and processing resumes with the asynchronously produced return value from the <code>Callable</code>.</li>
</ul>
<p><strong>上述介绍异步处理流程</strong></p>
<ul>
<li>Compared to WebFlux</li>
</ul>
<p>The Servlet API was originally built for making a single pass through the Filter-Servlet chain. Asynchronous request processing, added in Servlet 3.0, allows applications to exit the Filter-Servlet chain but leave the response open for further processing. The Spring MVC async support is built around that mechanism. When a controller returns a <code>DeferredResult</code>, the Filter-Servlet chain is exited and the Servlet container thread is released. Later when the <code>DeferredResult</code> is set, an ASYNC dispatch (to the same URL) is made during which the controller is mapped again but rather than invoking it, the <code>DeferredResult</code> value is used (as if the controller returned it) to resume processing.</p>
<p>相比之下，Spring WebFlux既不是基于Servlet API构建的，也不需要这样的异步请求处理特性，因为它的设计是异步的。异步处理构建在所有框架契约中，并通过请求处理的::阶段得到本质上的支持。</p>
<p>From a programming model perspective, both Spring MVC and Spring WebFlux support asynchronous and <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmMtcmVhY3RpdmUtdHlwZXM=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#mvc-ann-async-reactive-types">Reactive types<i class="fa fa-external-link"></i></span> as return values in controller methods. <strong>Spring MVC even supports streaming</strong>, including reactive back pressure. However individual writes to the response remain blocking (and performed on a separate thread) unlike WebFlux that relies on non-blocking I/O and does not need an extra thread for each write.</p>
<ul>
<li>异步不支持响应式类型绑定</li>
</ul>
<p>Another fundamental difference is that Spring MVC <strong>does not support asynchronous or reactive types in controller method arguments, e.g. <code>@RequestBody</code>, <code>@RequestPart</code>, and others,</strong> nor does it have any explicit support for asynchronous and reactive types as model attributes. Spring WebFlux does support all that.</p>
<h2 id="3-4-HTTP-Streaming"><a href="#3-4-HTTP-Streaming" class="headerlink" title="3.4 HTTP Streaming"></a>3.4 HTTP Streaming</h2><p><code>DeferredResult</code> and <code>Callable</code> can be used for a single asynchronous return value. What if you want to produce multiple asynchronous values and have those written to the response?</p>
<h3 id="3-4-1-Objects"><a href="#3-4-1-Objects" class="headerlink" title="3.4.1 Objects"></a>3.4.1 Objects</h3><p>The <code>ResponseBodyEmitter</code> return value can be used to produce a stream of Objects, where each Object sent is serialized with an<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2ludGVncmF0aW9uLmh0bWwjcmVzdC1tZXNzYWdlLWNvbnZlcnNpb24=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/integration.html#rest-message-conversion">HttpMessageConverter<i class="fa fa-external-link"></i></span> and written to the response. For example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/events"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseBodyEmitter <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ResponseBodyEmitter emitter = <span class="keyword">new</span> ResponseBodyEmitter();</span><br><span class="line">    <span class="comment">// Save the emitter somewhere..</span></span><br><span class="line">    <span class="keyword">return</span> emitter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In some other thread</span></span><br><span class="line">emitter.send(<span class="string">"Hello once"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and again later on</span></span><br><span class="line">emitter.send(<span class="string">"Hello again"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and done at some point</span></span><br><span class="line">emitter.complete();</span><br></pre></td></tr></table></figure>

<p><code>ResponseBodyEmitter</code> can also be used as the body in a <code>ResponseEntity</code> allowing you to customize the status and headers of the response.</p>
<p>当发射器抛出IOException(例如，如果远程客户端离开)时，应用程序不负责清理连接，不应该调用emitter.complete或emitter. completewitherror。相反，servlet容器会自动启动一个AsyncListener错误通知，在这个通知中，Spring MVC进行了一个完整的witherror调用，然后向应用程序执行一个最终的异步分派，在此期间Spring MVC调用配置的异常解析器并完成请求。</p>
<h3 id="3-4-2-SSE-SseEmitter"><a href="#3-4-2-SSE-SseEmitter" class="headerlink" title="3.4.2  SSE-SseEmitter"></a>3.4.2  SSE-<code>SseEmitter</code></h3><p><code>SseEmitter</code> is a sub-class of <code>ResponseBodyEmitter</code> that provides support for <span class="exturl" data-url="aHR0cHM6Ly93d3cudzMub3JnL1RSL2V2ZW50c291cmNlLw==" title="https://www.w3.org/TR/eventsource/">Server-Sent Events<i class="fa fa-external-link"></i></span> where events sent from the server are formatted according to the W3C SSE specification. In order to <strong>produce an SSE stream</strong> from a controller simply return <code>SseEmitter</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(path=<span class="string">"/events"</span>, produces=MediaType.TEXT_EVENT_STREAM_VALUE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SseEmitter <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SseEmitter emitter = <span class="keyword">new</span> SseEmitter();</span><br><span class="line">    <span class="comment">// Save the emitter somewhere..</span></span><br><span class="line">    <span class="keyword">return</span> emitter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In some other thread</span></span><br><span class="line">emitter.send(<span class="string">"Hello once"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and again later on</span></span><br><span class="line">emitter.send(<span class="string">"Hello again"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// and done at some point</span></span><br><span class="line">emitter.complete();</span><br></pre></td></tr></table></figure>

<p>While SSE is the main option for streaming into browsers, note that Internet Explorer does not support Server-Sent Events. Consider using Spring’s <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI3dlYnNvY2tldA==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#websocket">WebSocket messaging<i class="fa fa-external-link"></i></span> with <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI3dlYnNvY2tldC1mYWxsYmFjaw==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#websocket-fallback">SockJS fallback<i class="fa fa-external-link"></i></span> transports (including SSE) that target a wide range of browsers.</p>
<h3 id="3-4-3-Raw-data"><a href="#3-4-3-Raw-data" class="headerlink" title="3.4.3 Raw data"></a>3.4.3 Raw data</h3><p>Sometimes it is useful to bypass message conversion and stream directly to the response <code>OutputStream</code> for example for a file download. Use the of the <code>StreamingResponseBody</code> return value type to do that:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/download"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> StreamingResponseBody <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StreamingResponseBody() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(OutputStream outputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="comment">// write...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>StreamingResponseBody</code> can be used as the body in a <code>ResponseEntity</code> allowing you to customize the status and headers of the response.</p>
<h2 id="3-5-Reactive-Types"><a href="#3-5-Reactive-Types" class="headerlink" title="3.5 *Reactive Types"></a>3.5 *Reactive Types</h2><p>Spring MVC <strong>supports use of reactive client libraries in a controller</strong>. This includes the <code>WebClient</code> from <code>spring-webflux</code> and others such as Spring Data reactive data repositories. In such scenarios it is convenient to be able to <strong>return reactive types from the controller method .</strong></p>
<p>Reactive return values are handled as follows:</p>
<ul>
<li>A single-value promise is adapted to, and similar to using <code>DeferredResult</code>. Examples include <code>Mono</code> (Reactor) or <code>Single</code>(RxJava).</li>
<li>A multi-value stream, with a streaming media type such as <code>&quot;application/stream+json&quot;</code> or <code>&quot;text/event-stream&quot;</code>, is adapted to, and similar to using <code>ResponseBodyEmitter</code> or <code>SseEmitter</code>. Examples include <code>Flux</code> (Reactor) or <code>Observable</code> (RxJava). Applications can also return <code>Flux&lt;ServerSentEvent&gt;</code> or <code>Observable&lt;ServerSentEvent&gt;</code>.</li>
<li>A multi-value stream, with any other media type (e.g. “application/json”), is adapted to, and similar to using <code>DeferredResult&lt;List&lt;?&gt;&gt;</code>.</li>
<li>Spring MVC supports Reactor and RxJava through the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZnJhbWV3b3JrL2RvY3MvNS4wLjguUkVMRUFTRS9qYXZhZG9jLWFwaS9vcmcvc3ByaW5nZnJhbWV3b3JrL2NvcmUvUmVhY3RpdmVBZGFwdGVyUmVnaXN0cnkuaHRtbA==" title="https://docs.spring.io/spring-framework/docs/5.0.8.RELEASE/javadoc-api/org/springframework/core/ReactiveAdapterRegistry.html">ReactiveAdapterRegistry<i class="fa fa-external-link"></i></span> from <code>spring-core</code> which allows it to adapt from multiple reactive libraries.</li>
</ul>
<p>For streaming to the response, reactive back pressure is supported, but writes to the response are still blocking, and are executed on a separate thread through the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmMtY29uZmlndXJhdGlvbi1zcHJpbmctbXZj" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#mvc-ann-async-configuration-spring-mvc">configured<i class="fa fa-external-link"></i></span> <code>TaskExecutor</code> in order to avoid blocking the upstream source (e.g. a <code>Flux</code> returned from the <code>WebClient</code>). By default <code>SimpleAsyncTaskExecutor</code> is used for the blocking writes but that is not suitable under load. If you plan to stream with a reactive type, please use the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmMtY29uZmlndXJhdGlvbi1zcHJpbmctbXZj" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#mvc-ann-async-configuration-spring-mvc">MVC config<i class="fa fa-external-link"></i></span> to configure a task executor.</p>
<h2 id="3-6-配置"><a href="#3-6-配置" class="headerlink" title="3.6 配置"></a>3.6 配置</h2><h3 id="3-6-1-Servlet-container"><a href="#3-6-1-Servlet-container" class="headerlink" title="3.6.1 Servlet container"></a>3.6.1 Servlet container</h3><p>Filter and Servlet declarations have an <code>asyncSupported</code> that needs to be set to true in order enable asynchronous request processing. In addition, Filter mappings should be declared to handle the ASYNC <code>javax.servlet.DispatchType</code>.</p>
<p><strong>In Java configuration</strong>, when you use <code>AbstractAnnotationConfigDispatcherServletInitializer</code> to initialize the Servlet container, this is done automatically.</p>
<p><strong>In <code>web.xml</code></strong> configuration, add <code>&lt;async-supported&gt;true&lt;/async-supported&gt;</code> to the <code>DispatcherServlet</code> and to <code>Filter</code>declarations, and also add <code>&lt;dispatcher&gt;ASYNC&lt;/dispatcher&gt;</code> to filter mappings.</p>
<h3 id="3-6-2-Spring-MVC"><a href="#3-6-2-Spring-MVC" class="headerlink" title="3.6.2 Spring MVC"></a>3.6.2 Spring MVC</h3><p>The MVC config exposes options related to async request processing:</p>
<ul>
<li>Java config — use the <code>configureAsyncSupport</code> callback on <code>WebMvcConfigurer</code>.</li>
<li>XML namespace — use the <code>&lt;async-support&gt;</code> element under <code>&lt;mvc:annotation-driven&gt;</code>.</li>
</ul>
<p>You can configure the following:</p>
<ul>
<li>Default timeout value for async requests, which if not set, depends on the underlying Servlet container (e.g. 10 seconds on Tomcat).</li>
<li><code>AsyncTaskExecutor</code> to use for blocking writes when streaming with <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1hbm4tYXN5bmMtcmVhY3RpdmUtdHlwZXM=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#mvc-ann-async-reactive-types">Reactive types<i class="fa fa-external-link"></i></span>, and also for executing <code>Callable</code>‘s returned from controller methods. It is highly recommended to configure this property if you’re streaming with reactive types or have controller methods that return <code>Callable</code> since by default it is a <code>SimpleAsyncTaskExecutor</code>.</li>
<li><code>DeferredResultProcessingInterceptor</code>‘s and <code>CallableProcessingInterceptor</code>‘s.</li>
</ul>
<p>Note that the default timeout value can also be set on a <code>DeferredResult</code>, <code>ResponseBodyEmitter</code> and <code>SseEmitter</code>. For a <code>Callable</code>, use <code>WebAsyncTask</code> to provide a timeout value.</p>
<h1 id="4-CORS"><a href="#4-CORS" class="headerlink" title="4 CORS"></a>4 CORS</h1><blockquote>
<p>CORS:    Cross-Origin Resource Sharing 跨资源共享</p>
</blockquote>
<p>出于安全原因，浏览器禁止AJAX调用当前源之外的资源。例如，你可以把你的银行账户放在一个标签上，把evil.com放在另一个标签上。来自evil.com的脚本不应该使用您的凭证向您的银行API发出AJAX请求，例如从您的帐户中提取资金!</p>
<p>跨源资源共享(cross - origin Resource Sharing, CORS)是由大多数浏览器实现的W3C规范，它允许您指定哪种跨域请求被授权，而不是使用基于IFRAME或JSONP的不安全且不强大的解决方案。</p>
<h2 id="4-1-细节"><a href="#4-1-细节" class="headerlink" title="4.1 细节"></a>4.1 细节</h2><p>Spring MVC HandlerMapping提供了内置的CORS支持。在成功地将请求映射到处理程序之后，HandlerMapping会检查给定请求和处理程序的CORS配置，并采取进一步的操作。当简单的和实际的CORS请求被拦截、验证并需要CORS响应标头集时，预先请求被直接处理。</p>
<p>为了启用跨源请求(即出现了源报头，并且与请求的主机不同)，您需要显式声明一些CORS配置。如果没有找到匹配的CORS配置，则拒绝飞行前请求。简单的CORS请求和实际的CORS请求的响应没有添加CORS头，因此浏览器拒绝它们。</p>
<p>每个HandlerMapping都可以使用基于URL模式的CorsConfiguration映射单独配置。在大多数情况下，应用程序将使用MVC Java config或XML名称空间来声明这种映射，这将导致一个全局映射传递给所有HadlerMappping的映射。</p>
<p>在HandlerMapping级别上的全局CORS配置可以与更细粒度的handler级别的CORS配置相结合。例如，带注释的控制器可以使用类或方法级别的@CrossOrigin注释(其他处理程序可以实现CorsConfigurationSource)。</p>
<p>组合全局配置和局部配置的规则通常是附加的。所有的全球和地方起源。对于那些只能接受单个值的属性，如allowCredentials和maxAge，本地代码会重写全局值。</p>
<h2 id="4-2-CrossOrigin"><a href="#4-2-CrossOrigin" class="headerlink" title="4.2 @CrossOrigin"></a>4.2 @CrossOrigin</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#btn"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;<span class="comment">//80端口服务器访问81端口服务，会出现跨域问题</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">'http://localhost:8081/cors/validate'</span>,</span><br><span class="line">        method: <span class="string">'post'</span>,</span><br><span class="line">        datatype: <span class="string">'json'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            alert(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 将需要跨域的服务加上@CrossOrigin可解决</span></span><br><span class="line">@RequestMapping(<span class="string">"/validate"</span>)</span><br><span class="line">@ResponseBody</span><br><span class="line">@CrossOrigin</span><br><span class="line">public <span class="built_in">String</span> validate()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"OK!!!!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <a href="https://docs.spring.io/spring-framework/docs/5.0.8.RELEASE/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html" target="_blank" rel="noopener"><code>@CrossOrigin</code></a> annotation enables cross-origin requests on annotated controller methods:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>By default <code>@CrossOrigin</code> allows:</p>
<ul>
<li>All origins.</li>
<li>All headers.</li>
<li>All HTTP methods to which the controller method is mapped.</li>
<li><code>allowedCredentials</code> is not enabled by default since that establishes a trust level that exposes sensitive user-specific information such as cookies and CSRF tokens, and should only be used where appropriate.</li>
<li><code>maxAge</code> is set to 30 minutes.</li>
</ul>
<p><code>@CrossOrigin</code> is supported at the class level too and inherited by all methods:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://domain2.com"</span>, maxAge = <span class="number">3600</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>CrossOrigin</code> can be used at both class and method-level:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span>(maxAge = <span class="number">3600</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span>(<span class="string">"http://domain2.com"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-全局配置"><a href="#4-3-全局配置" class="headerlink" title="4.3 全局配置"></a>4.3 全局配置</h2><h3 id="4-3-1-JavaConfig"><a href="#4-3-1-JavaConfig" class="headerlink" title="4.3.1 JavaConfig"></a>4.3.1 JavaConfig</h3><p>To enable CORS in the MVC Java config, use the <code>CorsRegistry</code> callback:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        registry.addMapping(<span class="string">"/api/**"</span>)</span><br><span class="line">            .allowedOrigins(<span class="string">"http://domain2.com"</span>)</span><br><span class="line">            .allowedMethods(<span class="string">"PUT"</span>, <span class="string">"DELETE"</span>)</span><br><span class="line">            .allowedHeaders(<span class="string">"header1"</span>, <span class="string">"header2"</span>, <span class="string">"header3"</span>)</span><br><span class="line">            .exposedHeaders(<span class="string">"header1"</span>, <span class="string">"header2"</span>)</span><br><span class="line">            .allowCredentials(<span class="keyword">true</span>).maxAge(<span class="number">3600</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add more mappings...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-2-XmlConfig"><a href="#4-3-2-XmlConfig" class="headerlink" title="4.3.2 XmlConfig"></a>4.3.2 XmlConfig</h3><p>To enable CORS in the XML namespace, use the <code>&lt;mvc:cors&gt;</code> element:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/api/**"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowed-origins</span>=<span class="string">"http://domain1.com, http://domain2.com"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowed-methods</span>=<span class="string">"GET, PUT"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowed-headers</span>=<span class="string">"header1, header2, header3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">exposed-headers</span>=<span class="string">"header1, header2"</span> <span class="attr">allow-credentials</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">max-age</span>=<span class="string">"123"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/resources/**"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowed-origins</span>=<span class="string">"http://domain1.com"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-4-CORS-Filter"><a href="#4-4-CORS-Filter" class="headerlink" title="4.4 CORS Filter"></a>4.4 CORS Filter</h2><p>To configure the filter pass a <strong><code>CorsConfigurationSource</code></strong> to its constructor:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Possibly...</span></span><br><span class="line"><span class="comment">// config.applyPermitDefaultValues()</span></span><br><span class="line"></span><br><span class="line">config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">config.addAllowedOrigin(<span class="string">"http://domain1.com"</span>);</span><br><span class="line">config.addAllowedHeader(<span class="string">""</span>);</span><br><span class="line">config.addAllowedMethod(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">source.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line"></span><br><span class="line">CorsFilter filter = <span class="keyword">new</span> CorsFilter(source);</span><br></pre></td></tr></table></figure>

<h1 id="5-Web-Security"><a href="#5-Web-Security" class="headerlink" title="5 Web Security"></a>5 Web Security</h1><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtd2ViLXNlY3VyaXR5" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-web-security">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>The <span class="exturl" data-url="aHR0cHM6Ly9wcm9qZWN0cy5zcHJpbmcuaW8vc3ByaW5nLXNlY3VyaXR5Lw==" title="https://projects.spring.io/spring-security/">Spring Security<i class="fa fa-external-link"></i></span> project provides support for protecting web applications from malicious exploits. Check out the Spring Security reference documentation including:</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctc2VjdXJpdHkvc2l0ZS9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWw1LyNtdmM=" title="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#mvc">Spring MVC Security<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctc2VjdXJpdHkvc2l0ZS9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWw1LyN0ZXN0LW1vY2ttdmM=" title="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#test-mockmvc">Spring MVC Test Support<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctc2VjdXJpdHkvc2l0ZS9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWw1LyNjc3Jm" title="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#csrf">CSRF protection<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctc2VjdXJpdHkvc2l0ZS9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWw1LyNoZWFkZXJz" title="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#headers">Security Response Headers<i class="fa fa-external-link"></i></span></li>
</ul>
<p><span class="exturl" data-url="aHR0cDovL2hkaXYub3JnLw==" title="http://hdiv.org/">HDIV<i class="fa fa-external-link"></i></span> is another web security framework that integrates with Spring MVC.</p>
<h1 id="6-HTTP-Caching"><a href="#6-HTTP-Caching" class="headerlink" title="6 HTTP Caching"></a>6 HTTP Caching</h1><p>HTTP caching can significantly improve the performance of a web application.</p>
<h2 id="6-1-CacheControl"><a href="#6-1-CacheControl" class="headerlink" title="6.1 CacheControl"></a>6.1 <code>CacheControl</code></h2><p><a href="https://docs.spring.io/spring-framework/docs/5.0.8.RELEASE/javadoc-api/org/springframework/http/CacheControl.html" target="_blank" rel="noopener"><code>CacheControl</code></a> provides support for configuring settings related to the <strong>“Cache-Control” header</strong> and is accepted as an argument in a number of places:</p>
<ul>
<li><a href="https://docs.spring.io/spring-framework/docs/5.0.8.RELEASE/javadoc-api/org/springframework/web/servlet/mvc/WebContentInterceptor.html" target="_blank" rel="noopener"><code>WebContentInterceptor</code></a></li>
<li><a href="https://docs.spring.io/spring-framework/docs/5.0.8.RELEASE/javadoc-api/org/springframework/web/servlet/support/WebContentGenerator.html" target="_blank" rel="noopener"><code>WebContentGenerator</code></a></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jYWNoaW5nLWV0YWctbGFzdG1vZGlmaWVk" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#mvc-caching-etag-lastmodified">Controllers<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jYWNoaW5nLXN0YXRpYy1yZXNvdXJjZXM=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#mvc-caching-static-resources">Static resources<i class="fa fa-external-link"></i></span></li>
</ul>
<p>While <span class="exturl" data-url="aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzQjc2VjdGlvbi01LjIuMg==" title="https://tools.ietf.org/html/rfc7234#section-5.2.2">RFC 7234<i class="fa fa-external-link"></i></span> describes all possible directives for the “Cache-Control” response header, the <code>CacheControl</code> type takes a use case oriented approach focusing on the common scenarios:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Cache for an hour - "Cache-Control: max-age=3600"</span></span><br><span class="line">CacheControl ccCacheOneHour = CacheControl.maxAge(<span class="number">1</span>, TimeUnit.HOURS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prevent caching - "Cache-Control: no-store"</span></span><br><span class="line">CacheControl ccNoStore = CacheControl.noStore();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cache for ten days in public and private caches,</span></span><br><span class="line"><span class="comment">// public caches should not transform the response</span></span><br><span class="line"><span class="comment">// "Cache-Control: max-age=864000, public, no-transform"</span></span><br><span class="line">CacheControl ccCustom = CacheControl.maxAge(<span class="number">10</span>, TimeUnit.DAYS).noTransform().cachePublic();</span><br></pre></td></tr></table></figure>

<p><code>WebContentGenerator</code> also accept a simpler <code>cachePeriod</code> property, in seconds, that works as follows:</p>
<ul>
<li>A <code>-1</code> value won’t generate a “Cache-Control” response header.</li>
<li>A <code>0</code> value will prevent caching using the <code>&#39;Cache-Control: no-store&#39;</code> directive.</li>
<li>An <code>n &gt; 0</code> value will cache the given response for <code>n</code> seconds using the <code>&#39;Cache-Control: max-age=n&#39;</code> directive.</li>
</ul>
<h2 id="6-2-Controllers"><a href="#6-2-Controllers" class="headerlink" title="6.2 Controllers"></a>6.2 Controllers</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtY2FjaGluZy1ldGFnLWxhc3Rtb2RpZmllZA==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-caching-etag-lastmodified">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>控制器可以添加对HTTP缓存的显式支持。这是建议的，因为资源的lastModified或ETag值需要在与条件请求标头进行比较之前进行计算。</p>
<p>A controller can add an ETag and “Cache-Control” settings to a <code>ResponseEntity</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/book/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Book&gt; <span class="title">showBook</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Book book = findBook(id);</span><br><span class="line">    String version = book.getVersion();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity</span><br><span class="line">            .ok()</span><br><span class="line">            .cacheControl(CacheControl.maxAge(<span class="number">30</span>, TimeUnit.DAYS))</span><br><span class="line">            .eTag(version) <span class="comment">// lastModified is also available</span></span><br><span class="line">            .body(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This will send an 304 (NOT_MODIFIED) response with an empty body, if the comparison to the conditional request headers indicates the content has not changed. Otherwise the “ETag” and “Cache-Control” headers will be added to the response.</p>
<p>The check against conditional request headers can also be made in the controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">myHandleMethod</span><span class="params">(WebRequest webRequest, Model model)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> eTag = ... </span><br><span class="line">	<span class="comment">// 1 Application-specific calculation.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (request.checkNotModified(eTag)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">        <span class="comment">//2 Response has been set to 304 (NOT_MODIFIED), no further processing.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    model.addAttribute(...); </span><br><span class="line">	<span class="comment">// 3 Continue with request processing.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"myViewName"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>There are 3 variants for checking conditional requests against eTag values, lastModified values, or both. For conditional “GET” and “HEAD” requests, the response may be set to 304 (NOT_MODIFIED). For conditional “POST”, “PUT”, and “DELETE”, the response would be set to 409 (PRECONDITION_FAILED) instead to prevent concurrent modification.</p>
<h2 id="6-3-Static-resources"><a href="#6-3-Static-resources" class="headerlink" title="6.3 Static resources"></a>6.3 Static resources</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtY2FjaGluZy1zdGF0aWMtcmVzb3VyY2Vz" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-caching-static-resources">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>Static resources should be served with a “Cache-Control” and conditional response headers for optimal performance. See section on configuring <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctc3RhdGljLXJlc291cmNlcw==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#mvc-config-static-resources">Static Resources<i class="fa fa-external-link"></i></span>.</p>
<h2 id="6-4-ETag-Filter"><a href="#6-4-ETag-Filter" class="headerlink" title="6.4 ETag Filter"></a>6.4 ETag Filter</h2><p>The <code>ShallowEtagHeaderFilter</code> can be used to add “shallow” eTag values, computed from the response content and thus saving bandwith but not CPU time. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI2ZpbHRlcnMtc2hhbGxvdy1ldGFn" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#filters-shallow-etag">Shallow ETag<i class="fa fa-external-link"></i></span>.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>8-webmvc-4</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/8-webmvc-4/</url>
    <content><![CDATA[<h1 id="1-View-Technologies"><a href="#1-View-Technologies" class="headerlink" title="1 View Technologies"></a>1 View Technologies</h1><p>The use of view technologies in Spring MVC is pluggable, whether you decide to use Thymeleaf, Groovy Markup Templates, JSPs, or other, is primarily a matter of a configuration change. </p>
<h2 id="1-1-Thymeleaf"><a href="#1-1-Thymeleaf" class="headerlink" title="1.1 Thymeleaf"></a>1.1 Thymeleaf</h2><p>Thymeleaf是现代的服务器端Java模板引擎，它强调自然的HTML模板，可以在浏览器中通过双击预览，这对独立完成UI模板的工作非常有帮助，例如由设计师，而不需要运行的服务器。如果您想替换jsp, Thymeleaf提供了最广泛的一组特性之一，这将使转换更容易。Thymeleaf被积极开发和维护。</p>
<p>The Thymeleaf integration with Spring MVC is managed by the Thymeleaf project. The configuration involves a few bean declarations such as <code>ServletContextTemplateResolver</code>, <code>SpringTemplateEngine</code>, and <code>ThymeleafViewResolver</code>. See <span class="exturl" data-url="aHR0cDovL3d3dy50aHltZWxlYWYub3JnL2RvY3VtZW50YXRpb24uaHRtbA==" title="http://www.thymeleaf.org/documentation.html">Thymeleaf+Spring<i class="fa fa-external-link"></i></span> for more details.</p>
<a id="more"></a>

<h2 id="1-2-FreeMarker"><a href="#1-2-FreeMarker" class="headerlink" title="1.2 FreeMarker"></a>1.2 FreeMarker</h2><h3 id="1-2-1-View-config"><a href="#1-2-1-View-config" class="headerlink" title="1.2.1 View config"></a>1.2.1 View config</h3><p>To configure FreeMarker as a view technology:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.freemarker();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configure FreeMarker...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FreeMarkerConfigurer <span class="title">freeMarkerConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FreeMarkerConfigurer configurer = <span class="keyword">new</span> FreeMarkerConfigurer();</span><br><span class="line">        configurer.setTemplateLoaderPath(<span class="string">"/WEB-INF/freemarker"</span>);</span><br><span class="line">        <span class="keyword">return</span> configurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To configure the same in XML:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-resolvers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:freemarker</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:view-resolvers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Configure FreeMarker... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:freemarker-configurer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:template-loader-path</span> <span class="attr">location</span>=<span class="string">"/WEB-INF/freemarker"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:freemarker-configurer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Or you can also declare the <code>FreeMarkerConfigurer</code> bean for full control over all properties:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"freemarkerConfig"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateLoaderPath"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/freemarker/"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Your templates need to be stored in the directory specified by the <code>FreeMarkerConfigurer</code> shown above. Given the above configuration if your controller returns the view name “welcome” then the resolver will look for the <code>/WEB-INF/freemarker/welcome.ftl</code> template.</p>
<h3 id="1-2-2-FreeMarker-config"><a href="#1-2-2-FreeMarker-config" class="headerlink" title="1.2.2 FreeMarker config"></a>1.2.2 FreeMarker config</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtdmlld3MtZnJlZW1hcmtlcg==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-views-freemarker">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>FreeMarker ‘Settings’ and ‘SharedVariables’ can be passed directly to the FreeMarker <code>Configuration</code> object managed by Spring by setting the appropriate bean properties on the <code>FreeMarkerConfigurer</code> bean. The <code>freemarkerSettings</code> property requires a<code>java.util.Properties</code> object and the <code>freemarkerVariables</code> property requires a <code>java.util.Map</code>.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"freemarkerConfig"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateLoaderPath"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/freemarker/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"freemarkerVariables"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"xml_escape"</span> <span class="attr">value-ref</span>=<span class="string">"fmXmlEscape"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"fmXmlEscape"</span> <span class="attr">class</span>=<span class="string">"freemarker.template.utility.XmlEscape"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>See the FreeMarker documentation for details of settings and variables as they apply to the <code>Configuration</code> object.</p>
<h3 id="1-2-3-Form-handling"><a href="#1-2-3-Form-handling" class="headerlink" title="1.2.3 Form handling"></a>1.2.3 Form handling</h3><p>Spring provides a tag library for use in JSP’s that contains, amongst others, a <code>&lt;spring:bind/&gt;</code> tag. This tag primarily enables forms to display values from form backing objects and to show the results of failed validations from a <code>Validator</code> in the web or business tier. Spring also has support for the same functionality in FreeMarker, with additional convenience macros for generating form input elements themselves.</p>
<ul>
<li><strong>The bind macros(宏命令)</strong></li>
</ul>
<p>A standard set of macros are maintained within the <code>spring-webmvc.jar</code> file for both languages, so they are always available to a suitably configured application.</p>
<p>Some of the macros defined in the Spring libraries are considered internal (private) but no such scoping exists in the macro definitions making all macros visible to calling code and user templates. The following sections concentrate only on the macros you need to be directly calling from within your templates. If you wish to view the macro code directly, the file is called <code>spring.ftl</code> in the package <code>org.springframework.web.servlet.view.freemarker</code>.</p>
<ul>
<li><strong>Simple binding</strong></li>
</ul>
<p>In your HTML forms (vm / ftl templates) which act as a form view for a Spring MVC controller, you can use code similar to the following to bind to field values and display error messages for each input field in similar fashion to the JSP equivalent. Example code is shown below for the <code>personForm</code> view configured earlier:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- freemarker macros have to be imported into a namespace. We strongly</span></span><br><span class="line"><span class="comment">recommend sticking to 'spring' --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#import</span> "/<span class="attr">spring.ftl</span>" <span class="attr">as</span> <span class="attr">spring</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">        Name:</span><br><span class="line">        <span class="tag">&lt;<span class="name">@spring.bind</span> "<span class="attr">myModelObject.name</span>"/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"$&#123;spring.status.expression&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">"$&#123;spring.status.value?html&#125;"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">#list</span> <span class="attr">spring.status.errorMessages</span> <span class="attr">as</span> <span class="attr">error</span>&gt;</span> <span class="tag">&lt;<span class="name">b</span>&gt;</span>$&#123;error&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="1-3-Groovy-Markup"><a href="#1-3-Groovy-Markup" class="headerlink" title="1.3  Groovy Markup"></a>1.3  Groovy Markup</h2><p><span class="exturl" data-url="aHR0cDovL2dyb292eS1sYW5nLm9yZy90ZW1wbGF0aW5nLmh0bWwjX3RoZV9tYXJrdXB0ZW1wbGF0ZWVuZ2luZQ==" title="http://groovy-lang.org/templating.html#_the_markuptemplateengine">Groovy Markup Template Engine<i class="fa fa-external-link"></i></span> is primarily aimed at generating XML-like markup (XML, XHTML, HTML5, etc) but that can be used to generate any text based content. The Spring Framework has a built-in integration for using Spring MVC with Groovy Markup.</p>
<ul>
<li><p>The Groovy Markup Tempalte engine requires Groovy 2.3.1+.</p>
</li>
<li><p><strong>Configuration</strong></p>
</li>
</ul>
<p>To configure the Groovy Markup Template Engine:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.groovy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configure the Groovy Markup Template Engine...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GroovyMarkupConfigurer <span class="title">groovyMarkupConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GroovyMarkupConfigurer configurer = <span class="keyword">new</span> GroovyMarkupConfigurer();</span><br><span class="line">        configurer.setResourceLoaderPath(<span class="string">"/WEB-INF/"</span>);</span><br><span class="line">        <span class="keyword">return</span> configurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To configure the same in XML:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-resolvers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:groovy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:view-resolvers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Configure the Groovy Markup Template Engine... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:groovy-configurer</span> <span class="attr">resource-loader-path</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Example</strong></li>
</ul>
<p>Unlike traditional template engines, Groovy Markup relies on a DSL that uses a builder syntax. Here is a sample template for an HTML page:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">yieldUnescaped <span class="string">'&lt;!DOCTYPE html&gt;'</span></span><br><span class="line">html(<span class="string">lang:</span><span class="string">'en'</span>) &#123;</span><br><span class="line">    head &#123;</span><br><span class="line">        meta(<span class="string">'http-equiv'</span>:<span class="string">'"Content-Type" content="text/html; charset=utf-8"'</span>)</span><br><span class="line">        title(<span class="string">'My page'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    body &#123;</span><br><span class="line">        p(<span class="string">'This is an example of HTML contents'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-Script-Views"><a href="#1-4-Script-Views" class="headerlink" title="1.4 Script Views"></a>1.4 Script Views</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtdmlldy1zY3JpcHQ=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-view-script">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<h2 id="1-5-JSP-amp-JSTL"><a href="#1-5-JSP-amp-JSTL" class="headerlink" title="1.5 JSP &amp; JSTL"></a>1.5 JSP &amp; JSTL</h2><p>The Spring Framework has a built-in integration for using Spring MVC with JSP and JSTL.</p>
<ul>
<li><strong>View resolvers</strong></li>
</ul>
<p>When developing with JSPs you can declare a <code>InternalResourceViewResolver</code> or a <code>ResourceBundleViewResolver</code> bean.</p>
<p><code>ResourceBundleViewResolver</code> relies on a properties file to define the view names mapped to a class and a URL. With a <code>ResourceBundleViewResolver</code> you can mix different types of views using only one resolver. Here is an example:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- the ResourceBundleViewResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ResourceBundleViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"views"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># And a sample properties file is uses (views.properties in WEB-INF/classes):</span><br><span class="line">welcome.(class)=org.springframework.web.servlet.view.JstlView</span><br><span class="line">welcome.url=/WEB-INF/jsp/welcome.jsp</span><br><span class="line"></span><br><span class="line">productList.(class)=org.springframework.web.servlet.view.JstlView</span><br><span class="line">productList.url=/WEB-INF/jsp/productlist.jsp</span><br></pre></td></tr></table></figure>

<p><code>InternalResourceBundleViewResolver</code> can also be used for JSPs. As a best practice, we strongly encourage placing your JSP files in a directory under the <code>&#39;WEB-INF&#39;</code> directory so there can be no direct access by clients.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-6-很多视图解析技术"><a href="#1-6-很多视图解析技术" class="headerlink" title="1.6 很多视图解析技术"></a>1.6 很多视图解析技术</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy12aWV3" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#mvc-view">地址: <i class="fa fa-external-link"></i></span></p>
<h1 id="2-MVC-Config"><a href="#2-MVC-Config" class="headerlink" title="2 MVC Config"></a>2 MVC Config</h1><h2 id="2-1-Enable-MVC-Config"><a href="#2-1-Enable-MVC-Config" class="headerlink" title="2.1 Enable MVC Config"></a>2.1 Enable MVC Config</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtY29uZmlnLWVuYWJsZQ==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-config-enable">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>In Java config use the <code>@EnableWebMvc</code> annotation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In XML use the <code>&lt;mvc:annotation-driven&gt;</code> element:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面注册了一些Spring MVC基础架构bean，这些bean也可以适应类路径上的依赖关系:例如JSON、XML等的有效负载转换器。</p>
<h2 id="2-2-MVC-Config-API"><a href="#2-2-MVC-Config-API" class="headerlink" title="2.2 MVC Config API"></a>2.2 MVC Config API</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtY29uZmlnLWN1c3RvbWl6ZQ==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-config-customize">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>In Java config implement <code>WebMvcConfigurer</code> interface:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Implement configuration methods...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In XML check attributes and sub-elements of <code>&lt;mvc:annotation-driven/&gt;</code>.</p>
<h2 id="2-3-Type-conversion"><a href="#2-3-Type-conversion" class="headerlink" title="2.3 Type conversion"></a>2.3 Type conversion</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtY29uZmlnLWNvbnZlcnNpb24=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-config-conversion">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>By default formatters for <code>Number</code> and <code>Date</code> types are installed, including support for the <code>@NumberFormat</code> and <code>@DateTimeFormat</code>annotations. Full support for the Joda-Time formatting library is also installed if Joda-Time is present on the classpath.</p>
<p>In Java config, register custom formatters and converters:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In XML, the same:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.example.MyConverter"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"formatters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.example.MyFormatter"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.example.MyAnnotationFormatterFactory"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"formatterRegistrars"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.example.MyFormatterRegistrar"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4-Validation"><a href="#2-4-Validation" class="headerlink" title="2.4 Validation"></a>2.4 Validation</h2><p>By default if <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCN2YWxpZGF0aW9uLWJlYW52YWxpZGF0aW9uLW92ZXJ2aWV3" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#validation-beanvalidation-overview">Bean Validation<i class="fa fa-external-link"></i></span> is present on the classpath — e.g. Hibernate Validator, the <code>LocalValidatorFactoryBean</code> is registered as a global <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCN2YWxpZGF0b3I=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#validator">Validator<i class="fa fa-external-link"></i></span> for use with <code>@Valid</code> and <code>Validated</code> on controller method arguments.</p>
<p>In Java config, you can customize the global <code>Validator</code> instance:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">getValidator</span><span class="params">()</span></span>; &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In XML, the same:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">"globalValidator"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Note that you can also register <code>Validator</code>‘s locally:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        binder.addValidators(<span class="keyword">new</span> FooValidator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-5-Interceptors"><a href="#2-5-Interceptors" class="headerlink" title="2.5  Interceptors"></a>2.5  Interceptors</h2><p>In Java config, register interceptors to apply to incoming requests:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LocaleChangeInterceptor());</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> ThemeChangeInterceptor()).addPathPatterns(<span class="string">"/**"</span>).excludePathPatterns(<span class="string">"/admin/**"</span>);</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> SecurityInterceptor()).addPathPatterns(<span class="string">"/secure/*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In XML, the same:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.i18n.LocaleChangeInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/admin/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.theme.ThemeChangeInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/secure/*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.example.SecurityInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-6-Content-Types"><a href="#2-6-Content-Types" class="headerlink" title="2.6 Content Types"></a>2.6 Content Types</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtY29uZmlnLWNvbnRlbnQtbmVnb3RpYXRpb24=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-config-content-negotiation">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>您可以配置Spring MVC如何从请求中确定所请求的媒体类型。接受标题、URL路径扩展、查询参数等。</p>
<p>默认情况下，首先检查URL路径扩展——根据类路径依赖关系，使用json、xml、rss和atom注册为已知扩展，然后检查“Accept”标头。</p>
<p>考虑将这些默认值更改为只接受标头，如果必须使用基于url的内容类型解析，则考虑路径扩展上的查询参数策略。</p>
<p>In Java config, customize requested content type resolution:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.mediaType(<span class="string">"json"</span>, MediaType.APPLICATION_JSON);</span><br><span class="line">        configurer.mediaType(<span class="string">"xml"</span>, MediaType.APPLICATION_XML);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In XML, the same:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">content-negotiation-manager</span>=<span class="string">"contentNegotiationManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"contentNegotiationManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.accept.ContentNegotiationManagerFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mediaTypes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            json=application/json</span><br><span class="line">            xml=application/xml</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-7-Message-Converters"><a href="#2-7-Message-Converters" class="headerlink" title="2.7 Message Converters"></a>2.7 Message Converters</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtY29uZmlnLW1lc3NhZ2UtY29kZWNz" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-config-message-codecs">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>Customization of <code>HttpMessageConverter</code> can be achieved in Java config by overriding <a href="https://docs.spring.io/spring-framework/docs/5.0.8.RELEASE/javadoc-api/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.html#configureMessageConverters-java.util.List-" target="_blank" rel="noopener"><code>configureMessageConverters()</code></a> if you want to replace the default converters created by Spring MVC, or by overriding <a href="https://docs.spring.io/spring-framework/docs/5.0.8.RELEASE/javadoc-api/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.html#extendMessageConverters-java.util.List-" target="_blank" rel="noopener"><code>extendMessageConverters()</code></a> if you just want to customize them or add additional converters to the default ones.</p>
<p>Below is an example that adds Jackson JSON and XML converters with a customized <code>ObjectMapper</code> instead of default ones:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        Jackson2ObjectMapperBuilder builder = <span class="keyword">new</span> Jackson2ObjectMapperBuilder()</span><br><span class="line">                .indentOutput(<span class="keyword">true</span>)</span><br><span class="line">                .dateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>))</span><br><span class="line">                .modulesToInstall(<span class="keyword">new</span> ParameterNamesModule());</span><br><span class="line">        converters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter(builder.build()));</span><br><span class="line">        converters.add(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter(builder.createXmlMapper(<span class="keyword">true</span>).build()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>It is also possible to do the same in XML:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span> <span class="attr">ref</span>=<span class="string">"objectMapper"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span> <span class="attr">ref</span>=<span class="string">"xmlMapper"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"objectMapper"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:indentOutput</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:simpleDateFormat</span>=<span class="string">"yyyy-MM-dd"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:modulesToInstall</span>=<span class="string">"com.fasterxml.jackson.module.paramnames.ParameterNamesModule"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"xmlMapper"</span> <span class="attr">parent</span>=<span class="string">"objectMapper"</span> <span class="attr">p:createXmlMapper</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-8-View-Controllers"><a href="#2-8-View-Controllers" class="headerlink" title="2.8 View Controllers"></a>2.8 View Controllers</h2><p>This is a shortcut for defining a <code>ParameterizableViewController</code> that immediately forwards to a view when invoked. Use it in static cases when there is no Java controller logic to execute before the view generates the response.</p>
<p>An example of forwarding a request for <code>&quot;/&quot;</code> to a view called <code>&quot;home&quot;</code> in Java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"home"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>And the same in XML use the <code>&lt;mvc:view-controller&gt;</code> element:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">view-name</span>=<span class="string">"home"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-9-View-Resolvers"><a href="#2-9-View-Resolvers" class="headerlink" title="2.9 View Resolvers"></a>2.9 View Resolvers</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtY29uZmlnLXZpZXctcmVzb2x2ZXJz" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-config-view-resolvers">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>The MVC config simplifies the registration of view resolvers.</p>
<p>The following is a Java config example that configures content negotiation view resolution using JSP and Jackson as a default <code>View</code> for JSON rendering:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.enableContentNegotiation(<span class="keyword">new</span> MappingJackson2JsonView());</span><br><span class="line">        registry.jsp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>And the same in XML:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-resolvers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:content-negotiation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:default-views</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.json.MappingJackson2JsonView"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:default-views</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:content-negotiation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:jsp</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:view-resolvers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Note however that FreeMarker, Tiles, Groovy Markup and script templates also require configuration of the underlying view technology.</p>
<p>The MVC namespace provides dedicated elements. For example with FreeMarker:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-resolvers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:content-negotiation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:default-views</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.json.MappingJackson2JsonView"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:default-views</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:content-negotiation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:freemarker</span> <span class="attr">cache</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:view-resolvers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:freemarker-configurer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:template-loader-path</span> <span class="attr">location</span>=<span class="string">"/freemarker"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:freemarker-configurer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>In Java config simply add the respective “Configurer” bean:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.enableContentNegotiation(<span class="keyword">new</span> MappingJackson2JsonView());</span><br><span class="line">        registry.freeMarker().cache(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FreeMarkerConfigurer <span class="title">freeMarkerConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FreeMarkerConfigurer configurer = <span class="keyword">new</span> FreeMarkerConfigurer();</span><br><span class="line">        configurer.setTemplateLoaderPath(<span class="string">"/freemarker"</span>);</span><br><span class="line">        <span class="keyword">return</span> configurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-10-Static-Resources"><a href="#2-10-Static-Resources" class="headerlink" title="2.10 Static Resources"></a>2.10 Static Resources</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtY29uZmlnLXN0YXRpYy1yZXNvdXJjZXM=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-config-static-resources">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>This option provides a convenient way to serve static resources from a list of <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZnJhbWV3b3JrL2RvY3MvNS4wLjguUkVMRUFTRS9qYXZhZG9jLWFwaS9vcmcvc3ByaW5nZnJhbWV3b3JrL2NvcmUvaW8vUmVzb3VyY2UuaHRtbA==" title="https://docs.spring.io/spring-framework/docs/5.0.8.RELEASE/javadoc-api/org/springframework/core/io/Resource.html">Resource<i class="fa fa-external-link"></i></span>-based locations.</p>
<p>In the example below, given a request that starts with <code>&quot;/resources&quot;</code>, the relative path is used to find and serve static resources relative to “/public” under the web application root or on the classpath under <code>&quot;/static&quot;</code>. </p>
<p>这些资源将在未来一年到期，以确保最大限度地使用浏览器缓存，并减少浏览器发出的HTTP请求。</p>
<p>The <code>Last-Modified</code> header is also evaluated and if present a <code>304</code> status code is returned.</p>
<p>In Java config:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/resources/**"</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">"/public"</span>, <span class="string">"classpath:/static/"</span>)</span><br><span class="line">            .setCachePeriod(<span class="number">31556926</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In XML:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">location</span>=<span class="string">"/public, classpath:/static/"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">cache-period</span>=<span class="string">"31556926"</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<p>The <code>VersionResourceResolver</code> can be used for versioned resource URLs based on an MD5 hash computed from the content, a fixed application version, or other. </p>
<p>A <code>ContentVersionStrategy</code> (MD5 hash) is a good choice with some notable exceptions such as JavaScript resources used with a module loader.</p>
<p>For example in Java config;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/resources/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"/public/"</span>)</span><br><span class="line">                .resourceChain(<span class="keyword">true</span>)</span><br><span class="line">                .addResolver(<span class="keyword">new</span> VersionResourceResolver().addContentVersionStrategy(<span class="string">"/**"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In XML, the same:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/public/"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resource-chain</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:resource-cache</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:resolvers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:version-resolver</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mvc:content-version-strategy</span> <span class="attr">patterns</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">mvc:version-resolver</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:resolvers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:resource-chain</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>You can use <code>ResourceUrlProvider</code> to rewrite URLs and apply the full chain of resolvers and transformers — e.g. to insert versions. </p>
<p>The MVC config provides a <code>ResourceUrlProvider</code> bean so it can be injected into others. </p>
<p>You can also make the rewrite transparent with the <code>ResourceUrlEncodingFilter</code> for Thymeleaf, JSPs, FreeMarker, and others with URL tags that rely on <code>HttpServletResponse#encodeURL</code>.</p>
<p><strong><span class="exturl" data-url="aHR0cDovL3d3dy53ZWJqYXJzLm9yZy9kb2N1bWVudGF0aW9u" title="http://www.webjars.org/documentation">WebJars<i class="fa fa-external-link"></i></span> is also supported via <code>WebJarsResourceResolver</code> and automatically registered when <code>&quot;org.webjars:webjars-locator&quot;</code> is present on the classpath.</strong> </p>
<p>The resolver can re-write URLs to include the version of the jar and can also match to incoming URLs without versions — e.g. <code>&quot;/jquery/jquery.min.js&quot;</code> to <code>&quot;/jquery/1.2.0/jquery.min.js&quot;</code>.</p>
<h2 id="2-11-Default-Servlet"><a href="#2-11-Default-Servlet" class="headerlink" title="2.11 Default Servlet"></a>2.11 Default Servlet</h2><p>This allows for mapping the <code>DispatcherServlet</code> to “/“ (thus overriding the mapping of the container’s default Servlet), while still allowing static resource requests to be handled by the container’s default Servlet. It configures a<code>DefaultServletHttpRequestHandler</code> with a URL mapping of “/**” and the lowest priority relative to other URL mappings.</p>
<p>This handler will forward all requests to the default Servlet.</p>
<p> Therefore it is important that it remains last in the order of all other URL <code>HandlerMappings</code>. </p>
<p>That will be the case if you use <code>&lt;mvc:annotation-driven&gt;</code> or alternatively if you are setting up your own customized <code>HandlerMapping</code> instance be sure to set its <code>order</code> property to a value lower than that of the <code>DefaultServletHttpRequestHandler</code>, which is <code>Integer.MAX_VALUE</code>.</p>
<p>To enable the feature using the default setup use:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Or in XML:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>The caveat to overriding the “/“ Servlet mapping is that the <code>RequestDispatcher</code> for the default Servlet must be retrieved by name rather than by path. The <code>DefaultServletHttpRequestHandler</code> will attempt to auto-detect the default Servlet for the container at startup time, using a list of known names for most of the major Servlet containers (including Tomcat, Jetty, GlassFish, JBoss, Resin, WebLogic, and WebSphere). If the default Servlet has been custom configured with a different name, or if a different Servlet container is being used where the default Servlet name is unknown, then the default Servlet’s name must be explicitly provided as in the following example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.enable(<span class="string">"myCustomDefaultServlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Or in XML:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> <span class="attr">default-servlet-name</span>=<span class="string">"myCustomDefaultServlet"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-12-Path-Matching"><a href="#2-12-Path-Matching" class="headerlink" title="2.12 Path Matching"></a>2.12 Path Matching</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtY29uZmlnLXBhdGgtbWF0Y2hpbmc=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-config-path-matching">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p>This allows customizing options related to URL matching and treatment of the URL. For details on the individual options check out the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZnJhbWV3b3JrL2RvY3MvNS4wLjguUkVMRUFTRS9qYXZhZG9jLWFwaS9vcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L2NvbmZpZy9hbm5vdGF0aW9uL1BhdGhNYXRjaENvbmZpZ3VyZXIuaHRtbA==" title="https://docs.spring.io/spring-framework/docs/5.0.8.RELEASE/javadoc-api/org/springframework/web/servlet/config/annotation/PathMatchConfigurer.html">PathMatchConfigurer<i class="fa fa-external-link"></i></span> API.</p>
<p>Example in Java config:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer</span><br><span class="line">            .setUseSuffixPatternMatch(<span class="keyword">true</span>)</span><br><span class="line">            .setUseTrailingSlashMatch(<span class="keyword">false</span>)</span><br><span class="line">            .setUseRegisteredSuffixPatternMatch(<span class="keyword">true</span>)</span><br><span class="line">            .setPathMatcher(antPathMatcher())</span><br><span class="line">            .setUrlPathHelper(urlPathHelper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UrlPathHelper <span class="title">urlPathHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PathMatcher <span class="title">antPathMatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In XML, the same:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:path-matching</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suffix-pattern</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">trailing-slash</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">registered-suffixes-only</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">path-helper</span>=<span class="string">"pathHelper"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">path-matcher</span>=<span class="string">"pathMatcher"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pathHelper"</span> <span class="attr">class</span>=<span class="string">"org.example.app.MyPathHelper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pathMatcher"</span> <span class="attr">class</span>=<span class="string">"org.example.app.MyPathMatcher"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-13-Advanced-Java-Config"><a href="#2-13-Advanced-Java-Config" class="headerlink" title="2.13 Advanced Java Config"></a>2.13 Advanced Java Config</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtY29uZmlnLWFkdmFuY2VkLWphdmE=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-config-advanced-java">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
<p><code>@EnableWebMvc</code> imports <code>DelegatingWebMvcConfiguration</code> that (1) provides default Spring configuration for Spring MVC applications and (2) detects and delegates to <code>WebMvcConfigurer</code>‘s to customize that configuration.</p>
<p>For advanced mode, remove <code>@EnableWebMvc</code> and extend directly from <code>DelegatingWebMvcConfiguration</code> instead of implementing <code>WebMvcConfigurer</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can keep existing methods in <code>WebConfig</code> but you can now also override bean declarations from the base class and you can still have any number of other <code>WebMvcConfigurer</code>‘s on the classpath.</p>
<h2 id="2-14-Advanced-XML-Config"><a href="#2-14-Advanced-XML-Config" class="headerlink" title="2.14 Advanced XML Config"></a>2.14 Advanced XML Config</h2><p>The MVC namespace does not have an advanced mode. If you need to customize a property on a bean that you can’t change otherwise, you can use the <code>BeanPostProcessor</code> lifecycle hook of the Spring <code>ApplicationContext</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Note that <code>MyPostProcessor</code> needs to be declared as a bean either explicitly in XML or detected through a <code>&lt;component-scan/&gt;</code>declaration.</p>
<h1 id="3-WebSockets"><a href="#3-WebSockets" class="headerlink" title="3 WebSockets"></a>3 WebSockets</h1><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi1yZWFjdGl2ZS5odG1sI3dlYmZsdXgtd2Vic29ja2V0" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web-reactive.html#webflux-websocket">Same in Spring WebFlux<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>7-Spring测试框架</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/7-spring%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="1-Annotations"><a href="#1-Annotations" class="headerlink" title="1 Annotations"></a>1 Annotations</h1><h2 id="1-1-BootstrapWith"><a href="#1-1-BootstrapWith" class="headerlink" title="1.1 @BootstrapWith"></a>1.1 @BootstrapWith</h2><p><code>@BootstrapWith</code> is a class-level annotation that is used to configure how the <em>Spring TestContext Framework</em> is bootstrapped. Specifically, <code>@BootstrapWith</code> is used to specify a custom <code>TestContextBootstrapper</code>. Consult the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3Rlc3RpbmcuaHRtbCN0ZXN0Y29udGV4dC1ib290c3RyYXBwaW5n" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/testing.html#testcontext-bootstrapping">Bootstrapping the TestContext framework<i class="fa fa-external-link"></i></span> section for further details.</p>
<a id="more"></a>
<h2 id="1-2-ContextConfiguration"><a href="#1-2-ContextConfiguration" class="headerlink" title="1.2 @ContextConfiguration"></a>1.2 @ContextConfiguration</h2><p><code>@ContextConfiguration</code> defines class-level metadata that is used to determine how to load and configure an <code>ApplicationContext</code> for integration tests. Specifically, <code>@ContextConfiguration</code> declares the application context resource <code>locations</code> or the annotated <code>classes</code> that will be used to load the context.</p>
<p>Resource locations are typically XML configuration files or Groovy scripts located in the classpath; whereas, annotated classes are typically <code>@Configuration</code> classes. However, resource locations can also refer to files and scripts in the file system, and annotated classes can be component classes, etc.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span>(initializers = CustomContextIntializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ContextInitializerTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = <span class="string">"/test-context.xml"</span>, loader = CustomContextLoader<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CustomLoaderXmlApplicationContextTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-3-WebAppConfiguration"><a href="#1-3-WebAppConfiguration" class="headerlink" title="1.3 @WebAppConfiguration"></a>1.3 @WebAppConfiguration</h2><p><code>@WebAppConfiguration</code> is a class-level annotation that is used to declare that the <code>ApplicationContext</code> loaded for an integration test should be a <code>WebApplicationContext</code>. The mere presence of <code>@WebAppConfiguration</code> on a test class ensures that a<code>WebApplicationContext</code> will be loaded for the test, using the <strong>default</strong> value of <code>&quot;file:src/main/webapp&quot;</code> for the path to the root of the web application (i.e., the <em>resource base path</em>). The resource base path is used behind the scenes to create a<code>MockServletContext</code> which serves as the <code>ServletContext</code> for the test’s <code>WebApplicationContext</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span></span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To override the default, specify a different base resource path via the <em>implicit</em> <code>value</code> attribute. Both <code>classpath:</code> and <code>file:</code>resource prefixes are supported. If no resource prefix is supplied the path is assumed to be a file system resource.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span></span><br><span class="line"><span class="meta">@WebAppConfiguration</span>(<span class="string">"classpath:test-web-resources"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Note that <code>@WebAppConfiguration</code> must be used in conjunction with <code>@ContextConfiguration</code>, either within a single test class or within a test class hierarchy. See the <code>@WebAppConfiguration</code> javadocs for further details.</p>
<h2 id="1-4-ContextHierarchy"><a href="#1-4-ContextHierarchy" class="headerlink" title="1.4 @ContextHierarchy"></a>1.4 @ContextHierarchy</h2><p><code>@ContextHierarchy</code> is a class-level annotation that is used to define a hierarchy of <code>ApplicationContext</code>s for integration tests. <code>@ContextHierarchy</code> should be declared with a list of one or more <code>@ContextConfiguration</code> instances, each of which defines a level in the context hierarchy. The following examples demonstrate the use of <code>@ContextHierarchy</code> within a single test class; however, <code>@ContextHierarchy</code> can also be used within a test class hierarchy.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextHierarchy</span>(&#123;</span><br><span class="line">    <span class="meta">@ContextConfiguration</span>(<span class="string">"/parent-config.xml"</span>),</span><br><span class="line">    <span class="meta">@ContextConfiguration</span>(<span class="string">"/child-config.xml"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextHierarchyTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="meta">@ContextHierarchy</span>(&#123;</span><br><span class="line">    <span class="meta">@ContextConfiguration</span>(classes = AppConfig<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">    @<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= WebConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebIntegrationTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-5-ActiveProfiles"><a href="#1-5-ActiveProfiles" class="headerlink" title="1.5 @ActiveProfiles"></a>1.5 @ActiveProfiles</h2><p><code>@ActiveProfiles</code> is a class-level annotation that is used to declare which <em>bean definition profiles</em> should be active when loading an <code>ApplicationContext</code> for an integration test.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span></span><br><span class="line"><span class="meta">@ActiveProfiles</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeveloperTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ContextConfiguration</span></span><br><span class="line"><span class="meta">@ActiveProfiles</span>(&#123;<span class="string">"dev"</span>, <span class="string">"integration"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeveloperIntegrationTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-6-TestPropertySource"><a href="#1-6-TestPropertySource" class="headerlink" title="1.6 @TestPropertySource"></a>1.6 @TestPropertySource</h2><p><code>@TestPropertySource</code> is a class-level annotation that is used to configure the locations of properties files and inlined properties to be added to the set of <code>PropertySources</code> in the <code>Environment</code> for an <code>ApplicationContext</code> loaded for an integration test.</p>
<p>测试属性源的优先级高于从操作系统环境或Java系统属性加载的源，以及应用程序通过@PropertySource或编程方式声明添加的属性源。因此，可以使用测试属性源选择性地覆盖系统和应用程序属性源中定义的属性。此外，内联属性的优先级高于从资源位置加载的属性。</p>
<p>The following example demonstrates how to declare a properties file from the classpath.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span></span><br><span class="line"><span class="meta">@TestPropertySource</span>(<span class="string">"/test.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIntegrationTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The following example demonstrates how to declare <em>inlined</em> properties.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span></span><br><span class="line"><span class="meta">@TestPropertySource</span>(properties = &#123; <span class="string">"timezone = GMT"</span>, <span class="string">"port: 4242"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIntegrationTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-7-DirtiesContext"><a href="#1-7-DirtiesContext" class="headerlink" title="1.7 @DirtiesContext"></a>1.7 @DirtiesContext</h2><p><code>@DirtiesContext</code> indicates that the underlying Spring <code>ApplicationContext</code> has been <em>dirtied</em> during the execution of a test (i.e., modified or corrupted in some manner — for example, by changing the state of a singleton bean) and should be closed. When an application context is marked <em>dirty</em>, it is removed from the testing framework’s cache and closed. As a consequence, the underlying Spring container will be rebuilt for any subsequent test that requires a context with the same configuration metadata.</p>
<p><code>@DirtiesContext</code> can be used as both a class-level and method-level annotation within the same class or class hierarchy. In such scenarios, the <code>ApplicationContext</code> is marked as <em>dirty</em> before or after any such annotated method as well as before or after the current test class, depending on the configured <code>methodMode</code> and <code>classMode</code>.</p>
<p>The following examples explain when the context would be dirtied for various configuration scenarios:</p>
<ul>
<li><p>Before the current test class, when declared on a class with class mode set to <code>BEFORE_CLASS</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext</span>(classMode = BEFORE_CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreshContextTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some tests that require a new Spring container</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>After the current test class, when declared on a class with class mode set to <code>AFTER_CLASS</code> (i.e., the default class mode).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextDirtyingTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some tests that result in the Spring container being dirtied</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Before each test method in the current test class, when declared on a class with class mode set to <code>BEFORE_EACH_TEST_METHOD.</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext</span>(classMode = BEFORE_EACH_TEST_METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreshContextTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some tests that require a new Spring container</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>After each test method in the current test class, when declared on a class with class mode set to <code>AFTER_EACH_TEST_METHOD.</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext</span>(classMode = AFTER_EACH_TEST_METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextDirtyingTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some tests that result in the Spring container being dirtied</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Before the current test, when declared on a method with the method mode set to <code>BEFORE_METHOD</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext</span>(methodMode = BEFORE_METHOD)</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcessWhichRequiresFreshAppCtx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some logic that requires a new Spring container</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>After the current test, when declared on a method with the method mode set to <code>AFTER_METHOD</code> (i.e., the default method mode).</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DirtiesContext</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcessWhichDirtiesAppCtx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// some logic that results in the Spring container being dirtied</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>If <code>@DirtiesContext</code> is used in a test whose context is configured as part of a context hierarchy via <code>@ContextHierarchy</code>, the <code>hierarchyMode</code> flag can be used to control how the context cache is cleared. By default an <em>exhaustive</em> algorithm will be used that clears the context cache including not only the current level but also all other context hierarchies that share an ancestor context common to the current test; all <code>ApplicationContext</code>s that reside in a sub-hierarchy of the common ancestor context will be removed from the context cache and closed. If the <em>exhaustive</em> algorithm is overkill for a particular use case, the simpler <em>current level</em> algorithm can be specified instead, as seen below.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextHierarchy</span>(&#123;</span><br><span class="line">    <span class="meta">@ContextConfiguration</span>(<span class="string">"/parent-config.xml"</span>),</span><br><span class="line">    <span class="meta">@ContextConfiguration</span>(<span class="string">"/child-config.xml"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendedTests</span> <span class="keyword">extends</span> <span class="title">BaseTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DirtiesContext</span>(hierarchyMode = CURRENT_LEVEL)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// some logic that results in the child context being dirtied</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>For further details regarding the <code>EXHAUSTIVE</code> and <code>CURRENT_LEVEL</code> algorithms see the <code>DirtiesContext.HierarchyMode</code> javadocs.</p>
<h2 id="1-8-TestExecutionListeners"><a href="#1-8-TestExecutionListeners" class="headerlink" title="1.8 @TestExecutionListeners"></a>1.8 @TestExecutionListeners</h2><p><code>@TestExecutionListeners</code> defines class-level metadata for configuring the <code>TestExecutionListener</code> implementations that should be registered with the <code>TestContextManager</code>. Typically, <code>@TestExecutionListeners</code> is used in conjunction with<code>@ContextConfiguration</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span></span><br><span class="line"><span class="meta">@TestExecutionListeners</span>(&#123;CustomTestExecutionListener<span class="class">.<span class="keyword">class</span>, <span class="title">AnotherTestExecutionListener</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CustomTestExecutionListenerTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@TestExecutionListeners</code> supports <em>inherited</em> listeners by default. See the javadocs for an example and further details.</p>
<h2 id="1-9-Commit"><a href="#1-9-Commit" class="headerlink" title="1.9 @Commit"></a>1.9 @Commit</h2><p><code>@Commit</code> indicates that the transaction for a transactional test method should be <em>committed</em> after the test method has completed. <code>@Commit</code> can be used as a direct replacement for <code>@Rollback(false)</code> in order to more explicitly convey the intent of the code. Analogous to <code>@Rollback</code>, <code>@Commit</code> may also be declared as a class-level or method-level annotation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Commit</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcessWithoutRollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-10-Rollback"><a href="#1-10-Rollback" class="headerlink" title="1.10 @Rollback"></a>1.10 @Rollback</h2><p><code>@Rollback</code> indicates whether the transaction for a transactional test method should be <em>rolled back</em> after the test method has completed. If <code>true</code>, the transaction is rolled back; otherwise, the transaction is committed (see also <code>@Commit</code>). Rollback semantics for integration tests in the Spring TestContext Framework default to <code>true</code> even if <code>@Rollback</code> is not explicitly declared.</p>
<p>When declared as a class-level annotation, <code>@Rollback</code> defines the default rollback semantics for all test methods within the test class hierarchy. When declared as a method-level annotation, <code>@Rollback</code> defines rollback semantics for the specific test method, potentially overriding class-level <code>@Rollback</code> or <code>@Commit</code> semantics.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProcessWithoutRollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-11-BeforeTransaction"><a href="#1-11-BeforeTransaction" class="headerlink" title="1.11 @BeforeTransaction"></a>1.11 @BeforeTransaction</h2><p><code>@BeforeTransaction</code> indicates that the annotated <code>void</code> method should be executed <em>before</em> a transaction is started for test methods configured to run within a transaction via Spring’s <code>@Transactional</code> annotation. As of Spring Framework 4.3,<code>@BeforeTransaction</code> methods are not required to be <code>public</code> and may be declared on Java 8 based interface default methods.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@BeforeTransaction</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">beforeTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// logic to be executed before a transaction is started</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-12-AfterTransaction"><a href="#1-12-AfterTransaction" class="headerlink" title="1.12 @AfterTransaction"></a>1.12 @AfterTransaction</h2><p><code>@AfterTransaction</code> indicates that the annotated <code>void</code> method should be executed <em>after</em> a transaction is ended for test methods configured to run within a transaction via Spring’s <code>@Transactional</code> annotation. As of Spring Framework 4.3, <code>@AfterTransaction</code>methods are not required to be <code>public</code> and may be declared on Java 8 based interface default methods.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterTransaction</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// logic to be executed after a transaction has ended</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-13-Sql"><a href="#1-13-Sql" class="headerlink" title="1.13 @Sql"></a>1.13 @Sql</h2><p><code>@Sql</code> is used to annotate a test class or test method to configure SQL scripts to be executed against a given database during integration tests.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Sql</span>(&#123;<span class="string">"/test-schema.sql"</span>, <span class="string">"/test-user-data.sql"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> userTest &#123;</span><br><span class="line">    <span class="comment">// execute code that relies on the test schema and test data</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3Rlc3RpbmcuaHRtbCN0ZXN0Y29udGV4dC1leGVjdXRpbmctc3FsLWRlY2xhcmF0aXZlbHk=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/testing.html#testcontext-executing-sql-declaratively">Executing SQL scripts declaratively with @Sql<i class="fa fa-external-link"></i></span> for further details.</p>
<h2 id="1-14-SqlConfig"><a href="#1-14-SqlConfig" class="headerlink" title="1.14 @SqlConfig"></a>1.14 @SqlConfig</h2><p><code>@SqlConfig</code> defines metadata that is used to determine how to parse and execute SQL scripts configured via the <code>@Sql</code>annotation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Sql</span>(</span><br><span class="line">    scripts = <span class="string">"/test-user-data.sql"</span>,</span><br><span class="line">    config = <span class="meta">@SqlConfig</span>(commentPrefix = <span class="string">"`"</span>, separator = <span class="string">"@@"</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> userTest &#123;</span><br><span class="line">    <span class="comment">// execute code that relies on the test data</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-15-SqlGroup"><a href="#1-15-SqlGroup" class="headerlink" title="1.15 @SqlGroup"></a>1.15 @SqlGroup</h2><p><code>@SqlGroup</code> is a container annotation that aggregates several <code>@Sql</code> annotations. <code>@SqlGroup</code> can be used natively, declaring several nested <code>@Sql</code> annotations, or it can be used in conjunction with Java 8’s support for repeatable annotations, where <code>@Sql</code>can simply be declared several times on the same class or method, implicitly generating this container annotation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SqlGroup</span>(&#123;</span><br><span class="line">    <span class="meta">@Sql</span>(scripts = <span class="string">"/test-schema.sql"</span>, config = <span class="meta">@SqlConfig</span>(commentPrefix = <span class="string">"`"</span>)),</span><br><span class="line">    <span class="meta">@Sql</span>(<span class="string">"/test-user-data.sql"</span>)</span><br><span class="line">)&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> userTest &#123;</span><br><span class="line">    <span class="comment">// execute code that uses the test schema and test data</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-16-Standard-Annotation-Support"><a href="#1-16-Standard-Annotation-Support" class="headerlink" title="1.16 Standard Annotation Support"></a>1.16 Standard Annotation Support</h2><p>The following annotations are supported with standard semantics for all configurations of the Spring TestContext Framework. Note that these annotations are not specific to tests and can be used anywhere in the Spring Framework.</p>
<ul>
<li><code>@Autowired</code></li>
<li><code>@Qualifier</code></li>
<li><code>@Resource</code> (javax.annotation) <em>if JSR-250 is present</em></li>
<li><code>@ManagedBean</code> (javax.annotation) <em>if JSR-250 is present</em></li>
<li><code>@Inject</code> (javax.inject) <em>if JSR-330 is present</em></li>
<li><code>@Named</code> (javax.inject) <em>if JSR-330 is present</em></li>
<li><code>@PersistenceContext</code> (javax.persistence) <em>if JPA is present</em></li>
<li><code>@PersistenceUnit</code> (javax.persistence) <em>if JPA is present</em></li>
<li><code>@Required</code></li>
<li><code>@Transactional</code></li>
</ul>
<h2 id="1-17-Spring-JUnit-4-Testing-Annotations"><a href="#1-17-Spring-JUnit-4-Testing-Annotations" class="headerlink" title="1.17 Spring JUnit 4 Testing Annotations"></a>1.17 Spring JUnit 4 Testing Annotations</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3Rlc3RpbmcuaHRtbCNpbnRlZ3JhdGlvbi10ZXN0aW5nLWFubm90YXRpb25zLWp1bml0NA==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/testing.html#integration-testing-annotations-junit4">https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/testing.html#integration-testing-annotations-junit4<i class="fa fa-external-link"></i></span></p>
<h2 id="1-18-Spring-JUnit-Jupiter-Testing-Annotations"><a href="#1-18-Spring-JUnit-Jupiter-Testing-Annotations" class="headerlink" title="1.18 Spring JUnit Jupiter Testing Annotations"></a>1.18 Spring JUnit Jupiter Testing Annotations</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3Rlc3RpbmcuaHRtbCNpbnRlZ3JhdGlvbi10ZXN0aW5nLWFubm90YXRpb25zLWp1bml0LWp1cGl0ZXI=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/testing.html#integration-testing-annotations-junit-jupiter">https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/testing.html#integration-testing-annotations-junit-jupiter<i class="fa fa-external-link"></i></span></p>
<h2 id="1-19-Meta-Annotation-Support-for-Testing"><a href="#1-19-Meta-Annotation-Support-for-Testing" class="headerlink" title="*1.19 Meta-Annotation Support for Testing"></a>*1.19 Meta-Annotation Support for Testing</h2><p>It is possible to use most test-related annotations as <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNiZWFucy1tZXRhLWFubm90YXRpb25z" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#beans-meta-annotations">meta-annotations<i class="fa fa-external-link"></i></span> in order to create custom <em>composed annotations</em> and reduce configuration duplication across a test suite.</p>
<p>Each of the following may be used as meta-annotations in conjunction with the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3Rlc3RpbmcuaHRtbCN0ZXN0Y29udGV4dC1mcmFtZXdvcms=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/testing.html#testcontext-framework">TestContext framework<i class="fa fa-external-link"></i></span>.</p>
<ul>
<li><code>@BootstrapWith</code></li>
<li><code>@ContextConfiguration</code></li>
<li><code>@ContextHierarchy</code></li>
<li><code>@ActiveProfiles</code></li>
<li><code>@TestPropertySource</code></li>
<li><code>@DirtiesContext</code></li>
<li><code>@WebAppConfiguration</code></li>
<li><code>@TestExecutionListeners</code></li>
<li><code>@Transactional</code></li>
<li><code>@BeforeTransaction</code></li>
<li><code>@AfterTransaction</code></li>
<li><code>@Commit</code></li>
<li><code>@Rollback</code></li>
<li><code>@Sql</code></li>
<li><code>@SqlConfig</code></li>
<li><code>@SqlGroup</code></li>
<li><code>@Repeat</code> <em>(only supported on JUnit 4)</em></li>
<li><code>@Timed</code> <em>(only supported on JUnit 4)</em></li>
<li><code>@IfProfileValue</code> <em>(only supported on JUnit 4)</em></li>
<li><code>@ProfileValueSourceConfiguration</code> <em>(only supported on JUnit 4)</em></li>
<li><code>@SpringJUnitConfig</code> <em>(only supported on JUnit Jupiter)</em></li>
<li><code>@SpringJUnitWebConfig</code> <em>(only supported on JUnit Jupiter)</em></li>
<li><code>@EnabledIf</code> <em>(only supported on JUnit Jupiter)</em></li>
<li><code>@DisabledIf</code> <em>(only supported on JUnit Jupiter)</em></li>
</ul>
<p>For example, if we discover that we are repeating the following configuration across our <em>JUnit 4</em> based test suite…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(</span>&#123;<span class="string">"/app-config.xml"</span>, <span class="string">"/test-data-access-config.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@ActiveProfiles</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderRepositoryTests</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(</span>&#123;<span class="string">"/app-config.xml"</span>, <span class="string">"/test-data-access-config.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@ActiveProfiles</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryTests</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>



<p>We can reduce the above duplication by introducing a custom <em>composed annotation</em> that centralizes the common test configuration for Spring like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(&#123;<span class="string">"/app-config.xml"</span>, <span class="string">"/test-data-access-config.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@ActiveProfiles</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TransactionalDevTestConfig &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>Then we can use our custom <code>@TransactionalDevTestConfig</code> annotation to simplify the configuration of individual JUnit 4 based test classes as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">TransactionalDevTestConfig</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">OrderRepositoryTests</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">TransactionalDevTestConfig</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserRepositoryTests</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>



<p>如果我们使用JUnit Jupiter编写测试，我们可以进一步减少代码重复，因为JUnit 5中的注释也可以用作元注释。例如，如果我们发现我们正在通过基于JUnit Jupiter的测试套件重复下面的配置……</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExtendWith</span>(SpringExtension<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(</span>&#123;<span class="string">"/app-config.xml"</span>, <span class="string">"/test-data-access-config.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@ActiveProfiles</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderRepositoryTests</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExtendWith</span>(SpringExtension<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(</span>&#123;<span class="string">"/app-config.xml"</span>, <span class="string">"/test-data-access-config.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@ActiveProfiles</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryTests</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>We can reduce the above duplication by introducing a custom <em>composed annotation</em> that centralizes the common test configuration for Spring and JUnit Jupiter like this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@ExtendWith</span>(SpringExtension<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(</span>&#123;<span class="string">"/app-config.xml"</span>, <span class="string">"/test-data-access-config.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@ActiveProfiles</span>(<span class="string">"dev"</span>)</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TransactionalDevTestConfig &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>Then we can use our custom <code>@TransactionalDevTestConfig</code> annotation to simplify the configuration of individual JUnit Jupiter based test classes as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TransactionalDevTestConfig</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderRepositoryTests</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TransactionalDevTestConfig</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryTests</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>Since JUnit Jupiter supports the use of <code>@Test</code>, <code>@RepeatedTest</code>, <code>ParameterizedTest</code>, etc. as meta-annotations, it is also possible to create custom composed annotations at the test method level. For example, if we wish to create a <em>composed annotation</em> that combines the <code>@Test</code> and <code>@Tag</code> annotations from JUnit Jupiter with the <code>@Transactional</code> annotation from Spring, we could create an <code>@TransactionalIntegrationTest</code> annotation as follows.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Tag</span>(<span class="string">"integration-test"</span>) <span class="comment">// org.junit.jupiter.api.Tag</span></span><br><span class="line"><span class="meta">@Test</span> <span class="comment">// org.junit.jupiter.api.Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TransactionalIntegrationTest &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>Then we can use our custom <code>@TransactionalIntegrationTest</code> annotation to simplify the configuration of individual JUnit Jupiter based test methods as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TransactionalIntegrationTest</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveOrder</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TransactionalIntegrationTest</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteOrder</span><span class="params">()</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>For further details, consult the <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNhbm5vdGF0aW9uLXByb2dyYW1taW5nLW1vZGVs" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#annotation-programming-model">Spring Annotation Programming Model<i class="fa fa-external-link"></i></span>.</p>
<h1 id="2-Spring-MVC-Test-Framework"><a href="#2-Spring-MVC-Test-Framework" class="headerlink" title="2 Spring MVC Test Framework"></a>2 Spring MVC Test Framework</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringJUnitWebConfig</span>(locations = <span class="string">"test-servlet-context.xml"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">(WebApplicationContext wac)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getAccount</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mockMvc.perform(get(<span class="string">"/accounts/1"</span>)</span><br><span class="line">                .accept(MediaType.parseMediaType(<span class="string">"application/json;charset=UTF-8"</span>)))</span><br><span class="line">            .andExpect(status().isOk())</span><br><span class="line">            .andExpect(content().contentType(<span class="string">"application/json"</span>))</span><br><span class="line">            .andExpect(jsonPath(<span class="string">"$.name"</span>).value(<span class="string">"Lee"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-1-Setup-Features"><a href="#2-1-Setup-Features" class="headerlink" title="2.1 Setup Features"></a>2.1 Setup Features</h2><p>No matter which MockMvc builder you use all <code>MockMvcBuilder</code> implementations provide some common and very useful features. For example you can declare an <code>Accept</code> header for all requests and expect a status of 200 as well as a <code>Content-Type</code>header in all responses as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// static import of MockMvcBuilders.standaloneSetup</span></span><br><span class="line"></span><br><span class="line">MockMvc mockMvc = standaloneSetup(<span class="keyword">new</span> MusicController())</span><br><span class="line">        .defaultRequest(get(<span class="string">"/"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">        .alwaysExpect(status().isOk())</span><br><span class="line">        .alwaysExpect(content().contentType(<span class="string">"application/json;charset=UTF-8"</span>))</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>

<p>In addition 3rd party frameworks (and applications) may pre-package setup instructions like the ones through a <code>MockMvcConfigurer</code>. The Spring Framework has one such built-in implementation that helps to save and re-use the HTTP session across requests. It can be used as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// static import of SharedHttpSessionConfigurer.sharedHttpSession</span></span><br><span class="line"></span><br><span class="line">MockMvc mockMvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> TestController())</span><br><span class="line">        .apply(sharedHttpSession())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use mockMvc to perform requests...</span></span><br></pre></td></tr></table></figure>

<p>See <code>ConfigurableMockMvcBuilder</code> for a list of all MockMvc builder features or use the IDE to explore the available options.</p>
<h2 id="2-2-Performing-Requests"><a href="#2-2-Performing-Requests" class="headerlink" title="2.2 Performing Requests"></a>2.2 Performing Requests</h2><p>It’s easy to perform requests using any HTTP method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockMvc.perform(post(<span class="string">"/hotels/&#123;id&#125;"</span>, <span class="number">42</span>).accept(MediaType.APPLICATION_JSON));</span><br></pre></td></tr></table></figure>

<p>You can also perform file upload requests that internally use <code>MockMultipartHttpServletRequest</code> so that there is no actual parsing of a multipart request but rather you have to set it up:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockMvc.perform(multipart(<span class="string">"/doc"</span>).file(<span class="string">"a1"</span>, <span class="string">"ABC"</span>.getBytes(<span class="string">"UTF-8"</span>)));</span><br></pre></td></tr></table></figure>

<p>You can specify query parameters in URI template style:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockMvc.perform(get(<span class="string">"/hotels?foo=&#123;foo&#125;"</span>, <span class="string">"bar"</span>));</span><br></pre></td></tr></table></figure>

<p>Or you can add Servlet request parameters representing either query of form parameters:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockMvc.perform(get(<span class="string">"/hotels"</span>).param(<span class="string">"foo"</span>, <span class="string">"bar"</span>));</span><br></pre></td></tr></table></figure>

<p>If application code relies on Servlet request parameters and doesn’t check the query string explicitly (as is most often the case) then it doesn’t matter which option you use. Keep in mind however that query params provided with the URI template will be decoded while request parameters provided through the <code>param(…)</code> method are expected to already be decoded.</p>
<p>In most cases it’s preferable to leave out the context path and the Servlet path from the request URI. If you must test with the full request URI, be sure to set the <code>contextPath</code> and <code>servletPath</code> accordingly so that request mappings will work:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockMvc.perform(get(<span class="string">"/app/main/hotels/&#123;id&#125;"</span>).contextPath(<span class="string">"/app"</span>).servletPath(<span class="string">"/main"</span>))</span><br></pre></td></tr></table></figure>

<p>Looking at the above example, it would be cumbersome to set the contextPath and servletPath with every performed request. Instead you can set up default request properties:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mockMvc = standaloneSetup(<span class="keyword">new</span> AccountController())</span><br><span class="line">            .defaultRequest(get(<span class="string">"/"</span>)</span><br><span class="line">            .contextPath(<span class="string">"/app"</span>).servletPath(<span class="string">"/main"</span>)</span><br><span class="line">            .accept(MediaType.APPLICATION_JSON)).build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>The above properties will affect every request performed through the <code>MockMvc</code> instance. If the same property is also specified on a given request, it overrides the default value. That is why the HTTP method and URI in the default request don’t matter since they must be specified on every request.</p>
<h2 id="2-3-Defining-Expectations"><a href="#2-3-Defining-Expectations" class="headerlink" title="2.3 Defining Expectations"></a>2.3 Defining Expectations</h2><p>Expectations can be defined by appending one or more <code>.andExpect(..)</code> calls after performing a request:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockMvc.perform(get(<span class="string">"/accounts/1"</span>)).andExpect(status().isOk());</span><br></pre></td></tr></table></figure>

<p><code>MockMvcResultMatchers.*</code> provides a number of expectations, some of which are further nested with more detailed expectations.</p>
<p>Expectations fall in two general categories. The first category of assertions verifies properties of the response: for example, the response status, headers, and content. These are the most important results to assert.</p>
<p>The second category of assertions goes beyond the response. These assertions allow one to inspect Spring MVC specific aspects such as which controller method processed the request, whether an exception was raised and handled, what the content of the model is, what view was selected, what flash attributes were added, and so on. They also allow one to inspect Servlet specific aspects such as request and session attributes.</p>
<p>The following test asserts that binding or validation failed:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockMvc.perform(post(<span class="string">"/persons"</span>))</span><br><span class="line">    .andExpect(status().isOk())</span><br><span class="line">    .andExpect(model().attributeHasErrors(<span class="string">"person"</span>));</span><br></pre></td></tr></table></figure>

<p>Many times when writing tests, it’s useful to <em>dump</em> the results of the performed request. This can be done as follows, where <code>print()</code> is a static import from <code>MockMvcResultHandlers</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockMvc.perform(post(<span class="string">"/persons"</span>))</span><br><span class="line">    .andDo(print())</span><br><span class="line">    .andExpect(status().isOk())</span><br><span class="line">    .andExpect(model().attributeHasErrors(<span class="string">"person"</span>));</span><br></pre></td></tr></table></figure>

<p>As long as request processing does not cause an unhandled exception, the <code>print()</code> method will print all the available result data to <code>System.out</code>. Spring Framework 4.2 introduced a <code>log()</code> method and two additional variants of the <code>print()</code> method, one that accepts an <code>OutputStream</code> and one that accepts a <code>Writer</code>. For example, invoking <code>print(System.err)</code> will print the result data to <code>System.err</code>; while invoking <code>print(myWriter)</code> will print the result data to a custom writer. If you would like to have the result data <em>logged</em> instead of printed, simply invoke the <code>log()</code> method which will log the result data as a single <code>DEBUG</code> message under the <code>org.springframework.test.web.servlet.result</code> logging category.</p>
<p>In some cases, you may want to get direct access to the result and verify something that cannot be verified otherwise. This can be achieved by appending <code>.andReturn()</code> after all other expectations:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MvcResult mvcResult = mockMvc.perform(post(<span class="string">"/persons"</span>)).andExpect(status().isOk()).andReturn();</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>If all tests repeat the same expectations you can set up common expectations once when building the <code>MockMvc</code> instance:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">standaloneSetup(<span class="keyword">new</span> SimpleController())</span><br><span class="line">    .alwaysExpect(status().isOk())</span><br><span class="line">    .alwaysExpect(content().contentType(<span class="string">"application/json;charset=UTF-8"</span>))</span><br><span class="line">    .build()</span><br></pre></td></tr></table></figure>

<p>Note that common expectations are <em>always</em> applied and cannot be overridden without creating a separate <code>MockMvc</code> instance.</p>
<p>When JSON response content contains hypermedia links created with <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctaGF0ZW9hcw==" title="https://github.com/spring-projects/spring-hateoas">Spring HATEOAS<i class="fa fa-external-link"></i></span>, the resulting links can be verified using JsonPath expressions:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockMvc.perform(get(<span class="string">"/people"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">    .andExpect(jsonPath(<span class="string">"$.links[?(@.rel == 'self')].href"</span>).value(<span class="string">"http://localhost:8080/people"</span>));</span><br></pre></td></tr></table></figure>

<p>When XML response content contains hypermedia links created with <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctaGF0ZW9hcw==" title="https://github.com/spring-projects/spring-hateoas">Spring HATEOAS<i class="fa fa-external-link"></i></span>, the resulting links can be verified using XPath expressions:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; ns = Collections.singletonMap(<span class="string">"ns"</span>, <span class="string">"http://www.w3.org/2005/Atom"</span>);</span><br><span class="line">mockMvc.perform(get(<span class="string">"/handle"</span>).accept(MediaType.APPLICATION_XML))</span><br><span class="line">    .andExpect(xpath(<span class="string">"/person/ns:link[@rel='self']/@href"</span>, ns).string(<span class="string">"http://localhost:8080/people"</span>));</span><br></pre></td></tr></table></figure>

<h2 id="2-4-Filter-Registrations"><a href="#2-4-Filter-Registrations" class="headerlink" title="2.4 Filter Registrations"></a>2.4 Filter Registrations</h2><p>When setting up a <code>MockMvc</code> instance, you can register one or more Servlet <code>Filter</code> instances:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mockMvc = standaloneSetup(<span class="keyword">new</span> PersonController()).addFilters(<span class="keyword">new</span> CharacterEncodingFilter()).build();</span><br></pre></td></tr></table></figure>

<p>Registered filters will be invoked through via the <code>MockFilterChain</code> from <code>spring-test</code>, and the last filter will delegate to the <code>DispatcherServlet</code>.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>3-数据验证、数据绑定、类型转换</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/3-%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E3%80%81%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="1-Spring-Validator-接口"><a href="#1-Spring-Validator-接口" class="headerlink" title="1 Spring Validator 接口"></a>1 Spring Validator 接口</h1><p>Spring提供了一个验证器接口，您可以使用它来验证对象。验证器接口使用Errors对象工作，这样在进行验证时，验证器可以向Errors对象报告验证失败。</p>
<p>Let’s consider a small data object:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the usual getters and setters...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>We’re going to provide validation behavior for the <code>Person</code> class by implementing the following two methods of the <code>org.springframework.validation.Validator</code> interface:</p>
<ul>
<li><code>supports(Class)</code> - Can this <code>Validator</code> validate instances of the supplied <code>Class</code>?</li>
<li><code>validate(Object, org.springframework.validation.Errors)</code> - validates the given object and in case of validation errors, registers those with the given <code>Errors</code> object</li>
</ul>
<p>Implementing a <code>Validator</code> is fairly straightforward, especially when you know of the <code>ValidationUtils</code> helper class that the Spring Framework also provides.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This Validator validates *just* Person instances</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Person<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">clazz</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object obj, Errors e)</span> </span>&#123;</span><br><span class="line">        ValidationUtils.rejectIfEmpty(e, <span class="string">"name"</span>, <span class="string">"name.empty"</span>);</span><br><span class="line">        Person p = (Person) obj;</span><br><span class="line">        <span class="keyword">if</span> (p.getAge() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            e.rejectValue(<span class="string">"age"</span>, <span class="string">"negativevalue"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.getAge() &gt; <span class="number">110</span>) &#123;</span><br><span class="line">            e.rejectValue(<span class="string">"age"</span>, <span class="string">"too.darn.old"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>As you can see, the <code>static</code> <code>rejectIfEmpty(..)</code> method on the <code>ValidationUtils</code> class is used to reject the <code>&#39;name&#39;</code> property if it is <code>null</code> or the empty string. Have a look at the <code>ValidationUtils</code> javadocs to see what functionality it provides besides the example shown previously.</p>
<p>Validation errors are reported to the <code>Errors</code> object passed to the validator. In case of Spring Web MVC you can use <code>&lt;spring:bind/&gt;</code> tag to inspect the error messages, but of course you can also inspect the errors object yourself. More information about the methods it offers can be found in the javadocs.</p>
<h1 id="2-Bean-manipulation-and-the-BeanWrapper"><a href="#2-Bean-manipulation-and-the-BeanWrapper" class="headerlink" title="2 Bean manipulation and the BeanWrapper"></a>2 Bean manipulation and the BeanWrapper</h1><p>通过BeanWrapper装饰，提供更多的功能。</p>
<p>One quite important class in the beans package is the <code>BeanWrapper</code> interface and its corresponding implementation ( <code>BeanWrapperImpl</code>). As quoted from the javadocs, the <code>BeanWrapper</code> offers functionality to set and get property values (individually or in bulk), <strong>get property descriptors, and to query properties to determine if they are readable or writable</strong>. Also, the <code>BeanWrapper</code> offers support for nested properties, enabling the setting of properties on sub-properties to an unlimited depth. Then, the <code>BeanWrapper</code> supports the ability to add standard JavaBeans <code>PropertyChangeListeners</code> and <code>VetoableChangeListeners</code>, without the need for supporting code in the target class. Last but not least, the <code>BeanWrapper</code>provides support for the setting of indexed properties. <strong>The <code>BeanWrapper</code> usually isn’t used by application code directly, but by the <code>DataBinder</code> and the <code>BeanFactory</code>.</strong></p>
<p>The way the <code>BeanWrapper</code> works is partly indicated by its name: <em>it wraps a bean</em> to perform actions on that bean, like setting and retrieving properties.</p>
<p>Setting and getting properties is done using the <code>setPropertyValue(s)</code> and <code>getPropertyValue(s)</code> methods that both come with a couple of overloaded variants. </p>
<p><strong>格式</strong></p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Explanation</th>
</tr>
</thead>
<tbody><tr>
<td><code>name</code></td>
<td>Indicates the property <code>name</code> corresponding to the methods <code>getName()</code> or <code>isName()</code> and <code>setName(..)</code></td>
</tr>
<tr>
<td><code>account.name</code></td>
<td>Indicates the nested property <code>name</code> of the property <code>account</code>corresponding e.g. to the methods <code>getAccount().setName()</code>or <code>getAccount().getName()</code></td>
</tr>
<tr>
<td><code>account[2]</code></td>
<td>Indicates the <em>third</em> element of the indexed property <code>account</code>. Indexed properties can be of type <code>array</code>, <code>list</code> or other <em>naturally ordered</em> collection</td>
</tr>
<tr>
<td><code>account[COMPANYNAME]</code></td>
<td>Indicates the value of the map entry indexed by the key <em>COMPANYNAME</em> of the Map property <code>account</code></td>
</tr>
</tbody></table>
<p>例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"张三"</span>,<span class="number">22</span>);</span><br><span class="line">BeanWrapperImpl beanWrapper = <span class="keyword">new</span> BeanWrapperImpl(user);</span><br><span class="line">System.out.println(beanWrapper.getPropertyValue(<span class="string">"name"</span>)); <span class="comment">// 张三</span></span><br></pre></td></tr></table></figure>

<h1 id="3-内置PropertyEditor实现"><a href="#3-内置PropertyEditor实现" class="headerlink" title="3 内置PropertyEditor实现"></a>3 内置PropertyEditor实现</h1><p>Spring使用propertyeditor的概念来实现对象和字符串之间的转换。<br>如果你仔细想想，有时候用一种不同于对象本身的方式来表示属性是很方便的。<br>例如，一个日期可以用人类可读的方式表示(如字符串’2007-14-09’)，而我们仍然能够将人类可读的形式转换回原始日期(或者更好:转换以人类可读形式输入的任何日期，返回到日期对象)。<br>这种行为可以通过注册java.bean . propertyeditor类型的自定义编辑器来实现。</p>
<h2 id="3-1-注入编辑器"><a href="#3-1-注入编辑器" class="headerlink" title="3.1 注入编辑器"></a><strong>3.1 注入编辑器</strong></h2><ul>
<li>use the <code>registerCustomEditor()</code> method of the<code>ConfigurableBeanFactory</code> interface, assuming you have a <code>BeanFactory</code> reference</li>
<li>use a special bean factory post-processor called <code>CustomEditorConfigurer</code>. Although bean factory post-processors can be used with <code>BeanFactory</code> implementations, the <code>CustomEditorConfigurer</code> has a nested property setup, so it is strongly recommended that it is used with the <code>ApplicationContext</code>, where it may be deployed in similar fashion to any other bean, and automatically detected and applied.</li>
</ul>
<p>注意，所有bean工厂和应用程序上下文都自动使用许多内置的属性编辑器，通过使用所谓的BeanWrapper来处理属性转换。此外，ApplicationContexts还会重写或添加额外数量的编辑器来以适合特定应用程序上下文类型的方式处理资源查找。</p>
<p>Standard JavaBeans <code>PropertyEditor</code> instances are used to convert property values expressed as strings to the actual complex type of the property. <code>CustomEditorConfigurer</code>, a bean factory post-processor, may be used to conveniently add support for additional <code>PropertyEditor</code> instances to an <code>ApplicationContext</code>.</p>
<p>Consider a user class <code>ExoticType</code>, and another class <code>DependsOnExoticType</code> which needs <code>ExoticType</code> set as a property:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExoticType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExoticType</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependsOnExoticType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ExoticType type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(ExoticType type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When things are properly set up, we want to be able to assign the type property as a string, which a <code>PropertyEditor</code> will behind the scenes convert into an actual <code>ExoticType</code> instance:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sample"</span> <span class="attr">class</span>=<span class="string">"example.DependsOnExoticType"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span> <span class="attr">value</span>=<span class="string">"aNameForExoticType"</span>/&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 字符串转对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The <code>PropertyEditor</code> implementation could look similar to this:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// converts string representation to ExoticType object</span></span><br><span class="line"><span class="keyword">package</span> example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExoticTypeEditor</span> <span class="keyword">extends</span> <span class="title">PropertyEditorSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 字符串转对象逻辑代码实现</span></span><br><span class="line">        setValue(<span class="keyword">new</span> ExoticType(text.toUpperCase()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Finally, we use <code>CustomEditorConfigurer</code> to register the new <code>PropertyEditor</code> with the <code>ApplicationContext</code>, which will then be able to use it as needed:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.CustomEditorConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customEditors"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"example.ExoticType"</span> <span class="attr">value</span>=<span class="string">"example.ExoticTypeEditor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-Using-PropertyEditorRegistrars"><a href="#3-2-Using-PropertyEditorRegistrars" class="headerlink" title="3.2 Using PropertyEditorRegistrars"></a><strong>3.2 Using PropertyEditorRegistrars</strong></h2><p>Another mechanism for registering property editors with the Spring container is to create and use a <code>PropertyEditorRegistrar</code>. </p>
<p>Using a <code>PropertyEditorRegistrar</code> is perhaps best illustrated with an example. First off, you need to create your own <code>PropertyEditorRegistrar</code> implementation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.foo.editors.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomPropertyEditorRegistrar</span> <span class="keyword">implements</span> <span class="title">PropertyEditorRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerCustomEditors</span><span class="params">(PropertyEditorRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// it is expected that new PropertyEditor instances are created</span></span><br><span class="line">        <span class="comment">// 不能通过构造参数改变注入字符串值</span></span><br><span class="line">        registry.registerCustomEditor(ExoticType<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">ExoticTypeEditor</span>())</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// you could register as many custom property editors as are required here...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>See also the <code>org.springframework.beans.support.ResourceEditorRegistrar</code> for an example <code>PropertyEditorRegistrar</code>implementation. Notice how in its implementation of the <code>registerCustomEditors(..)</code> method it creates new instances of each property editor.</p>
<p>Next we configure a <code>CustomEditorConfigurer</code> and inject an instance of our <code>CustomPropertyEditorRegistrar</code> into it:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.CustomEditorConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propertyEditorRegistrars"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"customPropertyEditorRegistrar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customPropertyEditorRegistrar"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"com.foo.editors.spring.CustomPropertyEditorRegistrar"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>Finally, and in a bit of a departure from the focus of this chapter, for those of you using <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yw==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#mvc">Spring’s MVC web framework<i class="fa fa-external-link"></i></span>, using <code>PropertyEditorRegistrars</code> in conjunction with data-binding <code>Controllers</code> (such as <code>SimpleFormController</code>) can be very convenient. Find below an example of using a <code>PropertyEditorRegistrar</code> in the implementation of an <code>initBinder(..)</code> method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterUserController</span> <span class="keyword">extends</span> <span class="title">SimpleFormController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PropertyEditorRegistrar customPropertyEditorRegistrar;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterUserController</span><span class="params">(PropertyEditorRegistrar propertyEditorRegistrar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customPropertyEditorRegistrar = propertyEditorRegistrar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            ServletRequestDataBinder binder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customPropertyEditorRegistrar.registerCustomEditors(binder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// other methods to do with registering a User</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This style of <code>PropertyEditor</code> registration can lead to concise code (the implementation of <code>initBinder(..)</code> is just one line long!), and allows common <code>PropertyEditor</code> registration code to be encapsulated in a class and then shared amongst as many<code>Controllers</code> as needed.</p>
<h1 id="4-类型转换"><a href="#4-类型转换" class="headerlink" title="4 类型转换"></a>4 类型转换</h1><h2 id="4-1-类型转换接口"><a href="#4-1-类型转换接口" class="headerlink" title="4.1 类型转换接口"></a>4.1 类型转换接口</h2><p>The SPI to implement type conversion logic is simple and strongly typed:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.core.convert.converter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">S</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">convert</span><span class="params">(S source)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例：String To Integer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.core.convert.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToInteger</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-ConverterFactory"><a href="#4-2-ConverterFactory" class="headerlink" title="4.2 ConverterFactory"></a>4.2 ConverterFactory</h2><p>When you need to centralize the conversion logic for an entire class hierarchy, for example, when converting from String to java.lang.Enum objects, implement <code>ConverterFactory</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.core.convert.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConverterFactory</span>&lt;<span class="title">S</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    &lt;T extends R&gt; <span class="function">Converter&lt;S, T&gt; <span class="title">getConverter</span><span class="params">(Class&lt;T&gt; targetType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Parameterize S to be the type you are converting from and R to be the base type defining the <em>range</em> of classes you can convert to. Then implement getConverter(Class<T>), where T is a subclass of R.</p>
<p>Consider the <code>StringToEnum</code> ConverterFactory as an example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.core.convert.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToEnumConverterFactory</span> <span class="keyword">implements</span> <span class="title">ConverterFactory</span>&lt;<span class="title">String</span>, <span class="title">Enum</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T extends Enum&gt; <span class="function">Converter&lt;String, T&gt; <span class="title">getConverter</span><span class="params">(Class&lt;T&gt; targetType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringToEnumConverter(targetType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToEnumConverter</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Enum</span>&gt; <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Class&lt;T&gt; enumType;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StringToEnumConverter</span><span class="params">(Class&lt;T&gt; enumType)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.enumType = enumType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (T) Enum.valueOf(<span class="keyword">this</span>.enumType, source.trim());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-3-GenericConverter"><a href="#4-3-GenericConverter" class="headerlink" title="4.3 GenericConverter"></a>4.3 GenericConverter</h2><p>当您需要复杂的转换器实现时，请考虑GenericConverter接口。由于具有更灵活但不那么强类型的签名，GenericConverter支持在多个源类型和目标类型之间进行转换。此外，GenericConverter允许您在实现转换逻辑时使用源和目标字段上下文。这种上下文允许类型转换由字段注释或在字段签名上声明的通用信息驱动。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.core.convert.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;ConvertiblePair&gt; <span class="title">getConvertibleTypes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">convert</span><span class="params">(Object source, TypeDescriptor sourceType, TypeDescriptor targetType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The source TypeDescriptor provides access to the source field holding the value being converted. The target TypeDescriptor provides access to the target field where the converted value will be set.</p>
<p>A good example of a GenericConverter is a converter that converts between a Java Array and a Collection. Such an ArrayToCollectionConverter introspects the field that declares the target Collection type to resolve the Collection’s element type. This allows each element in the source array to be converted to the Collection element type before the Collection is set on the target field.</p>
<h2 id="4-4-ConditionalGenericConverter"><a href="#4-4-ConditionalGenericConverter" class="headerlink" title="4.4 ConditionalGenericConverter"></a>4.4 ConditionalGenericConverter</h2><p>Sometimes you only want a <code>Converter</code> to execute if a specific condition holds true. For example, you might only want to execute a <code>Converter</code> if a specific annotation is present on the target field. Or you might only want to execute a <code>Converter</code> if a specific method, such as a <code>static valueOf</code> method, is defined on the target class. <code>ConditionalGenericConverter</code> is the union of the <code>GenericConverter</code> and <code>ConditionalConverter</code> interfaces that allows you to define such custom matching criteria:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConditionalConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(TypeDescriptor sourceType, TypeDescriptor targetType)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConditionalGenericConverter</span> <span class="keyword">extends</span> <span class="title">GenericConverter</span>, <span class="title">ConditionalConverter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A good example of a <code>ConditionalGenericConverter</code> is an EntityConverter that converts between an persistent entity identifier and an entity reference. Such a EntityConverter might only match if the target entity type declares a static finder method e.g.<code>findAccount(Long)</code>. You would perform such a finder method check in the implementation of <code>matches(TypeDescriptor, TypeDescriptor)</code>.</p>
<h2 id="4-5-ConversionService"><a href="#4-5-ConversionService" class="headerlink" title="4.5 ConversionService"></a>4.5 ConversionService</h2><h3 id="4-5-1-配置使用ConversionService"><a href="#4-5-1-配置使用ConversionService" class="headerlink" title="4.5.1 配置使用ConversionService"></a>4.5.1 配置使用ConversionService</h3><p>ConversionService是一个无状态对象，设计用于在应用程序启动时实例化，然后在多个线程之间共享。在Spring应用程序中，通常为每个Spring容器(或ApplicationContext)配置转换服务实例。该转换服务将由Spring接收，然后在框架需要执行类型转换时使用。您还可以将此转换服务注入任何bean并直接调用它。</p>
<p>If no ConversionService is registered with Spring, the original PropertyEditor-based system is used.</p>
<p>A default ConversionService can convert between strings, numbers, enums, collections, maps, and other common types. To supplement or override the default converters with your own custom converter(s), set the <code>converters</code> property. Property values may implement either of the Converter, ConverterFactory, or GenericConverter interfaces.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"example.MyCustomConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>If no ConversionService is registered with Spring, the original PropertyEditor-based system is used.</p>
<p>It is also common to use a ConversionService within a Spring MVC application. See Conversion and Formatting in the Spring MVC chapter.</p>
<p>In certain situations you may wish to apply formatting during conversion. See FormatterRegistry SPI for details on using FormattingConversionServiceFactoryBean.</p>
<h3 id="4-5-2-以编程方式使用ConversionService"><a href="#4-5-2-以编程方式使用ConversionService" class="headerlink" title="4.5.2 以编程方式使用ConversionService"></a>4.5.2 以编程方式使用ConversionService</h3><p>To work with a ConversionService instance programmatically, simply inject a reference to it like you would for any other bean:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">(ConversionService conversionService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.conversionService = conversionService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doIt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.conversionService.convert(...)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>For most use cases, the <code>convert</code> method specifying the <em>targetType</em> can be used but it will not work with more complex types such as a collection of a parameterized element. If you want to convert a <code>List</code> of <code>Integer</code> to a <code>List</code> of <code>String</code>programmatically, for instance, you need to provide a formal definition of the source and target types.</p>
<p>Fortunately, <code>TypeDescriptor</code> provides various options to make that straightforward:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DefaultConversionService cs = <span class="keyword">new</span> DefaultConversionService();</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; input = ....</span><br><span class="line">cs.convert(input,</span><br><span class="line">    TypeDescriptor.forObject(input), <span class="comment">// List&lt;Integer&gt; type descriptor</span></span><br><span class="line">    TypeDescriptor.collection(List<span class="class">.<span class="keyword">class</span>, <span class="title">TypeDescriptor</span>.<span class="title">valueOf</span>(<span class="title">String</span>.<span class="title">class</span>)))</span>;</span><br></pre></td></tr></table></figure>



<h1 id="5-Field-Formatting"><a href="#5-Field-Formatting" class="headerlink" title="5 Field Formatting"></a>5 Field Formatting</h1><h2 id="5-1-Formatter-SPI"><a href="#5-1-Formatter-SPI" class="headerlink" title="5.1 Formatter SPI"></a>5.1 Formatter SPI</h2><p>The Formatter SPI to implement field formatting logic is simple and strongly typed:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.format;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Formatter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Printer</span>&lt;<span class="title">T</span>&gt;, <span class="title">Parser</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Where Formatter extends from the Printer and Parser building-block interfaces:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">print</span><span class="params">(T fieldValue, Locale locale)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Parser</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">parse</span><span class="params">(String clientValue, Locale locale)</span> <span class="keyword">throws</span> ParseException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Consider <code>DateFormatter</code> as an example <code>Formatter</code> implementation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.format.datetime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatter</span> <span class="keyword">implements</span> <span class="title">Formatter</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pattern;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DateFormatter</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pattern = pattern;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// Printer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(Date date, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getDateFormat(locale).format(date);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// Parser</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String formatted, Locale locale)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (formatted.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getDateFormat(locale).parse(formatted);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DateFormat <span class="title">getDateFormat</span><span class="params">(Locale locale)</span> </span>&#123;</span><br><span class="line">        DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="keyword">this</span>.pattern, locale);</span><br><span class="line">        dateFormat.setLenient(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> dateFormat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-2-注解驱动格式化"><a href="#5-2-注解驱动格式化" class="headerlink" title="5.2 注解驱动格式化"></a>5.2 注解驱动格式化</h2><p>As you will see, field formatting can be configured by field type or annotation. To bind an Annotation to a formatter, implement AnnotationFormatterFactory:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.format;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnnotationFormatterFactory</span>&lt;<span class="title">A</span> <span class="keyword">extends</span> <span class="title">Annotation</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    Set&lt;Class&lt;?&gt;&gt; getFieldTypes();</span><br><span class="line"></span><br><span class="line">    Printer&lt;?&gt; getPrinter(A annotation, Class&lt;?&gt; fieldType);</span><br><span class="line"></span><br><span class="line">    Parser&lt;?&gt; getParser(A annotation, Class&lt;?&gt; fieldType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Parameterize A to be the field annotationType you wish to associate formatting logic with, for example <code>org.springframework.format.annotation.DateTimeFormat</code>. Have <code>getFieldTypes()</code> return the types of fields the annotation may be used on. Have <code>getPrinter()</code> return a Printer to print the value of an annotated field. Have <code>getParser()</code> return a Parser to parse a clientValue for an annotated field.</p>
<p>The example AnnotationFormatterFactory implementation below binds the @NumberFormat Annotation to a formatter. This annotation allows either a number style or pattern to be specified:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberFormatAnnotationFormatterFactory</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">AnnotationFormatterFactory</span>&lt;<span class="title">NumberFormat</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Class&lt;?&gt;&gt; getFieldTypes() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;Class&lt;?&gt;&gt;(asList(<span class="keyword">new</span> Class&lt;?&gt;[] &#123;</span><br><span class="line">            Short<span class="class">.<span class="keyword">class</span>, <span class="title">Integer</span>.<span class="title">class</span>, <span class="title">Long</span>.<span class="title">class</span>, <span class="title">Float</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">Double</span>.<span class="title">class</span>, <span class="title">BigDecimal</span>.<span class="title">class</span>, <span class="title">BigInteger</span>.<span class="title">class</span> &#125;))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Printer&lt;Number&gt; <span class="title">getPrinter</span><span class="params">(NumberFormat annotation, Class&lt;?&gt; fieldType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configureFormatterFrom(annotation, fieldType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Parser&lt;Number&gt; <span class="title">getParser</span><span class="params">(NumberFormat annotation, Class&lt;?&gt; fieldType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configureFormatterFrom(annotation, fieldType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Formatter&lt;Number&gt; <span class="title">configureFormatterFrom</span><span class="params">(NumberFormat annotation, Class&lt;?&gt; fieldType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!annotation.pattern().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NumberStyleFormatter(annotation.pattern());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Style style = annotation.style();</span><br><span class="line">            <span class="keyword">if</span> (style == Style.PERCENT) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PercentStyleFormatter();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (style == Style.CURRENCY) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> CurrencyStyleFormatter();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> NumberStyleFormatter();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To trigger formatting, simply annotate fields with @NumberFormat:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NumberFormat</span>(style=Style.CURRENCY)</span><br><span class="line">    <span class="keyword">private</span> BigDecimal decimal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-1-Format-Annotation-API"><a href="#5-2-1-Format-Annotation-API" class="headerlink" title="5.2.1 Format Annotation API"></a>5.2.1 Format Annotation API</h3><p>A portable format annotation API exists in the <code>org.springframework.format.annotation</code> package. Use @NumberFormat to format java.lang.Number fields. Use @DateTimeFormat to format java.util.Date, java.util.Calendar, java.util.Long, or Joda-Time fields.</p>
<p>The example below uses @DateTimeFormat to format a java.util.Date as a ISO Date (yyyy-MM-dd):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(iso=ISO.DATE)</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-3-FormatterRegistry-SPI"><a href="#5-3-FormatterRegistry-SPI" class="headerlink" title="5.3 FormatterRegistry SPI"></a>5.3 FormatterRegistry SPI</h2><p>The FormatterRegistry is an SPI for registering formatters and converters. <code>FormattingConversionService</code> is an implementation of FormatterRegistry suitable for most environments. This implementation may be configured programmatically or declaratively as a Spring bean using <code>FormattingConversionServiceFactoryBean</code>. Because this implementation also implements <code>ConversionService</code>, <strong>it can be directly configured for use with Spring’s DataBinder and the Spring Expression Language (SpEL).</strong></p>
<p>Review the FormatterRegistry SPI below:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.format;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FormatterRegistry</span> <span class="keyword">extends</span> <span class="title">ConverterRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addFormatterForFieldType</span><span class="params">(Class&lt;?&gt; fieldType, Printer&lt;?&gt; printer, Parser&lt;?&gt; parser)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addFormatterForFieldType</span><span class="params">(Class&lt;?&gt; fieldType, Formatter&lt;?&gt; formatter)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addFormatterForFieldType</span><span class="params">(Formatter&lt;?&gt; formatter)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addFormatterForAnnotation</span><span class="params">(AnnotationFormatterFactory&lt;?, ?&gt; factory)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>As shown above, Formatters can be registered by fieldType or annotation.</p>
<p>The FormatterRegistry SPI allows you to configure Formatting rules centrally, instead of duplicating such configuration across your Controllers. For example, you might want to enforce that all Date fields are formatted a certain way, or fields with a specific annotation are formatted in a certain way. <strong>With a shared FormatterRegistry, you define these rules once and they are applied whenever formatting is needed.</strong></p>
<h2 id="5-4-FormatterRegistrar-SPI"><a href="#5-4-FormatterRegistrar-SPI" class="headerlink" title="5.4 FormatterRegistrar SPI"></a>5.4 FormatterRegistrar SPI</h2><p>The FormatterRegistrar is an SPI for registering formatters and converters through the FormatterRegistry:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.format;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FormatterRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerFormatters</span><span class="params">(FormatterRegistry registry)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A FormatterRegistrar is useful when registering multiple related converters and formatters for a given formatting category, <strong>such as Date formatting</strong>. It can also be useful where declarative registration is insufficient. For example when a formatter needs to be indexed under a specific field type different from its own <T> or when registering a Printer/Parser pair. The next section provides more information on converter and formatter registration.</p>
<h2 id="5-5-Configuring-Formatting-in-Spring-MVC"><a href="#5-5-Configuring-Formatting-in-Spring-MVC" class="headerlink" title="5.5 Configuring Formatting in Spring MVC"></a>5.5 Configuring Formatting in Spring MVC</h2><p>See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctY29udmVyc2lvbg==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#mvc-config-conversion">Conversion and Formatting<i class="fa fa-external-link"></i></span> in the Spring MVC chapter.</p>
<h2 id="5-6-配置全局时间日期格式化"><a href="#5-6-配置全局时间日期格式化" class="headerlink" title="5.6 配置全局时间日期格式化"></a>5.6 配置全局时间日期格式化</h2><p>You will need to ensure that Spring does not register default formatters, and instead you should register all formatters manually. Use the <code>org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar</code> or<code>org.springframework.format.datetime.DateFormatterRegistrar</code> class depending on whether you use the Joda-Time library.</p>
<p>For example, the following Java configuration will register a global ‘ `yyyyMMdd’ format. <strong>This example does not depend on the Joda-Time library:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FormattingConversionService <span class="title">conversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the DefaultFormattingConversionService but do not register defaults</span></span><br><span class="line">        DefaultFormattingConversionService conversionService = <span class="keyword">new</span> DefaultFormattingConversionService(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Ensure @NumberFormat is still supported</span></span><br><span class="line">        conversionService.addFormatterForFieldAnnotation(<span class="keyword">new</span> NumberFormatAnnotationFormatterFactory());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register date conversion with a specific global format</span></span><br><span class="line">        DateFormatterRegistrar registrar = <span class="keyword">new</span> DateFormatterRegistrar();</span><br><span class="line">        registrar.setFormatter(<span class="keyword">new</span> DateFormatter(<span class="string">"yyyyMMdd"</span>));</span><br><span class="line">        registrar.registerFormatters(conversionService);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> conversionService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If you prefer XML based configuration you can use a <code>FormattingConversionServiceFactoryBean</code>. Here is the same example, <strong>this time using Joda Time</strong>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">    &lt;bean id="</span><span class="attr">conversionService</span>" <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"registerDefaultFormatters"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"formatters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.number.NumberFormatAnnotationFormatterFactory"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"formatterRegistrars"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dateFormatter"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"yyyyMMdd"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Joda-Time provides separate distinct types to represent <code>date</code>, <code>time</code> and <code>date-time</code> values. The <code>dateFormatter</code>, <code>timeFormatter</code> and <code>dateTimeFormatter</code> properties of the <code>JodaTimeFormatterRegistrar</code> should be used to configure the different formats for each type. The <code>DateTimeFormatterFactoryBean</code> provides a convenient way to create formatters</th>
</tr>
</thead>
<tbody><tr>
<td></td>
</tr>
</tbody></table>
<p>If you are using Spring MVC remember to explicitly configure the conversion service that is used. For Java based <code>@Configuration</code> this means extending the <code>WebMvcConfigurationSupport</code> class and overriding the <code>mvcConversionService()</code>method. For XML you should use the <code>&#39;conversion-service&#39;</code> attribute of the <code>mvc:annotation-driven</code> element. See <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL3dlYi5odG1sI212Yy1jb25maWctY29udmVyc2lvbg==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/web.html#mvc-config-conversion">Conversion and Formatting<i class="fa fa-external-link"></i></span> for details.</p>
<h1 id="6-Spring-Validation-注解"><a href="#6-Spring-Validation-注解" class="headerlink" title="6 Spring Validation 注解"></a>6 Spring Validation 注解</h1><p>To illustrate, consider a simple PersonForm model with two properties:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonForm</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JSR-303 allows you to define declarative validation constraints against such properties:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonForm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size</span>(max=<span class="number">64</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When an instance of this class is validated by a JSR-303 Validator, these constraints will be enforced.</p>
<p>For general information on JSR-303/JSR-349, see the <span class="exturl" data-url="aHR0cDovL2JlYW52YWxpZGF0aW9uLm9yZy8=" title="http://beanvalidation.org/">Bean Validation website<i class="fa fa-external-link"></i></span>. For information on the specific capabilities of the default reference implementation, see the <span class="exturl" data-url="aHR0cHM6Ly93d3cuaGliZXJuYXRlLm9yZy80MTIuaHRtbA==" title="https://www.hibernate.org/412.html">Hibernate Validator<i class="fa fa-external-link"></i></span> documentation. To learn how to setup a Bean Validation provider as a Spring bean, keep reading.</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>9-数据操作-BASE</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/9-%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="1-事务管理"><a href="#1-事务管理" class="headerlink" title="1 事务管理"></a>1 事务管理</h1><h2 id="1-1-理解事务管理的抽象类"><a href="#1-1-理解事务管理的抽象类" class="headerlink" title="1.1 理解事务管理的抽象类"></a>1.1 理解事务管理的抽象类</h2><p>The key to the Spring transaction abstraction is the notion(<strong>概念</strong>) of a <em>transaction strategy</em>. A transaction strategy is defined by the<code>org.springframework.transaction.PlatformTransactionManager</code> interface:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PlatformTransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>This is primarily a service provider interface (SPI), although it can be used <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2RhdGEtYWNjZXNzLmh0bWwjdHJhbnNhY3Rpb24tcHJvZ3JhbW1hdGljLXB0bQ==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/data-access.html#transaction-programmatic-ptm">programmatically<i class="fa fa-external-link"></i></span> from your application code. </p>
<p>Because <code>PlatformTransactionManager</code> is an <em>interface</em>, it can be easily mocked or stubbed as necessary. It is not tied to a lookup strategy such as JNDI. </p>
<p><code>PlatformTransactionManager</code> implementations are defined like any other object (or bean) in the Spring Framework IoC container. </p>
<p>This benefit alone makes Spring Framework transactions a worthwhile abstraction even when you work with JTA. <strong>Transactional code can be tested much more easily than if it used JTA directly.</strong></p>
<p>Again in keeping with Spring’s philosophy, the <code>TransactionException</code> that can be thrown by any of the <code>PlatformTransactionManager</code> interface’s methods is <em>unchecked</em> (that is, it extends the <code>java.lang.RuntimeException</code> class). Transaction infrastructure failures are almost invariably fatal（总是致命的）. In rare cases where application code can actually recover from a transaction failure, the application developer can still choose to catch and handle <code>TransactionException</code>. The salient point is that developers are not <em>forced</em> to do so(重要的一点是，开发人员不必被迫这样做。).</p>
<p>The <code>getTransaction(..)</code> method returns a <code>TransactionStatus</code> object, depending on a <code>TransactionDefinition</code> parameter. The returned <code>TransactionStatus</code> might represent a new transaction, or can represent an existing transaction if a matching transaction exists in the current call stack. The implication in this latter case is that, as with Java EE transaction contexts, a <code>TransactionStatus</code> is associated with a <em>thread</em> of execution(后一种情况的含义是，与Java EE事务上下文一样，事务状态与执行线程关联-》<strong>已存在事务</strong>。).</p>
<p>The <code>TransactionDefinition</code> interface specifies:</p>
<ul>
<li><em>Propagation</em>: Typically, all code executed within a transaction scope will run in that transaction. However, you have the option of specifying the behavior in the event that a transactional method is executed when a transaction context already exists. For example, code can continue running in the existing transaction (the common case); or the existing transaction can be suspended and a new transaction created. <em>Spring offers all of the transaction propagation options familiar from EJB CMT</em>. To read about the semantics of transaction propagation in Spring, see <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2RhdGEtYWNjZXNzLmh0bWwjdHgtcHJvcGFnYXRpb24=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/data-access.html#tx-propagation">Transaction propagation<i class="fa fa-external-link"></i></span>.</li>
<li><em>Isolation</em>: The degree to which this transaction is isolated from the work of other transactions. For example, can this transaction see uncommitted writes from other transactions?</li>
<li><em>Timeout</em>: How long this transaction runs before timing out and being rolled back automatically by the underlying transaction infrastructure.</li>
<li><em>Read-only status</em>: A read-only transaction can be used when your code reads but does not modify data. Read-only transactions can be a useful optimization in some cases, such as when you are using Hibernate.</li>
</ul>
<p>These settings reflect standard transactional concepts. If necessary, refer to resources that discuss transaction isolation levels and other core transaction concepts. <strong>Understanding these concepts</strong> is essential to using the Spring Framework or any transaction management solution.</p>
<p>The <code>TransactionStatus</code> interface provides a simple way for transactional code to control transaction execution and query transaction status. The concepts should be familiar, as they are common to all transaction APIs:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionStatus</span> <span class="keyword">extends</span> <span class="title">SavepointManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isNewTransaction</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasSavepoint</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRollbackOnly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRollbackOnly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCompleted</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Regardless of whether you opt for declarative or programmatic transaction management in Spring, defining the correct <code>PlatformTransactionManager</code> implementation is absolutely essential. You typically define this implementation through dependency injection.</p>
<p><code>PlatformTransactionManager</code> implementations normally require knowledge of the environment in which they work: JDBC, JTA, Hibernate, and so on.</p>
<p> The following examples show how you can define a local <code>PlatformTransactionManager</code> implementation. (This example works with plain JDBC.)</p>
<p>You define a JDBC <code>DataSource</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The related <code>PlatformTransactionManager</code> bean definition will then have a reference to the <code>DataSource</code> definition. It will look like this:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>JTA配置</strong></li>
</ul>
<p>If you use JTA in a Java EE container then you use a container <code>DataSource</code>, obtained through JNDI, in conjunction with Spring’s <code>JtaTransactionManager</code>. This is what the JTA and JNDI lookup version would look like:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/jee</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/jee/spring-jee.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">jee:jndi-lookup</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">jndi-name</span>=<span class="string">"jdbc/jpetstore"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.jta.JtaTransactionManager"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- other &lt;bean/&gt; definitions here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The <code>JtaTransactionManager</code> does not need to know about the <code>DataSource</code>, or any other specific resources, because it uses the container’s global transaction management infrastructure.</p>
<blockquote>
<p>If the <code>DataSource</code>, used by any non-JTA transaction manager, is looked up via JNDI and managed by a Java EE container, then it should be non-transactional because the Spring Framework, rather than the Java EE container, will manage the transactions.</p>
</blockquote>
<p>The <code>txManager</code> bean in this case is of the <code>HibernateTransactionManager</code> type. In the same way as the <code>DataSourceTransactionManager</code> needs a reference to the <code>DataSource</code>, the <code>HibernateTransactionManager</code> needs a reference to the <code>SessionFactory</code>.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingResources"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>org/springframework/samples/petclinic/hibernate/petclinic.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            hibernate.dialect=$&#123;hibernate.dialect&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>If you are using Hibernate and Java EE container-managed JTA transactions, then you should simply use the same <code>JtaTransactionManager</code> as in the previous JTA example for JDBC.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.jta.JtaTransactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果您使用JTA，那么不管您使用什么数据访问技术(JDBC、Hibernate JPA或任何其他受支持的技术)，您的事务管理器定义看起来都是一样的。这是因为JTA事务是全局事务，可以征募任何事务资源。</p>
<p>在所有这些情况下，应用程序代码都不需要更改。您可以仅通过更改配置来更改事务的管理方式，即使更改意味着从本地事务转移到全局事务，或者反之亦然。</p>
<h2 id="1-2-声明式事务管理"><a href="#1-2-声明式事务管理" class="headerlink" title="1.2 声明式事务管理"></a>1.2 声明式事务管理</h2><p>Spring框架的声明性事务管理是通过Spring面向方面编程(AOP)实现的，不过，由于事务方面代码是随Spring框架发行版而来的，并且可能以样板的方式使用，因此通常不需要理解AOP概念才能有效地使用这段代码。</p>
<p>Spring框架的声明性事务管理类似于EJB CMT，因为您可以从单个方法级别指定事务行为(或缺少事务行为)。如果需要，可以在事务上下文中进行setRollbackOnly()调用。这两种事务管理的区别是:</p>
<ul>
<li>Unlike EJB CMT, which is tied to JTA, the Spring Framework’s declarative transaction management works in any environment. It can work with JTA transactions or local transactions using JDBC, JPA or Hibernate by simply adjusting the configuration files.</li>
<li>You can apply the Spring Framework declarative transaction management to any class, not merely special classes such as EJBs.</li>
<li>The Spring Framework offers declarative <a href="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/data-access.html#transaction-declarative-rolling-back" target="_blank" rel="noopener"><em>rollback rules</em>, </a>a feature with no EJB equivalent. Both programmatic and declarative support for rollback rules is provided.</li>
<li>The Spring Framework enables you to customize transactional behavior, by using AOP. For example, you can insert custom behavior in the case of transaction rollback. You can also add arbitrary advice, along with the transactional advice. With EJB CMT, you cannot influence the container’s transaction management except with <code>setRollbackOnly()</code>.</li>
<li><strong>The Spring Framework does not support propagation of transaction contexts across remote calls</strong>, as do high-end application servers. If you need this feature, we recommend that you use EJB. However, consider carefully before using such a feature, because normally, one does not want transactions to span remote calls.</li>
</ul>
<p>回滚规则的概念非常重要:它们使您能够指定哪些异常(和Throwable)应该导致自动回滚。您可以在配置中声明地指定这个，而不是在Java代码中。因此，尽管您仍然可以在TransactionStatus对象上调用setRollbackOnly()来回滚当前事务，但通常您可以指定一个规则，MyApplicationException必须始终导致回滚。此选项的显著优点是业务对象不依赖于事务基础结构。例如，它们通常不需要导入Spring事务api或其他Spring api。</p>
<p>Although EJB container default behavior automatically rolls back the transaction on a <em>system exception</em> (usually a runtime exception), EJB CMT does not roll back the transaction automatically on an<em>application exception</em> (that is, a checked exception other than <code>java.rmi.RemoteException</code>). While the Spring default behavior for declarative transaction management follows EJB convention (roll back is automatic only on unchecked exceptions), it is often useful to customize this behavior.</p>
<h3 id="1-2-1-理解声明式事务管理实现"><a href="#1-2-1-理解声明式事务管理实现" class="headerlink" title="1.2.1 理解声明式事务管理实现"></a>1.2.1 理解声明式事务管理实现</h3><p>The most important concepts to grasp with regard to the Spring Framework’s declarative transaction support are that this support is enabled <a href="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#aop-understanding-aop-proxies" target="_blank" rel="noopener"><em>via AOP proxies</em></a>, and that the transactional advice is driven by <em>metadata</em> (currently XML- or annotation-based). The combination of AOP with transactional metadata yields an AOP proxy that uses a <code>TransactionInterceptor</code> in conjunction with an appropriate <code>PlatformTransactionManager</code> implementation to drive transactions <em>around method invocations</em>.</p>
<p>Conceptually, calling a method on a transactional proxy looks like this…</p>
<p><img src="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/images/tx.png" alt="tx"></p>
<h3 id="1-2-2-声明式事务管理实现实例"><a href="#1-2-2-声明式事务管理实现实例" class="headerlink" title="1.2.2 声明式事务管理实现实例"></a>1.2.2 声明式事务管理实现实例</h3><p>Consider the following interface, and its attendant（随从的） implementation. This example uses <code>Foo</code> and <code>Bar</code> classes as placeholders so that you can concentrate on the transaction usage without focusing on a particular domain model. </p>
<p>For the purposes of this example, the fact that the <code>DefaultFooService</code> class throws <code>UnsupportedOperationException</code> instances in the body of each implemented method is good; it allows you to see transactions created and then rolled back in response to the<code>UnsupportedOperationException</code> instance.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// the service interface that we want to make transactional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> x.y.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FooService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Foo <span class="title">getFoo</span><span class="params">(String fooName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Foo <span class="title">getFoo</span><span class="params">(String fooName, String barName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertFoo</span><span class="params">(Foo foo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateFoo</span><span class="params">(Foo foo)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// an implementation of the above interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> x.y.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultFooService</span> <span class="keyword">implements</span> <span class="title">FooService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Foo <span class="title">getFoo</span><span class="params">(String fooName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Foo <span class="title">getFoo</span><span class="params">(String fooName, String barName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFoo</span><span class="params">(Foo foo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFoo</span><span class="params">(Foo foo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Assume that the first two methods of the <code>FooService</code> interface, <code>getFoo(String)</code> and <code>getFoo(String, String)</code>, must execute in the context of a transaction with read-only semantics, and that the other methods, <code>insertFoo(Foo)</code> and <code>updateFoo(Foo)</code>, must execute in the context of a transaction with read-write semantics. The following configuration is explained in detail in the next few paragraphs.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- from the file 'context.xml' --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- this is the service object that we want to make transactional --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"fooService"</span> <span class="attr">class</span>=<span class="string">"x.y.service.DefaultFooService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- the transactional advice (what 'happens'; see the &lt;aop:advisor/&gt; bean below) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- the transactional semantics... --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- all methods starting with 'get' are read-only --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- other methods use the default transaction settings (see below) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ensure that the above transactional advice runs for any execution</span></span><br><span class="line"><span class="comment">        of an operation defined by the FooService interface --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"fooServiceOperation"</span> <span class="attr">expression</span>=<span class="string">"execution(* x.y.service.FooService.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"fooServiceOperation"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- don't forget the DataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"oracle.jdbc.driver.OracleDriver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:oracle:thin:@rj-t42:1521:elvis"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"scott"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"tiger"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- similarly, don't forget the PlatformTransactionManager --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- other &lt;bean/&gt; definitions here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Examine the preceding configuration. You want to make a service object, the <code>fooService</code> bean, transactional. The transaction semantics to apply are encapsulated in the <code>&lt;tx:advice/&gt;</code> definition. The <code>&lt;tx:advice/&gt;</code> definition reads as “<em>… all methods on starting with ‘get’ are to execute in the context of a read-only transaction, and all other methods are to execute with the default transaction semantics</em>“. The <code>transaction-manager</code> attribute of the <code>&lt;tx:advice/&gt;</code> tag is set to the name of the<code>PlatformTransactionManager</code> bean that is going to <em>drive</em> the transactions, in this case, the <code>txManager</code> bean.</p>
<ul>
<li>使用</li>
</ul>
<p>The above configuration will be used to create a transactional proxy around the object that is created from the <code>fooService</code> bean definition. The proxy will be configured with the transactional advice, so that when an appropriate method is invoked <em>on the proxy</em>, a transaction is started, suspended, marked as read-only, and so on, depending on the transaction configuration associated with that method. Consider the following program that test drives the above configuration:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Boot</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"context.xml"</span>, Boot<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        FooService fooService = (FooService) ctx.getBean(<span class="string">"fooService"</span>);</span><br><span class="line">        fooService.insertFoo (<span class="keyword">new</span> Foo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The output from running the preceding program will resemble the following. (The Log4J output and the stack trace from the UnsupportedOperationException thrown by the insertFoo(..) method of the DefaultFooService class have been truncated for clarity.)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- the Spring container is starting up... --&gt;</span></span><br><span class="line">[AspectJInvocationContextExposingAdvisorAutoProxyCreator] - Creating implicit proxy for bean 'fooService' with 0 common interceptors and 1 specific interceptors</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- the DefaultFooService is actually proxied --&gt;</span></span><br><span class="line">[JdkDynamicAopProxy] - Creating JDK dynamic proxy for [x.y.service.DefaultFooService]</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ... the insertFoo(..) method is now being invoked on the proxy --&gt;</span></span><br><span class="line">[TransactionInterceptor] - Getting transaction for x.y.service.FooService.insertFoo</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- the transactional advice kicks in here... --&gt;</span></span><br><span class="line">[DataSourceTransactionManager] - Creating new transaction with name [x.y.service.FooService.insertFoo]</span><br><span class="line">[DataSourceTransactionManager] - Acquired Connection [org.apache.commons.dbcp.PoolableConnection@a53de4] for JDBC transaction</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- the insertFoo(..) method from DefaultFooService throws an exception... --&gt;</span></span><br><span class="line">[RuleBasedTransactionAttribute] - Applying rules to determine whether transaction should rollback on java.lang.UnsupportedOperationException</span><br><span class="line">[TransactionInterceptor] - Invoking rollback for transaction on x.y.service.FooService.insertFoo due to throwable [java.lang.UnsupportedOperationException]</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- and the transaction is rolled back (by default, RuntimeException instances cause rollback) --&gt;</span></span><br><span class="line">[DataSourceTransactionManager] - Rolling back JDBC transaction on Connection [org.apache.commons.dbcp.PoolableConnection@a53de4]</span><br><span class="line">[DataSourceTransactionManager] - Releasing JDBC Connection after transaction</span><br><span class="line">[DataSourceUtils] - Returning JDBC Connection to DataSource</span><br><span class="line"></span><br><span class="line">Exception in thread "main" java.lang.UnsupportedOperationException at x.y.service.DefaultFooService.insertFoo(DefaultFooService.java:14)</span><br><span class="line"><span class="comment">&lt;!-- AOP infrastructure stack trace elements removed for clarity --&gt;</span></span><br><span class="line">at $Proxy0.insertFoo(Unknown Source)</span><br><span class="line">at Boot.main(Boot.java:11)</span><br></pre></td></tr></table></figure>

<h3 id="1-2-3-Rolling-back-a-declarative-transaction"><a href="#1-2-3-Rolling-back-a-declarative-transaction" class="headerlink" title="1.2.3 Rolling back a declarative transaction"></a>1.2.3 Rolling back a declarative transaction</h3><p>The previous section outlined the basics of how to specify transactional settings for classes, typically service layer classes, declaratively in your application. This section describes how you can control the rollback of transactions in a simple declarative fashion.</p>
<p>The recommended way to indicate to the Spring Framework’s transaction infrastructure that a transaction’s work is to be rolled back is to throw an <code>Exception</code> from code that is currently executing in the context of a transaction. The Spring Framework’s transaction infrastructure code will catch any unhandled <code>Exception</code> as it bubbles up the call stack, and make a determination whether to mark the transaction for rollback.</p>
<p>In its default configuration, the Spring Framework’s transaction infrastructure code <em>only</em> marks a transaction for rollback in the case of runtime, unchecked exceptions; that is, when the thrown exception is an instance or subclass of <code>RuntimeException</code>. (<code>Error</code>s will also - by default - result in a rollback). Checked exceptions that are thrown from a transactional method do <em>not</em>result in rollback in the default configuration.</p>
<p>You can configure exactly which <code>Exception</code> types mark a transaction for rollback, including checked exceptions. The following XML snippet demonstrates how you configure rollback for a checked, application-specific <code>Exception</code> type.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">rollback-for</span>=<span class="string">"NoProductInStockException"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>You can also specify ‘no rollback rules’, if you do <em>not</em> want a transaction rolled back when an exception is thrown. The following example tells the Spring Framework’s transaction infrastructure to commit the attendant transaction even in the face of an unhandled <code>InstrumentNotFoundException</code>.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"updateStock"</span> <span class="attr">no-rollback-for</span>=<span class="string">"InstrumentNotFoundException"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>When the Spring Framework’s transaction infrastructure catches an exception and it consults configured rollback rules to determine whether to mark the transaction for rollback, the <em>strongest</em> matching rule wins. So in the case of the following configuration, any exception other than an <code>InstrumentNotFoundException</code> results in a rollback of the attendant transaction.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">rollback-for</span>=<span class="string">"Throwable"</span> <span class="attr">no-rollback-for</span>=<span class="string">"InstrumentNotFoundException"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>You can also indicate a required rollback <em>programmatically</em>. Although very simple, this process is quite invasive, and tightly couples your code to the Spring Framework’s transaction infrastructure:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resolvePosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// some business logic...</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoProductInStockException ex) &#123;</span><br><span class="line">        <span class="comment">// trigger rollback programmatically</span></span><br><span class="line">        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>强烈建议您尽可能使用声明性方法回滚。如果您确实需要的话，可以使用编程回滚，但是它的使用与实现干净的基于pojo的体系结构背道而驰。</p>
<h3 id="1-2-4-Configuring-different-transactional-semantics-for-different-beans"><a href="#1-2-4-Configuring-different-transactional-semantics-for-different-beans" class="headerlink" title="1.2.4 Configuring different transactional semantics for different beans"></a>1.2.4 Configuring different transactional semantics for different beans</h3><p>Consider the scenario where you have a number of service layer objects, and you want to apply a <em>totally different</em> transactional configuration to each of them. You do this by defining distinct <code>&lt;aop:advisor/&gt;</code> elements with differing <code>pointcut</code> and <code>advice-ref</code> attribute values.</p>
<p>As a point of comparison, first assume that all of your service layer classes are defined in a root <code>x.y.service</code> package. To make all beans that are instances of classes defined in that package (or in subpackages) and that have names ending in <code>Service</code> have the default transactional configuration, you would write the following:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"serviceOperation"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">expression</span>=<span class="string">"execution(* x.y.service..*Service.*(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">"serviceOperation"</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- these two beans will be transactional... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"fooService"</span> <span class="attr">class</span>=<span class="string">"x.y.service.DefaultFooService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">class</span>=<span class="string">"x.y.service.extras.SimpleBarService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ... and these two beans won't --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"anotherService"</span> <span class="attr">class</span>=<span class="string">"org.xyz.SomeService"</span>/&gt;</span> <span class="comment">&lt;!-- (not in the right package) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"barManager"</span> <span class="attr">class</span>=<span class="string">"x.y.service.SimpleBarManager"</span>/&gt;</span> <span class="comment">&lt;!-- (doesn't end in 'Service') --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- other transaction infrastructure beans such as a PlatformTransactionManager omitted... --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The following example shows how to configure two distinct beans with totally different transactional settings.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">    xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">    xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">    xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/tx</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line"></span><br><span class="line">        &lt;aop:pointcut id=<span class="string">"defaultServiceOperation"</span></span><br><span class="line">                expression=<span class="string">"execution(* x.y.service.*Service.*(..))"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;aop:pointcut id=<span class="string">"noTxServiceOperation"</span></span><br><span class="line">                expression=<span class="string">"execution(* x.y.service.ddl.DefaultDdlManager.*(..))"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;aop:advisor pointcut-ref=<span class="string">"defaultServiceOperation"</span> advice-ref=<span class="string">"defaultTxAdvice"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;aop:advisor pointcut-ref=<span class="string">"noTxServiceOperation"</span> advice-ref=<span class="string">"noTxAdvice"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="function"><span class="keyword">this</span> bean will be <span class="title">transactional</span> <span class="params">(see the <span class="string">'defaultServiceOperation'</span> pointcut)</span> --&gt;</span></span><br><span class="line"><span class="function">    &lt;bean id</span>=<span class="string">"fooService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"x.y.service.DefaultFooService"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="keyword">this</span> bean will also be transactional, but with totally different transactional settings --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"anotherFooService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"x.y.service.ddl.DefaultDdlManager"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tx:advice id=<span class="string">"defaultTxAdvice"</span>&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">            &lt;tx:method name=<span class="string">"get*"</span> read-only=<span class="string">"true"</span>/&gt;</span><br><span class="line">            &lt;tx:method name=<span class="string">"*"</span>/&gt;</span><br><span class="line">        &lt;/tx:attributes&gt;</span><br><span class="line">    &lt;/tx:advice&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tx:advice id=<span class="string">"noTxAdvice"</span>&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">            &lt;tx:method name=<span class="string">"*"</span> propagation=<span class="string">"NEVER"</span>/&gt;</span><br><span class="line">        &lt;/tx:attributes&gt;</span><br><span class="line">    &lt;/tx:advice&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- other transaction infrastructure beans such as a PlatformTransactionManager omitted... --&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-5-tx-advice-settings"><a href="#1-2-5-tx-advice-settings" class="headerlink" title="1.2.5 tx:advice/ settings"></a>1.2.5 <span class="exturl" data-url="dHg6YWR2aWNlLw==" title="tx:advice/">tx:advice/<i class="fa fa-external-link"></i></span> settings</h3><p>This section summarizes the various transactional settings that can be specified using the <code>&lt;tx:advice/&gt;</code> tag. The default <code>&lt;tx:advice/&gt;</code> settings are:</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2RhdGEtYWNjZXNzLmh0bWwjdHgtcHJvcGFnYXRpb24=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/data-access.html#tx-propagation">Propagation setting<i class="fa fa-external-link"></i></span> is <code>REQUIRED.</code></li>
<li>Isolation level is <code>DEFAULT.</code></li>
<li>Transaction is read/write.</li>
<li>Transaction timeout defaults to the default timeout of the underlying transaction system, or none if timeouts are not supported.</li>
<li>Any <code>RuntimeException</code> triggers rollback, and any checked <code>Exception</code> does not.</li>
</ul>
<p>You can change these default settings; the various attributes of the <code>&lt;tx:method/&gt;</code> tags that are nested within <code>&lt;tx:advice/&gt;</code> and <code>&lt;tx:attributes/&gt;</code> tags are summarized below:</p>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>Required?</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>name</code></td>
<td>Yes</td>
<td></td>
<td>Method name(s) with which the transaction attributes are to be associated. The wildcard (<em>) character can be used to associate the same transaction attribute settings with a number of methods; for example, `get</em><code>,</code>handle<em><code>,</code>on</em>Event`, and so forth.</td>
</tr>
<tr>
<td><code>propagation</code></td>
<td>No</td>
<td>REQUIRED</td>
<td>Transaction propagation behavior.</td>
</tr>
<tr>
<td><code>isolation</code></td>
<td>No</td>
<td>DEFAULT</td>
<td>Transaction isolation level. Only applicable to propagation REQUIRED or REQUIRES_NEW.</td>
</tr>
<tr>
<td><code>timeout</code></td>
<td>No</td>
<td>-1</td>
<td>Transaction timeout (seconds). Only applicable to propagation REQUIRED or REQUIRES_NEW.</td>
</tr>
<tr>
<td><code>read-only</code></td>
<td>No</td>
<td>false</td>
<td>Read/write vs. read-only transaction. Only applicable to REQUIRED or REQUIRES_NEW.</td>
</tr>
<tr>
<td><code>rollback-for</code></td>
<td>No</td>
<td></td>
<td><code>Exception(s)</code> that trigger rollback; comma-delimited. For example,<code>com.foo.MyBusinessException,ServletException.</code></td>
</tr>
<tr>
<td><code>no-rollback-for</code></td>
<td>No</td>
<td></td>
<td><code>Exception(s)</code> that do <em>not</em> trigger rollback; comma-delimited. For example,<code>com.foo.MyBusinessException,ServletException.</code></td>
</tr>
</tbody></table>
<h3 id="1-2-6-Using-Transactional-注解方式"><a href="#1-2-6-Using-Transactional-注解方式" class="headerlink" title="1.2.6 Using @Transactional-注解方式"></a>1.2.6 Using @Transactional-注解方式</h3><p>In addition to the XML-based declarative approach to transaction configuration, you can use an annotation-based approach. Declaring transaction semantics directly in the Java source code puts the declarations much closer to the affected code. There is not much danger of undue coupling, because code that is meant to be used transactionally is almost always deployed that way anyway.</p>
<p>The ease-of-use afforded by the use of the <code>@Transactional</code> annotation is best illustrated with an example, which is explained in the text that follows. Consider the following class definition:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// the service class that we want to make transactional</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultFooService</span> <span class="keyword">implements</span> <span class="title">FooService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Foo <span class="title">getFoo</span><span class="params">(String fooName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Foo <span class="title">getFoo</span><span class="params">(String fooName, String barName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertFoo</span><span class="params">(Foo foo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateFoo</span><span class="params">(Foo foo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When the above POJO is defined as a bean in a Spring IoC container, the bean instance can be made transactional by adding merely <em>one</em> line of XML configuration:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- from the file 'context.xml' --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- this is the service object that we want to make transactional --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"fooService"</span> <span class="attr">class</span>=<span class="string">"x.y.service.DefaultFooService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- enable the configuration of transactional behavior based on annotations --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>/&gt;</span><span class="comment">&lt;!-- a PlatformTransactionManager is still required --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- (this dependency is defined somewhere else) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- other &lt;bean/&gt; definitions here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>The <code>@EnableTransactionManagement</code> annotation provides equivalent support if you are using Java based configuration. Simply add the annotation to a <code>@Configuration</code> class.</strong> </p>
<p>可以将@Transactional注释放在接口定义、接口上的方法、类定义或类上的公共方法之前。然而，仅存在@Transactional注释不足以激活事务行为。@Transactional注释只是元数据，可以由一些支持@Transactional的运行时基础结构使用，可以使用元数据配置具有事务行为的适当bean。在前面的示例中，元素切换到事务行为。</p>
<ul>
<li><strong>仅仅扫描到@Transaction注解的类并加入到同一个容器中</strong></li>
</ul>
<p><code>@EnableTransactionManagement</code> and <code>&lt;tx:annotation-driven/&gt;</code> only looks for <code>@Transactional</code> on beans in the same application context they are defined in. This means that, if you put annotation driven configuration in a <code>WebApplicationContext</code> for a <code>DispatcherServlet</code>, it only checks for <code>@Transactional</code> beans in your controllers, and not your services. </p>
<p>The most derived location takes precedence when evaluating the transactional settings for a method. In the case of the following example, the <code>DefaultFooService</code> class is annotated at the class level with the settings for a read-only transaction, but the <code>@Transactional</code> annotation on the <code>updateFoo(Foo)</code> method in the same class takes precedence over the transactional settings defined at the class level.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultFooService</span> <span class="keyword">implements</span> <span class="title">FooService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Foo <span class="title">getFoo</span><span class="params">(String fooName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// these settings have precedence for this method 优先</span></span><br><span class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>, propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFoo</span><span class="params">(Foo foo)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-6-1-Transactional-settings"><a href="#1-2-6-1-Transactional-settings" class="headerlink" title="1.2.6.1 @Transactional settings"></a>1.2.6.1 @Transactional settings</h4><p>The <code>@Transactional</code> annotation is metadata that specifies that an interface, class, or method must have transactional semantics; for example, “<em>start a brand new read-only transaction when this method is invoked, suspending any existing transaction</em>“. The default <code>@Transactional</code> settings are as follows:</p>
<ul>
<li>Propagation setting is <code>PROPAGATION_REQUIRED.</code></li>
<li>Isolation level is <code>ISOLATION_DEFAULT.</code></li>
<li>Transaction is read/write.</li>
<li>Transaction timeout defaults to the default timeout of the underlying transaction system, or to none if timeouts are not supported.</li>
<li>Any <code>RuntimeException</code> triggers rollback, and any checked <code>Exception</code> does not.</li>
</ul>
<p>These default settings can be changed; the various properties of the <code>@Transactional</code> annotation are summarized in the following table:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2RhdGEtYWNjZXNzLmh0bWwjdHgtbXVsdGlwbGUtdHgtbWdycy13aXRoLWF0dHJhbnNhY3Rpb25hbA==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/data-access.html#tx-multiple-tx-mgrs-with-attransactional">value<i class="fa fa-external-link"></i></span></td>
<td>String</td>
<td>Optional qualifier specifying the transaction manager to be used.</td>
</tr>
<tr>
<td><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2RhdGEtYWNjZXNzLmh0bWwjdHgtcHJvcGFnYXRpb24=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/data-access.html#tx-propagation">propagation<i class="fa fa-external-link"></i></span></td>
<td>enum: <code>Propagation</code></td>
<td>Optional propagation setting.</td>
</tr>
<tr>
<td><code>isolation</code></td>
<td>enum: <code>Isolation</code></td>
<td>Optional isolation level. Only applicable to propagation REQUIRED or REQUIRES_NEW.</td>
</tr>
<tr>
<td><code>timeout</code></td>
<td>int (in seconds granularity)</td>
<td>Optional transaction timeout. Only applicable to propagation REQUIRED or REQUIRES_NEW.</td>
</tr>
<tr>
<td><code>readOnly</code></td>
<td>boolean</td>
<td>Read/write vs. read-only transaction. Only applicable to REQUIRED or REQUIRES_NEW.</td>
</tr>
<tr>
<td><code>rollbackFor</code></td>
<td>Array of <code>Class</code> objects, which must be derived from <code>Throwable.</code></td>
<td>Optional array of exception classes that <em>must</em> cause rollback.</td>
</tr>
<tr>
<td><code>rollbackForClassName</code></td>
<td>Array of class names. Classes must be derived from <code>Throwable.</code></td>
<td>Optional array of names of exception classes that <em>must</em> cause rollback.</td>
</tr>
<tr>
<td><code>noRollbackFor</code></td>
<td>Array of <code>Class</code> objects, which must be derived from <code>Throwable.</code></td>
<td>Optional array of exception classes that <em>must not</em> cause rollback.</td>
</tr>
<tr>
<td><code>noRollbackForClassName</code></td>
<td>Array of <code>String</code> class names, which must be derived from <code>Throwable.</code></td>
<td>Optional array of names of exception classes that <em>must not</em> cause rollback.</td>
</tr>
</tbody></table>
<p>Currently you cannot have explicit control over the name of a transaction, where ‘name’ means the transaction name that will be shown in a transaction monitor, if applicable (for example, WebLogic’s transaction monitor), and in logging output. For declarative transactions, the transaction name is always the fully-qualified class name + “.” + method name of the transactionally-advised class. For example, if the <code>handlePayment(..)</code> method of the <code>BusinessService</code> class started a transaction, the name of the transaction would be: <code>com.foo.BusinessService.handlePayment</code>.</p>
<h4 id="1-2-6-2-Multiple-Transaction-Managers-with-Transactional"><a href="#1-2-6-2-Multiple-Transaction-Managers-with-Transactional" class="headerlink" title="1.2.6.2 Multiple Transaction Managers with @Transactional"></a>1.2.6.2 Multiple Transaction Managers with @Transactional</h4><p>Most Spring applications only need a single transaction manager, but there may be situations where you want multiple independent transaction managers in a single application. The value attribute of the <code>@Transactional</code> annotation can be used to optionally specify the identity of the <code>PlatformTransactionManager</code> to be used. This can either be the bean name or the qualifier value of the transaction manager bean. For example, using the qualifier notation, the following Java code</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(<span class="string">"order"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSomething</span><span class="params">(String name)</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(<span class="string">"account"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>could be combined with the following transaction manager bean declarations in the application context.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager1"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">qualifier</span> <span class="attr">value</span>=<span class="string">"order"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager2"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">qualifier</span> <span class="attr">value</span>=<span class="string">"account"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>In this case, the two methods on <code>TransactionalService</code> will run under separate transaction managers, differentiated by the “order” and “account” qualifiers. The default <code>&lt;tx:annotation-driven&gt;</code> target bean name <code>transactionManager</code> will still be used if no specifically qualified PlatformTransactionManager bean is found.</p>
<h4 id="1-2-6-3-Custom-shortcut-annotations"><a href="#1-2-6-3-Custom-shortcut-annotations" class="headerlink" title="1.2.6.3 Custom shortcut annotations"></a>1.2.6.3 Custom shortcut annotations</h4><p>If you find you are repeatedly using the same attributes with <code>@Transactional</code> on many different methods, then <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNiZWFucy1tZXRhLWFubm90YXRpb25z" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#beans-meta-annotations">Spring’s meta-annotation support<i class="fa fa-external-link"></i></span> allows you to define custom shortcut annotations for your specific use cases. For example, defining the following annotations</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Transactional</span>(<span class="string">"order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OrderTx &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Transactional</span>(<span class="string">"account"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AccountTx &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>allows us to write the example from the previous section as</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OrderTx</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSomething</span><span class="params">(String name)</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AccountTx</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Here we have used the syntax to define the transaction manager qualifier, but could also have included propagation behavior, rollback rules, timeouts etc.</p>
<h3 id="1-2-7-事务传播"><a href="#1-2-7-事务传播" class="headerlink" title="1.2.7 事务传播"></a>1.2.7 事务传播</h3><p>本节描述Spring中事务传播的一些语义。请注意，本节并不是对事务传播的介绍;相反，它详细介绍了一些关于Spring中的事务传播的语义。</p>
<p>在spring管理的事务中，请注意物理事务和逻辑事务之间的差异，以及传播设置如何应用于这种差异。</p>
<h4 id="1-2-7-1-Required"><a href="#1-2-7-1-Required" class="headerlink" title="1.2.7.1 Required"></a>1.2.7.1 Required</h4><p><img src="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/images/tx_prop_required.png" alt="tx prop required"></p>
<p><strong>PROPAGATION_REQUIRED</strong></p>
<p>PROPAGATION_REQUIRED强制一个物理事务:如果没有事务存在，则在本地执行当前作用域，或者参与为更大作用域定义的现有“外部”事务。</p>
<p>在相同线程内的公共调用堆栈安排中，这是一个很好的默认设置，例如，一个服务facade委托给多个存储库方法，其中所有底层资源都必须参与服务级事务。</p>
<p>默认情况下，<strong>参与的事务将连接外部作用域的特征</strong>，静默地忽略本地隔离级别、超时值或只读标志(如果有的话)。如果您希望在参与具有不同隔离级别的现有事务时拒绝隔离级别声明，请考虑将事务管理器上的“validateExistingTransactions”标记切换为“true”。这种非宽松模式还将拒绝只读不匹配，即试图参与只读外部作用域的内部读写事务。</p>
<p>当传播设置为PROPAGATION_REQUIRED时，为应用该设置的每个方法创建一个逻辑事务作用域。每个这样的逻辑事务作用域都可以单独确定只回滚的状态，外部事务作用域在逻辑上独立于内部事务作用域。当然，对于标准的PROPAGATION_REQUIRED行为，所有这些作用域将映射到相同的物理事务。因此，内部事务作用域中仅回滚的标记集确实会影响外部事务实际提交的机会(正如您所期望的那样)</p>
<p>但是，在内部事务作用域设置了只回滚标记的情况下，外部事务还没有决定回滚本身，因此回滚(由内部事务作用域无声触发)是意外的。在这一点上会抛出一个相应的出人意料的drollbackexception。这是预期的行为，因此，事务的调用者永远不能被误导，以为提交是在实际没有执行时执行的。因此，如果一个内部事务(外部调用者并不知道)悄无声息地将一个事务标记为仅回滚，外部调用者仍然调用commit。外部调用者需要接收到一个出人意料的drollbackexception异常，以清楚地表明执行了回滚。</p>
<h4 id="1-2-7-2-RequiresNew"><a href="#1-2-7-2-RequiresNew" class="headerlink" title="1.2.7.2 RequiresNew"></a>1.2.7.2 RequiresNew</h4><p><img src="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/images/tx_prop_requires_new.png" alt="tx prop requires new"></p>
<h4 id="1-2-7-2-PROPAGATION-REQUIRES-NEW"><a href="#1-2-7-2-PROPAGATION-REQUIRES-NEW" class="headerlink" title="1.2.7.2 PROPAGATION_REQUIRES_NEW"></a>1.2.7.2 PROPAGATION_REQUIRES_NEW</h4><p><code>PROPAGATION_REQUIRES_NEW</code>, in contrast to <code>PROPAGATION_REQUIRED</code>, always uses an <em>independent</em> physical transaction for each affected transaction scope, never participating in an existing transaction for an outer scope. In such an arrangement, the underlying resource transactions are different and hence can commit or roll back independently, with an outer transaction not affected by an inner transaction’s rollback status, and with an inner transaction’s locks released immediately after its completion. Such an independent inner transaction may also declare its own isolation level, timeout and read-only settings, never inheriting an outer transaction’s characteristics.</p>
<h4 id="1-2-7-4-Nested"><a href="#1-2-7-4-Nested" class="headerlink" title="1.2.7.4 Nested"></a>1.2.7.4 Nested</h4><p><code>PROPAGATION_NESTED</code> uses a <em>single</em> physical transaction with multiple savepoints that it can roll back to. Such partial rollbacks allow an inner transaction scope to trigger a rollback <em>for its scope</em>, with the outer transaction being able to continue the physical transaction despite some operations having been rolled back. This setting is typically mapped onto JDBC savepoints, so will only work with JDBC resource transactions. See Spring’s <code>DataSourceTransactionManager</code>.</p>
<h2 id="1-3-编程式事务"><a href="#1-3-编程式事务" class="headerlink" title="1.3 编程式事务"></a>1.3 编程式事务</h2><h2 id="1-4-编程式VS声明式"><a href="#1-4-编程式VS声明式" class="headerlink" title="1.4 编程式VS声明式"></a>1.4 编程式VS声明式</h2><p>只有在有少量事务操作的情况下，程序化事务管理通常是一个好主意。例如，如果您的web应用程序只对某些更新操作需要事务，您可能不希望使用Spring或任何其他技术来设置事务代理。在这种情况下，使用TransactionTemplate可能是一种很好的方法。能够显式地设置事务名称也是只能使用事务管理的编程方法才能做到的事情。</p>
<p>另一方面，如果应用程序有许多事务操作，那么声明性事务管理通常是值得的。它将事务管理排除在业务逻辑之外，并且配置起来并不困难。当使用Spring框架而不是EJB CMT时，声明性事务管理的配置成本大大降低.</p>
<h2 id="1-5-Transaction-bound-event"><a href="#1-5-Transaction-bound-event" class="headerlink" title="1.5 Transaction bound event"></a>1.5 Transaction bound event</h2><p>As of Spring 4.2, the listener of an event can be bound to a phase of the transaction. The typical example is to handle the event when the transaction has completed successfully: this allows events to be used with more flexibility when the outcome of the current transaction actually matters to the listener.</p>
<p>Registering a regular event listener is done via the <code>@EventListener</code> annotation. If you need to bind it to the transaction use <code>@TransactionalEventListener</code>. When you do so, the listener will be bound to the commit phase of the transaction by default.</p>
<p>Let’s take an example to illustrate this concept. Assume that a component publishes an order created event and we want to define a listener that should only handle that event once the transaction in which it has been published has committed successfully:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TransactionalEventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleOrderCreatedEvent</span><span class="params">(CreationEvent&lt;Order&gt; creationEvent)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <code>TransactionalEventListener</code> annotation exposes a <code>phase</code> attribute that allows us to customize which phase of the transaction the listener should be bound to. The valid phases are <code>BEFORE_COMMIT</code>, <code>AFTER_COMMIT</code> (default), <code>AFTER_ROLLBACK</code> and <code>AFTER_COMPLETION</code> that aggregates the transaction completion (be it a commit or a rollback).</p>
<p>If no transaction is running, the listener is not invoked at all since we can’t honor the required semantics. It is however possible to override that behaviour by setting the <code>fallbackExecution</code> attribute of the annotation to <code>true</code>.</p>
<h1 id="2-Dao-Support"><a href="#2-Dao-Support" class="headerlink" title="2 Dao Support"></a>2 Dao Support</h1><p>The Data Access Object (DAO) support in Spring is aimed at making it easy to work with data access technologies like JDBC, Hibernate or JPA in a consistent way. This allows one to switch between the aforementioned persistence technologies fairly easily and it also allows one to code without worrying about catching exceptions that are specific to each technology.</p>
<h2 id="2-1-一致的层级异常结构"><a href="#2-1-一致的层级异常结构" class="headerlink" title="2.1 一致的层级异常结构"></a>2.1 一致的层级异常结构</h2><p>Spring中的数据访问对象(Data Access Object, DAO)支持以一致的方式使用JDBC、Hibernate或JPA等数据访问技术。这允许您相当容易地在上述持久性技术之间进行切换，还允许您不必担心捕获特定于每种技术的异常。</p>
<p>除了JDBC异常，Spring还可以包装特定于hibernate的异常，将其转换为一组集中的运行时异常(JPA异常也是如此)。这允许您只在适当的层中处理大多数不可恢复的持久性异常，而不需要在DAOs中使用恼人的样板式catch-and-throw块和异常声明。(在任何需要的地方，仍然可以捕获和处理异常。)如上所述，JDBC异常(包括特定于数据库的方言)也被转换为相同的层次结构，这意味着可以在一致的编程模型中使用JDBC执行一些操作。</p>
<p>上述情况适用于各种ORM框架的spring支持中的各种模板类。如果使用基于拦截的类，那么应用程序必须关心如何处理hibernate异常和持久化异常本身，最好分别通过委托SessionFactoryUtils的convertHibernateAccessException(..)或convertJpaAccessException()方法来处理。这些方法将异常转换为与org.springframework中的异常兼容的异常。dao异常层次结构。由于持久化异常是未经检查的，因此它们也可能被抛出，但会牺牲泛型DAO抽象的异常。</p>
<h2 id="2-2-注解配置Dao"><a href="#2-2-注解配置Dao" class="headerlink" title="2.2 注解配置Dao"></a>2.2 注解配置Dao</h2><p>The best way to guarantee that your Data Access Objects (DAOs) or repositories provide exception translation is to use the <code>@Repository</code> annotation. This annotation also allows the component scanning support to find and configure your DAOs and repositories without having to provide XML configuration entries for them.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeMovieFinder</span> <span class="keyword">implements</span> <span class="title">MovieFinder</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Any DAO or repository implementation will need to access to a persistence resource, depending on the persistence technology used;</p>
<p> <strong>for example, a JDBC-based repository will need access to a JDBC <code>DataSource</code>;</strong> </p>
<p><strong>a JPA-based repository will need access to an <code>EntityManager</code>.</strong> </p>
<p>The easiest way to accomplish this is to have this resource dependency injected using one of the <code>@Autowired,</code>, <code>@Inject</code>, <code>@Resource</code> or <code>@PersistenceContext</code> annotations. Here is an example for a JPA repository:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaMovieFinder</span> <span class="keyword">implements</span> <span class="title">MovieFinder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PersistenceContext</span></span><br><span class="line">    <span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If you are using the classic Hibernate APIs than you can inject the SessionFactory:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateMovieFinder</span> <span class="keyword">implements</span> <span class="title">MovieFinder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SessionFactory sessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSessionFactory</span><span class="params">(SessionFactory sessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sessionFactory = sessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Last example we will show here is for typical JDBC support. You would have the <code>DataSource</code> injected into an initialization method where you would create a <code>JdbcTemplate</code> and other data access support classes like <code>SimpleJdbcCall</code> etc using this <code>DataSource</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcMovieFinder</span> <span class="keyword">implements</span> <span class="title">MovieFinder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-Data-access-with-JDBC"><a href="#3-Data-access-with-JDBC" class="headerlink" title="3 Data access with JDBC"></a>3 Data access with JDBC</h1><h2 id="3-1-JDBC-Support"><a href="#3-1-JDBC-Support" class="headerlink" title="3.1 JDBC Support"></a>3.1 JDBC Support</h2><table>
<thead>
<tr>
<th>Action</th>
<th>Spring</th>
<th>You</th>
</tr>
</thead>
<tbody><tr>
<td>Define connection parameters.</td>
<td></td>
<td>X</td>
</tr>
<tr>
<td>Open the connection.</td>
<td>X</td>
<td></td>
</tr>
<tr>
<td>Specify the SQL statement.</td>
<td></td>
<td>X</td>
</tr>
<tr>
<td>Declare parameters and provide parameter values</td>
<td></td>
<td>X</td>
</tr>
<tr>
<td>Prepare and execute the statement.</td>
<td>X</td>
<td></td>
</tr>
<tr>
<td>Set up the loop to iterate through the results (if any).</td>
<td>X</td>
<td></td>
</tr>
<tr>
<td>Do the work for each iteration.</td>
<td></td>
<td>X</td>
</tr>
<tr>
<td>Process any exception.</td>
<td>X</td>
<td></td>
</tr>
<tr>
<td>Handle transactions.</td>
<td>X</td>
<td></td>
</tr>
<tr>
<td>Close the connection, statement and resultset.</td>
<td>X</td>
<td></td>
</tr>
</tbody></table>
<p>Spring框架处理了所有底层细节，这些细节使JDBC成为一个乏味的API。</p>
<h2 id="3-2-访问JDBC数据库的方式"><a href="#3-2-访问JDBC数据库的方式" class="headerlink" title="3.2 访问JDBC数据库的方式"></a>3.2 访问JDBC数据库的方式</h2><p>You can choose among several approaches to form the basis for your JDBC database access. In addition to three flavors of the JdbcTemplate, a new SimpleJdbcInsert and SimplejdbcCall approach optimizes database metadata, and the RDBMS Object style takes a more object-oriented approach similar to that of JDO Query design. Once you start using one of these approaches, you can still mix and match to include a feature from a different approach. All approaches require a JDBC 2.0-compliant driver, and some advanced features require a JDBC 3.0 driver.</p>
<ul>
<li><strong><em>JdbcTemplate</em></strong> is the classic Spring JDBC approach and the most popular. This “lowest level” approach and all others use a JdbcTemplate under the covers.</li>
<li><strong><em>NamedParameterJdbcTemplate</em></strong> wraps a <code>JdbcTemplate</code> to provide named parameters instead of the traditional JDBC “?” placeholders. This approach provides better documentation and ease of use when you have multiple parameters for an SQL statement.</li>
<li><strong><em>SimpleJdbcInsert and SimpleJdbcCall</em></strong> optimize database metadata to limit the amount of necessary configuration. This approach simplifies coding so that you only need to provide the name of the table or procedure and provide a map of parameters matching the column names. This only works if the database provides adequate metadata. If the database doesn’t provide this metadata, you will have to provide explicit configuration of the parameters.</li>
<li><strong>RDBMS Objects</strong> including MappingSqlQuery, SqlUpdate and StoredProcedure* requires you to create reusable and thread-safe objects during initialization of your data access layer. This approach is modeled after JDO Query wherein you define your query string, declare parameters, and compile the query. Once you do that, execute methods can be called multiple times with various parameter values passed in.</li>
</ul>
<h3 id="3-2-1-JdbcTemplate"><a href="#3-2-1-JdbcTemplate" class="headerlink" title="3.2.1 JdbcTemplate"></a>3.2.1 JdbcTemplate</h3><p>JdbcTemplate类是JDBC核心包中的中心类。它处理资源的创建和释放，帮助您避免常见错误，例如忘记关闭连接。它执行核心JDBC工作流的基本任务，如语句的创建和执行，留下应用程序代码提供SQL和提取结果。JdbcTemplate类执行SQL查询、更新语句和存储过程调用，执行结果集的迭代和返回参数值的提取。</p>
<p>It also catches JDBC exceptions and translates them to the generic(通用), more informative（信息丰富）, exception hierarchy defined in the <code>org.springframework.dao</code> package.</p>
<ul>
<li><strong>查询</strong></li>
</ul>
<p>Here is a simple query for getting the number of rows in a relation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> rowCount = <span class="keyword">this</span>.jdbcTemplate.queryForObject(<span class="string">"select count(*) from t_actor"</span>, Integer<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>A simple query using a bind variable:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> countOfActorsNamedJoe = <span class="keyword">this</span>.jdbcTemplate.queryForObject(</span><br><span class="line">        "select count(*) from t_actor where first_name = ?", Integer.class, "Joe");</span><br></pre></td></tr></table></figure>

<p>Querying for a <code>String</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String lastName &#x3D; this.jdbcTemplate.queryForObject(</span><br><span class="line">        &quot;select last_name from t_actor where id &#x3D; ?&quot;,</span><br><span class="line">        new Object[]&#123;1212L&#125;, String.class);</span><br></pre></td></tr></table></figure>

<p>Querying and populating a <em>single</em> <strong>domain</strong> object:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Actor actor = <span class="keyword">this</span>.jdbcTemplate.queryForObject(</span><br><span class="line">        <span class="string">"select first_name, last_name from t_actor where id = ?"</span>,</span><br><span class="line">        <span class="keyword">new</span> Object[]&#123;<span class="number">1212L</span>&#125;,</span><br><span class="line">        <span class="keyword">new</span> RowMapper&lt;Actor&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Actor <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">                actor.setFirstName(rs.getString(<span class="string">"first_name"</span>));</span><br><span class="line">                actor.setLastName(rs.getString(<span class="string">"last_name"</span>));</span><br><span class="line">                <span class="keyword">return</span> actor;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>Querying and populating a number of domain objects:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Actor&gt; actors = <span class="keyword">this</span>.jdbcTemplate.query(</span><br><span class="line">        <span class="string">"select first_name, last_name from t_actor"</span>,</span><br><span class="line">        <span class="keyword">new</span> RowMapper&lt;Actor&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Actor <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">                actor.setFirstName(rs.getString(<span class="string">"first_name"</span>));</span><br><span class="line">                actor.setLastName(rs.getString(<span class="string">"last_name"</span>));</span><br><span class="line">                <span class="keyword">return</span> actor;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>If the last two snippets of code actually existed in the same application, it would make sense to remove the duplication present in the two <code>RowMapper</code> anonymous inner classes, and extract them out into a single class (typically a <code>static</code> nested class) that can then be referenced by DAO methods as needed. For example, it may be better to write the last code snippet as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Actor&gt; <span class="title">findAllActors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.jdbcTemplate.query( <span class="string">"select first_name, last_name from t_actor"</span>, <span class="keyword">new</span> ActorMapper());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActorMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Actor</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Actor <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">        actor.setFirstName(rs.getString(<span class="string">"first_name"</span>));</span><br><span class="line">        actor.setLastName(rs.getString(<span class="string">"last_name"</span>));</span><br><span class="line">        <span class="keyword">return</span> actor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Updating (INSERT/UPDATE/DELETE) with JdbcTemplate</strong></li>
</ul>
<p>You use the <code>update(..)</code> method to perform insert, update and delete operations. Parameter values are usually provided as var args or alternatively as an object array.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.jdbcTemplate.update(</span><br><span class="line">        <span class="string">"insert into t_actor (first_name, last_name) values (?, ?)"</span>,</span><br><span class="line">        <span class="string">"Leonor"</span>, <span class="string">"Watling"</span>);</span><br><span class="line"><span class="keyword">this</span>.jdbcTemplate.update(</span><br><span class="line">        <span class="string">"update t_actor set last_name = ? where id = ?"</span>,</span><br><span class="line">        <span class="string">"Banjo"</span>, <span class="number">5276L</span>);</span><br><span class="line"><span class="keyword">this</span>.jdbcTemplate.update(</span><br><span class="line">        <span class="string">"delete from actor where id = ?"</span>,</span><br><span class="line">        Long.valueOf(actorId));</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Other JdbcTemplate operations</strong></li>
</ul>
<p>You can use the <code>execute(..)</code> method to execute any arbitrary SQL, and as such the method is often used for DDL statements. It is heavily overloaded with variants taking callback interfaces, binding variable arrays, and so on.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.jdbcTemplate.execute(&quot;create table mytable (id integer, name varchar(100))&quot;);</span><br></pre></td></tr></table></figure>

<p>The following example invokes a simple stored procedure. More sophisticated stored procedure support is <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2RhdGEtYWNjZXNzLmh0bWwjamRiYy1TdG9yZWRQcm9jZWR1cmU=" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/data-access.html#jdbc-StoredProcedure">covered later<i class="fa fa-external-link"></i></span>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.jdbcTemplate.update(</span><br><span class="line">        <span class="string">"call SUPPORT.REFRESH_ACTORS_SUMMARY(?)"</span>,</span><br><span class="line">        Long.valueOf(unionId));</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-NamedParameterJdbcTemplate"><a href="#3-2-2-NamedParameterJdbcTemplate" class="headerlink" title="3.2.2 NamedParameterJdbcTemplate"></a>3.2.2 NamedParameterJdbcTemplate</h3><p>The <code>NamedParameterJdbcTemplate</code> class adds support for programming JDBC statements using named parameters, as opposed to programming JDBC statements using only classic placeholder ( <code>&#39;?&#39;</code>) arguments. The <code>NamedParameterJdbcTemplate</code> class wraps a <code>JdbcTemplate</code>, and delegates to the wrapped <code>JdbcTemplate</code> to do much of its work. This section describes only those areas of the <code>NamedParameterJdbcTemplate</code> class that differ from the <code>JdbcTemplate</code> itself; namely, programming JDBC statements using named parameters.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// some JDBC-backed DAO class...</span></span><br><span class="line"><span class="keyword">private</span> NamedParameterJdbcTemplate namedParameterJdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.namedParameterJdbcTemplate = <span class="keyword">new</span> NamedParameterJdbcTemplate(dataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countOfActorsByFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String sql = <span class="string">"select count(*) from T_ACTOR where first_name = :first_name"</span>;</span><br><span class="line"></span><br><span class="line">    SqlParameterSource namedParameters = <span class="keyword">new</span> MapSqlParameterSource(<span class="string">"first_name"</span>, firstName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.namedParameterJdbcTemplate.queryForObject(sql, namedParameters, Integer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Notice the use of the named parameter notation in the value assigned to the <code>sql</code> variable, and the corresponding value that is plugged into the <code>namedParameters</code> variable (of type <code>MapSqlParameterSource</code>).</p>
<p>Alternatively, you can pass along named parameters and their corresponding values to a <code>NamedParameterJdbcTemplate</code> instance by using the <code>Map</code>-based style.The remaining methods exposed by the <code>NamedParameterJdbcOperations</code> and implemented by the<code>NamedParameterJdbcTemplate</code> class follow a similar pattern and are not covered here.</p>
<p>The following example shows the use of the <code>Map</code>-based style.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// some JDBC-backed DAO class...</span></span><br><span class="line"><span class="keyword">private</span> NamedParameterJdbcTemplate namedParameterJdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.namedParameterJdbcTemplate = <span class="keyword">new</span> NamedParameterJdbcTemplate(dataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countOfActorsByFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String sql = <span class="string">"select count(*) from T_ACTOR where first_name = :first_name"</span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; namedParameters = Collections.singletonMap(<span class="string">"first_name"</span>, firstName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.namedParameterJdbcTemplate.queryForObject(sql, namedParameters,  Integer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>One nice feature related to the <code>NamedParameterJdbcTemplate</code> (and existing in the same Java package) is the <code>SqlParameterSource</code>interface. </p>
<p>You have already seen an example of an implementation of this interface in one of the previous code snippet (the<code>MapSqlParameterSource</code> class). </p>
<p>An <code>SqlParameterSource</code> is a source of named parameter values to a <code>NamedParameterJdbcTemplate</code>. The <code>MapSqlParameterSource</code> class is a very simple implementation that is simply an adapter around a <code>java.util.Map</code>, where the keys are the parameter names and the values are the parameter values.</p>
<p>Another <code>SqlParameterSource</code> implementation is the <code>BeanPropertySqlParameterSource</code> class. This class wraps an arbitrary JavaBean (that is, an instance of a class that adheres to <span class="exturl" data-url="aHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2huZXR3b3JrL2phdmEvamF2YXNlL2RvY3VtZW50YXRpb24vc3BlYy0xMzYwMDQuaHRtbA==" title="http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html">the JavaBean conventions<i class="fa fa-external-link"></i></span>), and uses the properties of the wrapped JavaBean as the source of named parameter values.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setters omitted...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// some JDBC-backed DAO class...</span></span><br><span class="line"><span class="keyword">private</span> NamedParameterJdbcTemplate namedParameterJdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.namedParameterJdbcTemplate = <span class="keyword">new</span> NamedParameterJdbcTemplate(dataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countOfActors</span><span class="params">(Actor exampleActor)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// notice how the named parameters match the properties of the above 'Actor' class</span></span><br><span class="line">    String sql = <span class="string">"select count(*) from T_ACTOR where first_name = :firstName and last_name = :lastName"</span>;</span><br><span class="line"></span><br><span class="line">    SqlParameterSource namedParameters = <span class="keyword">new</span> BeanPropertySqlParameterSource(exampleActor);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.namedParameterJdbcTemplate.queryForObject(sql, namedParameters, Integer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Remember that the <code>NamedParameterJdbcTemplate</code> class <em>wraps</em> a classic <code>JdbcTemplate</code> template;</p>
<p> if you need access to the wrapped <code>JdbcTemplate</code> instance to access functionality only present in the <code>JdbcTemplate</code> class, you can use the<code>getJdbcOperations()</code> method to access the wrapped <code>JdbcTemplate</code> through the <code>JdbcOperations</code> interface.</p>
<h2 id="3-3-SQLExceptionTranslator"><a href="#3-3-SQLExceptionTranslator" class="headerlink" title="3.3 SQLExceptionTranslator"></a>3.3 SQLExceptionTranslator</h2><p>The <code>SQLErrorCodeSQLExceptionTranslator</code> applies matching rules in the following sequence:</p>
<ul>
<li>Any custom translation implemented by a subclass. Normally the provided concrete <code>SQLErrorCodeSQLExceptionTranslator</code> is used so this rule does not apply. It only applies if you have actually provided a subclass implementation.</li>
<li>Any custom implementation of the <code>SQLExceptionTranslator</code> interface that is provided as the <code>customSqlExceptionTranslator</code>property of the <code>SQLErrorCodes</code> class.</li>
<li>The list of instances of the <code>CustomSQLErrorCodesTranslation</code> class, provided for the <code>customTranslations</code> property of the <code>SQLErrorCodes</code> class, are searched for a match.</li>
<li>Error code matching is applied.</li>
<li>Use the fallback translator. <code>SQLExceptionSubclassTranslator</code> is the default fallback translator. If this translation is not available then the next fallback translator is the <code>SQLStateSQLExceptionTranslator</code>.</li>
</ul>
<p>You can extend <code>SQLErrorCodeSQLExceptionTranslator:</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSQLErrorCodesTranslator</span> <span class="keyword">extends</span> <span class="title">SQLErrorCodeSQLExceptionTranslator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DataAccessException <span class="title">customTranslate</span><span class="params">(String task, String sql, SQLException sqlex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sqlex.getErrorCode() == -<span class="number">12345</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DeadlockLoserDataAccessException(task, sqlex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this example, the specific error code <code>-12345</code> is translated and other errors are left to be translated by the default translator implementation. To use this custom translator, it is necessary to pass it to the <code>JdbcTemplate</code> through the method<code>setExceptionTranslator</code> and to use this <code>JdbcTemplate</code> for all of the data access processing where this translator is needed. Here is an example of how this custom translator can be used:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a JdbcTemplate and set data source</span></span><br><span class="line">    <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">    <span class="keyword">this</span>.jdbcTemplate.setDataSource(dataSource);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a custom translator and set the DataSource for the default translation lookup</span></span><br><span class="line">    CustomSQLErrorCodesTranslator tr = <span class="keyword">new</span> CustomSQLErrorCodesTranslator();</span><br><span class="line">    tr.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">this</span>.jdbcTemplate.setExceptionTranslator(tr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateShippingCharge</span><span class="params">(<span class="keyword">long</span> orderId, <span class="keyword">long</span> pct)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// use the prepared JdbcTemplate for this update</span></span><br><span class="line">    <span class="keyword">this</span>.jdbcTemplate.update(<span class="string">"update orders"</span> +</span><br><span class="line">        <span class="string">" set shipping_charge = shipping_charge * ? / 100"</span> +</span><br><span class="line">        <span class="string">" where id = ?"</span>, pct, orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The custom translator is passed a data source in order to look up the error codes in <code>sql-error-codes.xml</code>.</p>
<h2 id="3-4-Retrieving-auto-generated-keys"><a href="#3-4-Retrieving-auto-generated-keys" class="headerlink" title="3.4 Retrieving auto-generated keys"></a>3.4 Retrieving auto-generated keys</h2><p>An <code>update()</code> convenience method supports the retrieval of primary keys generated by the database. This support is part of the JDBC 3.0 standard; see Chapter 13.6 of the specification for details. The method takes a <code>PreparedStatementCreator</code> as its first argument, and this is the way the required insert statement is specified. The other argument is a <code>KeyHolder</code>, which contains the generated key on successful return from the update. There is not a standard single way to create an appropriate <code>PreparedStatement</code> (which explains why the method signature is the way it is). The following example works on Oracle but may not work on other platforms:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String INSERT_SQL = <span class="string">"insert into my_test (name) values(?)"</span>;</span><br><span class="line"><span class="keyword">final</span> String name = <span class="string">"Rob"</span>;</span><br><span class="line"></span><br><span class="line">KeyHolder keyHolder = <span class="keyword">new</span> GeneratedKeyHolder();</span><br><span class="line">jdbcTemplate.update(</span><br><span class="line">    <span class="keyword">new</span> PreparedStatementCreator() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> PreparedStatement <span class="title">createPreparedStatement</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            PreparedStatement ps = connection.prepareStatement(INSERT_SQL, <span class="keyword">new</span> String[] &#123;<span class="string">"id"</span>&#125;);</span><br><span class="line">            ps.setString(<span class="number">1</span>, name);</span><br><span class="line">            <span class="keyword">return</span> ps;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    keyHolder);</span><br><span class="line"></span><br><span class="line"><span class="comment">// keyHolder.getKey() now contains the generated key</span></span><br></pre></td></tr></table></figure>

<h2 id="3-5-数据源连接管理"><a href="#3-5-数据源连接管理" class="headerlink" title="3.5 数据源连接管理"></a>3.5 数据源连接管理</h2><p>You obtain a connection with <code>DriverManagerDataSource</code> as you typically obtain a JDBC connection. Specify the fully qualified classname of the JDBC driver so that the <code>DriverManager</code> can load the driver class. Next, provide a URL that varies between JDBC drivers. (Consult the documentation for your driver for the correct value.) Then provide a username and a password to connect to the database. Here is an example of how to configure a <code>DriverManagerDataSource</code> in Java code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">dataSource.setDriverClassName(<span class="string">"org.hsqldb.jdbcDriver"</span>);</span><br><span class="line">dataSource.setUrl(<span class="string">"jdbc:hsqldb:hsql://localhost:"</span>);</span><br><span class="line">dataSource.setUsername(<span class="string">"sa"</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">""</span>);</span><br></pre></td></tr></table></figure>

<p>Here is the corresponding XML configuration:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>The following examples show the basic connectivity and configuration for DBCP and C3P0. To learn about more options that help control the pooling features, see the product documentation for the respective connection pooling implementations.</p>
<p>DBCP configuration:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>C3P0 configuration:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-6-JDBC批量操作"><a href="#3-6-JDBC批量操作" class="headerlink" title="3.6 JDBC批量操作"></a>3.6 JDBC批量操作</h2><ul>
<li><p>通过jdbcTemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] batchUpdate(<span class="keyword">final</span> List&lt;Actor&gt; actors) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.jdbcTemplate.batchUpdate(</span><br><span class="line">                <span class="string">"update t_actor set first_name = ?, last_name = ? where id = ?"</span>,</span><br><span class="line">                <span class="keyword">new</span> BatchPreparedStatementSetter() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                        ps.setString(<span class="number">1</span>, actors.get(i).getFirstName());</span><br><span class="line">                        ps.setString(<span class="number">2</span>, actors.get(i).getLastName());</span><br><span class="line">                        ps.setLong(<span class="number">3</span>, actors.get(i).getId().longValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBatchSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> actors.size();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... additional methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="with-a-List-of-objects"><a href="#with-a-List-of-objects" class="headerlink" title="with a List of objects"></a>with a List of objects</h4></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NamedParameterTemplate namedParameterJdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.namedParameterJdbcTemplate = <span class="keyword">new</span> NamedParameterJdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] batchUpdate(List&lt;Actor&gt; actors) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.namedParameterJdbcTemplate.batchUpdate(</span><br><span class="line">                <span class="string">"update t_actor set first_name = :firstName, last_name = :lastName where id = :id"</span>,</span><br><span class="line">                SqlParameterSourceUtils.createBatch(actors));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... additional methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The same example using classic JDBC “?” placeholders:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] batchUpdate(<span class="keyword">final</span> List&lt;Actor&gt; actors) &#123;</span><br><span class="line">        List&lt;Object[]&gt; batch = <span class="keyword">new</span> ArrayList&lt;Object[]&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Actor actor : actors) &#123;</span><br><span class="line">            Object[] values = <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                    actor.getFirstName(), actor.getLastName(), actor.getId()&#125;;</span><br><span class="line">            batch.add(values);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.jdbcTemplate.batchUpdate(</span><br><span class="line">                <span class="string">"update t_actor set first_name = ?, last_name = ? where id = ?"</span>,</span><br><span class="line">                batch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... additional methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="with-multiple-batches"><a href="#with-multiple-batches" class="headerlink" title="with multiple batches"></a>with multiple batches</h4></li>
</ul>
<p>This example shows a batch update using a batch size of 100:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] batchUpdate(<span class="keyword">final</span> Collection&lt;Actor&gt; actors) &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] updateCounts = jdbcTemplate.batchUpdate(</span><br><span class="line">                <span class="string">"update t_actor set first_name = ?, last_name = ? where id = ?"</span>,</span><br><span class="line">                actors,</span><br><span class="line">                <span class="number">100</span>,</span><br><span class="line">                <span class="keyword">new</span> ParameterizedPreparedStatementSetter&lt;Actor&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(PreparedStatement ps, Actor argument)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                        ps.setString(<span class="number">1</span>, argument.getFirstName());</span><br><span class="line">                        ps.setString(<span class="number">2</span>, argument.getLastName());</span><br><span class="line">                        ps.setLong(<span class="number">3</span>, argument.getId().longValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> updateCounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... additional methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-7-Simplifying-JDBC-operations-with-the-SimpleJdbc-classes"><a href="#3-7-Simplifying-JDBC-operations-with-the-SimpleJdbc-classes" class="headerlink" title="3.7 Simplifying JDBC operations with the SimpleJdbc classes"></a>3.7 Simplifying JDBC operations with the SimpleJdbc classes</h2><p>The <code>SimpleJdbcInsert</code> and <code>SimpleJdbcCall</code> classes provide a simplified configuration by taking advantage of database metadata that can be retrieved through the JDBC driver. This means there is less to configure up front, although you can override or turn off the metadata processing if you prefer to provide all the details in your code.</p>
<h3 id="3-7-1-使用SimpleJdbcInsert插入数据"><a href="#3-7-1-使用SimpleJdbcInsert插入数据" class="headerlink" title="3.7.1 使用SimpleJdbcInsert插入数据"></a>3.7.1 使用SimpleJdbcInsert插入数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="keyword">private</span> SimpleJdbcInsert insertActor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        <span class="keyword">this</span>.insertActor = <span class="keyword">new</span> SimpleJdbcInsert(dataSource).withTableName(<span class="string">"t_actor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Actor actor)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; parameters = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">3</span>);</span><br><span class="line">        parameters.put(<span class="string">"id"</span>, actor.getId());</span><br><span class="line">        parameters.put(<span class="string">"first_name"</span>, actor.getFirstName());</span><br><span class="line">        parameters.put(<span class="string">"last_name"</span>, actor.getLastName());</span><br><span class="line">        insertActor.execute(parameters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... additional methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The execute method used here takes a plain <code>java.utils.Map</code> as its only parameter. The important thing to note here is that the keys used for the Map must match the column names of the table as defined in the database. This is because we read the metadata in order to construct the actual insert statement.</p>
<h3 id="3-7-2-使用SimpleJdbcInsert获取自增长值"><a href="#3-7-2-使用SimpleJdbcInsert获取自增长值" class="headerlink" title="3.7.2 使用SimpleJdbcInsert获取自增长值"></a>3.7.2 使用SimpleJdbcInsert获取自增长值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="keyword">private</span> SimpleJdbcInsert insertActor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        <span class="keyword">this</span>.insertActor = <span class="keyword">new</span> SimpleJdbcInsert(dataSource)</span><br><span class="line">                .withTableName(<span class="string">"t_actor"</span>)</span><br><span class="line">                .usingGeneratedKeyColumns(<span class="string">"id"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Actor actor)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; parameters = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">2</span>);</span><br><span class="line">        parameters.put(<span class="string">"first_name"</span>, actor.getFirstName());</span><br><span class="line">        parameters.put(<span class="string">"last_name"</span>, actor.getLastName());</span><br><span class="line">        <span class="comment">// huoqu</span></span><br><span class="line">        Number newId = insertActor.executeAndReturnKey(parameters);</span><br><span class="line">        actor.setId(newId.longValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... additional methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-7-3-Specifying-columns-for-a-SimpleJdbcInsert"><a href="#3-7-3-Specifying-columns-for-a-SimpleJdbcInsert" class="headerlink" title="3.7.3 Specifying columns for a SimpleJdbcInsert"></a>3.7.3 Specifying columns for a SimpleJdbcInsert</h3><p>You can limit the columns for an insert by specifying a list of column names with the <code>usingColumns</code> method:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="keyword">private</span> SimpleJdbcInsert insertActor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        <span class="keyword">this</span>.insertActor = <span class="keyword">new</span> SimpleJdbcInsert(dataSource)</span><br><span class="line">                .withTableName(<span class="string">"t_actor"</span>)</span><br><span class="line">                .usingColumns(<span class="string">"first_name"</span>, <span class="string">"last_name"</span>)</span><br><span class="line">                .usingGeneratedKeyColumns(<span class="string">"id"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Actor actor)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; parameters = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">2</span>);</span><br><span class="line">        parameters.put(<span class="string">"first_name"</span>, actor.getFirstName());</span><br><span class="line">        parameters.put(<span class="string">"last_name"</span>, actor.getLastName());</span><br><span class="line">        Number newId = insertActor.executeAndReturnKey(parameters);</span><br><span class="line">        actor.setId(newId.longValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... additional methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The execution of the insert is the same as if you had relied on the metadata to determine which columns to use.</p>
<h3 id="3-7-4-Using-SqlParameterSource-to-provide-parameter-values"><a href="#3-7-4-Using-SqlParameterSource-to-provide-parameter-values" class="headerlink" title="3.7.4 Using SqlParameterSource to provide parameter values"></a>3.7.4 Using SqlParameterSource to provide parameter values</h3><p>Using a <code>Map</code> to provide parameter values works fine, but it’s not the most convenient class to use. Spring provides a couple of implementations of the <code>SqlParameterSource</code> interface that can be used instead.The first one is <code>BeanPropertySqlParameterSource</code>, which is a very convenient class if you have a JavaBean-compliant class that contains your values. It will use the corresponding getter method to extract the parameter values. Here is an example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="keyword">private</span> SimpleJdbcInsert insertActor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        <span class="keyword">this</span>.insertActor = <span class="keyword">new</span> SimpleJdbcInsert(dataSource)</span><br><span class="line">                .withTableName(<span class="string">"t_actor"</span>)</span><br><span class="line">                .usingGeneratedKeyColumns(<span class="string">"id"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Actor actor)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用</span></span><br><span class="line">        SqlParameterSource parameters = <span class="keyword">new</span> BeanPropertySqlParameterSource(actor);</span><br><span class="line">        Number newId = insertActor.executeAndReturnKey(parameters);</span><br><span class="line">        actor.setId(newId.longValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... additional methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Another option is the <code>MapSqlParameterSource</code> that resembles a Map but provides a more convenient <code>addValue</code> method that can be chained.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="keyword">private</span> SimpleJdbcInsert insertActor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        <span class="keyword">this</span>.insertActor = <span class="keyword">new</span> SimpleJdbcInsert(dataSource)</span><br><span class="line">                .withTableName(<span class="string">"t_actor"</span>)</span><br><span class="line">                .usingGeneratedKeyColumns(<span class="string">"id"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Actor actor)</span> </span>&#123;</span><br><span class="line">        SqlParameterSource parameters = <span class="keyword">new</span> MapSqlParameterSource()</span><br><span class="line">                .addValue(<span class="string">"first_name"</span>, actor.getFirstName())</span><br><span class="line">                .addValue(<span class="string">"last_name"</span>, actor.getLastName());</span><br><span class="line">        Number newId = insertActor.executeAndReturnKey(parameters);</span><br><span class="line">        actor.setId(newId.longValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... additional methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>As you can see, the configuration is the same; only the executing code has to change to use these alternative input classes.</p>
<h3 id="3-7-5-使用SimpleJdbcCall"><a href="#3-7-5-使用SimpleJdbcCall" class="headerlink" title="3.7.5 使用SimpleJdbcCall"></a>3.7.5 使用SimpleJdbcCall</h3><ul>
<li>示例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE read_actor (</span><br><span class="line">    IN in_id INTEGER,</span><br><span class="line">    OUT out_first_name VARCHAR(100),</span><br><span class="line">    OUT out_last_name VARCHAR(100),</span><br><span class="line">    OUT out_birth_date DATE)</span><br><span class="line">BEGIN</span><br><span class="line">    SELECT first_name, last_name, birth_date</span><br><span class="line">    INTO out_first_name, out_last_name, out_birth_date</span><br><span class="line">    FROM t_actor where id &#x3D; in_id;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcActorDao</span> <span class="keyword">implements</span> <span class="title">ActorDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="keyword">private</span> SimpleJdbcCall procReadActor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        <span class="keyword">this</span>.procReadActor = <span class="keyword">new</span> SimpleJdbcCall(dataSource)</span><br><span class="line">                .withProcedureName(<span class="string">"read_actor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Actor <span class="title">readActor</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        SqlParameterSource in = <span class="keyword">new</span> MapSqlParameterSource()</span><br><span class="line">                .addValue(<span class="string">"in_id"</span>, id);</span><br><span class="line">        Map out = procReadActor.execute(in);</span><br><span class="line">        Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">        actor.setId(id);</span><br><span class="line">        actor.setFirstName((String) out.get(<span class="string">"out_first_name"</span>));</span><br><span class="line">        actor.setLastName((String) out.get(<span class="string">"out_last_name"</span>));</span><br><span class="line">        actor.setBirthDate((Date) out.get(<span class="string">"out_birth_date"</span>));</span><br><span class="line">        <span class="keyword">return</span> actor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... additional methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-7-6-其他存储过程操作"><a href="#3-7-6-其他存储过程操作" class="headerlink" title="3.7.6 其他存储过程操作"></a>3.7.6 其他存储过程操作</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2RhdGEtYWNjZXNzLmh0bWwjamRiYy1hZHZhbmNlZC1qZGJj" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/data-access.html#jdbc-advanced-jdbc">其他<i class="fa fa-external-link"></i></span></p>
<h2 id="3-8-使用对象操作数据库"><a href="#3-8-使用对象操作数据库" class="headerlink" title="3.8 使用对象操作数据库"></a>3.8 使用对象操作数据库</h2><ul>
<li>MappingSqlQuery</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActorMappingQuery</span> <span class="keyword">extends</span> <span class="title">MappingSqlQuery</span>&lt;<span class="title">Actor</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActorMappingQuery</span><span class="params">(DataSource ds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(ds, <span class="string">"select id, first_name, last_name from t_actor where id = ?"</span>);</span><br><span class="line">        declareParameter(<span class="keyword">new</span> SqlParameter(<span class="string">"id"</span>, Types.INTEGER));</span><br><span class="line">        compile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Actor <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNumber)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Actor actor = <span class="keyword">new</span> Actor();</span><br><span class="line">        actor.setId(rs.getLong(<span class="string">"id"</span>));</span><br><span class="line">        actor.setFirstName(rs.getString(<span class="string">"first_name"</span>));</span><br><span class="line">        actor.setLastName(rs.getString(<span class="string">"last_name"</span>));</span><br><span class="line">        <span class="keyword">return</span> actor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><h4 id="SqlUpdate"><a href="#SqlUpdate" class="headerlink" title="SqlUpdate"></a>SqlUpdate</h4></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Types;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.SqlParameter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.object.SqlUpdate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateCreditRating</span> <span class="keyword">extends</span> <span class="title">SqlUpdate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UpdateCreditRating</span><span class="params">(DataSource ds)</span> </span>&#123;</span><br><span class="line">        setDataSource(ds);</span><br><span class="line">        setSql(<span class="string">"update customer set credit_rating = ? where id = ?"</span>);</span><br><span class="line">        declareParameter(<span class="keyword">new</span> SqlParameter(<span class="string">"creditRating"</span>, Types.NUMERIC));</span><br><span class="line">        declareParameter(<span class="keyword">new</span> SqlParameter(<span class="string">"id"</span>, Types.NUMERIC));</span><br><span class="line">        compile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id for the Customer to be updated</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rating the new value for credit rating</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> number of rows updated</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">execute</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> rating)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> update(rating, id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="StoredProcedure"><a href="#StoredProcedure" class="headerlink" title="StoredProcedure"></a>StoredProcedure</h4></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitlesAndGenresStoredProcedure</span> <span class="keyword">extends</span> <span class="title">StoredProcedure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPROC_NAME = <span class="string">"AllTitlesAndGenres"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TitlesAndGenresStoredProcedure</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dataSource, SPROC_NAME);</span><br><span class="line">        declareParameter(<span class="keyword">new</span> SqlOutParameter(<span class="string">"titles"</span>, OracleTypes.CURSOR, <span class="keyword">new</span> TitleMapper()));</span><br><span class="line">        declareParameter(<span class="keyword">new</span> SqlOutParameter(<span class="string">"genres"</span>, OracleTypes.CURSOR, <span class="keyword">new</span> GenreMapper()));</span><br><span class="line">        compile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// again, this sproc has no input parameters, so an empty Map is supplied</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.execute(<span class="keyword">new</span> HashMap&lt;String, Object&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-9-Handling-BLOB-and-CLOB-objects"><a href="#3-9-Handling-BLOB-and-CLOB-objects" class="headerlink" title="3.9 Handling BLOB and CLOB objects"></a>3.9 Handling BLOB and CLOB objects</h2><p>You can store images, other binary data, and large chunks of text in the database. These large objects are called BLOBs (Binary Large OBject) for binary data and CLOBs (Character Large OBject) for character data. In Spring you can handle these large objects by using the <code>JdbcTemplate</code> directly and also when using the higher abstractions provided by RDBMS Objects and the <code>SimpleJdbc</code> classes. All of these approaches use an implementation of the <code>LobHandler</code> interface for the actual management of the LOB (Large OBject) data. The <code>LobHandler</code> provides access to a <code>LobCreator</code> class, through the <code>getLobCreator</code> method, used for creating new LOB objects to be inserted.</p>
<p>The <code>LobCreator/LobHandler</code> provides the following support for LOB input and output:</p>
<ul>
<li>BLOB<ul>
<li><code>byte[]</code> — <code>getBlobAsBytes</code> and <code>setBlobAsBytes</code></li>
<li><code>InputStream</code> — <code>getBlobAsBinaryStream</code> and <code>setBlobAsBinaryStream</code></li>
</ul>
</li>
<li>CLOB<ul>
<li><code>String</code> — <code>getClobAsString</code> and <code>setClobAsString</code></li>
<li><code>InputStream</code> — <code>getClobAsAsciiStream</code> and <code>setClobAsAsciiStream</code></li>
<li><code>Reader</code> — <code>getClobAsCharacterStream</code> and <code>setClobAsCharacterStream</code></li>
</ul>
</li>
</ul>
<p>The next example shows how to create and insert a BLOB. Later you will see how to read it back from the database.</p>
<p>This example uses a <code>JdbcTemplate</code> and an implementation of the <code>AbstractLobCreatingPreparedStatementCallback</code>. It implements one method, <code>setValues</code>. This method provides a <code>LobCreator</code> that you use to set the values for the LOB columns in your SQL insert statement.</p>
<p>For this example we assume that there is a variable, <code>lobHandler</code>, that already is set to an instance of a <code>DefaultLobHandler</code>. You typically set this value through dependency injection.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> File blobIn = <span class="keyword">new</span> File(<span class="string">"spring2004.jpg"</span>);</span><br><span class="line"><span class="keyword">final</span> InputStream blobIs = <span class="keyword">new</span> FileInputStream(blobIn);</span><br><span class="line"><span class="keyword">final</span> File clobIn = <span class="keyword">new</span> File(<span class="string">"large.txt"</span>);</span><br><span class="line"><span class="keyword">final</span> InputStream clobIs = <span class="keyword">new</span> FileInputStream(clobIn);</span><br><span class="line"><span class="keyword">final</span> InputStreamReader clobReader = <span class="keyword">new</span> InputStreamReader(clobIs);</span><br><span class="line"></span><br><span class="line">jdbcTemplate.execute(</span><br><span class="line">    <span class="string">"INSERT INTO lob_table (id, a_clob, a_blob) VALUES (?, ?, ?)"</span>,</span><br><span class="line">    <span class="keyword">new</span> AbstractLobCreatingPreparedStatementCallback(lobHandler) &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(PreparedStatement ps, LobCreator lobCreator)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            ps.setLong(<span class="number">1</span>, <span class="number">1L</span>);</span><br><span class="line">            lobCreator.setClobAsCharacterStream(ps, <span class="number">2</span>, clobReader, (<span class="keyword">int</span>)clobIn.length());  </span><br><span class="line">            lobCreator.setBlobAsBinaryStream(ps, <span class="number">3</span>, blobIs, (<span class="keyword">int</span>)blobIn.length());  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">blobIs.close();</span><br><span class="line">clobReader.close();</span><br></pre></td></tr></table></figure>

<p>Now it’s time to read the LOB data from the database. Again, you use a <code>JdbcTemplate</code> with the same instance variable <code>lobHandler</code> and a reference to a <code>DefaultLobHandler</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; l = jdbcTemplate.query(<span class="string">"select id, a_clob, a_blob from lob_table"</span>,</span><br><span class="line">    <span class="keyword">new</span> RowMapper&lt;Map&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">            Map&lt;String, Object&gt; results = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            String clobText = lobHandler.getClobAsString(rs, <span class="string">"a_clob"</span>);  </span><br><span class="line">            results.put(<span class="string">"CLOB"</span>, clobText);</span><br><span class="line">            <span class="keyword">byte</span>[] blobBytes = lobHandler.getBlobAsBytes(rs, <span class="string">"a_blob"</span>);  </span><br><span class="line">            results.put(<span class="string">"BLOB"</span>, blobBytes);</span><br><span class="line">            <span class="keyword">return</span> results;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>



<h2 id="3-10-Handling-complex-types-for-stored-procedure-calls"><a href="#3-10-Handling-complex-types-for-stored-procedure-calls" class="headerlink" title="3.10 Handling complex types for stored procedure calls"></a>3.10 Handling complex types for stored procedure calls</h2><p>When you call stored procedures you can sometimes use complex types specific to the database. To accommodate these types, Spring provides a <code>SqlReturnType</code> for handling them when they are returned from the stored procedure call and <code>SqlTypeValue</code>when they are passed in as a parameter to the stored procedure.</p>
<p>Here is an example of returning the value of an Oracle <code>STRUCT</code> object of the user declared type <code>ITEM_TYPE</code>. The <code>SqlReturnType</code>interface has a single method named <code>getTypeValue</code> that must be implemented. This interface is used as part of the declaration of an <code>SqlOutParameter</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestItemStoredProcedure</span> <span class="keyword">extends</span> <span class="title">StoredProcedure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestItemStoredProcedure</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        declareParameter(<span class="keyword">new</span> SqlOutParameter(<span class="string">"item"</span>, OracleTypes.STRUCT, <span class="string">"ITEM_TYPE"</span>,</span><br><span class="line">            <span class="keyword">new</span> SqlReturnType() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">getTypeValue</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> colIndx, <span class="keyword">int</span> sqlType, String typeName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                    STRUCT struct = (STRUCT) cs.getObject(colIndx);</span><br><span class="line">                    Object[] attr = struct.getAttributes();</span><br><span class="line">                    TestItem item = <span class="keyword">new</span> TestItem();</span><br><span class="line">                    item.setId(((Number) attr[<span class="number">0</span>]).longValue());</span><br><span class="line">                    item.setDescription((String) attr[<span class="number">1</span>]);</span><br><span class="line">                    item.setExpirationDate((java.util.Date) attr[<span class="number">2</span>]);</span><br><span class="line">                    <span class="keyword">return</span> item;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>You use the <code>SqlTypeValue</code> to pass in the value of a Java object like <code>TestItem</code> into a stored procedure. The <code>SqlTypeValue</code>interface has a single method named <code>createTypeValue</code> that you must implement. The active connection is passed in, and you can use it to create database-specific objects such as <code>StructDescriptor</code>s, as shown in the following example, or <code>ArrayDescriptor</code>s.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> TestItem testItem = <span class="keyword">new</span> TestItem(<span class="number">123L</span>, <span class="string">"A test item"</span>,</span><br><span class="line">        <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-M-d"</span>).parse(<span class="string">"2010-12-31"</span>));</span><br><span class="line"></span><br><span class="line">SqlTypeValue value = <span class="keyword">new</span> AbstractSqlTypeValue() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">createTypeValue</span><span class="params">(Connection conn, <span class="keyword">int</span> sqlType, String typeName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        StructDescriptor itemDescriptor = <span class="keyword">new</span> StructDescriptor(typeName, conn);</span><br><span class="line">        Struct item = <span class="keyword">new</span> STRUCT(itemDescriptor, conn,</span><br><span class="line">        <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">            testItem.getId(),</span><br><span class="line">            testItem.getDescription(),</span><br><span class="line">            <span class="keyword">new</span> java.sql.Date(testItem.getExpirationDate().getTime())</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>This <code>SqlTypeValue</code> can now be added to the Map containing the input parameters for the execute call of the stored procedure.</p>
<p>Another use for the <code>SqlTypeValue</code> is passing in an array of values to an Oracle stored procedure. Oracle has its own internal <code>ARRAY</code> class that must be used in this case, and you can use the <code>SqlTypeValue</code> to create an instance of the Oracle <code>ARRAY</code> and populate it with values from the Java <code>ARRAY</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Long[] ids = <span class="keyword">new</span> Long[] &#123;<span class="number">1L</span>, <span class="number">2L</span>&#125;;</span><br><span class="line"></span><br><span class="line">SqlTypeValue value = <span class="keyword">new</span> AbstractSqlTypeValue() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">createTypeValue</span><span class="params">(Connection conn, <span class="keyword">int</span> sqlType, String typeName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ArrayDescriptor arrayDescriptor = <span class="keyword">new</span> ArrayDescriptor(typeName, conn);</span><br><span class="line">        ARRAY idArray = <span class="keyword">new</span> ARRAY(arrayDescriptor, conn, ids);</span><br><span class="line">        <span class="keyword">return</span> idArray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>2-Resources</title>
    <url>/2018/12/05/spring%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/2-Resources/</url>
    <content><![CDATA[<p>很不幸的是，Java标准Java .net.URL类和各种URL前缀的标准处理程序并不足以对所有低级资源进行访问。例如，没有标准化的URL实现可用于访问需要从类路径或与servlet上下文相关的资源。虽然可以为特定的URL前缀注册新的处理程序(类似于http:)，但这通常相当复杂，而且URL接口仍然缺少一些理想的功能，例如检查所指向的资源是否存在的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Resource</span> <span class="keyword">extends</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">URL <span class="title">getURL</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">File <span class="title">getFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Resource <span class="title">createRelative</span><span class="params">(String relativePath)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getFilename</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Some of the most important methods from the <code>Resource</code> interface are:</p>
<ul>
<li><code>getInputStream()</code>: locates and opens the resource, returning an <code>InputStream</code> for reading from the resource. It is expected that each invocation returns a fresh <code>InputStream</code>. It is the responsibility of the caller to close the stream.</li>
<li><code>exists()</code>: returns a <code>boolean</code> indicating whether this resource actually exists in physical form.</li>
<li><code>isOpen()</code>: returns a <code>boolean</code> indicating whether this resource represents a handle with an open stream. If <code>true</code>, the <code>InputStream</code> cannot be read multiple times, and must be read once only and then closed to avoid resource leaks. Will be <code>false</code> for all usual resource implementations, with the exception of <code>InputStreamResource</code>.</li>
<li><code>getDescription()</code>: returns a description for this resource, to be used for error output when working with the resource. This is often the fully qualified file name or the actual URL of the resource.</li>
</ul>
<h1 id="ResourceLoader"><a href="#ResourceLoader" class="headerlink" title="ResourceLoader"></a>ResourceLoader</h1><p>As such, you can load resources in a fashion appropriate to the particular application context.</p>
<p>On the other hand, you may also force <code>ClassPathResource</code> to be used, regardless of the application context type, by specifying the special <code>classpath:</code> prefix:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Resource template = ctx.getResource(<span class="string">"classpath:some/resource/path/myTemplate.txt"</span>);</span><br></pre></td></tr></table></figure>

<p>Similarly, one can force a <code>UrlResource</code> to be used by specifying any of the standard <code>java.net.URL</code> prefixes:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Resource template = ctx.getResource(<span class="string">"file:///some/resource/path/myTemplate.txt"</span>);</span><br><span class="line">Resource template = ctx.getResource(<span class="string">"http://myhost.com/resource/path/myTemplate.txt"</span>);</span><br></pre></td></tr></table></figure>

<p>The following table summarizes the strategy for converting <code>String</code>s to <code>Resource</code>s:</p>
<table>
<thead>
<tr>
<th>Prefix</th>
<th>Example</th>
<th>Explanation</th>
</tr>
</thead>
<tbody><tr>
<td>classpath:</td>
<td><code>classpath:com/myapp/config.xml</code></td>
<td>Loaded from the classpath.</td>
</tr>
<tr>
<td>file:</td>
<td><code>file:///data/config.xml</code></td>
<td>Loaded as a <code>URL</code>, from the filesystem. [<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy81LjAuOC5SRUxFQVNFL3NwcmluZy1mcmFtZXdvcmstcmVmZXJlbmNlL2NvcmUuaHRtbCNfZm9vdG5vdGVfMw==" title="https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#_footnote_3">3<i class="fa fa-external-link"></i></span>]</td>
</tr>
<tr>
<td>http:</td>
<td><code>http://myserver/logo.png</code></td>
<td>Loaded as a <code>URL</code>.</td>
</tr>
<tr>
<td>(none)</td>
<td><code>/data/config.xml</code></td>
<td>Depends on the underlying <code>ApplicationContext</code>.</td>
</tr>
</tbody></table>
<h1 id="资源作为依赖"><a href="#资源作为依赖" class="headerlink" title="资源作为依赖"></a>资源作为依赖</h1><p>如果bean本身打算通过某种动态过程来确定和提供资源路径，那么bean使用ResourceLoader接口来加载资源可能是有意义的。以某种类型的模板加载为例，其中所需的特定资源取决于用户的角色。如果资源是静态的，那么完全取消对ResourceLoader接口的使用是有意义的，只需让bean公开它所需要的资源属性，并预期它们将被注入到这个接口中。</p>
<p>What makes it trivial to then inject these properties, is that all application contexts register and use a special JavaBeans <code>PropertyEditor</code> which can convert <code>String</code> paths to <code>Resource</code> objects. So if <code>myBean</code> has a template property of type <code>Resource</code>, it can be configured with a simple string for that resource, as follows:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBean"</span> <span class="attr">class</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"template"</span> <span class="attr">value</span>=<span class="string">"some/resource/path/myTemplate.txt"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Note that the resource path has no prefix, so because the application context itself is going to be used as the <code>ResourceLoader</code>, the resource itself will be loaded via a <code>ClassPathResource</code>, <code>FileSystemResource</code>, or <code>ServletContextResource</code> (as appropriate) depending on the exact type of the context.</p>
<p>If there is a need to force a specific <code>Resource</code> type to be used, then a prefix may be used. The following two examples show how to force a <code>ClassPathResource</code> and a <code>UrlResource</code> (the latter being used to access a filesystem file).</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"template"</span> <span class="attr">value</span>=<span class="string">"classpath:some/resource/path/myTemplate.txt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"template"</span> <span class="attr">value</span>=<span class="string">"file:///some/resource/path/myTemplate.txt"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="The-ResourceLoaderAware-interface"><a href="#The-ResourceLoaderAware-interface" class="headerlink" title="The ResourceLoaderAware interface"></a>The ResourceLoaderAware interface</h1><p>The <code>ResourceLoaderAware</code> interface is a special marker interface, identifying objects that expect to be provided with a <code>ResourceLoader</code> reference.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当类实现ResourceLoaderAware并部署到应用程序上下文(作为spring管理的bean)时，应用程序上下文将其识别为ResourceLoaderAware。然后应用程序上下文将调用thesetResourceLoader(ResourceLoader)，将自己作为参数提供(记住，Spring中的所有应用程序上下文都实现了ResourceLoader接口)。</p>
<p>当然，由于ApplicationContext是ResourceLoader，因此bean还可以实现ApplicationContextAware并直接使用提供的应用程序上下文来装载资源，但是通常，如果只需要使用specialized resoursourceloader接口，那么最好使用specializedResourceLoader接口。代码只会耦合到资源加载接口，这可以看作是一个实用程序接口，而不是整个Spring ApplicationContext接口。</p>
<p>从Spring 2.5开始，您可以依赖于ResourceLoader的自动连接，作为实现ResourceLoaderAware接口的替代方案。“传统”构造函数和byType自动连接模式(如autowiring collaborator中描述的那样)现在能够分别为构造函数参数和setter方法参数提供ResourceLoader类型的依赖关系。要获得更大的灵活性(包括自动连接字段和多个参数方法的能力)，请考虑使用新的基于注释的自动连接特性。在这种情况下，ResourceLoader将自动连接到一个字段</p>
<h1 id="Application-contexts-and-Resource-paths"><a href="#Application-contexts-and-Resource-paths" class="headerlink" title="Application contexts and Resource paths"></a>Application contexts and Resource paths</h1><h2 id="ApplicationContext多种资源路径获取方式"><a href="#ApplicationContext多种资源路径获取方式" class="headerlink" title="ApplicationContext多种资源路径获取方式"></a>ApplicationContext多种资源路径获取方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类路径</span></span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"conf/appContext.xml"</span>);</span><br><span class="line"><span class="comment">// 文件路径</span></span><br><span class="line">ApplicationContext ctx =</span><br><span class="line">    <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"classpath:conf/appContext.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">An example will hopefully make <span class="keyword">this</span> clear. Consider a directory layout that looks like <span class="keyword">this</span>:</span><br><span class="line"></span><br><span class="line">com/</span><br><span class="line">  foo/</span><br><span class="line">    services.xml</span><br><span class="line">    daos.xml</span><br><span class="line">    MessengerService<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">A</span> <span class="title">ClassPathXmlApplicationContext</span> <span class="title">instance</span> <span class="title">composed</span> <span class="title">of</span> <span class="title">the</span> <span class="title">beans</span> <span class="title">defined</span> <span class="title">in</span> <span class="title">the</span> '<span class="title">services</span>.<span class="title">xml</span>' <span class="title">and</span> '<span class="title">daos</span>.<span class="title">xml</span>' <span class="title">could</span> <span class="title">be</span> <span class="title">instantiated</span> <span class="title">like</span> <span class="title">so</span>…</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">ApplicationContext</span> <span class="title">ctx</span> </span>= <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line">    <span class="keyword">new</span> String[] &#123;<span class="string">"services.xml"</span>, <span class="string">"daos.xml"</span>&#125;, MessengerService<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>应用程序上下文构造函数值中的资源路径可以是一个简单的路径(如上所示)，它具有到目标资源的一对一映射，或者也可以包含特殊的“classpath*:”前缀和/或内部ant风格的正则表达式(使用Spring的PathMatcher实用程序匹配)。后者都是通配符</p>
<p>这种机制的一种用法是在进行组件样式的应用程序组装时。所有组件都可以将上下文定义片段“发布”到一个众所周知的位置路径，当通过classpath*:)以相同的路径为前缀创建最终的应用程序上下文时，所有组件片段将被自动拾取。</p>
<p>注意，这个通配符是特定于在应用程序上下文构造函数中(或直接使用PathMatcher实用程序类层次结构时)中使用资源路径的，并在构造时解析。它与资源类型本身无关。不可能使用classpath*: prefix来构造一个实际的资源，因为资源一次只指向一个资源。</p>
<h3 id="Ant-style-Patterns"><a href="#Ant-style-Patterns" class="headerlink" title="Ant-style Patterns"></a>Ant-style Patterns</h3><p>When the path location contains an Ant-style pattern, for example:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">/WEB-INF/*-context.xml</span></span><br><span class="line"><span class="attr">com/mycompany/**/applicationContext.xml</span></span><br><span class="line"><span class="attr">file</span>:<span class="string">C:/some/path/*-context.xml</span></span><br><span class="line"><span class="attr">classpath</span>:<span class="string">com/mycompany/**/applicationContext.xml</span></span><br></pre></td></tr></table></figure>

<p>解析器遵循更复杂但已定义的过程来尝试解析通配符。它为通往最后一个非通配符段的路径生成一个资源，并从中获得一个URL。如果该URL不是jar: URL或特定于容器的变体(例如zip: WebLogic中，wsjar中WebSphere中，等等)，那么java.io。文件从它获得，并通过遍历文件系统用于解析通配符。对于jar URL，解析器要么从它获得java.net.JarURLConnection，要么手动解析jar URL，然后遍历jar文件的内容以解析通配符。</p>
<p>通配符类路径依赖于底层类加载器的getResources()方法。由于现在大多数应用服务器都提供了自己的类加载器实现，所以这种行为可能会有所不同，尤其是在处理jar文件时。检查classpath*是否有效的一个简单测试是使用类加载器从类路径上的jar文件中加载一个文件:getClass(). getclassloader (). getresources(“”)。使用名称相同但位于两个不同位置的文件尝试此测试。如果返回了不合适的结果，请检查应用服务器文档</p>
<p>classpath<em>:前缀还可以与位置路径其余部分的PathMatcher模式组合在一起，例如classpath</em>:META-INF/*-bean .xml。在这种情况下，解决策略相当简单:在最后一个非通配符路径段上使用ClassLoader.getResources()调用，以获得类装入器层次结构中的所有匹配资源，然后在每个资源上使用与上面描述的通配符子路径相同的PathMatcher解决策略</p>
<p>请注意，类路径<em>:如果与ant样式的模式组合在一起，则在模式启动前只能对至少一个根目录可靠地工作，除非实际的目标文件驻留在文件系统中。这意味着类路径</em>:*之类的模式。xml可能不会从jar文件的根目录检索文件，而只会从展开目录的根目录检索。</p>
<p>Spring检索类路径条目的能力源于JDK的ClassLoader.getResources()方法，该方法只返回传入的空字符串(指示要搜索的潜在根)的文件系统位置。Spring评估URLClassLoader运行时配置和“java.class”。路径”也存在于jar文件中，但这并不能保证导致可移植的行为。</p>
<h3 id="The-classpath-prefix"><a href="#The-classpath-prefix" class="headerlink" title="The classpath*: prefix"></a>The classpath*: prefix</h3><p>When constructing an XML-based application context, a location string may use the special <code>classpath*:</code> prefix:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ctx =</span><br><span class="line">    <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath*:conf/appContext.xml"</span>);</span><br></pre></td></tr></table></figure>

<h1 id="FileSystemResource-说明"><a href="#FileSystemResource-说明" class="headerlink" title="FileSystemResource 说明"></a>FileSystemResource 说明</h1><p>不附加到FileSystemApplicationContext的文件系统资源(也就是说，文件系统应用程序上下文不是实际的ResourceLoader)将会像您预期的那样处理绝对路径和相对路径。相对路径相对于当前工作目录，而绝对路径相对于文件系统的根目录。</p>
<p>For backwards compatibility (historical) reasons however, this changes when the <code>FileSystemApplicationContext</code> is the <code>ResourceLoader</code>. The <code>FileSystemApplicationContext</code> simply forces all attached <code>FileSystemResource</code> instances to treat all location paths as relative, whether they start with a leading slash or not. In practice, this means the following are equivalent:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ctx =</span><br><span class="line">    <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"conf/context.xml"</span>);</span><br><span class="line">ApplicationContext ctx =</span><br><span class="line">    <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"/conf/context.xml"</span>);</span><br></pre></td></tr></table></figure>

<p>As are the following: (Even though it would make sense for them to be different, as one case is relative and the other absolute.)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileSystemXmlApplicationContext ctx = ...;</span><br><span class="line">ctx.getResource(<span class="string">"some/resource/path/myTemplate.txt"</span>);</span><br><span class="line">FileSystemXmlApplicationContext ctx = ...;</span><br><span class="line">ctx.getResource(<span class="string">"/some/resource/path/myTemplate.txt"</span>);</span><br></pre></td></tr></table></figure>

<p>In practice, if true absolute filesystem paths are needed, it is better to forgo the use of absolute paths with <code>FileSystemResource</code>/ <code>FileSystemXmlApplicationContext</code>, and just force the use of a <code>UrlResource</code>, by using the <code>file:</code> URL prefix.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// actual context type doesn't matter, the Resource will always be UrlResource</span></span><br><span class="line">ctx.getResource(<span class="string">"file:///some/resource/path/myTemplate.txt"</span>);</span><br><span class="line"><span class="comment">// force this FileSystemXmlApplicationContext to load its definition via a UrlResource</span></span><br><span class="line">ApplicationContext ctx =</span><br><span class="line">    <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"file:///conf/context.xml"</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Spring官方文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ClassLoader类加载器详解</title>
    <url>/2018/12/05/ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Java类加载机制、双亲委派、延迟加载等。"><a href="#Java类加载机制、双亲委派、延迟加载等。" class="headerlink" title="Java类加载机制、双亲委派、延迟加载等。"></a>Java类加载机制、双亲委派、延迟加载等。</h1><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvSFpFRktaWHVfQVVyNEhxRDdNMkgwZw==" title="https://mp.weixin.qq.com/s/HZEFKZXu_AUr4HqD7M2H0g">微信公众号<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>ClassLoader</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring常用注解使用</title>
    <url>/2018/12/04/spring%E7%9B%B8%E5%85%B3/Spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-扫描注解规则"><a href="#1-扫描注解规则" class="headerlink" title="1 扫描注解规则"></a>1 扫描注解规则</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangXu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-11-30 15:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注解配置spring容器 -&gt; 配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"anait.spring.base"</span>, useDefaultFilters = <span class="keyword">true</span>,</span><br><span class="line">includeFilters = &#123;</span><br><span class="line">        <span class="comment">//ASSIGNABLE_TYPE 会向容器中注入指定类型的对象，如有定义，定义优先，</span></span><br><span class="line">        <span class="comment">// 且如有excludeFilters排除，则容器不会出现</span></span><br><span class="line">        <span class="comment">//@ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = User.class),</span></span><br><span class="line">&#125;</span><br><span class="line">, excludeFilters = &#123;</span><br><span class="line"><span class="comment">//@ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = User.class)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义排除指定的类</span></span><br><span class="line"><span class="meta">@ComponentScan</span>.Filter(type = FilterType.CUSTOM, classes = MyTypeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">// 正则表达式排除指定的类</span></span><br><span class="line"><span class="class">@<span class="title">ComponentScan</span>.<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.REGEX, pattern = <span class="string">".*?Dao$"</span>),</span><br><span class="line">    </span><br><span class="line"><span class="comment">// aspectj排除指定的类-&gt;排除包service包下所有类除了MockService</span></span><br><span class="line"><span class="meta">@ComponentScan</span>.Filter(type = FilterType.ASPECTJ, pattern = <span class="string">"anait..service.* &amp;&amp; !anait..MockService"</span>),</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">23L</span>, <span class="string">"aa"</span>, <span class="string">"fsjdk"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">22L</span>, <span class="string">"bb"</span>, <span class="string">"jojoj"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ul>
<li>useDefaultFilters:默认扫描规则</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicates whether automatic detection of classes annotated with &#123;<span class="doctag">@code</span> <span class="doctag">@Component</span>&#125;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@Repository</span>&#125;, &#123;<span class="doctag">@code</span> <span class="doctag">@Service</span>&#125;, or &#123;<span class="doctag">@code</span> <span class="doctag">@Controller</span>&#125; should be enabled.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 默认扫描的是</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">useDefaultFilters</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br></pre></td></tr></table></figure>



<h1 id="2-单实例懒加载"><a href="#2-单实例懒加载" class="headerlink" title="2 单实例懒加载"></a>2 单实例懒加载</h1><p><strong><code>@Scope</code>:调整作用域</strong></p>
<ol>
<li><p>prototype：多实例的：<strong>ioc容器启动并不会去调用方法创建对象放在容器中</strong>。</p>
<ul>
<li>每次获取的时候才会调用方法创建对象；</li>
</ul>
</li>
<li><p>singleton：单实例的（默认值）：</p>
<ul>
<li><p><strong>ioc容器启动会创建对象放到ioc容器中(默认，@Lazy后获取时创建对象)</strong>。</p>
</li>
<li><p>以后每次获取就是直接从容器（map.get()）中拿，</p>
</li>
</ul>
</li>
<li><p>request：同一次请求创建一个实例</p>
</li>
<li><p>session：同一个session创建一个实例</p>
</li>
</ol>
<blockquote>
<p>懒加载：<br>​    单实例bean：默认在容器启动的时候创建对象；<br>​    懒加载：容器启动不创建对象。第一次使用(获取)Bean创建对象，并初始化；</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Scope("prototype") // </span></span><br><span class="line"><span class="meta">@Lazy</span> <span class="comment">// 容器创建的时候不创建单例对象，使用时才创建对象,对多实例无用</span></span><br><span class="line"><span class="meta">@Bean</span>(<span class="string">"person"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"给容器中添加Person...."</span>); </span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="3-注册组件方式"><a href="#3-注册组件方式" class="headerlink" title="3 注册组件方式"></a>3 注册组件方式</h1><ol>
<li><p>包扫描和组件注册扫描类（<code>@ComponentScan(useDefaultFilters=true)</code>）,对应的注解有<code>@Service</code>、<code>@Compoment</code>、 <code>@Repository</code>、<code>@Controller</code>。</p>
</li>
<li><p><code>@Configuration</code>配置类中定义<code>@Bean</code>[导入的第三方包里面的组件]。</p>
</li>
<li><p><code>@Import</code>[快速给容器中导入一个组件]</p>
<ul>
<li>导入配置可以是单独类或者实现<code>ImportSelector</code>或<code>ImportBeanDefinitionRegistrar</code>接口的类</li>
<li><code>@Import</code>(要导入到容器中的组件)；容器中就会自动注册这个组件，<strong>id默认是全类名</strong>。</li>
<li><code>ImportSelector</code>:返回需要导入的组件的全类名数组。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;Red<span class="class">.<span class="keyword">class</span>&#125;) // 简单注册一个对象</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Config2</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-1-ImportSelector配置方式"><a href="#3-1-ImportSelector配置方式" class="headerlink" title="3.1 ImportSelector配置方式"></a>3.1 ImportSelector配置方式</h2><ul>
<li>配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;Red<span class="class">.<span class="keyword">class</span>, <span class="title">MyImportSelector</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line">@MyImportAnno("anait.spring.base.bean.Black")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyImportAnno</span></span><br><span class="line">    <span class="comment">//@Primary</span></span><br><span class="line">    <span class="comment">//@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建user.."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">22L</span>, <span class="string">"bb"</span>, <span class="string">"jojoj"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>MyImportSelector</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据配置类上的注解信息配置需要注入的类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangXu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-12-05 9:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="comment">// 只能获取配置类上的注解信息</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出</span></span><br><span class="line"><span class="comment">         * org.springframework.context.annotation.Configuration</span></span><br><span class="line"><span class="comment">         * org.springframework.context.annotation.ComponentScan</span></span><br><span class="line"><span class="comment">         * org.springframework.context.annotation.Import</span></span><br><span class="line"><span class="comment">         * anait.spring.base.anno.MyImportAnno</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//importingClassMetadata.getAnnotationTypes().forEach(System.out::println);</span></span><br><span class="line">        <span class="comment">//System.out.println("-----");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Retrieve the method metadata for all methods that are annotated</span></span><br><span class="line">        <span class="comment">//(or meta-annotated) with the given annotation type.（获取的都是配置类中的注解）</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出</span></span><br><span class="line"><span class="comment">         * org.springframework.core.type.StandardMethodMetadata@a74868d</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Set&lt;MethodMetadata&gt; annotatedMethods = importingClassMetadata.getAnnotatedMethods(<span class="string">"anait.spring.base.anno.MyImportAnno"</span>);</span><br><span class="line">        <span class="comment">//annotatedMethods.forEach(System.out::println);</span></span><br><span class="line">        AtomicReference&lt;String&gt; returnTypeName = <span class="keyword">new</span> AtomicReference&lt;String&gt;();</span><br><span class="line">        annotatedMethods.forEach(methodMetadata -&gt; &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 输出</span></span><br><span class="line"><span class="comment">             * anait.spring.base.config.Config2</span></span><br><span class="line"><span class="comment">             * user</span></span><br><span class="line"><span class="comment">             * anait.spring.base.bean.User</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//System.out.println(methodMetadata.getDeclaringClassName());</span></span><br><span class="line">            <span class="comment">//System.out.println(methodMetadata.getMethodName());</span></span><br><span class="line">            returnTypeName.set(methodMetadata.getReturnTypeName());</span><br><span class="line">            <span class="comment">//System.out.println(returnTypeName.get());</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; annotationAttributes = importingClassMetadata.getAnnotationAttributes(<span class="string">"anait.spring.base.anno.MyImportAnno"</span>);</span><br><span class="line">        String value = (String) annotationAttributes.get(<span class="string">"value"</span>);</span><br><span class="line">        <span class="comment">//System.out.println(value); //anait.spring.base.bean.Black</span></span><br><span class="line">        String str = returnTypeName.get();</span><br><span class="line">        <span class="comment">//System.out.println("----");</span></span><br><span class="line">        <span class="comment">//System.out.println(str);//anait.spring.base.bean.User</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"anait.spring.base.bean.Corlor"</span>, str, value&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-ImportBeanDefinitionRegistrar配置方式"><a href="#3-2-ImportBeanDefinitionRegistrar配置方式" class="headerlink" title="3.2 ImportBeanDefinitionRegistrar配置方式"></a>3.2 ImportBeanDefinitionRegistrar配置方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;Red<span class="class">.<span class="keyword">class</span>, <span class="title">MyImportSelector</span>.<span class="title">class</span>, <span class="title">MyImportBeanDefinitionRegistrar</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">MyImportAnno</span>(<span class="title">value</span> </span>= <span class="string">"anait.spring.base.bean.Black"</span>, target = &#123;User<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Config2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyImportAnno</span></span><br><span class="line">    <span class="comment">//@Primary</span></span><br><span class="line">    <span class="comment">//@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建user.."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">22L</span>, <span class="string">"bb"</span>, <span class="string">"jojoj"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>MyImportBeanDefinitionRegistrar</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ImportSelector升级版，可利用BeanDefinitionRegistry自定义配置更多规则的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangXu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-12-05 10:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// true</span></span><br><span class="line">        <span class="comment">//System.out.println(registry.containsBeanDefinition("anait.spring.base.bean.User"));</span></span><br><span class="line">        <span class="comment">// 移除,现在获取User.class报错</span></span><br><span class="line">        registry.removeBeanDefinition(<span class="string">"anait.spring.base.bean.User"</span>);</span><br><span class="line"></span><br><span class="line">        String annotationName = <span class="string">"anait.spring.base.anno.MyImportAnno"</span>;</span><br><span class="line">        <span class="keyword">if</span> (importingClassMetadata.hasAnnotation(annotationName)) &#123;</span><br><span class="line">            MultiValueMap&lt;String, Object&gt; attributes = importingClassMetadata.getAllAnnotationAttributes(annotationName);</span><br><span class="line">            List&lt;Object&gt; targets = attributes.get(<span class="string">"target"</span>);</span><br><span class="line">            targets.forEach(o -&gt; &#123;</span><br><span class="line">                Class&lt;?&gt;[] t = (Class&lt;?&gt;[])o;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != t &amp;&amp; t.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Class&lt;?&gt; target : t) &#123;</span><br><span class="line">                        BeanDefinition beanDefinition = BeanDefinitionBuilder</span><br><span class="line">                                .genericBeanDefinition(target)</span><br><span class="line">                                .getBeanDefinition();</span><br><span class="line">                        registry.registerBeanDefinition(beanDefinition.getBeanClassName(),</span><br><span class="line">                                beanDefinition);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 现在注入了User对象，不报错了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-Conditional条件注入"><a href="#3-3-Conditional条件注入" class="headerlink" title="3.3 @Conditional条件注入"></a>3.3 <code>@Conditional</code>条件注入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"anait.spring.base.service"</span>)</span><br><span class="line"><span class="meta">@Conditional</span>(value = &#123;MyCondition<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">MyImportAnno</span>(<span class="title">value</span> </span>= <span class="string">"aa"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigCondition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建user.."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">22L</span>, <span class="string">"bb"</span>, <span class="string">"jojoj"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MyCondition</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//ConditionContext</span></span><br><span class="line">        Environment environment = context.getEnvironment();</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">        ClassLoader classLoader = context.getClassLoader();</span><br><span class="line">        BeanDefinitionRegistry registry = context.getRegistry();</span><br><span class="line">        <span class="comment">//AnnotatedTypeMetadata 当前配置类上的注解信息</span></span><br><span class="line">        Map&lt;String, Object&gt; annotationAttributes =</span><br><span class="line">                metadata.getAnnotationAttributes(<span class="string">"anait.spring.base.anno.MyImportAnno"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String name = MyImportAnno<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()</span>;</span><br><span class="line">        System.out.println(metadata.isAnnotated(name)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != annotationAttributes) &#123;</span><br><span class="line">            System.out.println(annotationAttributes.get(<span class="string">"value"</span>)); <span class="comment">//aa</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : beanFactory.getBeanDefinitionNames()) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span></span><br><span class="line"><span class="comment">             * org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span></span><br><span class="line"><span class="comment">             * org.springframework.context.annotation.internalRequiredAnnotationProcessor</span></span><br><span class="line"><span class="comment">             * org.springframework.context.annotation.internalCommonAnnotationProcessor</span></span><br><span class="line"><span class="comment">             * org.springframework.context.event.internalEventListenerProcessor</span></span><br><span class="line"><span class="comment">             * org.springframework.context.event.internalEventListenerFactory</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            System.out.println(beanDefinitionName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> environment.containsProperty(<span class="string">"file.encoding"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>ConditionContext方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>getRegistry()</td>
<td>借助返回的BeanDefinitionRegistry检查bean的定义</td>
</tr>
<tr>
<td>getBeanFactory()</td>
<td>借助返回的ConfigrableListableBeanFactory检查是否存在，甚至检查bean的属性</td>
</tr>
<tr>
<td>getEnvironment()</td>
<td>借助返回Environment检查环境变量是否存在以及读取它的值是什么</td>
</tr>
<tr>
<td>getResourceLoader()</td>
<td>读取并检查它返回的ResourceLoader所加载的资源</td>
</tr>
<tr>
<td>getClassLoader()</td>
<td>借助它的返回的ClassLoader加载并检查类是否存在</td>
</tr>
</tbody></table>
<ul>
<li>Spring 4使用@Conditional对@Profile的重构</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional</span>(ProfileCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">Profile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The set of profiles for which the annotated component should be registered.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] value();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context.getEnvironment() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            MultiValueMap&lt;String, Object&gt; attrs = metadata.getAllAnnotationAttributes(Profile<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">            <span class="keyword">if</span> (attrs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Object value : attrs.get(<span class="string">"value"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (context.getEnvironment().acceptsProfiles(((String[]) value))) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-4-FactoryBean注册类"><a href="#3-4-FactoryBean注册类" class="headerlink" title="3.4 FactoryBean注册类"></a>3.4 FactoryBean注册类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangXu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-12-05 12:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个Spring定义的FactoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Color</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//返回一个Color对象，这个对象会添加到容器中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Color <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ColorFactoryBean...getObject..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Color();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Color<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是单例？</span></span><br><span class="line">    <span class="comment">//true：这个bean是单实例，在容器中保存一份</span></span><br><span class="line">    <span class="comment">//false：多实例，每次获取都会创建一个新的bean；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Bean</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ColorFactoryBean <span class="title">colorFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ColorFactoryBean();   <span class="comment">//   -&gt; Color对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出</span></span><br><span class="line">System.out.println(context.getBean(Color<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">System.out.println(context.getBean(<span class="string">"&amp;colorFactoryBean"</span>));</span><br><span class="line">System.out.println(context.getBean(ColorFactoryBean<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">anait.spring.base.bean.Color@47d90b9e</span></span><br><span class="line"><span class="comment">anait.spring.base.config.ColorFactoryBean@1184ab05</span></span><br><span class="line"><span class="comment">anait.spring.base.config.ColorFactoryBean@1184ab05</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h1 id="4-Bean的生命周期"><a href="#4-Bean的生命周期" class="headerlink" title="4 Bean的生命周期"></a>4 Bean的生命周期</h1><ol>
<li>Spring对bean进行实例化；</li>
<li>Spring将值和bean的引用注入到bean对应的属性中；</li>
<li>如果bean实现了BeanNameAware接口，Spring将bean的ID传递给setBeanName()方<br>法；</li>
<li>如果bean实现了BeanFactoryAware接口，Spring将调用setBeanFactory()方法，将<br>BeanFactory容器实例传入；</li>
<li>如果bean实现了ApplicationContextAware接口，Spring将调<br>用setApplicationContext()方法，将bean所在的应用上下文的引用传入进来；</li>
<li>如果bean实现了<strong>BeanPostProcessor</strong>接口，Spring将调用它们的post<br>ProcessBeforeInitialization()方法；</li>
<li>如果bean实现了InitializingBean接口，Spring将调用它们的afterPropertiesSet()方法。类似地，如果bean使用init-method声明了初始化方法，该方法也会被调用；</li>
<li>如果bean实现了BeanPostProcessor接口，Spring将调用它们的postProcessAfterInitialization()方法；</li>
<li>此时，bean已经准备就绪，可以被应用程序使用了，它们将一直驻留在应用上下文中，<br>直到该应用上下文被销毁；</li>
<li>如果bean实现了DisposableBean接口，Spring将调用它的destroy()接口方法。同<br>样，如果bean使用destroy-method声明了销毁方法，该方法也会被调用。</li>
</ol>
<blockquote>
<p>四种方法控制Bean的创建和销毁</p>
<p>JSR250规范<code>@PostConstruct</code>和<code>@PreDestroy</code>与<code>@Bean(initMethod = &quot;initMethod&quot;,destroyMethod = &quot;destoryMethod&quot;)</code>功能一致，运行其一。</p>
</blockquote>
<ul>
<li>实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangXu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-12-04 11:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"User构造方法。。。。"</span>);</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----initMethod----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----destoryMethod----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----InitializingBean  afterPropertiesSet----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----DisposableBean  destroy----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-1后置处理器"><a href="#4-1后置处理器" class="headerlink" title="4.1后置处理器"></a>4.1后置处理器</h2><ul>
<li>执行原理<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BeanPostProcessor原理</span><br><span class="line">populateBean(beanName, mbd, instanceWrapper); <span class="comment">// 给bean进行属性赋值</span></span><br><span class="line"></span><br><span class="line">initializeBean</span><br><span class="line">&#123;</span><br><span class="line">applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">	｛</span><br><span class="line">	<span class="keyword">for</span> (BeanPostProcessor beanProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">			Object current = beanProcessor.postProcessBeforeInitialization(result, beanName);</span><br><span class="line">			<span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> result;</span><br><span class="line">			&#125;</span><br><span class="line">			result = current;</span><br><span class="line">		&#125;</span><br><span class="line">	｝</span><br><span class="line">invokeInitMethods(beanName, wrappedBean, mbd);	<span class="comment">// 执行自定义初始化</span></span><br><span class="line">applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要添加到容器中被Spring管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----BeanPostProcessor  postProcessBeforeInitialization----"</span>+beanName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----BeanPostProcessor  postProcessAfterInitialization----"</span>+beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(MyBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ConfigPeriod</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="comment">/*initMethod = "initMethod",destroyMethod = "destoryMethod"*/</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建user.."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">22L</span>, <span class="string">"bb"</span>, <span class="string">"jojoj"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPeriod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(ConfigPeriod<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(<span class="string">"容器加载完成"</span>);</span><br><span class="line">    System.out.println(context.getBean(User<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    ((AnnotationConfigApplicationContext) context).close();</span><br><span class="line">    System.out.println(<span class="string">"容器关闭"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>运行结果</strong>(顺序)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内置类</span></span><br><span class="line">----BeanPostProcessor  postProcessBeforeInitialization----org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">----BeanPostProcessor  postProcessAfterInitialization----org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">----BeanPostProcessor  postProcessBeforeInitialization----org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">----BeanPostProcessor  postProcessAfterInitialization----org.springframework.context.event.internalEventListenerFactory</span><br><span class="line"><span class="comment">// 配置类</span></span><br><span class="line">----BeanPostProcessor  postProcessBeforeInitialization----configPeriod</span><br><span class="line">----BeanPostProcessor  postProcessAfterInitialization----configPeriod</span><br><span class="line"></span><br><span class="line">创建user..</span><br><span class="line">User构造方法。。。。</span><br><span class="line"></span><br><span class="line"><span class="comment">// BeanPostProcessor后置处理</span></span><br><span class="line">----BeanPostProcessor  postProcessBeforeInitialization----user</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSR250</span></span><br><span class="line">----initMethod----</span><br><span class="line"><span class="comment">// 实现接口InitializingBean</span></span><br><span class="line">----InitializingBean  afterPropertiesSet----</span><br><span class="line"></span><br><span class="line"><span class="comment">// BeanPostProcessor后置处理</span></span><br><span class="line">----BeanPostProcessor  postProcessAfterInitialization----user</span><br><span class="line"></span><br><span class="line">容器加载完成</span><br><span class="line"></span><br><span class="line">User(id=<span class="number">22</span>, name=bb, pwd=jojoj)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// JSR250   </span></span><br><span class="line">----destoryMethod----</span><br><span class="line"><span class="comment">// 实现接口DisposableBean</span></span><br><span class="line">----DisposableBean  destroy----</span><br><span class="line">容器关闭</span><br></pre></td></tr></table></figure>

<h2 id="4-2-补充：BeanFactoryPostProcessor"><a href="#4-2-补充：BeanFactoryPostProcessor" class="headerlink" title="4.2 补充：BeanFactoryPostProcessor"></a>4.2 补充：<code>BeanFactoryPostProcessor</code></h2><p>BeanFactoryPostProcessor的定义和BeanPostProcessor相似，有一个最主要的不同是：BeanFactoryPostProcessor可以对bean的配置信息进行操作；更确切的说Spring IOC容器允许BeanFactoryPostProcessor读取配置信息并且能够在容器实例化任何其他bean（所有的实现了BeanFactoryPostProcessor接口的类）之前<strong>改变配置信息</strong>(populate之前)</p>
<p>其他实现类：<code>PropertyResourceConfigurer</code>用来解析<code>${key}</code></p>
<ul>
<li><code>BeanFactoryPostProcessor</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Modify the application context's internal bean factory after its standard initialization. </span></span><br><span class="line"><span class="comment">    All bean definitions will have been loaded,</span></span><br><span class="line"><span class="comment">    （!!!） but no beans will have been instantiated yet. This allows for overriding or adding</span></span><br><span class="line"><span class="comment">    * properties even to eager-initializing beans.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> beanFactory the bean factory used by the application context</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"#######MyBeanFactoryPostProcessor###### beanFactory.getBeanDefinitionCount="</span>+beanFactory.getBeanDefinitionCount());</span><br><span class="line">        <span class="comment">// 可以获取到,但BeanPostProcessor中获取不到Dog类信息</span></span><br><span class="line">        Dog bean = beanFactory.getBean(Dog<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在最前面执行</span></span><br><span class="line"><span class="comment">// #######MyBeanFactoryPostProcessor###### beanFactory.getBeanDefinitionCount=11</span></span><br></pre></td></tr></table></figure>



<h1 id="5-属性赋值"><a href="#5-属性赋值" class="headerlink" title="5 属性赋值"></a>5 属性赋值</h1><h2 id="5-1-配置文件"><a href="#5-1-配置文件" class="headerlink" title="5.1 配置文件"></a>5.1 配置文件</h2><p>底层原理利用了<code>PropertyResourceConfigurer</code>后置解析器。</p>
<ul>
<li>实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name:默认值&#125;"</span>) <span class="comment">// 配置文件中没有配置时使用默认值</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;2*10&#125;"</span>) <span class="comment">// ELPL表达式</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="comment">// 也可以@Value("value")</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:app.properties"</span>,encoding = <span class="string">"UTF-8"</span>)</span><br><span class="line"><span class="comment">//@ImportResource(locations = "classpath:app.properties")  // 前言问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigAssignment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置文件app.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">person.name</span>=<span class="string">张雅</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssignment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(ConfigAssignment<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(<span class="string">"容器加载完成"</span>);</span><br><span class="line">    System.out.println(context.getBean(Person<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    System.out.println(context.getEnvironment().getProperty(<span class="string">"person.name"</span>));</span><br><span class="line">    ((AnnotationConfigApplicationContext) context).close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">容器加载完成</span><br><span class="line">Person(name=张雅, age=<span class="number">20</span>)</span><br><span class="line">张雅</span><br></pre></td></tr></table></figure>



<h2 id="5-2-自动装配"><a href="#5-2-自动装配" class="headerlink" title="5.2 自动装配"></a>5.2 自动装配</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowire</span> </span><br><span class="line">    <span class="comment">//自动装配，默认按类型获取，如果找到多个相同类型的组件，再将属性的名称作为组件的id去容器中查找</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"userDaoo"</span>)：<span class="comment">// 使用@Qualifier指定需要装配的组件的id，而不是使用属性名</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">        <span class="comment">// 让Spring进行自动装配的时候，默认使用首选的bean;</span></span><br><span class="line">        <span class="comment">// 也可以继续使用@Qualifier指定需要装配的bean的名字</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">自动装配默认一定要将属性赋值好，没有就会报错；</span></span><br><span class="line"><span class="comment">可以使用@Autowired(required=false);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>此外，Spring还支持使用@Resource(JSR250)和@Inject(JSR330)[java规范的注解]</p>
<ul>
<li><p>@Resource:</p>
<ul>
<li><p>可以和@Autowired一样实现自动装配功能；默认是按照组件名称进行装配的；</p>
</li>
<li><p>没有能支持@Primary功能；</p>
</li>
<li><p>没有支持@Autowired（reqiured=false）;</p>
</li>
</ul>
</li>
<li><p>@Inject:</p>
<ul>
<li><p>需要导入javax.inject的包，和Autowired的功能一样。</p>
</li>
<li><p>没有required=false的功能；</p>
</li>
</ul>
</li>
<li><p>@Autowired:Spring定义的； @Resource、@Inject都是java规范</p>
</li>
</ul>
<p><strong><code>AutowiredAnnotationBeanPostProcessor</code>:解析完成自动装配功能；</strong>        </p>
<p>3）、 @Autowired:构造器，参数，方法，属性；都是从容器中获取参数组件的值</p>
<ol>
<li><p>[标注在方法位置]：@Bean+方法参数；参数从容器中获取;</p>
<p>默认不写@Autowired效果是一样的；都能自动装配</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Autowired </span></span><br><span class="line"><span class="comment">//标注在方法，Spring容器创建当前对象，就会调用方法，完成赋值；</span></span><br><span class="line"><span class="comment">//方法使用的参数，自定义类型的值从ioc容器中获取</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.car = car;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>[标在构造器上]：如果组件只有一个有参构造器，这个有参构造器的@Autowired可以省略，参数位置的组件还是可以自动从容器中获取。</p>
</li>
<li><p>放在参数位置：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Bean</span>标注的方法创建对象的时候，方法参数的值从容器中获取</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> car</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Color <span class="title">color</span><span class="params">(Car car)</span></span>&#123;</span><br><span class="line">		Color color = <span class="keyword">new</span> Color();</span><br><span class="line">		color.setCar(car);</span><br><span class="line">		<span class="keyword">return</span> color;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-3-获取容器底层组件"><a href="#5-3-获取容器底层组件" class="headerlink" title="5.3 获取容器底层组件"></a>5.3 获取容器底层组件</h2><p>通过实现Aware接口下的实现类注入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ApplicationEventPublisherAware (org.springframework.context)</span></span><br><span class="line"><span class="comment">NotificationPublisherAware (org.springframework.jmx.export.notification)</span></span><br><span class="line"><span class="comment">MessageSourceAware (org.springframework.context)</span></span><br><span class="line"><span class="comment">BeanFactoryAware (org.springframework.beans.factory)</span></span><br><span class="line"><span class="comment">EnvironmentAware (org.springframework.context)</span></span><br><span class="line"><span class="comment">EmbeddedValueResolverAware (org.springframework.context)</span></span><br><span class="line"><span class="comment">ResourceLoaderAware (org.springframework.context)</span></span><br><span class="line"><span class="comment">ImportAware (org.springframework.context.annotation)</span></span><br><span class="line"><span class="comment">LoadTimeWeaverAware (org.springframework.context.weaving)</span></span><br><span class="line"><span class="comment">BeanNameAware (org.springframework.beans.factory)</span></span><br><span class="line"><span class="comment">BeanClassLoaderAware (org.springframework.beans.factory)</span></span><br><span class="line"><span class="comment">ApplicationContextAware (org.springframework.context)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span>,<span class="title">BeanNameAware</span>,<span class="title">EmbeddedValueResolverAware</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"传入的ioc："</span>+applicationContext);</span><br><span class="line">		<span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"当前bean的名字："</span>+name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmbeddedValueResolver</span><span class="params">(StringValueResolver resolver)</span> </span>&#123;</span><br><span class="line">		String resolveStringValue = </span><br><span class="line">            resolver.resolveStringValue(<span class="string">"你好 $&#123;os.name&#125; 我是 #&#123;20*18&#125;"</span>);</span><br><span class="line">		System.out.println(<span class="string">"解析的字符串："</span>+resolveStringValue);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring注解开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Files-Paths使用</title>
    <url>/2018/12/03/Files-Paths%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="一-Paths"><a href="#一-Paths" class="headerlink" title="一 Paths"></a>一 Paths</h1><h2 id="1-创建一个Path"><a href="#1-创建一个Path" class="headerlink" title="1 创建一个Path"></a>1 创建一个Path</h2><p><strong>Path用于来表示文件路径和文件</strong></p>
<p>创建Path实例可以通过 <strong>Paths工具类</strong> 的 静态<strong>get（）方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用绝对路径 Path path= Paths.get("c:\\data\\myfile.txt");</span></span><br><span class="line"><span class="comment">//使用相对路径Path path = Paths.get("../myfile.txt");</span></span><br></pre></td></tr></table></figure>

<p>下面这种创建方式和上面等效：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Path path = FileSystems.getDefault().getPath(<span class="string">"c:\\data\\myfile.txt"</span>);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="2-File和Path之间的转换，File和URI和URL之间的转换"><a href="#2-File和Path之间的转换，File和URI和URL之间的转换" class="headerlink" title="2 File和Path之间的转换，File和URI和URL之间的转换"></a>2 File和Path之间的转换，File和URI和URL之间的转换</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"C:/my.ini"</span>);        </span><br><span class="line">Path p1 = file.toPath();        </span><br><span class="line">p1.toFile();</span><br><span class="line"><span class="comment">// 转换成URI对象</span></span><br><span class="line">URI uri = file.toURI();</span><br><span class="line"><span class="comment">// 转换成URL对象</span></span><br><span class="line">uri.toURL();</span><br></pre></td></tr></table></figure>

<h2 id="3-获取Path的相关信息"><a href="#3-获取Path的相关信息" class="headerlink" title="3 获取Path的相关信息"></a>3 获取Path的相关信息</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String filePath = <span class="string">"D:\\tmp\\新建文本文档.txt"</span>;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用Paths工具类的get()方法创建</span></span><br><span class="line">    Path path = Paths.get(filePath);</span><br><span class="line">    <span class="comment">//使用FileSystems工具类创建</span></span><br><span class="line">    <span class="comment">//Path path2 = FileSystems.getDefault().getPath(filePath);</span></span><br><span class="line">    System.out.println(<span class="string">"文件名："</span> + path.getFileName()); <span class="comment">// 文件名：新建文本文档.txt</span></span><br><span class="line">    System.out.println(<span class="string">"名称元素的数量："</span> + path.getNameCount()); <span class="comment">// 名称元素的数量：2</span></span><br><span class="line">    System.out.println(<span class="string">"父路径："</span> + path.getParent()); <span class="comment">// 父路径：D:\tmp</span></span><br><span class="line">    System.out.println(<span class="string">"根路径："</span> + path.getRoot()); <span class="comment">// 根路径：D:\</span></span><br><span class="line">    System.out.println(<span class="string">"是否是绝对路径："</span> + path.isAbsolute()); <span class="comment">// 是否是绝对路径：true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//startsWith()方法的参数既可以是字符串也可以是Path对象</span></span><br><span class="line">    <span class="comment">// 是否是以为给定的路径D:开始：true</span></span><br><span class="line">    System.out.println(<span class="string">"是否是以为给定的路径D:开始："</span> + path.startsWith(<span class="string">"D:\\"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该路径的字符串形式：D:\tmp\新建文本文档.txt</span></span><br><span class="line">    System.out.println(<span class="string">"该路径的字符串形式："</span> + path.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-移除冗余项"><a href="#4-移除冗余项" class="headerlink" title="4 移除冗余项"></a>4 移除冗余项</h2><p>某些时候在我们需要处理的Path路径中可能会有一个或两个点</p>
<ul>
<li>.表示的是当前目录</li>
<li>..表示父目录或者说是上一级目录：</li>
</ul>
<p>下面通过实例来演示一下使用Path类的normalize()和toRealPath()方法把.和..去除。</p>
<ul>
<li><strong>normalize()</strong> : 返回一个路径，该路径是冗余名称元素的消除。</li>
<li><strong>toRealPath()</strong> : 融合了toAbsolutePath()方法和normalize()方法</li>
</ul>
<h1 id="二-Files"><a href="#二-Files" class="headerlink" title="二 Files"></a>二 Files</h1><h2 id="1-利用Files创建、复制文件"><a href="#1-利用Files创建、复制文件" class="headerlink" title="1 利用Files创建、复制文件"></a>1 利用Files创建、复制文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">"d:\\tmp\\aa.txt"</span>);</span><br><span class="line">Path pathcopy = Paths.get(<span class="string">"d:\\tmp\\aacopy.txt"</span>);</span><br><span class="line"><span class="keyword">if</span> (!Files.exists(path)) &#123;</span><br><span class="line">    Files.createFile(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Files.copy(path,pathcopy,StandardCopyOption.REPLACE_EXISTING);</span><br></pre></td></tr></table></figure>

<h2 id="2-遍历目录"><a href="#2-遍历目录" class="headerlink" title="2 遍历目录"></a>2 遍历目录</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历所有目录里的文件</span></span><br><span class="line">MyFileVisitor myFileVisitor = <span class="keyword">new</span> MyFileVisitor();</span><br><span class="line">Path pathtmp = Paths.get(<span class="string">"d:/tmp"</span>);</span><br><span class="line">Files.walk(pathtmp).forEach(e-&gt;&#123;</span><br><span class="line">    System.out.println(e.getFileName());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 遍历所给Path路径里的文件，有文件夹输入文件夹名</span></span><br><span class="line">Files.newDirectoryStream(pathtmp).forEach(e -&gt; &#123;</span><br><span class="line">    System.out.println(e.getFileName());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>also like this 遍历所有文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    Path startingDir = Paths.get(<span class="string">"C:\\apache-tomcat-8.0.21"</span>);</span><br><span class="line">    List&lt;Path&gt; result = <span class="keyword">new</span> LinkedList&lt;Path&gt;();</span><br><span class="line">    Files.walkFileTree(startingDir, <span class="keyword">new</span> FindJavaVisitor(result));</span><br><span class="line">    System.out.println(<span class="string">"result.size()="</span> + result.size());        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FindJavaVisitor</span> <span class="keyword">extends</span> <span class="title">SimpleFileVisitor</span>&lt;<span class="title">Path</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Path&gt; result;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FindJavaVisitor</span><span class="params">(List&lt;Path&gt; result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(file.toString().endsWith(<span class="string">".java"</span>))&#123;</span><br><span class="line">            result.add(file.getFileName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-读取文件属性"><a href="#3-读取文件属性" class="headerlink" title="3 读取文件属性"></a>3 读取文件属性</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    URI uri = Paths.get(<span class="string">"C:\\Users\\ZhangXu\\Desktop\\标准版大数据.rar"</span>).toUri();</span><br><span class="line">    Path zip = Paths.get(uri);</span><br><span class="line">    System.out.println(Files.getLastModifiedTime(zip));</span><br><span class="line">    System.out.println(Files.size(zip));</span><br><span class="line">    System.out.println(Files.isSymbolicLink(zip));</span><br><span class="line">    System.out.println(Files.isDirectory(zip));</span><br><span class="line">    System.out.println(Files.readAttributes(zip, <span class="string">"*"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2018-09-26T23:44:17.645927Z</span></span><br><span class="line"><span class="comment">2131197    /1024/1024 -&gt; MB</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">&#123;lastAccessTime=2018-09-26T23:44:16.660561Z, lastModifiedTime=2018-09-26T23:44:17.645927Z, size=2131197, creationTime=2018-09-26T23:44:16.660561Z, isSymbolicLink=false, isRegularFile=true, fileKey=null, isOther=false, isDirectory=false&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="4-缓冲流处理文件"><a href="#4-缓冲流处理文件" class="headerlink" title="4 缓冲流处理文件"></a>4 缓冲流处理文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Path readers = Paths.get(<span class="string">"D:\\path\\123.txt"</span>);</span><br><span class="line">    Path writes = Paths.get(<span class="string">"D:\\path\\456.txt"</span>);</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader reader = Files.newBufferedReader(readers,StandardCharsets.UTF_8);</span><br><span class="line">        BufferedWriter writer = Files.newBufferedWriter(writes, StandardCharsets.UTF_8)) &#123;</span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//写入</span></span><br><span class="line">        writer.write(<span class="string">"write"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-读取和设置文件权限"><a href="#5-读取和设置文件权限" class="headerlink" title="5 读取和设置文件权限"></a>5 读取和设置文件权限</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Path profile = Paths.get(<span class="string">"C:\\Users\\ZhangXu\\.gitconfig"</span>);</span><br><span class="line">PosixFileAttributes attrs = Files.readAttributes(profile, PosixFileAttributes<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">// 读取文件的权限</span></span><br><span class="line">Set&lt;PosixFilePermission&gt; posixPermissions = attrs.permissions();</span><br><span class="line">posixPermissions.clear();</span><br><span class="line">String owner = attrs.owner().getName();</span><br><span class="line">String perms = PosixFilePermissions.toString(posixPermissions);</span><br><span class="line">System.out.format(<span class="string">"%s %s%n"</span>, owner, perms);</span><br><span class="line"></span><br><span class="line">posixPermissions.add(PosixFilePermission.OWNER_READ);</span><br><span class="line">posixPermissions.add(PosixFilePermission.GROUP_READ);</span><br><span class="line">posixPermissions.add(PosixFilePermission.OTHERS_READ);</span><br><span class="line">posixPermissions.add(PosixFilePermission.OWNER_WRITE);</span><br><span class="line"></span><br><span class="line">Files.setPosixFilePermissions(profile, posixPermissions);    <span class="comment">// 设置文件的权限</span></span><br></pre></td></tr></table></figure>

<h1 id="三-异步IO操作"><a href="#三-异步IO操作" class="headerlink" title="三 异步IO操作"></a>三 异步IO操作</h1><h2 id="1-将来式"><a href="#1-将来式" class="headerlink" title="1 将来式"></a>1 将来式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    Path readers = Paths.get(<span class="string">"D:\\path\\123.txt"</span>);</span><br><span class="line">    <span class="comment">//异步打开文件</span></span><br><span class="line">    AsynchronousFileChannel channel = AsynchronousFileChannel.open(readers);</span><br><span class="line">    ByteBuffer buffer = ByteBuffer.allocate(<span class="number">100_000</span>);<span class="comment">//读取100 000字节</span></span><br><span class="line">    Future&lt;Integer&gt; result = channel.read(buffer, <span class="number">0</span>);<span class="comment">//读取</span></span><br><span class="line">    <span class="comment">//处理其它事情</span></span><br><span class="line">    System.out.println(<span class="string">"处理其它事情"</span>);</span><br><span class="line">    Integer integer = result.get();<span class="comment">//获取结果，如果已经执行完立即返回，否则阻塞到执行完毕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-回调式"><a href="#2-回调式" class="headerlink" title="2 回调式"></a>2 回调式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Path readers = Paths.get(<span class="string">"D:\\path\\123.txt"</span>);</span><br><span class="line">    <span class="comment">//异步打开文件</span></span><br><span class="line">    AsynchronousFileChannel channel = AsynchronousFileChannel.open(readers);</span><br><span class="line">    ByteBuffer buffer = ByteBuffer.allocate(<span class="number">100_000</span>);<span class="comment">//读取100 000字节</span></span><br><span class="line">    channel.read(buffer, <span class="number">0</span>, buffer, <span class="keyword">new</span> CompletionHandler&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer result, ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"执行完毕后执行这里的方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"失败后执行这里的方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外NIO详解可参考<a href="https://segmentfault.com/a/1190000012316621#articleHeader0" target="_blank" rel="noopener"><code>segmentfault</code></a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Files-Paths使用</tag>
        <tag>NIO</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2018/12/03/Java%E9%9B%86%E5%90%88%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9B%B8%E5%85%B3/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<ul>
<li><a href="#queue">Queue</a><ul>
<li><a href="#什么是队列">什么是队列</a></li>
<li><a href="#队列的种类">队列的种类</a></li>
<li><a href="#java-集合框架中的队列-queue">Java 集合框架中的队列 Queue</a></li>
<li><a href="#推荐文章">推荐文章</a></li>
</ul>
</li>
<li><a href="#set">Set</a><ul>
<li><a href="#什么是-set">什么是 Set</a></li>
<li><a href="#补充：有序集合与无序集合说明">补充：有序集合与无序集合说明</a></li>
<li><a href="#hashset-和-treeset-底层数据结构">HashSet 和 TreeSet 底层数据结构</a></li>
<li><a href="#推荐文章-1">推荐文章</a></li>
</ul>
</li>
<li><a href="#list">List</a><ul>
<li><a href="#什么是list">什么是List</a></li>
<li><a href="#list的常见实现类">List的常见实现类</a></li>
<li><a href="#arraylist-和-linkedlist-源码学习">ArrayList 和 LinkedList 源码学习</a></li>
<li><a href="#推荐阅读">推荐阅读</a></li>
</ul>
</li>
<li><a href="#map">Map</a></li>
<li><a href="#树">树</a></li>
</ul>
<a id="more"></a>


<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><h3 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h3><p>队列是数据结构中比较重要的一种类型，它支持 FIFO，尾部添加、头部删除（先进队列的元素先出队列），跟我们生活中的排队类似。</p>
<h3 id="队列的种类"><a href="#队列的种类" class="headerlink" title="队列的种类"></a>队列的种类</h3><ul>
<li><strong>单队列</strong>（单队列就是常见的队列, 每次添加元素时，都是添加到队尾，存在“假溢出”的问题也就是明明有位置却不能添加的情况）</li>
<li><strong>循环队列</strong>（避免了“假溢出”的问题）</li>
</ul>
<h3 id="Java-集合框架中的队列-Queue"><a href="#Java-集合框架中的队列-Queue" class="headerlink" title="Java 集合框架中的队列 Queue"></a>Java 集合框架中的队列 Queue</h3><p>Java 集合中的 Queue 继承自 Collection 接口 ，Deque, LinkedList, PriorityQueue, BlockingQueue 等类都实现了它。<br>Queue 用来存放 等待处理元素 的集合，这种场景一般用于缓冲、并发访问。<br>除了继承 Collection 接口的一些方法，Queue 还添加了额外的 添加、删除、查询操作。</p>
<h3 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章"></a>推荐文章</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEyNDA4NzcvYXJ0aWNsZS9kZXRhaWxzLzUyODYwOTI0" title="https://blog.csdn.net/u011240877/article/details/52860924">Java 集合深入理解（9）：Queue 队列<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="什么是-Set"><a href="#什么是-Set" class="headerlink" title="什么是 Set"></a>什么是 Set</h3><p>Set 继承于 Collection 接口，是一个不允许出现重复元素，并且无序的集合，主要 HashSet 和 TreeSet 两大实现类。</p>
<p>在判断重复元素的时候，Set 集合会调用 hashCode()和 equal()方法来实现。</p>
<h3 id="补充：有序集合与无序集合说明"><a href="#补充：有序集合与无序集合说明" class="headerlink" title="补充：有序集合与无序集合说明"></a>补充：有序集合与无序集合说明</h3><ul>
<li>有序集合：集合里的元素可以根据 key 或 index 访问 (List、Map)</li>
<li>无序集合：集合里的元素只能遍历。（Set）</li>
</ul>
<h3 id="HashSet-和-TreeSet-底层数据结构"><a href="#HashSet-和-TreeSet-底层数据结构" class="headerlink" title="HashSet 和 TreeSet 底层数据结构"></a>HashSet 和 TreeSet 底层数据结构</h3><p><strong>HashSet</strong> 是哈希表结构，主要利用 HashMap 的 key 来存储元素，计算插入元素的 hashCode 来获取元素在集合中的位置；</p>
<p><strong>TreeSet</strong> 是红黑树结构，每一个元素都是树中的一个节点，插入的元素都会进行排序；</p>
<h3 id="推荐文章-1"><a href="#推荐文章-1" class="headerlink" title="推荐文章"></a>推荐文章</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9iNDhjNDdhNDI5MTY=" title="https://www.jianshu.com/p/b48c47a42916">Java集合–Set(基础)<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="什么是List"><a href="#什么是List" class="headerlink" title="什么是List"></a>什么是List</h3><p>在 List 中，用户可以精确控制列表中每个元素的插入位置，另外用户可以通过整数索引（列表中的位置）访问元素，并搜索列表中的元素。 与 Set 不同，List 通常允许重复的元素。 另外 List 是有序集合而 Set 是无序集合。</p>
<h3 id="List的常见实现类"><a href="#List的常见实现类" class="headerlink" title="List的常见实现类"></a>List的常见实现类</h3><p><strong>ArrayList</strong> 是一个数组队列，相当于动态数组。它由数组实现，随机访问效率高，随机插入、随机删除效率低。</p>
<p><strong>LinkedList</strong> 是一个双向链表。它也可以被当作堆栈、队列或双端队列进行操作。LinkedList随机访问效率低，但随机插入、随机删除效率高。</p>
<p><strong>Vector</strong> 是矢量队列，和ArrayList一样，它也是一个动态数组，由数组实现。但是ArrayList是非线程安全的，而Vector是线程安全的。</p>
<p><strong>Stack</strong> 是栈，它继承于Vector。它的特性是：先进后出(FILO, First In Last Out)。相关阅读：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phdmF6ZWppYW4vYXJ0aWNsZS9kZXRhaWxzLzUzMzYyOTkz" title="https://blog.csdn.net/javazejian/article/details/53362993">java数据结构与算法之栈（Stack）设计与实现<i class="fa fa-external-link"></i></span></p>
<h3 id="ArrayList-和-LinkedList-源码学习"><a href="#ArrayList-和-LinkedList-源码学习" class="headerlink" title="ArrayList 和 LinkedList 源码学习"></a>ArrayList 和 LinkedList 源码学习</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NuYWlsY2xpbWIvSmF2YS1HdWlkZS9ibG9iL21hc3Rlci9KYXZh55u45YWzL0FycmF5TGlzdC5tZA==" title="https://github.com/Snailclimb/Java-Guide/blob/master/Java相关/ArrayList.md">ArrayList 源码学习<i class="fa fa-external-link"></i></span>    </li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NuYWlsY2xpbWIvSmF2YS1HdWlkZS9ibG9iL21hc3Rlci9KYXZh55u45YWzL0xpbmtlZExpc3QubWQ=" title="https://github.com/Snailclimb/Java-Guide/blob/master/Java相关/LinkedList.md">LinkedList 源码学习<i class="fa fa-external-link"></i></span>   </li>
</ul>
<h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phdmF6ZWppYW4vYXJ0aWNsZS9kZXRhaWxzLzUyOTUzMTkw" title="https://blog.csdn.net/javazejian/article/details/52953190">java 数据结构与算法之顺序表与链表深入分析<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWIwNTY4YjUxODgyNTU1ODAwMjBlNTY=" title="https://juejin.im/post/5ab0568b5188255580020e56">集合框架源码学习之 HashMap(JDK1.8)<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbS8/dGFyZ2V0PWh0dHAlM0ElMkYlMkZ3d3cuY25ibG9ncy5jb20lMkZjaGVuZ3hpYW8lMkZwJTJGNjg0MjA0NS5odG1s" title="https://link.juejin.im/?target=http%3A%2F%2Fwww.cnblogs.com%2Fchengxiao%2Fp%2F6842045.html">ConcurrentHashMap 实现原理及源码分析<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><ul>
<li><h3 id="1-二叉树"><a href="#1-二叉树" class="headerlink" title="1 二叉树"></a>1 二叉树</h3><p> <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkElOEMlRTUlOEYlODklRTYlQTAlOTE=" title="https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%A0%91">二叉树<i class="fa fa-external-link"></i></span>（百度百科）</p>
<p>(1)<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUUlOEMlRTUlODUlQTglRTQlQkElOEMlRTUlOEYlODklRTYlQTAlOTE=" title="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91">完全二叉树<i class="fa fa-external-link"></i></span>——若设二叉树的高度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第h层有叶子结点，并且叶子结点都是从左到右依次排布，这就是完全二叉树。</p>
<p>(2)<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUUlOEMlRTUlODUlQTglRTQlQkElOEMlRTUlOEYlODklRTYlQTAlOTE=" title="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91">满二叉树<i class="fa fa-external-link"></i></span>——除了叶结点外每一个结点都有左右子叶且叶子结点都处在最底层的二叉树。</p>
<p>(3)<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQjklQjMlRTglQTElQTElRTQlQkElOEMlRTUlOEYlODklRTYlQTAlOTEvMTA0MjEwNTc=" title="https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/10421057">平衡二叉树<i class="fa fa-external-link"></i></span>——平衡二叉树又被称为AVL树（区别于AVL算法），它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 </p>
</li>
<li><h3 id="2-完全二叉树"><a href="#2-完全二叉树" class="headerlink" title="2 完全二叉树"></a>2 完全二叉树</h3><p><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUUlOEMlRTUlODUlQTglRTQlQkElOEMlRTUlOEYlODklRTYlQTAlOTE=" title="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91">完全二叉树<i class="fa fa-external-link"></i></span>（百度百科）</p>
<p>完全二叉树：叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树</p>
</li>
<li><h3 id="3-满二叉树"><a href="#3-满二叉树" class="headerlink" title="3 满二叉树"></a>3 满二叉树</h3><p> <span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQkIlQTElRTQlQkElOEMlRTUlOEYlODklRTYlQTAlOTE=" title="https://baike.baidu.com/item/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91">满二叉树<i class="fa fa-external-link"></i></span>（百度百科，国内外的定义不同）</p>
<p> 国内教程定义：一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树。也就是说，如果一个二叉树的层数为K，且结点总数是(2^k) -1 ，则它就是满二叉树。</p>
</li>
<li><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p> <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTg2MzY2L2FydGljbGUvZGV0YWlscy81MTg3NjE5MQ==" title="https://blog.csdn.net/qq_33186366/article/details/51876191">数据结构之堆的定义<i class="fa fa-external-link"></i></span></p>
<p>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆</p>
</li>
<li><h3 id="4-二叉查找树（BST）"><a href="#4-二叉查找树（BST）" class="headerlink" title="4 二叉查找树（BST）"></a>4 二叉查找树（BST）</h3><p><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS95YW5nZWNudS9wL0ludHJvZHVjZS1CaW5hcnktU2VhcmNoLVRyZWUuaHRtbA==" title="http://www.cnblogs.com/yangecnu/p/Introduce-Binary-Search-Tree.html">浅谈算法和数据结构: 七 二叉查找树<i class="fa fa-external-link"></i></span></p>
<p> 二叉查找树的特点：</p>
<ol>
<li>若任意节点的左子树不空，则左子树上所有结点的     值均小于它的根结点的值；</li>
<li>若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>
<li>任意节点的左、右子树也分别为二叉查找树。</li>
<li>没有键值相等的节点（no duplicate nodes）。</li>
</ol>
</li>
<li><h3 id="5-平衡二叉树（Self-balancing-binary-search-tree）"><a href="#5-平衡二叉树（Self-balancing-binary-search-tree）" class="headerlink" title="5 平衡二叉树（Self-balancing binary search tree）"></a>5 平衡二叉树（Self-balancing binary search tree）</h3><p><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQjklQjMlRTglQTElQTElRTQlQkElOEMlRTUlOEYlODklRTYlQTAlOTE=" title="https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91"> 平衡二叉树<i class="fa fa-external-link"></i></span>（百度百科，平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等）</p>
</li>
<li><h3 id="6-红黑树"><a href="#6-红黑树" class="headerlink" title="6 红黑树"></a>6 红黑树</h3><ul>
<li><p>红黑树特点:</p>
<ol>
<li>每个节点非红即黑；</li>
<li>根节点总是黑色的；</li>
<li>每个叶子节点都是黑色的空节点（NIL节点）；</li>
<li>如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；</li>
<li>从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）</li>
</ol>
</li>
<li><p>红黑树的应用：</p>
<p>  TreeMap、TreeSet以及JDK1.8之后的HashMap底层都用到了红黑树。</p>
</li>
<li><p>为什么要用红黑树</p>
<p>简单来说红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。详细了解可以查看 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTI3YzY5NDZmYjlhMDQ1MDkwOTYyNDgjY29tbWVudA==" title="https://juejin.im/post/5a27c6946fb9a04509096248#comment">漫画：什么是红黑树？<i class="fa fa-external-link"></i></span>（也介绍到了二叉查找树，非常推荐）</p>
</li>
<li><p>推荐文章： </p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTI3YzY5NDZmYjlhMDQ1MDkwOTYyNDgjY29tbWVudA==" title="https://juejin.im/post/5a27c6946fb9a04509096248#comment">漫画：什么是红黑树？<i class="fa fa-external-link"></i></span>（也介绍到了二叉查找树，非常推荐）</li>
<li><span class="exturl" data-url="aHR0cDovL2RhbmRhbmxvdmUuY29tLzIwMTgvMDMvMTgvcmVkLWJsYWNrLXRyZWUv" title="http://dandanlove.com/2018/03/18/red-black-tree/">寻找红黑树的操作手册<i class="fa fa-external-link"></i></span>（文章排版以及思路真的不错）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNDM2Nzc3MQ==" title="https://zhuanlan.zhihu.com/p/24367771">红黑树深入剖析及Java实现<i class="fa fa-external-link"></i></span>（美团点评技术团队）    </li>
</ul>
</li>
</ul>
</li>
<li><h3 id="7-B-，B-，B-树"><a href="#7-B-，B-，B-树" class="headerlink" title="7 B-，B+，B*树"></a>7 B-，B+，B*树</h3><p> <span class="exturl" data-url="aHR0cHM6Ly95cS5hbGl5dW4uY29tL2FydGljbGVzLzM4MzQ1" title="https://yq.aliyun.com/articles/38345">二叉树学习笔记之B树、B+树、B*树 <i class="fa fa-external-link"></i></span></p>
<p> <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Fxendzcy9hcnRpY2xlL2RldGFpbHMvNTMwNzQxODY=" title="https://blog.csdn.net/aqzwss/article/details/53074186">《B-树，B+树，B*树详解》<i class="fa fa-external-link"></i></span></p>
<p> <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpZ3RyZWVfMzcyMS9hcnRpY2xlL2RldGFpbHMvNzM2MzI0MDU=" title="https://blog.csdn.net/bigtree_3721/article/details/73632405">《B-树，B+树与B*树的优缺点比较》<i class="fa fa-external-link"></i></span></p>
<p>B-树（或B树）是一种平衡的多路查找(又称排序)树，在文件系统中有所应用。主要用作文件的索引。其中的B就表示平衡(Balance) </p>
<ol>
<li>B+ 树的叶子节点链表结构相比于 B- 树便于扫库，和范围检索。</li>
<li>B+树支持range-query(区间查询)非常方便，而B树不支持。这是数据库选用B+树的最主要原因。</li>
<li>B<em>树 是B+树的变体，B</em>树分配新结点的概率比B+树要低，空间使用率更高；</li>
</ol>
</li>
<li><h3 id="8-LSM-树"><a href="#8-LSM-树" class="headerlink" title="8 LSM 树"></a>8 LSM 树</h3><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RiYW5vdGUvYXJ0aWNsZS9kZXRhaWxzLzg4OTc1OTk=" title="https://blog.csdn.net/dbanote/article/details/8897599">[HBase] LSM树 VS B+树<i class="fa fa-external-link"></i></span></p>
<p>B+树最大的性能问题是会产生大量的随机IO</p>
<p>为了克服B+树的弱点，HBase引入了LSM树的概念，即Log-Structured Merge-Trees。</p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS95YW5naHVhaHVpL3AvMzQ4Mzc1NC5odG1s" title="http://www.cnblogs.com/yanghuahui/p/3483754.html">LSM树由来、设计思想以及应用到HBase的索引<i class="fa fa-external-link"></i></span></p>
</li>
</ul>
<p>本文来自：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NuYWlsY2xpbWIvSmF2YUd1aWRl" title="https://github.com/Snailclimb/JavaGuide">github<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>Java集合</tag>
      </tags>
  </entry>
  <entry>
    <title>python-selenium</title>
    <url>/2018/11/26/python%E7%9B%B8%E5%85%B3/%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3/python-selenium/</url>
    <content><![CDATA[<h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">    input = browser.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">    input.send_keys(<span class="string">'Python'</span>)</span><br><span class="line">    input.send_keys(Keys.ENTER)</span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.ID, <span class="string">'content_left'</span>)))</span><br><span class="line">    print(browser.current_url)</span><br><span class="line">    print(browser.get_cookies())</span><br><span class="line"><span class="comment">#     print(browser.page_source)</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    browser.close()</span><br><span class="line"><span class="comment">#     pass</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<pre><code>https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=1&amp;tn=baidu&amp;wd=Python&amp;rsv_pq=a5c97a320002b831&amp;rsv_t=40f9KcmITND0x8jVm3SIUfO7XYtIEKNybu67sWNLNZCbYDlKb25TL%2Fth7Fc&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=6&amp;rsv_sug2=0&amp;inputT=84&amp;rsv_sug4=84
[{&apos;domain&apos;: &apos;.baidu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;H_PS_PSSID&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;1459_27212_21089_26350_22072&apos;}, {&apos;domain&apos;: &apos;.baidu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;delPer&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;0&apos;}, {&apos;domain&apos;: &apos;.baidu.com&apos;, &apos;expiry&apos;: 3690678226.882712, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;BAIDUID&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;007601ECC777B64E410F1B15797050BC:FG=1&apos;}, {&apos;domain&apos;: &apos;.baidu.com&apos;, &apos;expiry&apos;: 3690678226.882754, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;BIDUPSID&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;007601ECC777B64E410F1B15797050BC&apos;}, {&apos;domain&apos;: &apos;.baidu.com&apos;, &apos;expiry&apos;: 3690678226.882782, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;PSTM&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;1543194581&apos;}, {&apos;domain&apos;: &apos;www.baidu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;BD_HOME&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;0&apos;}, {&apos;domain&apos;: &apos;.baidu.com&apos;, &apos;expiry&apos;: 1543280981.212341, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;BDORZ&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;B490B5EBF6F3CD402E515D22BCDA1598&apos;}, {&apos;domain&apos;: &apos;www.baidu.com&apos;, &apos;expiry&apos;: 1544058580, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;BD_UPN&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;12314753&apos;}, {&apos;domain&apos;: &apos;www.baidu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;BD_CK_SAM&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;1&apos;}, {&apos;domain&apos;: &apos;.baidu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;PSINO&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;3&apos;}, {&apos;domain&apos;: &apos;www.baidu.com&apos;, &apos;expiry&apos;: 1543197173, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;H_PS_645EC&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;8528oKivT4IIkn4DCs%2Bgo%2BpFJrKj7z%2F7ZbUX08gaTLU%2BUSq00aRY1nXNo4s&apos;}, {&apos;domain&apos;: &apos;www.baidu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;BDSVRTM&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;110&apos;}]</code></pre><h2 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line">browser = webdriver.PhantomJS()</span><br><span class="line">browser = webdriver.Safari()</span><br></pre></td></tr></table></figure>

<h2 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line"><span class="comment"># print(browser.page_source) #获取网页源码</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>

<h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><h3 id="单个元素"><a href="#单个元素" class="headerlink" title="单个元素"></a>单个元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input_first = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input_second = browser.find_element_by_css_selector(<span class="string">'#q'</span>)</span><br><span class="line">input_third = browser.find_element_by_xpath(<span class="string">'//*[@id="q"]'</span>)</span><br><span class="line">print(input_first ,<span class="string">'\n'</span>,input_second, <span class="string">'\n'</span>,input_third)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;f13ea2eea70376b3c5ea9a7de759b792&quot;, element=&quot;0.6118108623728362-1&quot;)&gt; 
 &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;f13ea2eea70376b3c5ea9a7de759b792&quot;, element=&quot;0.6118108623728362-1&quot;)&gt; 
 &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;f13ea2eea70376b3c5ea9a7de759b792&quot;, element=&quot;0.6118108623728362-1&quot;)&gt;</code></pre><ul>
<li>查询方法</li>
</ul>
<ul>
<li>find_element_by_name</li>
<li>find_element_by_xpath</li>
<li>find_element_by_link_text</li>
<li>find_element_by_partial_link_text</li>
<li>find_element_by_tag_name</li>
<li>find_element_by_class_name</li>
<li>find_element_by_css_selector</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input_first = browser.find_element(By.ID, <span class="string">'q'</span>)</span><br><span class="line">print(input_first)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;1f209c0d11551c40d9d20ad964fef244&quot;, element=&quot;0.07914603542731591-1&quot;)&gt;</code></pre><h3 id="多个元素"><a href="#多个元素" class="headerlink" title="多个元素"></a>多个元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">lis = browser.find_elements_by_css_selector(<span class="string">'.service-bd li'</span>)</span><br><span class="line">print(lis[<span class="number">0</span>])</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;814553ea38f58a612ddf455d8881de9c&quot;, element=&quot;0.8893319273392275-1&quot;)&gt;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">lis = browser.find_elements(By.CSS_SELECTOR, <span class="string">'.service-bd li'</span>)</span><br><span class="line">print(lis[<span class="number">0</span>])</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;9a9223fdc4b5ec873971ec3bdb428044&quot;, element=&quot;0.03252050638069037-1&quot;)&gt;</code></pre><ul>
<li>find_elements_by_name</li>
<li>find_elements_by_xpath</li>
<li>find_elements_by_link_text</li>
<li>find_elements_by_partial_link_text</li>
<li>find_elements_by_tag_name</li>
<li>find_elements_by_class_name</li>
<li>find_elements_by_css_selector</li>
</ul>
<h2 id="元素交互操作"><a href="#元素交互操作" class="headerlink" title="元素交互操作"></a>元素交互操作</h2><p>对获取的元素调用交互方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input.send_keys(<span class="string">'iPhone'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">input.clear()</span><br><span class="line">input.send_keys(<span class="string">'iPad'</span>)</span><br><span class="line">button = browser.find_element_by_class_name(<span class="string">'btn-search'</span>)</span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure>

<p>更多操作: <span class="exturl" data-url="aHR0cDovL3NlbGVuaXVtLXB5dGhvbi5yZWFkdGhlZG9jcy5pby9hcGkuaHRtbCNtb2R1bGUtc2VsZW5pdW0ud2ViZHJpdmVyLnJlbW90ZS53ZWJlbGVtZW50" title="http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement">http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement<i class="fa fa-external-link"></i></span></p>
<h2 id="交互动作"><a href="#交互动作" class="headerlink" title="交互动作"></a>交互动作</h2><p>将动作附加到动作链中串行执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)</span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">'#droppable'</span>)</span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source, target)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure>

<p>更多操作: <span class="exturl" data-url="aHR0cDovL3NlbGVuaXVtLXB5dGhvbi5yZWFkdGhlZG9jcy5pby9hcGkuaHRtbCNtb2R1bGUtc2VsZW5pdW0ud2ViZHJpdmVyLmNvbW1vbi5hY3Rpb25fY2hhaW5z" title="http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains">http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains<i class="fa fa-external-link"></i></span></p>
<h2 id="执行JavaScript"><a href="#执行JavaScript" class="headerlink" title="执行JavaScript"></a>执行JavaScript</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'alert("To Bottom")'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="获取元素信息"><a href="#获取元素信息" class="headerlink" title="获取元素信息"></a>获取元素信息</h2><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">logo = browser.find_element_by_id(<span class="string">'zh-top-link-logo'</span>)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.get_attribute(<span class="string">'class'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;e08c0f28d7f44d75ccd50df6bb676104&quot;, element=&quot;0.7236390660048155-1&quot;)&gt;
zu-top-link-logo</code></pre><h3 id="获取文本值"><a href="#获取文本值" class="headerlink" title="获取文本值"></a>获取文本值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input.text)</span><br></pre></td></tr></table></figure>

<pre><code>提问</code></pre><h3 id="获取ID、位置、标签名、大小"><a href="#获取ID、位置、标签名、大小" class="headerlink" title="获取ID、位置、标签名、大小"></a>获取ID、位置、标签名、大小</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input.id)</span><br><span class="line">print(input.location)</span><br><span class="line">print(input.tag_name)</span><br><span class="line">print(input.size)</span><br></pre></td></tr></table></figure>

<pre><code>0.6822924344980397-1
{&apos;y&apos;: 7, &apos;x&apos;: 774}
button
{&apos;height&apos;: 32, &apos;width&apos;: 66}</code></pre><h2 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)</span><br><span class="line">print(source)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    logo = browser.find_element_by_class_name(<span class="string">'logo'</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">    print(<span class="string">'NO LOGO'</span>)</span><br><span class="line">browser.switch_to.parent_frame()</span><br><span class="line">logo = browser.find_element_by_class_name(<span class="string">'logo'</span>)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.text)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;8ba0dae88dea4b0f7ec7e00bedd1e08f&quot;, element=&quot;0.8658472569940252-1&quot;)&gt;
NO LOGO
&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;8ba0dae88dea4b0f7ec7e00bedd1e08f&quot;, element=&quot;0.8841145266063459-2&quot;)&gt;
RUNOOB.COM</code></pre><h2 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h2><h3 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h3><p>当使用了隐式等待执行测试的时候，如果 WebDriver没有在 DOM中找到元素，将继续等待，超出设定时间后则抛出找不到元素的异常, 换句话说，当查找元素或元素并没有立即出现的时候，隐式等待将等待一段时间再查找 DOM，默认的时间是0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;b29214772d59e912f1ac52e96ed29abe&quot;, element=&quot;0.12886805191194894-1&quot;)&gt;</code></pre><h3 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com/'</span>)</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">input = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'q'</span>)))</span><br><span class="line">button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'.btn-search'</span>)))</span><br><span class="line">print(input, button)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;07dd2fbc2d5b1ce40e82b9754aba8fa8&quot;, element=&quot;0.5642646294074107-1&quot;)&gt; &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;07dd2fbc2d5b1ce40e82b9754aba8fa8&quot;, element=&quot;0.5642646294074107-2&quot;)&gt;</code></pre><ul>
<li>title_is 标题是某内容</li>
<li>title_contains  标题包含某内容</li>
<li>presence_of_element_located 元素加载出，传入定位元组，如(By.ID, ‘p’)</li>
<li>visibility_of_element_located  元素可见，传入定位元组</li>
<li>visibility_of 可见，传入元素对象</li>
<li>presence_of_all_elements_located 所有元素加载出</li>
<li>text_to_be_present_in_element 某个元素文本包含某文字</li>
<li>text_to_be_present_in_element_value  某个元素值包含某文字</li>
<li>frame_to_be_available_and_switch_to_it  frame加载并切换</li>
<li>invisibility_of_element_located 元素不可见</li>
<li>element_to_be_clickable  元素可点击</li>
<li>staleness_of  判断一个元素是否仍在DOM，可判断页面是否已经刷新</li>
<li>element_to_be_selected  元素可选择，传元素对象</li>
<li>element_located_to_be_selected  元素可选择，传入定位元组</li>
<li>element_selection_state_to_be  传入元素对象以及状态，相等返回True，否则返回False</li>
<li>element_located_selection_state_to_be  传入定位元组以及状态，相等返回True，否则返回False</li>
<li>alert_is_present 是否出现Alert</li>
</ul>
<p>详细内容：<span class="exturl" data-url="aHR0cDovL3NlbGVuaXVtLXB5dGhvbi5yZWFkdGhlZG9jcy5pby9hcGkuaHRtbCNtb2R1bGUtc2VsZW5pdW0ud2ViZHJpdmVyLnN1cHBvcnQuZXhwZWN0ZWRfY29uZGl0aW9ucw==" title="http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions">http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions<i class="fa fa-external-link"></i></span></p>
<h2 id="前进后退"><a href="#前进后退" class="headerlink" title="前进后退"></a>前进后退</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.python.org/'</span>)</span><br><span class="line">browser.back()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.forward()</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>

<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line"><span class="comment"># print(browser.get_cookies())</span></span><br><span class="line">browser.add_cookie(&#123;<span class="string">'name'</span>: <span class="string">'name'</span>, <span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'value'</span>: <span class="string">'germey'</span>&#125;)</span><br><span class="line">print(browser.get_cookies()[<span class="number">0</span>])</span><br><span class="line">browser.delete_all_cookies()</span><br><span class="line">print(browser.get_cookies())</span><br></pre></td></tr></table></figure>

<pre><code>{&apos;domain&apos;: &apos;.zhihu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;l_n_c&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;1&apos;}
[]</code></pre><h2 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.open()'</span>)</span><br><span class="line">print(browser.window_handles)</span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">1</span>])</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line">browser.get(<span class="string">'https://python.org'</span>)</span><br></pre></td></tr></table></figure>

<pre><code>[&apos;CDwindow-4f58e3a7-7167-4587-bedf-9cd8c867f435&apos;, &apos;CDwindow-6e05f076-6d77-453a-a36c-32baacc447df&apos;]</code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"><span class="comment"># browser.find_element_by_id('hello') # 报错</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException, NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">except</span> TimeoutException:</span><br><span class="line">    print(<span class="string">'Time Out'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.find_element_by_id(<span class="string">'hello'</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">    print(<span class="string">'No Element'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure>

<pre><code>No Element</code></pre><p>详细文档：<span class="exturl" data-url="aHR0cDovL3NlbGVuaXVtLXB5dGhvbi5yZWFkdGhlZG9jcy5pby9hcGkuaHRtbCNtb2R1bGUtc2VsZW5pdW0uY29tbW9uLmV4Y2VwdGlvbnM=" title="http://selenium-python.readthedocs.io/api.html#module-selenium.common.exceptions">http://selenium-python.readthedocs.io/api.html#module-selenium.common.exceptions<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python-spider</tag>
      </tags>
  </entry>
  <entry>
    <title>python-pyquery</title>
    <url>/2018/11/26/python%E7%9B%B8%E5%85%B3/%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3/python-pyquery/</url>
    <content><![CDATA[<h1 id="pyquery"><a href="#pyquery" class="headerlink" title="pyquery"></a>pyquery</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="字符串初始化"><a href="#字符串初始化" class="headerlink" title="字符串初始化"></a>字符串初始化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0" id='id'&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 安装 conda install pyquery</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">print(type(doc))</span><br><span class="line">print(doc(<span class="string">'li'</span>))</span><br><span class="line">print(doc(<span class="string">'#id'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;pyquery.pyquery.PyQuery&apos;&gt;
&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;
         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-0&quot; id=&quot;id&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-0&quot; id=&quot;id&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</code></pre><a id="more"></a>

<h3 id="URL初始化"><a href="#URL初始化" class="headerlink" title="URL初始化"></a>URL初始化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(url=<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(doc(<span class="string">'head'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;head&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;/&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;/&gt;&lt;meta content=&quot;always&quot; name=&quot;referrer&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&quot;/&gt;&lt;title&gt;ç¾åº¦ä¸ä¸ï¼ä½ å°±ç¥é&lt;/title&gt;&lt;/head&gt; </code></pre><h3 id="文件初始化"><a href="#文件初始化" class="headerlink" title="文件初始化"></a>文件初始化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(filename=<span class="string">'demo.html'</span>)</span><br><span class="line">print(doc(<span class="string">'li'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;
         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</code></pre><h2 id="基本CSS选择器"><a href="#基本CSS选择器" class="headerlink" title="基本CSS选择器"></a>基本CSS选择器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">    &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">print(doc(<span class="string">'#container .list li'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;
         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</code></pre><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><h3 id="子元素"><a href="#子元素" class="headerlink" title="子元素"></a>子元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">    &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">items = doc(<span class="string">'.list'</span>)</span><br><span class="line">print(type(items))</span><br><span class="line">print(items)</span><br><span class="line">lis = items.find(<span class="string">'li'</span>)</span><br><span class="line">print(type(lis))</span><br><span class="line">print(lis)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;pyquery.pyquery.PyQuery&apos;&gt;
&lt;ul class=&quot;list&quot;&gt;
         &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;
         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;
     &lt;/ul&gt;

&lt;class &apos;pyquery.pyquery.PyQuery&apos;&gt;
&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;
         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = items.children()</span><br><span class="line">print(type(lis))</span><br><span class="line">print(lis)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;pyquery.pyquery.PyQuery&apos;&gt;
&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;
         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = items.children(<span class="string">'.active'</span>)</span><br><span class="line">print(lis)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</code></pre><h3 id="父元素"><a href="#父元素" class="headerlink" title="父元素"></a>父元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">    &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">items = doc(<span class="string">'.list'</span>)</span><br><span class="line">container = items.parent()</span><br><span class="line">print(type(container))</span><br><span class="line">print(container)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;pyquery.pyquery.PyQuery&apos;&gt;
&lt;div id=&quot;container&quot;&gt;
    &lt;ul class=&quot;list&quot;&gt;
         &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;
         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;
     &lt;/ul&gt;
 &lt;/div&gt;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">items = doc(<span class="string">'.list'</span>)</span><br><span class="line">parents = items.parents()</span><br><span class="line">print(type(parents))</span><br><span class="line">print(parents)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;pyquery.pyquery.PyQuery&apos;&gt;
&lt;div class=&quot;wrap&quot;&gt;
    &lt;div id=&quot;container&quot;&gt;
        &lt;ul class=&quot;list&quot;&gt;
             &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;
             &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;
             &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
             &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
             &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;
         &lt;/ul&gt;
     &lt;/div&gt;
 &lt;/div&gt;&lt;div id=&quot;container&quot;&gt;
        &lt;ul class=&quot;list&quot;&gt;
             &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;
             &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;
             &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
             &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
             &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;
         &lt;/ul&gt;
     &lt;/div&gt;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parent = items.parents(<span class="string">'.wrap'</span>)</span><br><span class="line">print(parent)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;div class=&quot;wrap&quot;&gt;
    &lt;div id=&quot;container&quot;&gt;
        &lt;ul class=&quot;list&quot;&gt;
             &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;
             &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;
             &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
             &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
             &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;
         &lt;/ul&gt;
     &lt;/div&gt;
 &lt;/div&gt;</code></pre><h3 id="兄弟元素"><a href="#兄弟元素" class="headerlink" title="兄弟元素"></a>兄弟元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">li = doc(<span class="string">'.list .item-0.active'</span>)</span><br><span class="line">print(li.siblings())</span><br></pre></td></tr></table></figure>

<pre><code>&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;
             &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;
             &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
             &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">li = doc(<span class="string">'.list .item-0.active'</span>)</span><br><span class="line">print(li.siblings(<span class="string">'.active'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</code></pre><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><h3 id="单个元素"><a href="#单个元素" class="headerlink" title="单个元素"></a>单个元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">li = doc(<span class="string">'.item-0.active'</span>)</span><br><span class="line">print(li)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">lis = doc(<span class="string">'li'</span>).items()</span><br><span class="line">print(type(lis))</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">    print(li)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;generator&apos;&gt;
&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;

&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</code></pre><h2 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h2><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">a = doc(<span class="string">'.item-0.active a'</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(a.attr(<span class="string">'href'</span>))</span><br><span class="line">print(a.attr.href)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;
link3.html
link3.html</code></pre><h3 id="获取文本"><a href="#获取文本" class="headerlink" title="获取文本"></a>获取文本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">a = doc(<span class="string">'.item-0.active a'</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(a.text())</span><br></pre></td></tr></table></figure>

<pre><code>&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;
third item</code></pre><h3 id="获取HTML"><a href="#获取HTML" class="headerlink" title="获取HTML"></a>获取HTML</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">li = doc(<span class="string">'.item-0.active'</span>)</span><br><span class="line">print(li)</span><br><span class="line">print(li.html())</span><br></pre></td></tr></table></figure>

<pre><code>&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;

&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;</code></pre><h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><h3 id="addClass、removeClass"><a href="#addClass、removeClass" class="headerlink" title="addClass、removeClass"></a>addClass、removeClass</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">li = doc(<span class="string">'.item-0.active'</span>)</span><br><span class="line">print(li)</span><br><span class="line">li.removeClass(<span class="string">'active'</span>)</span><br><span class="line">print(li)</span><br><span class="line">li.addClass(<span class="string">'active'</span>)</span><br><span class="line">print(li)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</code></pre><h3 id="attr、css"><a href="#attr、css" class="headerlink" title="attr、css"></a>attr、css</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">li = doc(<span class="string">'.item-0.active'</span>)</span><br><span class="line">print(li)</span><br><span class="line">li.attr(<span class="string">'name'</span>, <span class="string">'link'</span>)</span><br><span class="line">print(li)</span><br><span class="line">li.css(<span class="string">'font-size'</span>, <span class="string">'14px'</span>)</span><br><span class="line">print(li)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-0 active&quot; name=&quot;link&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-0 active&quot; name=&quot;link&quot; style=&quot;font-size: 14px&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</code></pre><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    Hello, World</span></span><br><span class="line"><span class="string">    &lt;p&gt;This is a paragraph.&lt;/p&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">wrap = doc(<span class="string">'.wrap'</span>)</span><br><span class="line">print(wrap.text())</span><br><span class="line">wrap.find(<span class="string">'p'</span>).remove()</span><br><span class="line">print(wrap.text())</span><br></pre></td></tr></table></figure>

<pre><code>Hello, World This is a paragraph.
Hello, World</code></pre><h3 id="其他DOM方法"><a href="#其他DOM方法" class="headerlink" title="其他DOM方法"></a>其他DOM方法</h3><p><span class="exturl" data-url="aHR0cDovL3B5cXVlcnkucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0L2FwaS5odG1s" title="http://pyquery.readthedocs.io/en/latest/api.html">http://pyquery.readthedocs.io/en/latest/api.html<i class="fa fa-external-link"></i></span></p>
<h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">doc = pq(html)</span><br><span class="line">li = doc(<span class="string">'li:first-child'</span>)</span><br><span class="line">print(li)</span><br><span class="line">li = doc(<span class="string">'li:last-child'</span>)</span><br><span class="line">print(li)</span><br><span class="line">li = doc(<span class="string">'li:nth-child(2)'</span>)</span><br><span class="line">print(li)</span><br><span class="line">li = doc(<span class="string">'li:gt(2)'</span>)</span><br><span class="line">print(li)</span><br><span class="line">li = doc(<span class="string">'li:nth-child(2n)'</span>)</span><br><span class="line">print(li)</span><br><span class="line">li = doc(<span class="string">'li:contains(second)'</span>)</span><br><span class="line">print(li)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;

&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;
             &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;
             &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;

&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</code></pre><p>更多CSS选择器可以查看<br><span class="exturl" data-url="aHR0cDovL3d3dy53M3NjaG9vbC5jb20uY24vY3NzL2luZGV4LmFzcA==" title="http://www.w3school.com.cn/css/index.asp">http://www.w3school.com.cn/css/index.asp<i class="fa fa-external-link"></i></span></p>
<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><span class="exturl" data-url="aHR0cDovL3B5cXVlcnkucmVhZHRoZWRvY3MuaW8v" title="http://pyquery.readthedocs.io/">http://pyquery.readthedocs.io/<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python-spider</tag>
      </tags>
  </entry>
  <entry>
    <title>python-beautifulsoup</title>
    <url>/2018/11/26/python%E7%9B%B8%E5%85%B3/%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3/python-beautifulsoup/</url>
    <content><![CDATA[<h1 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h1><h2 id="解析库"><a href="#解析库" class="headerlink" title="解析库"></a>解析库</h2><table>
<thead>
<tr>
<th>解析器</th>
<th>使用方法</th>
<th>优势</th>
<th>劣势</th>
</tr>
</thead>
<tbody><tr>
<td>Python标准库</td>
<td>BeautifulSoup(markup, “html.parser”)</td>
<td>Python的内置标准库、执行速度适中 、文档容错能力强</td>
<td>Python 2.7.3 or 3.2.2)前的版本中文容错能力差</td>
</tr>
<tr>
<td>lxml HTML 解析器</td>
<td>BeautifulSoup(markup, “lxml”)</td>
<td>速度快、文档容错能力强</td>
<td>需要安装C语言库</td>
</tr>
<tr>
<td>lxml XML 解析器</td>
<td>BeautifulSoup(markup, “xml”)</td>
<td>速度快、唯一支持XML的解析器</td>
<td>需要安装C语言库</td>
</tr>
<tr>
<td>html5lib</td>
<td>BeautifulSoup(markup, “html5lib”)</td>
<td>最好的容错性、以浏览器的方式解析文档、生成HTML5格式的文档</td>
<td>速度慢、不依赖外部扩展</td>
</tr>
<tr>
<td><a id="more"></a></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>## 基本使用</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.prettify())</span><br><span class="line">print(soup.title.string)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;
   The Dormouse&apos;s story
  &lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;
   &lt;b&gt;
    The Dormouse&apos;s story
   &lt;/b&gt;
  &lt;/p&gt;
  &lt;p class=&quot;story&quot;&gt;
   Once upon a time there were three little sisters; and their names were
   &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;
    &lt;!-- Elsie --&gt;
   &lt;/a&gt;
   ,
   &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;
    Lacie
   &lt;/a&gt;
   and
   &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;
    Tillie
   &lt;/a&gt;
   ;
and they lived at the bottom of a well.
  &lt;/p&gt;
  &lt;p class=&quot;story&quot;&gt;
   ...
  &lt;/p&gt;
 &lt;/body&gt;
&lt;/html&gt;
The Dormouse&apos;s story</code></pre><h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><h3 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.title)</span><br><span class="line">print(type(soup.title))</span><br><span class="line">print(soup.head)</span><br><span class="line">print(soup.p)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;
&lt;class &apos;bs4.element.Tag&apos;&gt;
&lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;
&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;</code></pre><h3 id="获取名称"><a href="#获取名称" class="headerlink" title="获取名称"></a>获取名称</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.title.name)</span><br></pre></td></tr></table></figure>

<pre><code>title</code></pre><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.attrs[<span class="string">'name'</span>])</span><br><span class="line">print(soup.p[<span class="string">'name'</span>])</span><br></pre></td></tr></table></figure>

<pre><code>dromouse
dromouse</code></pre><h3 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p clss="title" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.string)</span><br></pre></td></tr></table></figure>

<pre><code>The Dormouse&apos;s story</code></pre><h3 id="嵌套选择"><a href="#嵌套选择" class="headerlink" title="嵌套选择"></a>嵌套选择</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.head.title.string)</span><br></pre></td></tr></table></figure>

<pre><code>The Dormouse&apos;s story</code></pre><h3 id="子节点和子孙节点"><a href="#子节点和子孙节点" class="headerlink" title="子节点和子孙节点"></a>子节点和子孙节点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.contents)</span><br></pre></td></tr></table></figure>

<pre><code>[&apos;\n            Once upon a time there were three little sisters; and their names were\n            &apos;, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;
&lt;span&gt;Elsie&lt;/span&gt;
&lt;/a&gt;, &apos;\n&apos;, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;, &apos; \n            and\n            &apos;, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;, &apos;\n            and they lived at the bottom of a well.\n        &apos;]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.children)</span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> enumerate(soup.p.children):</span><br><span class="line">    print(i, child)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;list_iterator object at 0x1064f7dd8&gt;
0 
            Once upon a time there were three little sisters; and their names were

1 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;
&lt;span&gt;Elsie&lt;/span&gt;
&lt;/a&gt;
2 

3 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;
4  
            and

5 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;
6 
            and they lived at the bottom of a well.</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.descendants)</span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> enumerate(soup.p.descendants):</span><br><span class="line">    print(i, child)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;generator object descendants at 0x10650e678&gt;
0 
            Once upon a time there were three little sisters; and their names were

1 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;
&lt;span&gt;Elsie&lt;/span&gt;
&lt;/a&gt;
2 

3 &lt;span&gt;Elsie&lt;/span&gt;
4 Elsie
5 

6 

7 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;
8 Lacie
9  
            and

10 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;
11 Tillie
12 
            and they lived at the bottom of a well.</code></pre><h3 id="父节点和祖先节点"><a href="#父节点和祖先节点" class="headerlink" title="父节点和祖先节点"></a>父节点和祖先节点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.a.parent)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;p class=&quot;story&quot;&gt;
            Once upon a time there were three little sisters; and their names were
            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;
&lt;span&gt;Elsie&lt;/span&gt;
&lt;/a&gt;
&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; 
            and
            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;
            and they lived at the bottom of a well.
        &lt;/p&gt;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(list(enumerate(soup.a.parents)))</span><br></pre></td></tr></table></figure>

<pre><code>[(0, &lt;p class=&quot;story&quot;&gt;
            Once upon a time there were three little sisters; and their names were
            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;
&lt;span&gt;Elsie&lt;/span&gt;
&lt;/a&gt;
&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; 
            and
            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;
            and they lived at the bottom of a well.
        &lt;/p&gt;), (1, &lt;body&gt;
&lt;p class=&quot;story&quot;&gt;
            Once upon a time there were three little sisters; and their names were
            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;
&lt;span&gt;Elsie&lt;/span&gt;
&lt;/a&gt;
&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; 
            and
            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;
            and they lived at the bottom of a well.
        &lt;/p&gt;
&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;
&lt;/body&gt;), (2, &lt;html&gt;
&lt;head&gt;
&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p class=&quot;story&quot;&gt;
            Once upon a time there were three little sisters; and their names were
            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;
&lt;span&gt;Elsie&lt;/span&gt;
&lt;/a&gt;
&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; 
            and
            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;
            and they lived at the bottom of a well.
        &lt;/p&gt;
&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;), (3, &lt;html&gt;
&lt;head&gt;
&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p class=&quot;story&quot;&gt;
            Once upon a time there were three little sisters; and their names were
            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;
&lt;span&gt;Elsie&lt;/span&gt;
&lt;/a&gt;
&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; 
            and
            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;
            and they lived at the bottom of a well.
        &lt;/p&gt;
&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;)]</code></pre><h3 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(list(enumerate(soup.a.next_siblings)))</span><br><span class="line">print(list(enumerate(soup.a.previous_siblings)))</span><br></pre></td></tr></table></figure>

<pre><code>[(0, &apos;\n&apos;), (1, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;), (2, &apos; \n            and\n            &apos;), (3, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;), (4, &apos;\n            and they lived at the bottom of a well.\n        &apos;)]
[(0, &apos;\n            Once upon a time there were three little sisters; and their names were\n            &apos;)]</code></pre><h2 id="标准选择器"><a href="#标准选择器" class="headerlink" title="标准选择器"></a>标准选择器</h2><h3 id="find-all-name-attrs-recursive-text-kwargs"><a href="#find-all-name-attrs-recursive-text-kwargs" class="headerlink" title="find_all( name , attrs , recursive , text , **kwargs )"></a>find_all( name , attrs , recursive , text , **kwargs )</h3><p>可根据标签名、属性、内容查找文档</p>
<h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html=<span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list" id="list-1"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.find_all(<span class="string">'ul'</span>))</span><br><span class="line">print(type(soup.find_all(<span class="string">'ul'</span>)[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>

<pre><code>[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;
&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;
&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;
&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;
&lt;/ul&gt;, &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;
&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;
&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;
&lt;/ul&gt;]
&lt;class &apos;bs4.element.Tag&apos;&gt;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html=<span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list" id="list-1"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.find_all(<span class="string">'ul'</span>):</span><br><span class="line">    print(ul.find_all(<span class="string">'li'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;]
[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]</code></pre><h4 id="attrs"><a href="#attrs" class="headerlink" title="attrs"></a>attrs</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html=<span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list" id="list-1" name="elements"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">'id'</span>: <span class="string">'list-1'</span>&#125;))</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">'name'</span>: <span class="string">'elements'</span>&#125;))</span><br></pre></td></tr></table></figure>

<pre><code>[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt;
&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;
&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;
&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;
&lt;/ul&gt;]
[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt;
&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;
&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;
&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;
&lt;/ul&gt;]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html=<span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list" id="list-1"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.find_all(id=<span class="string">'list-1'</span>))</span><br><span class="line">print(soup.find_all(class_=<span class="string">'element'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;
&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;
&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;
&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;
&lt;/ul&gt;]
[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]</code></pre><h4 id="text"><a href="#text" class="headerlink" title="text"></a>text</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html=<span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list" id="list-1"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.find_all(text=<span class="string">'Foo'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>[&apos;Foo&apos;, &apos;Foo&apos;]</code></pre><h3 id="find-name-attrs-recursive-text-kwargs"><a href="#find-name-attrs-recursive-text-kwargs" class="headerlink" title="find( name , attrs , recursive , text , **kwargs )"></a>find( name , attrs , recursive , text , **kwargs )</h3><p>find返回单个元素，find_all返回所有元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html=<span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list" id="list-1"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.find(<span class="string">'ul'</span>))</span><br><span class="line">print(type(soup.find(<span class="string">'ul'</span>)))</span><br><span class="line">print(soup.find(<span class="string">'page'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;
&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;
&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;
&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;
&lt;/ul&gt;
&lt;class &apos;bs4.element.Tag&apos;&gt;
None</code></pre><h3 id="find-parents-find-parent"><a href="#find-parents-find-parent" class="headerlink" title="find_parents()  find_parent()"></a>find_parents()  find_parent()</h3><p>find_parents()返回所有祖先节点，find_parent()返回直接父节点。</p>
<h3 id="find-next-siblings-find-next-sibling"><a href="#find-next-siblings-find-next-sibling" class="headerlink" title="find_next_siblings()  find_next_sibling()"></a>find_next_siblings()  find_next_sibling()</h3><p>find_next_siblings()返回后面所有兄弟节点，find_next_sibling()返回后面第一个兄弟节点。</p>
<h3 id="find-previous-siblings-find-previous-sibling"><a href="#find-previous-siblings-find-previous-sibling" class="headerlink" title="find_previous_siblings()  find_previous_sibling()"></a>find_previous_siblings()  find_previous_sibling()</h3><p>find_previous_siblings()返回前面所有兄弟节点，find_previous_sibling()返回前面第一个兄弟节点。</p>
<h3 id="find-all-next-find-next"><a href="#find-all-next-find-next" class="headerlink" title="find_all_next()  find_next()"></a>find_all_next()  find_next()</h3><p>find_all_next()返回节点后所有符合条件的节点, find_next()返回第一个符合条件的节点</p>
<h3 id="find-all-previous-和-find-previous"><a href="#find-all-previous-和-find-previous" class="headerlink" title="find_all_previous() 和 find_previous()"></a>find_all_previous() 和 find_previous()</h3><p>find_all_previous()返回节点后所有符合条件的节点, find_previous()返回第一个符合条件的节点</p>
<h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p>通过select()直接传入CSS选择器即可完成选择</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html=<span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list" id="list-1"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.select(<span class="string">'.panel .panel-heading'</span>))</span><br><span class="line">print(soup.select(<span class="string">'ul li'</span>))</span><br><span class="line">print(soup.select(<span class="string">'#list-2 .element'</span>))</span><br><span class="line">print(type(soup.select(<span class="string">'ul'</span>)[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>

<pre><code>[&lt;div class=&quot;panel-heading&quot;&gt;
&lt;h4&gt;Hello&lt;/h4&gt;
&lt;/div&gt;]
[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]
[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]
&lt;class &apos;bs4.element.Tag&apos;&gt;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html=<span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list" id="list-1"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.select(<span class="string">'ul'</span>):</span><br><span class="line">    print(ul.select(<span class="string">'li'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;]
[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]</code></pre><h3 id="获取属性-1"><a href="#获取属性-1" class="headerlink" title="获取属性"></a>获取属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html=<span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list" id="list-1"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.select(<span class="string">'ul'</span>):</span><br><span class="line">    print(ul[<span class="string">'id'</span>])</span><br><span class="line">    print(ul.attrs[<span class="string">'id'</span>])</span><br></pre></td></tr></table></figure>

<pre><code>list-1
list-1
list-2
list-2</code></pre><h3 id="获取内容-1"><a href="#获取内容-1" class="headerlink" title="获取内容"></a>获取内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html=<span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list" id="list-1"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> soup.select(<span class="string">'li'</span>):</span><br><span class="line">    print(li.get_text())</span><br></pre></td></tr></table></figure>

<pre><code>Foo
Bar
Jay
Foo
Bar</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>推荐使用lxml解析库，必要时使用html.parser</li>
<li>标签选择筛选功能弱但是速度快</li>
<li>建议使用find()、find_all() 查询匹配单个结果或者多个结果</li>
<li>如果对CSS选择器熟悉建议使用select()</li>
<li>记住常用的获取属性和文本值的方法</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python-spider</tag>
      </tags>
  </entry>
  <entry>
    <title>python-regex</title>
    <url>/2018/11/26/python%E7%9B%B8%E5%85%B3/%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3/python-regex/</url>
    <content><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="常见匹配模式"><a href="#常见匹配模式" class="headerlink" title="常见匹配模式"></a>常见匹配模式</h2><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\w</td>
<td>匹配字母数字及下划线</td>
</tr>
<tr>
<td>\W</td>
<td>匹配非字母数字下划线</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意空白字符，等价于 [\t\n\r\f].</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任意非空字符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配任意数字，等价于 [0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>匹配任意非数字</td>
</tr>
<tr>
<td>\A</td>
<td>匹配字符串开始</td>
</tr>
<tr>
<td>\Z</td>
<td>匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串</td>
</tr>
<tr>
<td>\z</td>
<td>匹配字符串结束</td>
</tr>
<tr>
<td>\G</td>
<td>匹配最后匹配完成的位置</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开头</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的末尾。</td>
</tr>
<tr>
<td>.</td>
<td><strong>匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。</strong></td>
</tr>
<tr>
<td>[…]</td>
<td>用来表示一组字符,单独列出：[amk] 匹配 ‘a’，’m’或’k’</td>
</tr>
<tr>
<td>[^…]</td>
<td>不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。</td>
</tr>
<tr>
<td>*</td>
<td>匹配0个或多个的表达式。</td>
</tr>
<tr>
<td>+</td>
<td>匹配1个或多个的表达式。</td>
</tr>
<tr>
<td>?</td>
<td>匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</td>
</tr>
<tr>
<td>{n}</td>
<td>精确匹配n个前面表达式。</td>
</tr>
<tr>
<td>{n, m}</td>
<td>匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</td>
</tr>
<tr>
<td>a&#124;b</td>
<td>匹配a或b</td>
</tr>
<tr>
<td>( )</td>
<td>匹配括号内的表达式，也表示一个组</td>
</tr>
<tr>
<td><a id="more"></a></td>
<td></td>
</tr>
<tr>
<td>## re.match</td>
<td></td>
</tr>
<tr>
<td>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</td>
<td></td>
</tr>
<tr>
<td>re.match(pattern, string, flags=0)</td>
<td></td>
</tr>
<tr>
<td>### 最常规的匹配</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 123 4567 World_This is a Regex Demo'</span></span><br><span class="line">print(len(content))</span><br><span class="line">result = re.match(<span class="string">'^Hello\s\d\d\d\s\d&#123;4&#125;\s\w&#123;10&#125;.*Demo$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure>

<pre><code>41
&lt;re.Match object; span=(0, 41), match=&apos;Hello 123 4567 World_This is a Regex Demo&apos;&gt;
Hello 123 4567 World_This is a Regex Demo
(0, 41)</code></pre><h3 id="泛匹配"><a href="#泛匹配" class="headerlink" title="泛匹配"></a>泛匹配</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 123 4567 World_This is a Regex Demo'</span></span><br><span class="line">result = re.match(<span class="string">'^Hello.*Demo$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure>

<pre><code>&lt;_sre.SRE_Match object; span=(0, 41), match=&apos;Hello 123 4567 World_This is a Regex Demo&apos;&gt;
Hello 123 4567 World_This is a Regex Demo
(0, 41)</code></pre><h3 id="匹配目标"><a href="#匹配目标" class="headerlink" title="匹配目标"></a>匹配目标</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></span><br><span class="line">result = re.match(<span class="string">'^Hello\s(\d+)\sWorld.*Demo$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure>

<pre><code>&lt;_sre.SRE_Match object; span=(0, 40), match=&apos;Hello 1234567 World_This is a Regex Demo&apos;&gt;
1234567
(0, 40)</code></pre><h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></span><br><span class="line">result = re.match(<span class="string">'^He.*(\d+).*Demo$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>)) <span class="comment">#点星尽可能多的匹配</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;re.Match object; span=(0, 40), match=&apos;Hello 1234567 World_This is a Regex Demo&apos;&gt;
7</code></pre><h3 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></span><br><span class="line">result = re.match(<span class="string">'^He.*?(\d+).*Demo$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>)) <span class="comment"># 点星问号尽可能少的匹配</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;_sre.SRE_Match object; span=(0, 40), match=&apos;Hello 1234567 World_This is a Regex Demo&apos;&gt;
1234567</code></pre><h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'''Hello 1234567 World_This</span></span><br><span class="line"><span class="string">is a Regex Demo</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">result = re.match(<span class="string">'^He.*?(\d+).*?Demo$'</span>, content, re.S)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<pre><code>1234567</code></pre><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'price is $5.00'</span></span><br><span class="line">result = re.match(<span class="string">'price is $5.00'</span>, content)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'price is $5.00'</span></span><br><span class="line">result = re.match(<span class="string">'price is \$5\.00'</span>, content)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;_sre.SRE_Match object; span=(0, 14), match=&apos;price is $5.00&apos;&gt;</code></pre><p>总结：尽量使用泛匹配、使用括号得到匹配目标、尽量使用非贪婪模式、有换行符就用re.S</p>
<h2 id="re-search"><a href="#re-search" class="headerlink" title="re.search"></a>re.search</h2><p>re.search 扫描整个字符串并返回第一个成功的匹配。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'</span></span><br><span class="line">result = re.match(<span class="string">'Hello.*?(\d+).*?Demo'</span>, content)</span><br><span class="line">print(result)<span class="number">1</span></span><br></pre></td></tr></table></figure>

<pre><code>None</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'</span></span><br><span class="line">result = re.search(<span class="string">'Hello.*?(\d+).*?Demo'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;_sre.SRE_Match object; span=(13, 53), match=&apos;Hello 1234567 World_This is a Regex Demo&apos;&gt;
1234567</code></pre><p>总结：为匹配方便，能用search就不用match</p>
<h3 id="匹配演练"><a href="#匹配演练" class="headerlink" title="匹配演练"></a>匹配演练</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;&lt;i class="fa fa-user"&gt;&lt;/i&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;'''</span></span><br><span class="line">result = re.search(<span class="string">'&lt;li.*?active.*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>, html, re.S)</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">    print(result.group(<span class="number">1</span>), result.group(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<pre><code>齐秦 往事随风</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;'''</span></span><br><span class="line">result = re.search(<span class="string">'&lt;li.*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>, html, re.S)</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">    print(result.group(<span class="number">1</span>), result.group(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<pre><code>任贤齐 沧海一声笑</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;'''</span></span><br><span class="line">result = re.search(<span class="string">'&lt;li.*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>, html) <span class="comment">#匹配没有换行符的</span></span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">    print(result.group(<span class="number">1</span>), result.group(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<pre><code>beyond 光辉岁月</code></pre><h2 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall"></a>re.findall</h2><p>搜索字符串，以列表形式返回全部能匹配的子串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;'''</span></span><br><span class="line">results = re.findall(<span class="string">'&lt;li.*?href="(.*?)".*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>, html, re.S)</span><br><span class="line">print(results)</span><br><span class="line">print(type(results))</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line"><span class="comment">#     print(result)</span></span><br><span class="line">    print(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<pre><code>[(&apos;/2.mp3&apos;, &apos;任贤齐&apos;, &apos;沧海一声笑&apos;), (&apos;/3.mp3&apos;, &apos;齐秦&apos;, &apos;往事随风&apos;), (&apos;/4.mp3&apos;, &apos;beyond&apos;, &apos;光辉岁月&apos;), (&apos;/5.mp3&apos;, &apos;陈慧琳&apos;, &apos;记事本&apos;), (&apos;/6.mp3&apos;, &apos;邓丽君&apos;, &apos;但愿人长久&apos;)]
&lt;class &apos;list&apos;&gt;


/2.mp3 任贤齐 沧海一声笑
/3.mp3 齐秦 往事随风
/4.mp3 beyond 光辉岁月
/5.mp3 陈慧琳 记事本
/6.mp3 邓丽君 但愿人长久</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;'''</span></span><br><span class="line">results = re.findall(<span class="string">'&lt;li.*?&gt;\s*?(&lt;a.*?&gt;)?(\w+)(&lt;/a&gt;)?\s*?&lt;/li&gt;'</span>, html, re.S)</span><br><span class="line">print(results)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<pre><code>[(&apos;&apos;, &apos;一路上有你&apos;, &apos;&apos;), (&apos;&lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;&apos;, &apos;沧海一声笑&apos;, &apos;&lt;/a&gt;&apos;), (&apos;&lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;&apos;, &apos;往事随风&apos;, &apos;&lt;/a&gt;&apos;), (&apos;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;&apos;, &apos;光辉岁月&apos;, &apos;&lt;/a&gt;&apos;), (&apos;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;&apos;, &apos;记事本&apos;, &apos;&lt;/a&gt;&apos;), (&apos;&lt;a href=&quot;/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;&apos;, &apos;但愿人长久&apos;, &apos;&lt;/a&gt;&apos;)]
一路上有你
沧海一声笑
往事随风
光辉岁月
记事本
但愿人长久</code></pre><h3 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub"></a>re.sub</h3><p>替换字符串中每一个匹配的子串后返回替换后的字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'</span></span><br><span class="line">content = re.sub(<span class="string">'\d+'</span>, <span class="string">''</span>, content)</span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure>

<pre><code>Extra stings Hello  World_This is a Regex Demo Extra stings</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'</span></span><br><span class="line">content = re.sub(<span class="string">'\d+'</span>, <span class="string">'Replacement'</span>, content)</span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure>

<pre><code>Extra stings Hello Replacement World_This is a Regex Demo Extra stings</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'</span></span><br><span class="line">content = re.sub(<span class="string">'(\d+)'</span>, <span class="string">r'\1 8910'</span>, content)</span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure>

<pre><code>Extra stings Hello 1234567 8910 World_This is a Regex Demo Extra stings</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;'''</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;'''</span></span><br><span class="line">html = re.sub(<span class="string">'&lt;a.*?&gt;|&lt;/a&gt;'</span>, <span class="string">''</span>, html)</span><br><span class="line">print(html)</span><br><span class="line">results = re.findall(<span class="string">'&lt;li.*?&gt;(.*?)&lt;/li&gt;'</span>, html, re.S)</span><br><span class="line">print(results)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result.strip())</span><br></pre></td></tr></table></figure>

<pre><code>&lt;div id=&quot;songs-list&quot;&gt;
    &lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;
    &lt;p class=&quot;introduction&quot;&gt;
        经典老歌列表
    &lt;/p&gt;
    &lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;
        &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;
        &lt;li data-view=&quot;7&quot;&gt;
            沧海一声笑
        &lt;/li&gt;
        &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;
            往事随风
        &lt;/li&gt;
        &lt;li data-view=&quot;6&quot;&gt;光辉岁月&lt;/li&gt;
        &lt;li data-view=&quot;5&quot;&gt;记事本&lt;/li&gt;
        &lt;li data-view=&quot;5&quot;&gt;
            但愿人长久
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
[&apos;一路上有你&apos;, &apos;\n            沧海一声笑\n        &apos;, &apos;\n            往事随风\n        &apos;, &apos;光辉岁月&apos;, &apos;记事本&apos;, &apos;\n            但愿人长久\n        &apos;]
一路上有你
沧海一声笑
往事随风
光辉岁月
记事本
但愿人长久</code></pre><h2 id="re-compile"><a href="#re-compile" class="headerlink" title="re.compile"></a>re.compile</h2><p>将正则字符串编译成正则表达式对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">将一个正则表达式串编译成正则对象，以便于复用该匹配模式</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'''Hello 1234567 World_This</span></span><br><span class="line"><span class="string">is a Regex Demo'''</span></span><br><span class="line">pattern = re.compile(<span class="string">'Hello.*Demo'</span>, re.S)</span><br><span class="line">result = re.match(pattern, content)</span><br><span class="line"><span class="comment">#result = re.match('Hello.*Demo', content, re.S)</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;_sre.SRE_Match object; span=(0, 40), match=&apos;Hello 1234567 World_This\nis a Regex Demo&apos;&gt;</code></pre><h2 id="实战练习"><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># content = requests.get('https://book.douban.com/').text</span></span><br><span class="line"><span class="comment"># pattern = re.compile('&lt;li.*?cover.*?href="(.*?)".*?title="(.*?)".*?more-meta.*?author"&gt;(.*?)&lt;/span&gt;.*?year"&gt;(.*?)&lt;/span&gt;.*?&lt;/li&gt;', re.S)</span></span><br><span class="line"><span class="comment"># results = re.findall(pattern, content)</span></span><br><span class="line"><span class="comment"># for result in results:</span></span><br><span class="line"><span class="comment">#     url, name, author, date = result</span></span><br><span class="line"><span class="comment">#     author = re.sub('\s', '', author)</span></span><br><span class="line"><span class="comment">#     date = re.sub('\s', '', date)</span></span><br><span class="line"><span class="comment">#     print(url, name, author, date)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取 豆瓣电影</span></span><br><span class="line">content = requests.get(<span class="string">'https://movie.douban.com/'</span>).text</span><br><span class="line">pattern = re.compile(<span class="string">'&lt;a\s+class="item".*?href="(.*?)".*?img.*?src="(.*?)".*?&lt;p&gt;.*?"\s*(.*?)\s*"\s*&lt;strong&gt;(.*?)&lt;/strong&gt;\s*&lt;/p&gt;.*?&lt;/a&gt;'</span>,re.S)</span><br><span class="line">res = re.findall(pattern,content)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python-spider</tag>
      </tags>
  </entry>
  <entry>
    <title>python-requests</title>
    <url>/2018/11/25/python%E7%9B%B8%E5%85%B3/%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3/python-requests/</url>
    <content><![CDATA[<h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><h2 id="实例引入"><a href="#实例引入" class="headerlink" title="实例引入"></a>实例引入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">print(type(response))</span><br><span class="line">print(response.status_code)</span><br><span class="line">print(type(response.text))</span><br><span class="line">print(response.text)</span><br><span class="line">print(response.cookies)</span><br></pre></td></tr></table></figure>

<h2 id="各种请求方式"><a href="#各种请求方式" class="headerlink" title="各种请求方式"></a>各种请求方式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">requests.post(<span class="string">'http://httpbin.org/post'</span>)</span><br><span class="line">requests.put(<span class="string">'http://httpbin.org/put'</span>)</span><br><span class="line">requests.delete(<span class="string">'http://httpbin.org/delete'</span>)</span><br><span class="line">requests.head(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">requests.options(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h1><h2 id="基本GET请求"><a href="#基本GET请求" class="headerlink" title="基本GET请求"></a>基本GET请求</h2><h3 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<h3 id="带参数GET请求"><a href="#带参数GET请求" class="headerlink" title="带参数GET请求"></a>带参数GET请求</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">"http://httpbin.org/get?name=germey&amp;age=22"</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'germey'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">"http://httpbin.org/get"</span>, params=data)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<h3 id="解析json"><a href="#解析json" class="headerlink" title="解析json"></a>解析json</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"http://httpbin.org/get"</span>)</span><br><span class="line">print(type(response.text))</span><br><span class="line">print(response.json())</span><br><span class="line">print(json.loads(response.text))</span><br><span class="line">print(type(response.json()))</span><br></pre></td></tr></table></figure>

<h3 id="获取二进制数据"><a href="#获取二进制数据" class="headerlink" title="获取二进制数据"></a>获取二进制数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"https://github.com/favicon.ico"</span>)</span><br><span class="line">print(type(response.text), type(response.content))</span><br><span class="line">print(response.text)</span><br><span class="line">print(response.content)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"https://github.com/favicon.ico"</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'favicon.ico'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.content)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<h3 id="添加headers"><a href="#添加headers" class="headerlink" title="添加headers"></a>添加headers</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"https://www.zhihu.com/explore"</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">"https://www.zhihu.com/explore"</span>, headers=headers)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<h2 id="基本POST请求"><a href="#基本POST请求" class="headerlink" title="基本POST请求"></a>基本POST请求</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'germey'</span>, <span class="string">'age'</span>: <span class="string">'22'</span>&#125;</span><br><span class="line">response = requests.post(<span class="string">"http://httpbin.org/post"</span>, data=data)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'germey'</span>, <span class="string">'age'</span>: <span class="string">'22'</span>&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="string">"http://httpbin.org/post"</span>, data=data, headers=headers)</span><br><span class="line">print(response.json())</span><br></pre></td></tr></table></figure>

<h1 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h1><h2 id="reponse属性"><a href="#reponse属性" class="headerlink" title="reponse属性"></a>reponse属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.jianshu.com'</span>)</span><br><span class="line">print(type(response.status_code), response.status_code)</span><br><span class="line">print(type(response.headers), response.headers)</span><br><span class="line">print(type(response.cookies), response.cookies)</span><br><span class="line">print(type(response.url), response.url)</span><br><span class="line">print(type(response.history), response.history)</span><br></pre></td></tr></table></figure>

<h2 id="状态码判断"><a href="#状态码判断" class="headerlink" title="状态码判断"></a>状态码判断</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.jianshu.com/hello.html'</span>)</span><br><span class="line">exit() <span class="keyword">if</span> <span class="keyword">not</span> response.status_code == requests.codes.not_found <span class="keyword">else</span> print(<span class="string">'404 Not Found'</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.jianshu.com'</span>)</span><br><span class="line">exit() <span class="keyword">if</span> <span class="keyword">not</span> response.status_code == <span class="number">200</span> <span class="keyword">else</span> print(<span class="string">'Request Successfully'</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span>: (<span class="string">'continue'</span>,),</span><br><span class="line"><span class="number">101</span>: (<span class="string">'switching_protocols'</span>,),</span><br><span class="line"><span class="number">102</span>: (<span class="string">'processing'</span>,),</span><br><span class="line"><span class="number">103</span>: (<span class="string">'checkpoint'</span>,),</span><br><span class="line"><span class="number">122</span>: (<span class="string">'uri_too_long'</span>, <span class="string">'request_uri_too_long'</span>),</span><br><span class="line"><span class="number">200</span>: (<span class="string">'ok'</span>, <span class="string">'okay'</span>, <span class="string">'all_ok'</span>, <span class="string">'all_okay'</span>, <span class="string">'all_good'</span>, <span class="string">'\\o/'</span>, <span class="string">'✓'</span>),</span><br><span class="line"><span class="number">201</span>: (<span class="string">'created'</span>,),</span><br><span class="line"><span class="number">202</span>: (<span class="string">'accepted'</span>,),</span><br><span class="line"><span class="number">203</span>: (<span class="string">'non_authoritative_info'</span>, <span class="string">'non_authoritative_information'</span>),</span><br><span class="line"><span class="number">204</span>: (<span class="string">'no_content'</span>,),</span><br><span class="line"><span class="number">205</span>: (<span class="string">'reset_content'</span>, <span class="string">'reset'</span>),</span><br><span class="line"><span class="number">206</span>: (<span class="string">'partial_content'</span>, <span class="string">'partial'</span>),</span><br><span class="line"><span class="number">207</span>: (<span class="string">'multi_status'</span>, <span class="string">'multiple_status'</span>, <span class="string">'multi_stati'</span>, <span class="string">'multiple_stati'</span>),</span><br><span class="line"><span class="number">208</span>: (<span class="string">'already_reported'</span>,),</span><br><span class="line"><span class="number">226</span>: (<span class="string">'im_used'</span>,),</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redirection.</span></span><br><span class="line"><span class="number">300</span>: (<span class="string">'multiple_choices'</span>,),</span><br><span class="line"><span class="number">301</span>: (<span class="string">'moved_permanently'</span>, <span class="string">'moved'</span>, <span class="string">'\\o-'</span>),</span><br><span class="line"><span class="number">302</span>: (<span class="string">'found'</span>,),</span><br><span class="line"><span class="number">303</span>: (<span class="string">'see_other'</span>, <span class="string">'other'</span>),</span><br><span class="line"><span class="number">304</span>: (<span class="string">'not_modified'</span>,),</span><br><span class="line"><span class="number">305</span>: (<span class="string">'use_proxy'</span>,),</span><br><span class="line"><span class="number">306</span>: (<span class="string">'switch_proxy'</span>,),</span><br><span class="line"><span class="number">307</span>: (<span class="string">'temporary_redirect'</span>, <span class="string">'temporary_moved'</span>, <span class="string">'temporary'</span>),</span><br><span class="line"><span class="number">308</span>: (<span class="string">'permanent_redirect'</span>,</span><br><span class="line">      <span class="string">'resume_incomplete'</span>, <span class="string">'resume'</span>,), <span class="comment"># These 2 to be removed in 3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Client Error.</span></span><br><span class="line"><span class="number">400</span>: (<span class="string">'bad_request'</span>, <span class="string">'bad'</span>),</span><br><span class="line"><span class="number">401</span>: (<span class="string">'unauthorized'</span>,),</span><br><span class="line"><span class="number">402</span>: (<span class="string">'payment_required'</span>, <span class="string">'payment'</span>),</span><br><span class="line"><span class="number">403</span>: (<span class="string">'forbidden'</span>,),</span><br><span class="line"><span class="number">404</span>: (<span class="string">'not_found'</span>, <span class="string">'-o-'</span>),</span><br><span class="line"><span class="number">405</span>: (<span class="string">'method_not_allowed'</span>, <span class="string">'not_allowed'</span>),</span><br><span class="line"><span class="number">406</span>: (<span class="string">'not_acceptable'</span>,),</span><br><span class="line"><span class="number">407</span>: (<span class="string">'proxy_authentication_required'</span>, <span class="string">'proxy_auth'</span>, <span class="string">'proxy_authentication'</span>),</span><br><span class="line"><span class="number">408</span>: (<span class="string">'request_timeout'</span>, <span class="string">'timeout'</span>),</span><br><span class="line"><span class="number">409</span>: (<span class="string">'conflict'</span>,),</span><br><span class="line"><span class="number">410</span>: (<span class="string">'gone'</span>,),</span><br><span class="line"><span class="number">411</span>: (<span class="string">'length_required'</span>,),</span><br><span class="line"><span class="number">412</span>: (<span class="string">'precondition_failed'</span>, <span class="string">'precondition'</span>),</span><br><span class="line"><span class="number">413</span>: (<span class="string">'request_entity_too_large'</span>,),</span><br><span class="line"><span class="number">414</span>: (<span class="string">'request_uri_too_large'</span>,),</span><br><span class="line"><span class="number">415</span>: (<span class="string">'unsupported_media_type'</span>, <span class="string">'unsupported_media'</span>, <span class="string">'media_type'</span>),</span><br><span class="line"><span class="number">416</span>: (<span class="string">'requested_range_not_satisfiable'</span>, <span class="string">'requested_range'</span>, <span class="string">'range_not_satisfiable'</span>),</span><br><span class="line"><span class="number">417</span>: (<span class="string">'expectation_failed'</span>,),</span><br><span class="line"><span class="number">418</span>: (<span class="string">'im_a_teapot'</span>, <span class="string">'teapot'</span>, <span class="string">'i_am_a_teapot'</span>),</span><br><span class="line"><span class="number">421</span>: (<span class="string">'misdirected_request'</span>,),</span><br><span class="line"><span class="number">422</span>: (<span class="string">'unprocessable_entity'</span>, <span class="string">'unprocessable'</span>),</span><br><span class="line"><span class="number">423</span>: (<span class="string">'locked'</span>,),</span><br><span class="line"><span class="number">424</span>: (<span class="string">'failed_dependency'</span>, <span class="string">'dependency'</span>),</span><br><span class="line"><span class="number">425</span>: (<span class="string">'unordered_collection'</span>, <span class="string">'unordered'</span>),</span><br><span class="line"><span class="number">426</span>: (<span class="string">'upgrade_required'</span>, <span class="string">'upgrade'</span>),</span><br><span class="line"><span class="number">428</span>: (<span class="string">'precondition_required'</span>, <span class="string">'precondition'</span>),</span><br><span class="line"><span class="number">429</span>: (<span class="string">'too_many_requests'</span>, <span class="string">'too_many'</span>),</span><br><span class="line"><span class="number">431</span>: (<span class="string">'header_fields_too_large'</span>, <span class="string">'fields_too_large'</span>),</span><br><span class="line"><span class="number">444</span>: (<span class="string">'no_response'</span>, <span class="string">'none'</span>),</span><br><span class="line"><span class="number">449</span>: (<span class="string">'retry_with'</span>, <span class="string">'retry'</span>),</span><br><span class="line"><span class="number">450</span>: (<span class="string">'blocked_by_windows_parental_controls'</span>, <span class="string">'parental_controls'</span>),</span><br><span class="line"><span class="number">451</span>: (<span class="string">'unavailable_for_legal_reasons'</span>, <span class="string">'legal_reasons'</span>),</span><br><span class="line"><span class="number">499</span>: (<span class="string">'client_closed_request'</span>,),</span><br><span class="line"></span><br><span class="line"><span class="comment"># Server Error.</span></span><br><span class="line"><span class="number">500</span>: (<span class="string">'internal_server_error'</span>, <span class="string">'server_error'</span>, <span class="string">'/o\\'</span>, <span class="string">'✗'</span>),</span><br><span class="line"><span class="number">501</span>: (<span class="string">'not_implemented'</span>,),</span><br><span class="line"><span class="number">502</span>: (<span class="string">'bad_gateway'</span>,),</span><br><span class="line"><span class="number">503</span>: (<span class="string">'service_unavailable'</span>, <span class="string">'unavailable'</span>),</span><br><span class="line"><span class="number">504</span>: (<span class="string">'gateway_timeout'</span>,),</span><br><span class="line"><span class="number">505</span>: (<span class="string">'http_version_not_supported'</span>, <span class="string">'http_version'</span>),</span><br><span class="line"><span class="number">506</span>: (<span class="string">'variant_also_negotiates'</span>,),</span><br><span class="line"><span class="number">507</span>: (<span class="string">'insufficient_storage'</span>,),</span><br><span class="line"><span class="number">509</span>: (<span class="string">'bandwidth_limit_exceeded'</span>, <span class="string">'bandwidth'</span>),</span><br><span class="line"><span class="number">510</span>: (<span class="string">'not_extended'</span>,),</span><br><span class="line"><span class="number">511</span>: (<span class="string">'network_authentication_required'</span>, <span class="string">'network_auth'</span>, <span class="string">'network_authentication'</span>),</span><br></pre></td></tr></table></figure>

<h1 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h1><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">'file'</span>: open(<span class="string">'favicon.ico'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line">response = requests.post(<span class="string">"http://httpbin.org/post"</span>, files=files)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<h2 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">print(response.cookies)</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> response.cookies.items():</span><br><span class="line">    print(key + <span class="string">'='</span> + value)</span><br></pre></td></tr></table></figure>

<h2 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h2><p>模拟登录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">'http://httpbin.org/cookies/set/number/123456789'</span>)</span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/cookies'</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">'http://httpbin.org/cookies/set/number/123456789'</span>)</span><br><span class="line">response = s.get(<span class="string">'http://httpbin.org/cookies'</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<h2 id="证书验证"><a href="#证书验证" class="headerlink" title="证书验证"></a>证书验证</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://www.12306.cn'</span>)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.packages <span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line">response = requests.get(<span class="string">'https://www.12306.cn'</span>, verify=<span class="literal">False</span>)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://www.12306.cn'</span>, cert=(<span class="string">'/path/server.crt'</span>, <span class="string">'/path/key'</span>))</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>

<h2 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">"http"</span>: <span class="string">"http://127.0.0.1:9743"</span>,</span><br><span class="line">  <span class="string">"https"</span>: <span class="string">"https://127.0.0.1:9743"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"https://www.taobao.com"</span>, proxies=proxies)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">"http"</span>: <span class="string">"http://user:password@127.0.0.1:9743/"</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">"https://www.taobao.com"</span>, proxies=proxies)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install <span class="string">'requests[socks]'</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'socks5://127.0.0.1:9742'</span>,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'socks5://127.0.0.1:9742'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">"https://www.taobao.com"</span>, proxies=proxies)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>

<h2 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ReadTimeout</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">"http://httpbin.org/get"</span>, timeout = <span class="number">0.5</span>)</span><br><span class="line">    print(response.status_code)</span><br><span class="line"><span class="keyword">except</span> ReadTimeout:</span><br><span class="line">    print(<span class="string">'Timeout'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="认证设置"><a href="#认证设置" class="headerlink" title="认证设置"></a>认证设置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'http://120.27.34.24:9001'</span>, auth=HTTPBasicAuth(<span class="string">'user'</span>, <span class="string">'123'</span>))</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'http://120.27.34.24:9001'</span>, auth=(<span class="string">'user'</span>, <span class="string">'123'</span>))</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ReadTimeout, ConnectionError, RequestException</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">"http://httpbin.org/get"</span>, timeout = <span class="number">0.5</span>)</span><br><span class="line">    print(response.status_code)</span><br><span class="line"><span class="keyword">except</span> ReadTimeout:</span><br><span class="line">    print(<span class="string">'Timeout'</span>)</span><br><span class="line"><span class="keyword">except</span> ConnectionError:</span><br><span class="line">    print(<span class="string">'Connection error'</span>)</span><br><span class="line"><span class="keyword">except</span> RequestException:</span><br><span class="line">    print(<span class="string">'Error'</span>)</span><br></pre></td></tr></table></figure>

<pre><code>Connection error</code></pre>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python-spider</tag>
      </tags>
  </entry>
  <entry>
    <title>python-urllib</title>
    <url>/2018/11/25/python%E7%9B%B8%E5%85%B3/%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3/python-urllib/</url>
    <content><![CDATA[<h1 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h1><h2 id="urlopen"><a href="#urlopen" class="headerlink" title="urlopen"></a>urlopen</h2><blockquote>
<p>urllib.request.urlopen</p>
<p>(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;Response [200]&gt;</code></pre><a id="more"></a>

<ul>
<li>post请求</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">data = bytes(urllib.parse.urlencode(&#123;<span class="string">'word'</span>: <span class="string">'hello'</span>&#125;), encoding=<span class="string">'utf8'</span>)</span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure>

<pre><code>b&apos;{\n  &quot;args&quot;: {}, \n  &quot;data&quot;: &quot;&quot;, \n  &quot;files&quot;: {}, \n  &quot;form&quot;: {\n    &quot;word&quot;: &quot;hello&quot;\n  }, \n  &quot;headers&quot;: {\n    &quot;Accept-Encoding&quot;: &quot;identity&quot;, \n    &quot;Connection&quot;: &quot;close&quot;, \n    &quot;Content-Length&quot;: &quot;10&quot;, \n    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;, \n    &quot;Host&quot;: &quot;httpbin.org&quot;, \n    &quot;User-Agent&quot;: &quot;Python-urllib/3.7&quot;\n  }, \n  &quot;json&quot;: null, \n  &quot;origin&quot;: &quot;121.228.147.38&quot;, \n  &quot;url&quot;: &quot;http://httpbin.org/post&quot;\n}\n&apos;</code></pre><ul>
<li>超时设置</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/get'</span>, timeout=<span class="number">1</span>)</span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure>

<pre><code>b&apos;{\n  &quot;args&quot;: {}, \n  &quot;headers&quot;: {\n    &quot;Accept-Encoding&quot;: &quot;identity&quot;, \n    &quot;Connect-Time&quot;: &quot;0&quot;, \n    &quot;Connection&quot;: &quot;close&quot;, \n    &quot;Host&quot;: &quot;httpbin.org&quot;, \n    &quot;Total-Route-Time&quot;: &quot;0&quot;, \n    &quot;User-Agent&quot;: &quot;Python-urllib/3.5&quot;, \n    &quot;Via&quot;: &quot;1.1 vegur&quot;, \n    &quot;X-Request-Id&quot;: &quot;40948f0e-e4b2-4b5f-9d84-aeb77595ca52&quot;\n  }, \n  &quot;origin&quot;: &quot;219.238.82.169&quot;, \n  &quot;url&quot;: &quot;http://httpbin.org/get&quot;\n}\n&apos;</code></pre><ul>
<li>超时处理</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = urllib.request.urlopen(<span class="string">'http://httpbin.org/get'</span>, timeout=<span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> isinstance(e.reason, socket.timeout):</span><br><span class="line">        print(<span class="string">'TIME OUT'</span>)</span><br></pre></td></tr></table></figure>

<pre><code>TIME OUT</code></pre><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><h3 id="响应类型"><a href="#响应类型" class="headerlink" title="响应类型"></a>响应类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.python.org'</span>)</span><br><span class="line">print(type(response))</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;http.client.HTTPResponse&apos;&gt;</code></pre><h3 id="状态码、响应头"><a href="#状态码、响应头" class="headerlink" title="状态码、响应头"></a>状态码、响应头</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.python.org'</span>)</span><br><span class="line">print(response.status)</span><br><span class="line">print(response.getheaders())</span><br><span class="line">print(response.getheader(<span class="string">'Server'</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">200</span></span><br><span class="line">[('Server', 'nginx'), ('Content-Type', 'text/html; charset=utf-8'), ('X-Frame-Options', 'SAMEORIGIN'), ('x-xss-protection', '1; mode=block'), ('X-Clacks-Overhead', 'GNU Terry Pratchett'), ('Via', '1.1 varnish'), ('Content-Length', '50069'), ('Accept-Ranges', 'bytes'), ('Date', 'Sun, 25 Nov 2018 07:10:06 GMT'), ('Via', '1.1 varnish'), ('Age', '1472'), ('Connection', 'close'), ('X-Served-By', 'cache-iad2126-IAD, cache-tyo19946-TYO'), ('X-Cache', 'HIT, HIT'), ('X-Cache-Hits', '2, 2665'), ('X-Timer', 'S1543129807.577390,VS0,VE0'), ('Vary', 'Cookie'), ('Strict-Transport-Security', 'max-age=63072000; includeSubDomains')]</span><br><span class="line"><span class="attribute">nginx</span></span><br></pre></td></tr></table></figure>


<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.python.org'</span>)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>有参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/post'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'httpbin.org'</span></span><br><span class="line">&#125;</span><br><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'Germey'</span></span><br><span class="line">&#125;</span><br><span class="line">data = bytes(parse.urlencode(dict), encoding=<span class="string">'utf8'</span>)</span><br><span class="line">req = request.Request(url=url, data=data, headers=headers, method=<span class="string">'POST'</span>)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>{
  &quot;args&quot;: {}, 
  &quot;data&quot;: &quot;&quot;, 
  &quot;files&quot;: {}, 
  &quot;form&quot;: {
    &quot;name&quot;: &quot;Germey&quot;
  }, 
  &quot;headers&quot;: {
    &quot;Accept-Encoding&quot;: &quot;identity&quot;, 
    &quot;Connect-Time&quot;: &quot;1&quot;, 
    &quot;Connection&quot;: &quot;close&quot;, 
    &quot;Content-Length&quot;: &quot;11&quot;, 
    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;, 
    &quot;Host&quot;: &quot;httpbin.org&quot;, 
    &quot;Total-Route-Time&quot;: &quot;0&quot;, 
    &quot;User-Agent&quot;: &quot;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&quot;, 
    &quot;Via&quot;: &quot;1.1 vegur&quot;, 
    &quot;X-Request-Id&quot;: &quot;f96e736e-0b8a-4ab4-9dcc-a970fcd2fbbf&quot;
  }, 
  &quot;json&quot;: null, 
  &quot;origin&quot;: &quot;219.238.82.169&quot;, 
  &quot;url&quot;: &quot;http://httpbin.org/post&quot;
}</code></pre><ul>
<li>其他方式添加请求参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/post'</span></span><br><span class="line">dict = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'Germey'</span></span><br><span class="line">&#125;</span><br><span class="line">data = bytes(parse.urlencode(dict), encoding=<span class="string">'utf8'</span>)</span><br><span class="line">req = request.Request(url=url, data=data, method=<span class="string">'POST'</span>)</span><br><span class="line">req.add_header(<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span>)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>{
  &quot;args&quot;: {}, 
  &quot;data&quot;: &quot;&quot;, 
  &quot;files&quot;: {}, 
  &quot;form&quot;: {
    &quot;name&quot;: &quot;Germey&quot;
  }, 
  &quot;headers&quot;: {
    &quot;Accept-Encoding&quot;: &quot;identity&quot;, 
    &quot;Connect-Time&quot;: &quot;0&quot;, 
    &quot;Connection&quot;: &quot;close&quot;, 
    &quot;Content-Length&quot;: &quot;11&quot;, 
    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;, 
    &quot;Host&quot;: &quot;httpbin.org&quot;, 
    &quot;Total-Route-Time&quot;: &quot;0&quot;, 
    &quot;User-Agent&quot;: &quot;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&quot;, 
    &quot;Via&quot;: &quot;1.1 vegur&quot;, 
    &quot;X-Request-Id&quot;: &quot;a624bcaa-3581-4b93-84b0-037940338e71&quot;
  }, 
  &quot;json&quot;: null, 
  &quot;origin&quot;: &quot;219.238.82.169&quot;, 
  &quot;url&quot;: &quot;http://httpbin.org/post&quot;
}</code></pre><p>​    </p>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">proxy_handler = urllib.request.ProxyHandler(&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://127.0.0.1:9743'</span>,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://127.0.0.1:9743'</span></span><br><span class="line">&#125;)</span><br><span class="line">opener = urllib.request.build_opener(proxy_handler)</span><br><span class="line">response = opener.open(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure>

<pre><code>b&apos;{\n  &quot;args&quot;: {}, \n  &quot;headers&quot;: {\n    &quot;Accept-Encoding&quot;: &quot;identity&quot;, \n    &quot;Connect-Time&quot;: &quot;2&quot;, \n    &quot;Connection&quot;: &quot;close&quot;, \n    &quot;Host&quot;: &quot;httpbin.org&quot;, \n    &quot;Total-Route-Time&quot;: &quot;0&quot;, \n    &quot;User-Agent&quot;: &quot;Python-urllib/3.5&quot;, \n    &quot;Via&quot;: &quot;1.1 vegur&quot;, \n    &quot;X-Request-Id&quot;: &quot;b0e2272d-1663-4192-ac45-eb958279afd8&quot;\n  }, \n  &quot;origin&quot;: &quot;110.10.176.224&quot;, \n  &quot;url&quot;: &quot;http://httpbin.org/get&quot;\n}\n&apos;</code></pre><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.cookiejar, urllib.request</span><br><span class="line"></span><br><span class="line">cookie = http.cookiejar.CookieJar()</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cookie:</span><br><span class="line">    print(item.name+<span class="string">"="</span>+item.value)</span><br></pre></td></tr></table></figure>

<pre><code>BAIDUID=E77BF84491E332F6F8F1D451AD0063D3:FG=1
BIDUPSID=E77BF84491E332F6F8F1D451AD0063D3
H_PS_PSSID=1466_21127_22075
PSTM=1490198051
BDSVRTM=0
BD_HOME=0</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.cookiejar, urllib.request</span><br><span class="line">filename = <span class="string">"cookie.txt"</span></span><br><span class="line">cookie = http.cookiejar.MozillaCookieJar(filename)</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">cookie.save(ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.cookiejar, urllib.request</span><br><span class="line">filename = <span class="string">'cookie.txt'</span></span><br><span class="line">cookie = http.cookiejar.LWPCookieJar(filename)</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">cookie.save(ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.cookiejar, urllib.request</span><br><span class="line">cookie = http.cookiejar.LWPCookieJar()</span><br><span class="line">cookie.load(<span class="string">'cookie.txt'</span>, ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>


<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(<span class="string">'http://cuiqingcai.com/index.htm'</span>)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure>

<pre><code>Not Found</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(<span class="string">'http://cuiqingcai.com/index.htm'</span>)</span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason, e.code, e.headers, sep=<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Request Successfully'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">Not Found</span><br><span class="line"><span class="attribute">404</span></span><br><span class="line"><span class="attribute">Server</span>: nginx/1.10.1</span><br><span class="line"><span class="attribute">Date</span>: Wed, 22 Mar 2017 15:59:55 GMT</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Vary</span>: Cookie</span><br><span class="line"><span class="attribute">Expires</span>: Wed, 11 Jan 1984 05:00:00 GMT</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache, must-revalidate, max-age=0</span><br><span class="line"><span class="attribute">Link</span>: &lt;http://cuiqingcai.com/wp-json/&gt;; rel="https://api.w.org/"</span><br></pre></td></tr></table></figure>

<p>​    ​    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = urllib.request.urlopen(<span class="string">'https://www.baidu.com'</span>, timeout=<span class="number">0.01</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(type(e.reason))</span><br><span class="line">    <span class="keyword">if</span> isinstance(e.reason, socket.timeout):</span><br><span class="line">        print(<span class="string">'TIME OUT'</span>)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;socket.timeout&apos;&gt;
TIME OUT</code></pre><h2 id="URL解析"><a href="#URL解析" class="headerlink" title="URL解析"></a>URL解析</h2><h3 id="urlparse"><a href="#urlparse" class="headerlink" title="urlparse"></a>urlparse</h3><ul>
<li><strong>urllib.parse.urlparse(urlstring, scheme=’’, allow_fragments=True)</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>)</span><br><span class="line">print(type(result), result)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;urllib.parse.ParseResult&apos;&gt; ParseResult(scheme=&apos;http&apos;, netloc=&apos;www.baidu.com&apos;, path=&apos;/index.html&apos;, params=&apos;user&apos;, query=&apos;id=5&apos;, fragment=&apos;comment&apos;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">'www.baidu.com/index.html;user?id=5#comment'</span>, scheme=<span class="string">'https'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<pre><code>ParseResult(scheme=&apos;https&apos;, netloc=&apos;&apos;, path=&apos;www.baidu.com/index.html&apos;, params=&apos;user&apos;, query=&apos;id=5&apos;, fragment=&apos;comment&apos;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>, scheme=<span class="string">'https'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<pre><code>ParseResult(scheme=&apos;http&apos;, netloc=&apos;www.baidu.com&apos;, path=&apos;/index.html&apos;, params=&apos;user&apos;, query=&apos;id=5&apos;, fragment=&apos;comment&apos;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>, allow_fragments=<span class="literal">False</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<pre><code>ParseResult(scheme=&apos;http&apos;, netloc=&apos;www.baidu.com&apos;, path=&apos;/index.html&apos;, params=&apos;user&apos;, query=&apos;id=5#comment&apos;, fragment=&apos;&apos;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">'http://www.baidu.com/index.html#comment'</span>, allow_fragments=<span class="literal">False</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<pre><code>ParseResult(scheme=&apos;http&apos;, netloc=&apos;www.baidu.com&apos;, path=&apos;/index.html#comment&apos;, params=&apos;&apos;, query=&apos;&apos;, fragment=&apos;&apos;)</code></pre><h3 id="urlunparse"><a href="#urlunparse" class="headerlink" title="urlunparse"></a>urlunparse</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunparse</span><br><span class="line"></span><br><span class="line">data = [<span class="string">'http'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'index.html'</span>, <span class="string">'user'</span>, <span class="string">'a=6'</span>, <span class="string">'comment'</span>]</span><br><span class="line">print(urlunparse(data))</span><br></pre></td></tr></table></figure>

<pre><code>http://www.baidu.com/index.html;user?a=6#comment</code></pre><h3 id="urljoin"><a href="#urljoin" class="headerlink" title="urljoin"></a>urljoin</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'FAQ.html'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'https://cuiqingcai.com/FAQ.html'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com/about.html'</span>, <span class="string">'https://cuiqingcai.com/FAQ.html'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com/about.html'</span>, <span class="string">'https://cuiqingcai.com/FAQ.html?question=2'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com?wd=abc'</span>, <span class="string">'https://cuiqingcai.com/index.php'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'?category=2#comment'</span>))</span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com'</span>, <span class="string">'?category=2#comment'</span>))</span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com#comment'</span>, <span class="string">'?category=2'</span>))</span><br></pre></td></tr></table></figure>

<pre><code>http://www.baidu.com/FAQ.html
https://cuiqingcai.com/FAQ.html
https://cuiqingcai.com/FAQ.html
https://cuiqingcai.com/FAQ.html?question=2
https://cuiqingcai.com/index.php
http://www.baidu.com?category=2#comment
www.baidu.com?category=2#comment
www.baidu.com?category=2</code></pre><h3 id="urlencode"><a href="#urlencode" class="headerlink" title="urlencode"></a>urlencode</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'germey'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line">base_url = <span class="string">'http://www.baidu.com?'</span></span><br><span class="line">url = base_url + urlencode(params)</span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure>


<pre><code>http://www.baidu.com?name=germey&amp;age=22</code></pre>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python-spider</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK1.8新特性</title>
    <url>/2018/11/23/JDK8%E6%96%B0%E5%A2%9E%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="为什么是使用Lambda表达式"><a href="#为什么是使用Lambda表达式" class="headerlink" title="为什么是使用Lambda表达式"></a>为什么是使用Lambda表达式</h1><p>Lambda 是一个匿名函数，我们可以把 Lambda表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p>
<a id="more"></a>
<h1 id="Lambda表达式语法"><a href="#Lambda表达式语法" class="headerlink" title="Lambda表达式语法"></a>Lambda表达式语法</h1><p>Lambda 表达式在Java 语言中引入了一个新的语法元素和操作符。这个操作符为 <code>-&gt;</code> ， 该操作符被称为 Lambda操作符或剪头操作符。它将 Lambda 分为两个部分：</p>
<ul>
<li>左侧： 指定了 Lambda 表达式需要的所有参数</li>
<li>右侧： 指定了 Lambda 体，即 Lambda 表达式要执行<br>的功能。 </li>
<li><strong>左侧一个变量可省略括号，右侧一条语句可以省略大括号。</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runnable runnable = ()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">"runnable"</span>);</span><br><span class="line">&#125;; </span><br><span class="line">TreeSet&lt;Integer&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;((e1, e2) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> e1 - e2;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// lambda表达式的变量类型依赖于上下文推断。</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="什么是函数式接口"><a href="#什么是函数式接口" class="headerlink" title="什么是函数式接口"></a>什么是函数式接口</h1><ul>
<li>只包含一个抽象方法的接口，称为函数式接口。</li>
<li>你可以通过 Lambda表达式来<strong>创建该接口的对象</strong>。（若Lambda表达式抛出一个受检异常，那么该异常需要在目标接口的抽象方法上进行声明）。</li>
<li>我们可以在任意函数式接口上使用 @FunctionalInterface 注解，这样做可以检查它是否是一个函数式接口，同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Func</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">getValue</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(fun(String::toUpperCase, <span class="string">"aaabbbccc"</span>));</span><br><span class="line">        System.out.println(fun(e -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> e.substring(<span class="number">4</span>);</span><br><span class="line">        &#125;, <span class="string">"aaabbbccc"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 看似传来一个接口，实则接口可变函数动态改变数据。（形参可以是函数啦！Java有闭包了）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> func</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fun</span><span class="params">(Func&lt;String&gt; func, String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func.getValue(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java-内置四大核心函数式接口"><a href="#Java-内置四大核心函数式接口" class="headerlink" title="Java 内置四大核心函数式接口"></a>Java 内置四大核心函数式接口</h1><table>
<thead>
<tr>
<th>函数式接口</th>
<th>参数类型</th>
<th>返回类型</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>Consumer<T> 消费型接口</td>
<td>T</td>
<td>void</td>
<td>对类型为T的对象应用操 作，包含方法： void accept(T t)</td>
</tr>
<tr>
<td>Supplier<T> 供给型接口</td>
<td>无</td>
<td>T</td>
<td>返回类型为T的对象，包 含方法： T get();</td>
</tr>
<tr>
<td>Function&lt;T, R&gt; 函数型接口</td>
<td>T</td>
<td>R</td>
<td>对类型为T的对象应用操 作，并返回结果。结果 是R类型的对象。包含方 法： R apply(T t);</td>
</tr>
<tr>
<td>Predicate<T> 断定型接口</td>
<td>T</td>
<td>boolean</td>
<td>确定类型为T的对象是否 满足某约束，并返回 boolean 值。包含方法 boolean test(T t);</td>
</tr>
</tbody></table>
<ul>
<li><strong>其他接口</strong></li>
</ul>
<table>
<thead>
<tr>
<th>函数式接口</th>
<th>参数类型</th>
<th>返回类型</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>BiFunction&lt;T, U, R&gt;</td>
<td>T, U</td>
<td>R</td>
<td>对类型为 T, U 参数应用 操作， 返回 R 类型的结 果。 包含方法为 R apply(T t, U u);</td>
</tr>
<tr>
<td>UnaryOperator<T> (Function子接口)</td>
<td>T</td>
<td>T</td>
<td>对类型为T的对象进行一 元运算， 并返回T类型的 结果。 包含方法为 T apply(T t);</td>
</tr>
<tr>
<td>BinaryOperator<T> (BiFunction 子接口)</td>
<td>T, T</td>
<td>T</td>
<td>对类型为T的对象进行二 元运算， 并返回T类型的 结果。 包含方法为 T apply(T t1, T t2);</td>
</tr>
<tr>
<td>BiConsumer&lt;T, U&gt;</td>
<td>T, U</td>
<td>void</td>
<td>对类型为T, U 参数应用 操作。 包含方法为 void accept(T t, U u)</td>
</tr>
<tr>
<td>ToIntFunction<T> ToLongFunction<T> ToDoubleFunction<T></td>
<td>T</td>
<td>int long double</td>
<td>分 别 计 算 int 、 long 、 double、 值的函数</td>
</tr>
<tr>
<td>IntFunction<R> LongFunction<R> DoubleFunction<R></td>
<td>int long double</td>
<td>R</td>
<td>参数分别为int、 long、 double 类型的函数</td>
</tr>
</tbody></table>
<ul>
<li>示例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">fun2</span><span class="params">(ToDoubleBiFunction&lt;Double, Double&gt; <span class="comment">/*就是函数类型，返回的类型必须是double*/</span> toDoubleBiFunction, Double d1, Double d2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toDoubleBiFunction.applyAsDouble(d1, d2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(fun2((e1, e2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> e1 - e2;</span><br><span class="line">    &#125;, <span class="number">234.3</span>D, <span class="number">234.3</span>D));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Predicate&lt;T&gt; 断言型接口：</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">  List&lt;String&gt; list = Arrays.asList(<span class="string">"Hello"</span>, <span class="string">"atguigu"</span>, <span class="string">"Lambda"</span>, <span class="string">"www"</span>, <span class="string">"ok"</span>);</span><br><span class="line">  List&lt;String&gt; strList = filterStr(list, (s) -&gt; s.length() &gt; <span class="number">3</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (String str : strList) &#123;</span><br><span class="line">   System.out.println(str);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//需求：将满足条件的字符串，放入集合中</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">filterStr</span><span class="params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span></span>&#123;</span><br><span class="line">  List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">   <span class="keyword">if</span>(pre.test(str))&#123;</span><br><span class="line">    strList.add(str);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> strList;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//Function&lt;T, R&gt; 函数型接口：</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">  String newStr = strHandler(<span class="string">"\t\t\t 我大尚硅谷威武   "</span>, (str) -&gt; str.trim());</span><br><span class="line">  System.out.println(newStr);</span><br><span class="line">  </span><br><span class="line">  String subStr = strHandler(<span class="string">"我大尚硅谷威武"</span>, (str) -&gt; str.substring(<span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line">  System.out.println(subStr);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//需求：用于处理字符串</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">strHandler</span><span class="params">(String str, Function&lt;String, String&gt; fun)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fun.apply(str);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//Supplier&lt;T&gt; 供给型接口 :</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  List&lt;Integer&gt; numList = getNumList(<span class="number">10</span>, () -&gt; (<span class="keyword">int</span>)(Math.random() * <span class="number">100</span>));</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (Integer num : numList) &#123;</span><br><span class="line">   System.out.println(num);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//需求：产生指定个数的整数，并放入集合中</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getNumList</span><span class="params">(<span class="keyword">int</span> num, Supplier&lt;Integer&gt; sup)</span></span>&#123;</span><br><span class="line">  List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">   Integer n = sup.get();</span><br><span class="line">   list.add(n);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//Consumer&lt;T&gt; 消费型接口 :</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  happy(<span class="number">10000</span>, (m) -&gt; System.out.println(<span class="string">"你们刚哥喜欢大宝剑，每次消费："</span> + m + <span class="string">"元"</span>));</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">happy</span><span class="params">(<span class="keyword">double</span> money, Consumer&lt;Double&gt; con)</span></span>&#123;</span><br><span class="line">  con.accept(money);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h1 id="方法构造器引用"><a href="#方法构造器引用" class="headerlink" title="方法构造器引用"></a>方法构造器引用</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 一、方法引用：若 Lambda 体中的功能，已经有方法提供了实现，可以使用方法引用</span></span><br><span class="line"><span class="comment"> *      （可以将方法引用理解为 Lambda 表达式的另外一种表现形式）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1. 对象的引用 :: 实例方法名</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2. 类名 :: 静态方法名</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3. 类名 :: 实例方法名</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注意：</span></span><br><span class="line"><span class="comment"> *   ①方法引用所引用的方法的参数列表与返回值类型，需要与函数式接口中抽象方法的参数列表和返回值类型保持一致！</span></span><br><span class="line"><span class="comment"> *   ②若Lambda 的参数列表的第一个参数，是实例方法的调用者，第二个参数(或无参)是实例方法的参数时，格式： ClassName::MethodName</span></span><br><span class="line"><span class="comment"> BiPredicate&lt;String, String&gt; bp = (x, y) -&gt; x.equals(y);</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 二、构造器引用 :构造器的参数列表，需要与函数式接口中参数列表保持一致！</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 1. 类名 :: new</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 三、数组引用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  类型[] :: new;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMethodRef</span> </span>&#123;</span><br><span class="line"> <span class="comment">//数组引用</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Function&lt;Integer, String[]&gt; fun = (args) -&gt; <span class="keyword">new</span> String[args];</span><br><span class="line">  String[] strs = fun.apply(<span class="number">10</span>);</span><br><span class="line">  System.out.println(strs.length);</span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line">  </span><br><span class="line">  Function&lt;Integer, Employee[]&gt; fun2 = Employee[] :: <span class="keyword">new</span>;</span><br><span class="line">  Employee[] emps = fun2.apply(<span class="number">20</span>);</span><br><span class="line">  System.out.println(emps.length);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//构造器引用</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Function&lt;String, Employee&gt; fun = Employee::<span class="keyword">new</span>;</span><br><span class="line">  </span><br><span class="line">  BiFunction&lt;String, Integer, Employee&gt; fun2 = Employee::<span class="keyword">new</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Supplier&lt;Employee&gt; sup = () -&gt; <span class="keyword">new</span> Employee();</span><br><span class="line">  System.out.println(sup.get());</span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line">  </span><br><span class="line">  Supplier&lt;Employee&gt; sup2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">  System.out.println(sup2.get());</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//类名 :: 实例方法名</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">  BiPredicate&lt;String, String&gt; bp = (x, y) -&gt; x.equals(y);</span><br><span class="line">  System.out.println(bp.test(<span class="string">"abcde"</span>, <span class="string">"abcde"</span>));</span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line">  </span><br><span class="line">  BiPredicate&lt;String, String&gt; bp2 = String::equals;</span><br><span class="line">  System.out.println(bp2.test(<span class="string">"abc"</span>, <span class="string">"abc"</span>));</span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  Function&lt;Employee, String&gt; fun = (e) -&gt; e.show();</span><br><span class="line">  System.out.println(fun.apply(<span class="keyword">new</span> Employee()));</span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">"-----------------------------------------"</span>);</span><br><span class="line">  </span><br><span class="line">  Function&lt;Employee, String&gt; fun2 = Employee::show;</span><br><span class="line">  System.out.println(fun2.apply(<span class="keyword">new</span> Employee()));</span><br><span class="line">  </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//类名 :: 静态方法名</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Comparator&lt;Integer&gt; com = (x, y) -&gt; Integer.compare(x, y);</span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">"-------------------------------------"</span>);</span><br><span class="line">  </span><br><span class="line">  Comparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">  BiFunction&lt;Double, Double, Double&gt; fun = (x, y) -&gt; Math.max(x, y);</span><br><span class="line">  System.out.println(fun.apply(<span class="number">1.5</span>, <span class="number">22.2</span>));</span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">"--------------------------------------------------"</span>);</span><br><span class="line">  </span><br><span class="line">  BiFunction&lt;Double, Double, Double&gt; fun2 = Math::max;</span><br><span class="line">  System.out.println(fun2.apply(<span class="number">1.2</span>, <span class="number">1.5</span>));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//对象的引用 :: 实例方法名</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Employee emp = <span class="keyword">new</span> Employee(<span class="number">101</span>, <span class="string">"张三"</span>, <span class="number">18</span>, <span class="number">9999.99</span>);</span><br><span class="line">  </span><br><span class="line">  Supplier&lt;String&gt; sup = () -&gt; emp.getName();</span><br><span class="line">  System.out.println(sup.get());</span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line">  </span><br><span class="line">  Supplier&lt;String&gt; sup2 = emp::getName;</span><br><span class="line">  System.out.println(sup2.get());</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  PrintStream ps = System.out;</span><br><span class="line">  Consumer&lt;String&gt; con = (str) -&gt; ps.println(str);</span><br><span class="line">  con.accept(<span class="string">"Hello World！"</span>);</span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">  </span><br><span class="line">  Consumer&lt;String&gt; con2 = ps::println;</span><br><span class="line">  con2.accept(<span class="string">"Hello Java8！"</span>);</span><br><span class="line">  </span><br><span class="line">  Consumer&lt;String&gt; con3 = System.out::println;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h1><p>Java8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一个则是 Stream API(java.util.stream.*)。<br>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。 </p>
<p>注意：<br><strong>①Stream 自己不会存储元素。</strong><br><strong>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</strong><br><strong>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</strong> </p>
<h2 id="获取流的方法"><a href="#获取流的方法" class="headerlink" title="获取流的方法"></a>获取流的方法</h2><ol>
<li><p>Collection接口下：</p>
<p><code>default Stream&lt;E&gt; stream()</code>: 返回一个顺序流。<br><code>default Stream&lt;E&gt; parallelStream()</code> : 返回一个并行流 。</p>
</li>
<li><p><code>Arrays</code>类：</p>
<p><code>static &lt;T&gt; Stream&lt;T&gt; stream(T[] array)</code>: 返回一个流 。</p>
</li>
<li><p>可以使用静态方法 Stream.of(), 通过显示值<br>创建一个流。它可以接收任意数量的参数。<br><code>public static&lt;T&gt; Stream&lt;T&gt; of(T... values)</code> : 返回一个流 。</p>
</li>
<li><p>由函数创建流：创建<strong>无限流</strong><br>可以使用静态方法 <code>Stream.iterate()</code>和<code>Stream.generate()</code>, 创建无限流。<br>迭代<br><code>public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</code><br>生成<br><code>public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</code></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1. Collection 提供了两个方法  stream() 与 parallelStream()</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Stream&lt;String&gt; stream = list.stream(); <span class="comment">//获取一个顺序流</span></span><br><span class="line">    Stream&lt;String&gt; parallelStream = list.parallelStream(); <span class="comment">//获取一个并行流</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 通过 Arrays 中的 stream() 获取一个数组流</span></span><br><span class="line">    Integer[] nums = <span class="keyword">new</span> Integer[<span class="number">10</span>];</span><br><span class="line">    Stream&lt;Integer&gt; stream1 = Arrays.stream(nums);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 通过 Stream 类中静态方法 of()</span></span><br><span class="line">    Stream&lt;Integer&gt; stream2 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 创建无限流</span></span><br><span class="line">    <span class="comment">//迭代</span></span><br><span class="line">    Stream&lt;Integer&gt; stream3 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">2</span>).limit(<span class="number">10</span>);</span><br><span class="line">    stream3.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成</span></span><br><span class="line">    Stream&lt;Double&gt; stream4 = Stream.generate(Math::random).limit(<span class="number">2</span>);</span><br><span class="line">    stream4.forEach(System.out::println);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Stream-的中间操作"><a href="#Stream-的中间操作" class="headerlink" title="Stream 的中间操作"></a>Stream 的中间操作</h2><p><strong>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值” 。</strong> </p>
<h3 id="筛选和切片"><a href="#筛选和切片" class="headerlink" title="筛选和切片"></a>筛选和切片</h3><table>
<thead>
<tr>
<th>方 法</th>
<th>描 述</th>
</tr>
</thead>
<tbody><tr>
<td>filter(Predicate p)</td>
<td>接收 Lambda ， 从流中排除某些元素。</td>
</tr>
<tr>
<td>distinct()</td>
<td>筛选，通过流所生成元素的 hashCode() 和 equals() 去 除重复元素</td>
</tr>
<tr>
<td>limit(long maxSize)</td>
<td>截断流，使其元素不超过给定数量。</td>
</tr>
<tr>
<td>skip(long n)</td>
<td>跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素 不足 n 个，则返回一个空流。与 limit(n) 互补</td>
</tr>
</tbody></table>
<h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><table>
<thead>
<tr>
<th>方 法</th>
<th>描 述</th>
</tr>
</thead>
<tbody><tr>
<td>map(Function f)</td>
<td>接收一个函数作为参数，该函数会被应用到每个元 素上，并将其映射成一个新的元素。</td>
</tr>
<tr>
<td>mapToDouble(ToDoubleFunction f)</td>
<td>接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 DoubleStream。</td>
</tr>
<tr>
<td>mapToInt(ToIntFunction f)</td>
<td>接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 IntStream。</td>
</tr>
<tr>
<td>mapToLong(ToLongFunction f)</td>
<td>接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 LongStream。</td>
</tr>
<tr>
<td>flatMap(Function f)</td>
<td>接收一个函数作为参数，将流中的每个值都换成另 一个流，然后把所有流连接成一个流</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strList = Arrays.asList(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>, <span class="string">"ddd"</span>, <span class="string">"eee"</span>);</span><br><span class="line">  </span><br><span class="line">Stream&lt;String&gt; stream = strList.stream().map(String::toUpperCase);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; asList = Arrays.asList(<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>);</span><br><span class="line">Stream&lt;String&gt; stream = asList.stream();</span><br><span class="line">stream.map(e -&gt; e.toUpperCase()).forEach(System.out::print);</span><br></pre></td></tr></table></figure>



<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><table>
<thead>
<tr>
<th>方 法</th>
<th>描 述</th>
</tr>
</thead>
<tbody><tr>
<td>sorted()</td>
<td>产生一个新流，其中按自然顺序排序</td>
</tr>
<tr>
<td>sorted(Comparator comp)</td>
<td>产生一个新流，其中按比较器顺序排序</td>
</tr>
</tbody></table>
<h2 id="Stream-的终止操作"><a href="#Stream-的终止操作" class="headerlink" title="Stream 的终止操作"></a>Stream 的终止操作</h2><h3 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h3><table>
<thead>
<tr>
<th>方 法</th>
<th>描 述</th>
</tr>
</thead>
<tbody><tr>
<td>allMatch(Predicate p)</td>
<td>检查是否匹配所有元素</td>
</tr>
<tr>
<td>anyMatch(Predicate p)</td>
<td>检查是否至少匹配一个元素</td>
</tr>
<tr>
<td>noneMatch(Predicate p)</td>
<td>检查是否没有匹配所有元素</td>
</tr>
<tr>
<td>findFirst()</td>
<td>返回第一个元素</td>
</tr>
<tr>
<td>findAny()</td>
<td>返回当前流中的任意元素</td>
</tr>
<tr>
<td>count()</td>
<td>返回流中元素总数</td>
</tr>
<tr>
<td>max(Comparator c)</td>
<td>返回流中最大值</td>
</tr>
<tr>
<td>min(Comparator c)</td>
<td>返回流中最小值</td>
</tr>
<tr>
<td>forEach(Consumer c)</td>
<td>内部迭代(使用 Collection 接口需要用户去做迭 代，称为外部迭代。相反， Stream API 使用内部 迭代——它帮你把迭代做了)</td>
</tr>
</tbody></table>
<h3 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  归约</span></span><br><span class="line"><span class="comment">  reduce(T identity, BinaryOperator) </span></span><br><span class="line"><span class="comment">  reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">  </span><br><span class="line">  Integer sum = list.stream()</span><br><span class="line">   .reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</span><br><span class="line">  </span><br><span class="line">  System.out.println(sum);</span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">  </span><br><span class="line">  Optional&lt;Double&gt; op = emps.stream()</span><br><span class="line">   .map(Employee::getSalary)</span><br><span class="line">   .reduce(Double::sum);</span><br><span class="line">  </span><br><span class="line">  System.out.println(op.get());</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//需求：搜索名字中 “六” 出现的次数</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Optional&lt;Integer&gt; sum = emps.stream()</span><br><span class="line">   .map(Employee::getName)</span><br><span class="line">   .flatMap(TestStreamAPI1::filterCharacter)</span><br><span class="line">   .map((ch) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(ch.equals(<span class="string">'六'</span>))</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;).reduce(Integer::sum);</span><br><span class="line">  </span><br><span class="line">  System.out.println(sum.get());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h3 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h3><table>
<thead>
<tr>
<th>方 法</th>
<th>描 述</th>
</tr>
</thead>
<tbody><tr>
<td>collect(Collector c)</td>
<td>将流转换为其他形式。接收一个 Collector接口的 实现，用于给Stream中元素做汇总的方法</td>
</tr>
</tbody></table>
<p>Collector 接口中方法的实现决定了如何对流执行收集操作(如收集到 List、 Set、 Map)。但是 Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//collect——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">  List&lt;String&gt; list = emps.stream()</span><br><span class="line">   .map(Employee::getName)</span><br><span class="line">   .collect(Collectors.toList());</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">  Set&lt;String&gt; set = emps.stream()</span><br><span class="line">   .map(Employee::getName)</span><br><span class="line">   .collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  HashSet&lt;String&gt; hs = emps.stream()</span><br><span class="line">   .map(Employee::getName)</span><br><span class="line">   .collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</span><br><span class="line">  </span><br><span class="line">  hs.forEach(System.out::println);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Optional&lt;Double&gt; max = emps.stream()</span><br><span class="line">   .map(Employee::getSalary)</span><br><span class="line">   .collect(Collectors.maxBy(Double::compare));</span><br><span class="line">  </span><br><span class="line">  System.out.println(max.get());</span><br><span class="line">  </span><br><span class="line">  Optional&lt;Employee&gt; op = emps.stream()</span><br><span class="line">   .collect(Collectors.minBy((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  Double sum = emps.stream()</span><br><span class="line">   .collect(Collectors.summingDouble(Employee::getSalary));</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  Double avg = emps.stream()</span><br><span class="line">   .collect(Collectors.averagingDouble(Employee::getSalary));</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  Long count = emps.stream()</span><br><span class="line">   .collect(Collectors.counting());</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  DoubleSummaryStatistics dss = emps.stream()</span><br><span class="line">   .collect(Collectors.summarizingDouble(Employee::getSalary));</span><br><span class="line">  </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//分组</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Map&lt;Status, List&lt;Employee&gt;&gt; map = emps.stream()</span><br><span class="line">   .collect(Collectors.groupingBy(Employee::getStatus));</span><br><span class="line">  </span><br><span class="line">  System.out.println(map);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//多级分组</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Map&lt;Status, Map&lt;String, List&lt;Employee&gt;&gt;&gt; map = emps.stream()</span><br><span class="line">   .collect(Collectors.groupingBy(Employee::getStatus, Collectors.groupingBy((e) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(e.getAge() &gt;= <span class="number">60</span>)</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"老年"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e.getAge() &gt;= <span class="number">35</span>)</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"中年"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">"成年"</span>;</span><br><span class="line">   &#125;)));</span><br><span class="line">  </span><br><span class="line">  System.out.println(map);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//分区</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Map&lt;Boolean, List&lt;Employee&gt;&gt; map = emps.stream()</span><br><span class="line">   .collect(Collectors.partitioningBy((e) -&gt; e.getSalary() &gt;= <span class="number">5000</span>));</span><br><span class="line">  </span><br><span class="line">  System.out.println(map);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span></span>&#123;</span><br><span class="line">  String str = emps.stream()</span><br><span class="line">   .map(Employee::getName)</span><br><span class="line">   .collect(Collectors.joining(<span class="string">","</span> , <span class="string">"----"</span>, <span class="string">"----"</span>));</span><br><span class="line">  </span><br><span class="line">  System.out.println(str);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Optional&lt;Double&gt; sum = emps.stream()</span><br><span class="line">   .map(Employee::getSalary)</span><br><span class="line">   .collect(Collectors.reducing(Double::sum));</span><br><span class="line">  </span><br><span class="line">  System.out.println(sum.get());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h1 id="接口中的默认方法与静态方法"><a href="#接口中的默认方法与静态方法" class="headerlink" title="接口中的默认方法与静态方法"></a>接口中的默认方法与静态方法</h1><p>接口默认方法的” 类优先” 原则<br>若一个接口中定义了一个默认方法，而另外一个父类或接口中又定义了一个同名的方法时选择父类中的方法。如果一个父类提供了具体的实现，那么接口中具有相同名称和参数的默认方法会被忽略。</p>
<p>接口冲突。如果一个父接口提供一个默认方法，而另一个接口也提供了一个具有相同名称和参数列表的方法（不管方法是否是默认方法）， 那么必须覆盖该方法来解决冲突</p>
<h1 id="Optional-类"><a href="#Optional-类" class="headerlink" title="Optional 类"></a>Optional 类</h1><p>Optional<T> 类(java.util.Optional) 是一个容器类，代表一个值存在或不存在，<br>原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且<br>可以避免空指针异常。<br>常用方法：<br>Optional.of(T t) : 创建一个 Optional 实例<br>Optional.empty() : 创建一个空的 Optional 实例<br>Optional.ofNullable(T t):若 t 不为 null,创建 Optional 实例,否则创建空实例<br>isPresent() : 判断是否包含值<br>orElse(T t) : 如果调用对象包含值，返回该值，否则返回t<br>orElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回 s 获取的值<br>map(Function f): 如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()<br>flatMap(Function mapper):与 map 类似，要求返回值必须是Optional </p>
<h1 id="时间API"><a href="#时间API" class="headerlink" title="时间API"></a>时间API</h1><h2 id="LocalDate、LocalTime、LocalDateTime"><a href="#LocalDate、LocalTime、LocalDateTime" class="headerlink" title="LocalDate、LocalTime、LocalDateTime"></a>LocalDate、LocalTime、LocalDateTime</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">   LocalDateTime ldt = LocalDateTime.now();</span><br><span class="line">   System.out.println(ldt);</span><br><span class="line">   </span><br><span class="line">   LocalDateTime ld2 = LocalDateTime.of(<span class="number">2016</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">   System.out.println(ld2);</span><br><span class="line">   </span><br><span class="line">   LocalDateTime ldt3 = ld2.plusYears(<span class="number">20</span>);</span><br><span class="line">   System.out.println(ldt3);</span><br><span class="line">   </span><br><span class="line">   LocalDateTime ldt4 = ld2.minusMonths(<span class="number">2</span>);</span><br><span class="line">   System.out.println(ldt4);</span><br><span class="line">   </span><br><span class="line">   System.out.println(ldt.getYear());</span><br><span class="line">   System.out.println(ldt.getMonthValue());</span><br><span class="line">   System.out.println(ldt.getDayOfMonth());</span><br><span class="line">   System.out.println(ldt.getHour());</span><br><span class="line">   System.out.println(ldt.getMinute());</span><br><span class="line">   System.out.println(ldt.getSecond());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Instant-时间戳"><a href="#Instant-时间戳" class="headerlink" title="Instant 时间戳"></a>Instant 时间戳</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2. Instant : 时间戳。 （使用 Unix 元年  1970年1月1日 00:00:00 所经历的毫秒值）</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">   Instant ins = Instant.now();  <span class="comment">//默认使用 UTC 时区</span></span><br><span class="line">   System.out.println(ins);</span><br><span class="line"></span><br><span class="line">   OffsetDateTime odt = ins.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">   System.out.println(odt); <span class="comment">// 东八区</span></span><br><span class="line"></span><br><span class="line">   System.out.println(ins.getNano());</span><br><span class="line"></span><br><span class="line">   Instant ins2 = Instant.ofEpochSecond(<span class="number">5</span>);</span><br><span class="line">   System.out.println(ins2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Duration-和-Period"><a href="#Duration-和-Period" class="headerlink" title="Duration 和 Period"></a>Duration 和 Period</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Duration : 用于计算两个“时间”间隔</span></span><br><span class="line"><span class="comment">//Period : 用于计算两个“日期”间隔</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">   Instant ins1 = Instant.now();</span><br><span class="line"></span><br><span class="line">   System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Instant ins2 = Instant.now();</span><br><span class="line"></span><br><span class="line">   System.out.println(<span class="string">"所耗费时间为："</span> + Duration.between(ins1, ins2));</span><br><span class="line"></span><br><span class="line">   System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">   LocalDate ld1 = LocalDate.now();</span><br><span class="line">   LocalDate ld2 = LocalDate.of(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   Period pe = Period.between(ld2, ld1);</span><br><span class="line">   System.out.println(pe.getYears());</span><br><span class="line">   System.out.println(pe.getMonths());</span><br><span class="line">   System.out.println(pe.getDays());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="TemporalAdjuster-时间校正器"><a href="#TemporalAdjuster-时间校正器" class="headerlink" title="TemporalAdjuster : 时间校正器"></a>TemporalAdjuster : 时间校正器</h2><p>TemporalAdjuster : 时间校正器。有时我们可能需要获取例如：将日期调整到“下个周日”等操作。<br>TemporalAdjusters : 该类通过静态方法提供了大量的常用 TemporalAdjuster 的实现。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">LocalDateTime ldt = LocalDateTime.now();</span><br><span class="line">   System.out.println(ldt);</span><br><span class="line"></span><br><span class="line">   LocalDateTime ldt2 = ldt.withDayOfMonth(<span class="number">10</span>);</span><br><span class="line">   System.out.println(ldt2);</span><br><span class="line"></span><br><span class="line">   LocalDateTime ldt3 = ldt.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));</span><br><span class="line">   System.out.println(ldt3);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//自定义：下一个工作日</span></span><br><span class="line">   LocalDateTime ldt5 = ldt.with((l) -&gt; &#123;</span><br><span class="line">      LocalDateTime ldt4 = (LocalDateTime) l;</span><br><span class="line"></span><br><span class="line">      DayOfWeek dow = ldt4.getDayOfWeek();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(dow.equals(DayOfWeek.FRIDAY))&#123;</span><br><span class="line">         <span class="keyword">return</span> ldt4.plusDays(<span class="number">3</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dow.equals(DayOfWeek.SATURDAY))&#123;</span><br><span class="line">         <span class="keyword">return</span> ldt4.plusDays(<span class="number">2</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> ldt4.plusDays(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   System.out.println(ldt5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解析与格式化"><a href="#解析与格式化" class="headerlink" title="解析与格式化"></a>解析与格式化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    DateTimeFormatter dtf = DateTimeFormatter.ISO_LOCAL_DATE;</span></span><br><span class="line"></span><br><span class="line">      DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日 HH:mm:ss E"</span>);</span><br><span class="line"></span><br><span class="line">      LocalDateTime ldt = LocalDateTime.now();</span><br><span class="line">      String strDate = ldt.format(dtf);</span><br><span class="line"></span><br><span class="line">      System.out.println(strDate);</span><br><span class="line"></span><br><span class="line">      LocalDateTime newLdt = ldt.parse(strDate, dtf);</span><br><span class="line">      System.out.println(newLdt);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="时区的处理"><a href="#时区的处理" class="headerlink" title="时区的处理"></a>时区的处理</h2><p>Java8 中加入了对时区的支持，带时区的时间为分别为：<br>ZonedDate、 ZonedTime、 ZonedDateTime</p>
<p>其中每个时区都对应着 ID，地区ID都为 “{区域}/{城市}”的格式<br>例如 ： Asia/Shanghai 等<br>ZoneId：该类中包含了所有的时区信息<br>getAvailableZoneIds() : 可以获取所有时区时区信息<br>of(id) : 用指定的时区信息获取 ZoneId 对象 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//6.ZonedDate、ZonedTime、ZonedDateTime ： 带时区的时间或日期</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">   LocalDateTime ldt = LocalDateTime.now(ZoneId.of(<span class="string">"Asia/Shanghai"</span>));</span><br><span class="line">   System.out.println(ldt);</span><br><span class="line"></span><br><span class="line">   ZonedDateTime zdt = ZonedDateTime.now(ZoneId.of(<span class="string">"US/Pacific"</span>));</span><br><span class="line">   System.out.println(zdt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">   Set&lt;String&gt; set = ZoneId.getAvailableZoneIds();</span><br><span class="line">   set.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="与传统日期处理的转换"><a href="#与传统日期处理的转换" class="headerlink" title="与传统日期处理的转换"></a>与传统日期处理的转换</h2><table>
<thead>
<tr>
<th>类</th>
<th>To 遗留类</th>
<th>From 遗留类</th>
</tr>
</thead>
<tbody><tr>
<td>java.time.Instant java.util.Date</td>
<td>Date.from(instant)</td>
<td>date.toInstant()</td>
</tr>
<tr>
<td>java.time.Instant java.sql.Timestamp</td>
<td>Timestamp.from(instant)</td>
<td>timestamp.toInstant()</td>
</tr>
<tr>
<td>java.time.ZonedDateTime java.util.GregorianCalendar</td>
<td>GregorianCalendar.from(zonedDateTim e)</td>
<td>cal.toZonedDateTime()</td>
</tr>
<tr>
<td>java.time.LocalDate java.sql.Time</td>
<td>Date.valueOf(localDate)</td>
<td>date.toLocalDate()</td>
</tr>
<tr>
<td>java.time.LocalTime java.sql.Time</td>
<td>Date.valueOf(localDate)</td>
<td>date.toLocalTime()</td>
</tr>
<tr>
<td>java.time.LocalDateTime java.sql.Timestamp</td>
<td>Timestamp.valueOf(localDateTime)</td>
<td>timestamp.toLocalDateTime()</td>
</tr>
<tr>
<td>java.time.ZoneId java.util.TimeZone</td>
<td>Timezone.getTimeZone(id)</td>
<td>timeZone.toZoneId()</td>
</tr>
<tr>
<td>java.time.format.DateTimeFormatter java.text.DateFormat</td>
<td>formatter.toFormat()</td>
<td>无</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trans</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(Date.from(Instant.now())); <span class="comment">// now -&gt; tradition</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> Date().toInstant()); <span class="comment">// tradition -&gt; now</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jdk1.8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存区域</title>
    <url>/2018/11/22/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="基本问题："><a href="#基本问题：" class="headerlink" title="基本问题："></a>基本问题：</h2><ul>
<li><strong>介绍下 Java 内存区域（运行时数据区）</strong></li>
<li><strong>Java 对象的创建过程（五步，建议能默写出来并且要知道每一步虚拟机做了什么）</strong></li>
<li><strong>对象的访问定位的两种方式（句柄和直接指针两种方式）</strong></li>
</ul>
<h2 id="拓展问题"><a href="#拓展问题" class="headerlink" title="拓展问题:"></a>拓展问题:</h2><ul>
<li><strong>String类和常量池</strong></li>
<li><strong>8种基本类型的包装类和常量池</strong></li>
</ul>
<a id="more"></a>

<ul>
<li>本文来自<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener"><code>https://github.com/Snailclimb/JavaGuide</code></a></li>
</ul>
<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1   概述"></a>1   概述</h2><p>对于 Java 程序员来说，在虚拟机自动内存管理机制下，不再需要像C/C++程序开发程序员这样为内一个 new 操作去写对应的 delete/free 操作，不容易出现内存泄漏和内存溢出问题。正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。</p>
<h2 id="2-运行时数据区域"><a href="#2-运行时数据区域" class="headerlink" title="2 运行时数据区域"></a>2 运行时数据区域</h2><p>Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。<br><img src="https://user-gold-cdn.xitu.io/2018/4/27/16306a34cd8a4354?w=513&h=404&f=png&s=132068" alt="运行时数据区域"><br>这些组成部分一些是线程私有的，其他的则是线程共享的。</p>
<p><strong>线程私有的：</strong></p>
<ul>
<li>程序计数器</li>
<li>虚拟机栈</li>
<li>本地方法栈</li>
</ul>
<p><strong>线程共享的：</strong></p>
<ul>
<li>堆</li>
<li>方法区</li>
<li>直接内存</li>
</ul>
<h3 id="2-1-程序计数器"><a href="#2-1-程序计数器" class="headerlink" title="2.1 程序计数器"></a>2.1 程序计数器</h3><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。<strong>字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完。</strong></p>
<p>另外，<strong>为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</strong></p>
<p><strong>从上面的介绍中我们知道程序计数器主要有两个作用：</strong></p>
<ol>
<li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li>
<li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li>
</ol>
<p><strong>注意：程序计数器是唯一一个不会出现OutOfMemoryError的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</strong></p>
<h3 id="2-2-Java-虚拟机栈"><a href="#2-2-Java-虚拟机栈" class="headerlink" title="2.2 Java 虚拟机栈"></a>2.2 Java 虚拟机栈</h3><p><strong>与程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期和线程相同，描述的是 Java 方法执行的内存模型。</strong></p>
<p><strong>Java 内存可以粗糙的区分为堆内存（Heap）和栈内存(Stack),其中栈就是现在说的虚拟机栈，或者说是虚拟机栈中局部变量表部分。</strong> （实际上，Java虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。）</p>
<p><strong>局部变量表主要存放了编译器可知的各种数据类型</strong>（boolean、byte、char、short、int、float、long、double）、<strong>对象引用</strong>（reference类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。</p>
<p><strong>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。</strong></p>
<ul>
<li><strong>StackOverFlowError：</strong> 若Java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前Java虚拟机栈的最大深度的时候，就抛出StackOverFlowError异常。</li>
<li><strong>OutOfMemoryError：</strong> 若 Java 虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出OutOfMemoryError异常。</li>
</ul>
<p>Java 虚拟机栈也是线程私有的，每个线程都有各自的Java虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。</p>
<h3 id="2-3-本地方法栈"><a href="#2-3-本地方法栈" class="headerlink" title="2.3 本地方法栈"></a>2.3 本地方法栈</h3><p>和虚拟机栈所发挥的作用非常相似，区别是： <strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p>
<p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p>
<p>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种异常。</p>
<h3 id="2-4-堆"><a href="#2-4-堆" class="headerlink" title="2.4 堆"></a>2.4 堆</h3><p>Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。<strong>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</strong></p>
<p>Java 堆是垃圾收集器管理的主要区域，因此也被称作<strong>GC堆（Garbage Collected Heap）</strong>.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以Java堆还可以细分为：新生代和老年代：再细致一点有：Eden空间、From Survivor、To Survivor空间等。<strong>进一步划分的目的是更好地回收内存，或者更快地分配内存。</strong></p>
<p><img src="https://user-gold-cdn.xitu.io/2018/8/25/16570344a29c3433?w=599&h=250&f=png&s=8946" alt=""></p>
<p><strong>在 JDK 1.8中移除整个永久代，取而代之的是一个叫元空间（Metaspace）的区域（永久代使用的是JVM的堆内存空间，而元空间使用的是物理内存，直接受到本机的物理内存限制）。</strong></p>
<p>推荐阅读：</p>
<ul>
<li>《Java8内存模型—永久代(PermGen)和元空间(Metaspace)》：<span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9wYWRkaXgvcC81MzA5NTUwLmh0bWw=" title="http://www.cnblogs.com/paddix/p/5309550.html">http://www.cnblogs.com/paddix/p/5309550.html<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="2-5-方法区"><a href="#2-5-方法区" class="headerlink" title="2.5 方法区"></a>2.5 方法区</h3><p><strong>方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</strong></p>
<p>HotSpot 虚拟机中方法区也常被称为 <strong>“永久代”</strong>，本质上两者并不等价。仅仅是因为 HotSpot 虚拟机设计团队用永久代来实现方法区而已，这样 HotSpot 虚拟机的垃圾收集器就可以像管理 Java 堆一样管理这部分内存了。但是这并不是一个好主意，因为这样更容易遇到内存溢出问题。</p>
<p><strong>相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。</strong></p>
<h3 id="2-6-运行时常量池"><a href="#2-6-运行时常量池" class="headerlink" title="2.6 运行时常量池"></a>2.6 运行时常量池</h3><p>运行时常量池是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池信息（用于存放编译期生成的各种字面量和符号引用）</p>
<p>既然运行时常量池时方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。</p>
<p><strong>JDK1.7及之后版本的 JVM 已经将运行时常量池从方法区中移了出来，在 Java 堆（Heap）中开辟了一块区域存放运行时常量池。</strong> </p>
<p><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-14/26038433.jpg" alt=""><br>——图片来源：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdiaWFvMDA3L2FydGljbGUvZGV0YWlscy83ODU0NTE4OQ==" title="https://blog.csdn.net/wangbiao007/article/details/78545189">https://blog.csdn.net/wangbiao007/article/details/78545189<i class="fa fa-external-link"></i></span></p>
<p>推荐阅读：</p>
<ul>
<li>《Java 中几种常量池的区分》： <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2MjIyODU5L2FydGljbGUvZGV0YWlscy83MzEzNTY2MA==" title="https://blog.csdn.net/qq_26222859/article/details/73135660">https://blog.csdn.net/qq_26222859/article/details/73135660<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="2-7-直接内存"><a href="#2-7-直接内存" class="headerlink" title="2.7 直接内存"></a>2.7 直接内存</h3><p>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致OutOfMemoryError异常出现。</p>
<p>JDK1.4中新加入的 <strong>NIO(New Input/Output) 类</strong>，引入了一种基于<strong>通道（Channel）</strong> 与<strong>缓存区（Buffer）</strong> 的 I/O 方式，它可以直接使用Native函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为<strong>避免了在 Java 堆和 Native 堆之间来回复制数据</strong>。</p>
<p>本机直接内存的分配不会收到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。</p>
<h2 id="3-HotSpot-虚拟机对象探秘"><a href="#3-HotSpot-虚拟机对象探秘" class="headerlink" title="3 HotSpot 虚拟机对象探秘"></a>3 HotSpot 虚拟机对象探秘</h2><p>通过上面的介绍我们大概知道了虚拟机的内存情况，下面我们来详细的了解一下 HotSpot 虚拟机在 Java 堆中对象分配、布局和访问的全过程。</p>
<h3 id="3-1-对象的创建"><a href="#3-1-对象的创建" class="headerlink" title="3.1 对象的创建"></a>3.1 对象的创建</h3><p>下图便是 Java 对象的创建过程，我建议最好是能默写出来，并且要掌握每一步在做什么。<br><img src="https://user-gold-cdn.xitu.io/2018/8/22/16561e59a4135869?w=950&h=279&f=png&s=28529" alt="Java对象的创建过程"></p>
<p><strong>①类加载检查：</strong> 虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p>
<p><strong>②分配内存：</strong> 在<strong>类加载检查</strong>通过后，接下来虚拟机将为新生对象<strong>分配内存</strong>。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。<strong>分配方式</strong>有 <strong>“指针碰撞”</strong> 和 <strong>“空闲列表”</strong> 两种，<strong>选择那种分配方式由 Java 堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定</strong>。</p>
<p><strong>内存分配的两种方式：（补充内容，需要掌握）</strong></p>
<p>选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是”标记-清除”，还是”标记-整理”（也称作”标记-压缩”），值得注意的是，复制算法内存也是规整的</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/8/22/16561e59a40a2c3d?w=1426&h=333&f=png&s=26346" alt=""></p>
<p><strong>内存分配并发问题（补充内容，需要掌握）</strong></p>
<p>在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：</p>
<ul>
<li><strong>CAS+失败重试：</strong> CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。<strong>虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</strong></li>
<li><strong>TLAB：</strong> 为每一个线程预先在Eden区分配一块儿内存，JVM在给线程中的对象分配内存时，首先在TLAB分配，当对象大于TLAB中的剩余内存或TLAB的内存已用尽时，再采用上述的CAS进行内存分配</li>
</ul>
<p><strong>③初始化零值：</strong> 内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p>
<p><strong>④设置对象头：</strong> 初始化零值完成之后，<strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希吗、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p>
<p><strong>⑤执行 init 方法：</strong> 在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，<code>&lt;init&gt;</code> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 <code>&lt;init&gt;</code> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p>
<h3 id="3-2-对象的内存布局"><a href="#3-2-对象的内存布局" class="headerlink" title="3.2 对象的内存布局"></a>3.2 对象的内存布局</h3><p>在 Hotspot 虚拟机中，对象在内存中的布局可以分为3块区域：<strong>对象头</strong>、<strong>实例数据</strong>和<strong>对齐填充</strong>。</p>
<p><strong>Hotspot虚拟机的对象头包括两部分信息</strong>，<strong>第一部分用于存储对象自身的自身运行时数据</strong>（哈希码、GC分代年龄、锁状态标志等等），<strong>另一部分是类型指针</strong>，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是那个类的实例。</p>
<p><strong>实例数据部分是对象真正存储的有效信息</strong>，也是在程序中所定义的各种类型的字段内容。</p>
<p><strong>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。</strong> 因为Hotspot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数（1倍或2倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p>
<h3 id="3-3-对象的访问定位"><a href="#3-3-对象的访问定位" class="headerlink" title="3.3 对象的访问定位"></a>3.3 对象的访问定位</h3><p>建立对象就是为了使用对象，我们的Java程序通过栈上的 reference 数据来操作堆上的具体对象。对象的访问方式有虚拟机实现而定，目前主流的访问方式有<strong>①使用句柄</strong>和<strong>②直接指针</strong>两种：</p>
<ol>
<li><p><strong>句柄：</strong> 如果使用句柄的话，那么Java堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息；<br><img src="https://user-gold-cdn.xitu.io/2018/4/27/16306b9573968946?w=786&h=362&f=png&s=109201" alt="使用句柄"></p>
</li>
<li><p><strong>直接指针：</strong>  如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference 中存储的直接就是对象的地址。</p>
</li>
</ol>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/27/16306ba3a41b6b65?w=766&h=353&f=png&s=99172" alt="使用直接指针"></p>
<p><strong>这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。</strong></p>
<h2 id="四-重点补充内容"><a href="#四-重点补充内容" class="headerlink" title="四  重点补充内容"></a>四  重点补充内容</h2><h3 id="String-类和常量池"><a href="#String-类和常量池" class="headerlink" title="String 类和常量池"></a>String 类和常量池</h3><p><strong>1 String 对象的两种创建方式：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"abcd"</span>;</span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">"abcd"</span>);</span><br><span class="line">System.out.println(str1==str2);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>这两种不同的创建方法是有差别的，第一种方式是在常量池中拿对象，第二种方式是直接在堆内存空间创建一个新的对象。<br><img src="https://user-gold-cdn.xitu.io/2018/8/22/16561e59a59c0873?w=698&h=355&f=png&s=10449" alt=""><br>记住：只要使用new方法，便需要创建新的对象。</p>
<p><strong>2 String 类型的常量池比较特殊。它的主要使用方法有两种：</strong></p>
<ul>
<li>直接使用双引号声明出来的 String 对象会直接存储在常量池中。</li>
<li>如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern 方法。String.intern() 是一个 Native 方法，它的作用是：如果运行时常量池中已经包含一个等于此 String 对象内容的字符串，则返回常量池中该字符串的引用；如果没有，则在常量池中创建与此 String 内容相同的字符串，并返回常量池中创建的字符串的引用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"计算机"</span>);</span><br><span class="line">String s2 = s1.intern();</span><br><span class="line">String s3 = <span class="string">"计算机"</span>;</span><br><span class="line">System.out.println(s2);<span class="comment">//计算机</span></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//false，因为一个是堆内存中的String对象一个是常量池中的String对象，</span></span><br><span class="line">System.out.println(s3 == s2);<span class="comment">//true，因为两个都是常量池中的String对象</span></span><br></pre></td></tr></table></figure>
<p><strong>3 String 字符串拼接</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"str"</span>;</span><br><span class="line">String str2 = <span class="string">"ing"</span>;</span><br><span class="line"></span><br><span class="line">String str3 = <span class="string">"str"</span> + <span class="string">"ing"</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line">String str4 = str1 + str2; <span class="comment">//在堆上创建的新的对象	  </span></span><br><span class="line">String str5 = <span class="string">"string"</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line">System.out.println(str3 == str4);<span class="comment">//false</span></span><br><span class="line">System.out.println(str3 == str5);<span class="comment">//true</span></span><br><span class="line">System.out.println(str4 == str5);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p><img src="https://user-gold-cdn.xitu.io/2018/8/22/16561e59a4d13f92?w=593&h=603&f=png&s=22265" alt=""></p>
<p>尽量避免多个字符串拼接，因为这样会重新创建对象。如果需要改变字符串的话，可以使用 StringBuilder 或者 StringBuffer。</p>
<h3 id="String-s1-new-String-“abc”-这句话创建了几个对象？"><a href="#String-s1-new-String-“abc”-这句话创建了几个对象？" class="headerlink" title="String s1 = new String(“abc”);这句话创建了几个对象？"></a>String s1 = new String(“abc”);这句话创建了几个对象？</h3><p><strong>创建了两个对象。</strong></p>
<p><strong>验证：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);<span class="comment">// 堆内存的地值值</span></span><br><span class="line">String s2 = <span class="string">"abc"</span>;</span><br><span class="line">System.out.println(s1 == s2);<span class="comment">// 输出false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。</span></span><br><span class="line">System.out.println(s1.equals(s2));<span class="comment">// 输出true</span></span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<p><strong>解释：</strong></p>
<p>先有字符串”abc”放入常量池，然后 new 了一份字符串”abc”放入Java堆(字符串常量”abc”在编译期就已经确定放入常量池，而 Java 堆上的”abc”是在运行期初始化阶段才确定)，然后 Java 栈的 str1 指向Java堆上的”abc”。 </p>
<h3 id="8种基本类型的包装类和常量池"><a href="#8种基本类型的包装类和常量池" class="headerlink" title="8种基本类型的包装类和常量池"></a>8种基本类型的包装类和常量池</h3><ul>
<li><strong>Java 基本类型的包装类的大部分都实现了常量池技术，即Byte,Short,Integer,Long,Character,Boolean；这5种包装类默认创建了数值[-128，127]的相应类型的缓存数据，但是超出此范围仍然会去创建新的对象。</strong></li>
<li><strong>两种浮点数类型的包装类 Float,Double 并没有实现常量池技术。</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">33</span>;</span><br><span class="line">Integer i2 = <span class="number">33</span>;</span><br><span class="line">System.out.println(i1 == i2);<span class="comment">// 输出true</span></span><br><span class="line">Integer i11 = <span class="number">333</span>;</span><br><span class="line">Integer i22 = <span class="number">333</span>;</span><br><span class="line">System.out.println(i11 == i22);<span class="comment">// 输出false</span></span><br><span class="line">Double i3 = <span class="number">1.2</span>;</span><br><span class="line">Double i4 = <span class="number">1.2</span>;</span><br><span class="line">System.out.println(i3 == i4);<span class="comment">// 输出false</span></span><br></pre></td></tr></table></figure>

<p><strong>Integer 缓存源代码：</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*此方法将始终缓存-128到127（包括端点）范围内的值，并可以缓存此范围之外的其他值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>应用场景：</strong></p>
<ol>
<li>Integer i1=40；Java 在编译的时候会直接将代码封装成Integer i1=Integer.valueOf(40);，从而使用常量池中的对象。</li>
<li>Integer i1 = new Integer(40);这种情况下会创建新的对象。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">40</span>;</span><br><span class="line">Integer i2 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">System.out.println(i1==i2);<span class="comment">//输出false</span></span><br></pre></td></tr></table></figure>
<p><strong>Integer比较更丰富的一个例子:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i1 = <span class="number">40</span>;</span><br><span class="line">Integer i2 = <span class="number">40</span>;</span><br><span class="line">Integer i3 = <span class="number">0</span>;</span><br><span class="line">Integer i4 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">Integer i5 = <span class="keyword">new</span> Integer(<span class="number">40</span>);</span><br><span class="line">Integer i6 = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"i1=i2   "</span> + (i1 == i2));</span><br><span class="line">System.out.println(<span class="string">"i1=i2+i3   "</span> + (i1 == i2 + i3));</span><br><span class="line">System.out.println(<span class="string">"i1=i4   "</span> + (i1 == i4));</span><br><span class="line">System.out.println(<span class="string">"i4=i5   "</span> + (i4 == i5));</span><br><span class="line">System.out.println(<span class="string">"i4=i5+i6   "</span> + (i4 == i5 + i6));   </span><br><span class="line">System.out.println(<span class="string">"40=i5+i6   "</span> + (<span class="number">40</span> == i5 + i6));</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i1&#x3D;i2   true</span><br><span class="line">i1&#x3D;i2+i3   true</span><br><span class="line">i1&#x3D;i4   false</span><br><span class="line">i4&#x3D;i5   false</span><br><span class="line">i4&#x3D;i5+i6   true</span><br><span class="line">40&#x3D;i5+i6   true</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>语句i4 == i5 + i6，因为+这个操作符不适用于Integer对象，首先i5和i6进行自动拆箱操作，进行数值相加，即i4 == 40。然后Integer对象无法与数值进行直接比较，所以i4自动拆箱转为int值40，最终这条语句转为40 == 40进行数值比较。</p>
<p><strong>参考：</strong></p>
<ul>
<li>《深入理解Java虚拟机：JVM高级特性与最佳实践（第二版》</li>
<li>《实战java虚拟机》</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vQ1pEYmxvZy9wLzU1ODkzNzkuaHRtbA==" title="https://www.cnblogs.com/CZDblog/p/5589379.html">https://www.cnblogs.com/CZDblog/p/5589379.html<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vamF2YS16aGFvL3AvNTE4MDQ5Mi5odG1s" title="https://www.cnblogs.com/java-zhao/p/5180492.html">https://www.cnblogs.com/java-zhao/p/5180492.html<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2MjIyODU5L2FydGljbGUvZGV0YWlscy83MzEzNTY2MA==" title="https://blog.csdn.net/qq_26222859/article/details/73135660">https://blog.csdn.net/qq_26222859/article/details/73135660<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1Z3d1aGFuMjAxNC9hcnRpY2xlL2RldGFpbHMvNzgwMzgyNTQ=" title="https://blog.csdn.net/cugwuhan2014/article/details/78038254">https://blog.csdn.net/cugwuhan2014/article/details/78038254<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringDataJPA总结</title>
    <url>/2018/11/09/spring%E7%9B%B8%E5%85%B3/SpringDataJPA%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZGF0YS9qcGEvZG9jcy8yLjEuMi5SRUxFQVNFL3JlZmVyZW5jZS9odG1sLw==" title="https://docs.spring.io/spring-data/jpa/docs/2.1.2.RELEASE/reference/html/">主要是对读SpringJPA官方文档的记录<i class="fa fa-external-link"></i></span></li>
<li>Spring Data JPA为Java Persistence API (JPA)提供存储库支持。它简化了需要访问JPA数据源的应用程序的开发。  </li>
<li>SpringBoot与JPA结合。</li>
<li>Hibernate实现和JPA规范实现。</li>
<li>查询语句封装等。</li>
</ul>
<a id="more"></a>

<h1 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1 简单使用"></a>1 简单使用</h1><h2 id="1-1-引入jar包"><a href="#1-1-引入jar包" class="headerlink" title="1.1 引入jar包"></a>1.1 引入jar包</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation(<span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span>)</span><br><span class="line">    runtimeOnly(<span class="string">'mysql:mysql-connector-java'</span>) <span class="comment">// 高版本MySQL驱动需要注意时区问题</span></span><br><span class="line">    compileOnly(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line">    testImplementation(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-配置文件"><a href="#1-2-配置文件" class="headerlink" title="1.2 配置文件"></a>1.2 配置文件</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/testforjpa?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">Gepoint</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="meta">spring.jpa.database-platform</span>=<span class="string">org.hibernate.dialect.MySQL57Dialect</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.jpa.open-in-view</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.jpa.properties.hibernate.globally_quoted_identifiers</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-实体类以及实体类对应Repository"><a href="#1-3-实体类以及实体类对应Repository" class="headerlink" title="1.3 实体类以及实体类对应Repository"></a>1.3 实体类以及实体类对应Repository</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ZhangXu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-11-12 9:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerRepository</span> <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">Customer</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-启动类保存数据"><a href="#1-4-启动类保存数据" class="headerlink" title="1.4 启动类保存数据"></a>1.4 启动类保存数据</h2><p>项目启动时，数据表自动创建。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 创建Respository代理对象</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span> <span class="comment">// 默认找启动类包及子包下</span></span><br><span class="line"><span class="meta">@EntityScan</span> <span class="comment">// 默认找启动类包及子包下</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringdatajpatestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringdatajpatestApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CustomerRepository customerRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommandLineRunner <span class="title">commandLineRunner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">            <span class="comment">// 保存</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">                customer.setCustomerName(<span class="string">"张三"</span> + i);</span><br><span class="line">                customerRepository.save(customer);</span><br><span class="line">                log.info(<span class="string">"保存成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询</span></span><br><span class="line">            <span class="comment">// 11-20</span></span><br><span class="line">            Page&lt;Customer&gt; all = customerRepository.findAll(PageRequest.of(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">            all.get().forEach(customer -&gt; &#123;</span><br><span class="line">                log.info(customer.getCustomerId() + <span class="string">"::"</span> + customer.getCustomerName());</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有的数据库操作都依赖Repository,框架自动生成SQL语句。</p>
<h1 id="2-扩展配置"><a href="#2-扩展配置" class="headerlink" title="2 扩展配置"></a>2 扩展配置</h1><h2 id="2-1-多模块"><a href="#2-1-多模块" class="headerlink" title="2.1 多模块"></a>2.1 多模块</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractCustomerRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> customer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">findByCustomerName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerRepository</span> <span class="keyword">extends</span> <span class="title">AbstractCustomerRepository</span>&lt;<span class="title">Customer</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">Customer customer = customerRepository.findByCustomerName(<span class="string">"张三23"</span>);</span><br><span class="line">log.info(customer.getCustomerId() + <span class="string">"::"</span> + customer.getCustomerName());</span><br></pre></td></tr></table></figure>

<h2 id="2-2-领域对象注册"><a href="#2-2-领域对象注册" class="headerlink" title="2.2 领域对象注册"></a>2.2 领域对象注册</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Person</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"> …</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MongoDB</span></span><br><span class="line"><span class="meta">@Document</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">// 可混合</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    可以使用interface MyRepository extends JpaRepository&lt;User, Long&gt; &#123; &#125;或@EnableJpaRepository方式</span></span><br><span class="line"><span class="comment">    去识别SpringData Module 的 Repositroy。</span></span><br><span class="line"><span class="comment">    在同一个域类型上使用多个特定于持久性技术的注释是可能的，并且允许跨多个持久性技术重用域类型。然而，Spring数据不再能够确定绑定存储库的唯一模块。</span></span><br><span class="line"><span class="comment">    最后一种区分存储库的方法是确定存储库基础包的范围。基本包定义扫描存储库接口定义的起点，这意味着在适当的包中有存储库定义。默认情况下，注解驱动的配置使用配置类的包。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"com.acme.repositories.jpa"</span>)</span><br><span class="line"><span class="meta">@EnableMongoRepositories</span>(basePackages = <span class="string">"com.acme.repositories.mongo"</span>)</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Configuration</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-查询方法"><a href="#3-查询方法" class="headerlink" title="3 查询方法"></a>3 查询方法</h1><p>在Repostiory接口中可<strong>根据规则</strong>自定义数据库操作方法:blush:。</p>
<h2 id="3-1-查询规则"><a href="#3-1-查询规则" class="headerlink" title="3.1 查询规则"></a>3.1 查询规则</h2><p>可在<code>@EnableJpaRepositories(queryLookupStrategy = QueryLookupStrategy.Key.CREATE_IF_NOT_FOUND)</code>配置规则策略模式。</p>
<ol>
<li>共有<strong>CREATE,</strong> <strong>USE_DECLARED_QUERY,</strong> <strong>CREATE_IF_NOT_FOUND</strong>三种模式。</li>
<li>最后一个是默认模式，<code>CREATE</code>是使用自定义数据操作方法。</li>
</ol>
<h2 id="3-2-查询方法创建"><a href="#3-2-查询方法创建" class="headerlink" title="3.2 查询方法创建"></a>3.2 查询方法创建</h2><p>The mechanism strips the prefixes find…By, read…By, query…By, count…By, and get…By from the method and starts parsing the rest of it.</p>
<p>后缀属性就是领域对象的成员变量名(首字母大写)。多条件使用And或Or.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByEmailAddressAndLastname</span><span class="params">(EmailAddress emailAddress, String lastname)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Enables the distinct flag for the query</span></span><br><span class="line">  <span class="function">List&lt;Person&gt; <span class="title">findDistinctPeopleByLastnameOrFirstname</span><span class="params">(String lastname, String firstname)</span></span>;</span><br><span class="line">  <span class="function">List&lt;Person&gt; <span class="title">findPeopleDistinctByLastnameOrFirstname</span><span class="params">(String lastname, String firstname)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Enabling ignoring case for an individual property 忽略大小写</span></span><br><span class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameIgnoreCase</span><span class="params">(String lastname)</span></span>;</span><br><span class="line">  <span class="comment">// Enabling ignoring case for all suitable properties</span></span><br><span class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameAndFirstnameAllIgnoreCase</span><span class="params">(String lastname, String firstname)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Enabling static ORDER BY for a query 排序</span></span><br><span class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameOrderByFirstnameAsc</span><span class="params">(String lastname)</span></span>;</span><br><span class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameOrderByFirstnameDesc</span><span class="params">(String lastname)</span></span>;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 此外还有很多 比如 findDistinctTop... findFirst..</span></span><br><span class="line">    <span class="function">User <span class="title">findFirstByOrderByLastnameAsc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">User <span class="title">findTopByOrderByAgeDesc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Page&lt;User&gt; <span class="title">queryFirst10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Slice&lt;User&gt; <span class="title">findTop3ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">List&lt;User&gt; <span class="title">findFirst10ByLastname</span><span class="params">(String lastname, Sort sort)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">List&lt;User&gt; <span class="title">findTop10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 属性可以是类，消耗时间，分开找</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByAddressZipCode</span><span class="params">(ZipCode zipCode)</span></span>;</span><br><span class="line">    <span class="comment">// 也可以这样，但不符合规范</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByAddress_ZipCode</span><span class="params">(ZipCode zipCode)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>根据条件分页排序查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Page&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A Slice only knows about whether a next Slice is available, which might be sufficient when walking through a larger result set.数据多的时候使用</span></span><br><span class="line"><span class="function">Slice&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Sort sort)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询客户名称以2结尾的所有客户并读取第一页</span></span><br><span class="line">customerRepository</span><br><span class="line">.findCustomersByCustomerNameEndsWith(<span class="string">"2"</span>, PageRequest.of(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">    .forEach(customer -&gt; &#123;</span><br><span class="line">                log.info(customer.getCustomerId() + <span class="string">"::"</span> + customer.getCustomerName());</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按姓名查询排序</span></span><br><span class="line">customerRepository</span><br><span class="line">                    .findCustomersByCustomerNameContains(<span class="string">"2"</span>,</span><br><span class="line"><span class="comment">//                            Sort.by(Sort.DEFAULT_DIRECTION,"customerId"))// 升序</span></span><br><span class="line">                            Sort.by(Sort.Direction.DESC,<span class="string">"customerId"</span>)) <span class="comment">//降序</span></span><br><span class="line">                    .forEach(customer -&gt; &#123;</span><br><span class="line">                log.info(customer.getCustomerId() + <span class="string">"::"</span> + customer.getCustomerName());</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>



<ul>
<li>Java8流查找</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"select u from User u"</span>)</span><br><span class="line"><span class="function">Stream&lt;User&gt; <span class="title">findAllByCustomQueryAndStream</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Stream&lt;User&gt; <span class="title">readAllByFirstnameNotNull</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"select u from User u"</span>)</span><br><span class="line"><span class="function">Stream&lt;User&gt; <span class="title">streamAllPaged</span><span class="params">(Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure>



<ul>
<li>异步查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function">Future&lt;User&gt; <span class="title">findByFirstname</span><span class="params">(String firstname)</span></span>;               </span><br><span class="line"></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function">CompletableFuture&lt;User&gt; <span class="title">findOneByFirstname</span><span class="params">(String firstname)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function">ListenableFuture&lt;User&gt; <span class="title">findOneByLastname</span><span class="params">(String lastname)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringData</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>jpa</tag>
      </tags>
  </entry>
  <entry>
    <title>python-调试和编码风格</title>
    <url>/2018/10/28/python%E7%9B%B8%E5%85%B3/python-%E8%B0%83%E8%AF%95%E5%92%8C%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC/</url>
    <content><![CDATA[<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><h2 id="pdb"><a href="#pdb" class="headerlink" title="pdb"></a>pdb</h2><p>pdb是基于命令行的调试工具，非常类似gnu的gdb（调试c/c++）。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>简写命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>break</td>
<td>b</td>
<td>设置断点</td>
</tr>
<tr>
<td>continue</td>
<td>c</td>
<td>继续执行程序</td>
</tr>
<tr>
<td>list</td>
<td>l</td>
<td>查看当前行的代码段</td>
</tr>
<tr>
<td>step</td>
<td>s</td>
<td>进入函数</td>
</tr>
<tr>
<td>return</td>
<td>r</td>
<td>执行代码直到从当前函数返回</td>
</tr>
<tr>
<td>quit</td>
<td>q</td>
<td>中止并退出</td>
</tr>
<tr>
<td>next</td>
<td>n</td>
<td>执行下一行</td>
</tr>
<tr>
<td>print</td>
<td>p</td>
<td>打印变量的值</td>
</tr>
<tr>
<td>help</td>
<td>h</td>
<td>帮助</td>
</tr>
<tr>
<td>args</td>
<td>a</td>
<td>查看传入参数</td>
</tr>
<tr>
<td></td>
<td>回车</td>
<td>重复上一条命令</td>
</tr>
<tr>
<td>break</td>
<td>b</td>
<td>显示所有断点</td>
</tr>
<tr>
<td>break lineno</td>
<td>b lineno</td>
<td>在指定行设置断点</td>
</tr>
<tr>
<td>break file:lineno</td>
<td>b file:lineno</td>
<td>在指定文件的行设置断点</td>
</tr>
<tr>
<td>clear num</td>
<td></td>
<td>删除指定断点</td>
</tr>
<tr>
<td>bt</td>
<td></td>
<td>查看函数调用栈帧</td>
</tr>
</tbody></table>
<a id="more"></a>

<h3 id="执行时调试"><a href="#执行时调试" class="headerlink" title="执行时调试"></a>执行时调试</h3><p>程序启动，停止在第一行等待单步调试。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m pdb some.py</span><br></pre></td></tr></table></figure>

<h3 id="交互调试"><a href="#交互调试" class="headerlink" title="交互调试"></a>交互调试</h3><p>进入python或ipython解释器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line">pdb.run(<span class="string">'testfun(args)'</span>) <span class="comment">#此时会打开pdb调试，注意：先使用s跳转到这个testfun函数中，然后就可以使用l看到代码了</span></span><br></pre></td></tr></table></figure>

<h3 id="程序里埋点"><a href="#程序里埋点" class="headerlink" title="程序里埋点"></a>程序里埋点</h3><p>当程序执行到pdb.set_trace() 位置时停下来调试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">代码上下文</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pdb </span><br><span class="line">pdb.set_trace()</span><br></pre></td></tr></table></figure>

<h2 id="日志调试"><a href="#日志调试" class="headerlink" title="日志调试"></a>日志调试</h2><h2 id="print大法好"><a href="#print大法好" class="headerlink" title="print大法好"></a>print大法好</h2><p>使用pdb调试的5个demo</p>
<h3 id="demo-1"><a href="#demo-1" class="headerlink" title="demo 1"></a>demo 1</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb </span><br><span class="line">a = <span class="string">"aaa"</span></span><br><span class="line">pdb.set_trace()</span><br><span class="line">b = <span class="string">"bbb"</span></span><br><span class="line">c = <span class="string">"ccc"</span></span><br><span class="line">final = a + b + c </span><br><span class="line"><span class="keyword">print</span> final</span><br><span class="line"></span><br><span class="line"><span class="comment">#调试方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 《1 显示代码》</span></span><br><span class="line"><span class="comment"># l----&gt;能够显示当前调试过程中的代码，其实l表示list列出的意思</span></span><br><span class="line">  <span class="comment">#如下，途中，-&gt; 指向的地方表示要将要执行的位置</span></span><br><span class="line">  <span class="comment"># 2      a = "aaa"</span></span><br><span class="line">  <span class="comment"># 3      pdb.set_trace()</span></span><br><span class="line">  <span class="comment"># 4      b = "bbb"</span></span><br><span class="line">  <span class="comment"># 5      c = "ccc"</span></span><br><span class="line">  <span class="comment"># 6      pdb.set_trace()</span></span><br><span class="line">  <span class="comment"># 7  -&gt;    final = a + b + c</span></span><br><span class="line">  <span class="comment"># 8      print final</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 《2 执行下一行代码》</span></span><br><span class="line"><span class="comment"># n----&gt;能够向下执行一行代码，然后停止运行等待继续调试 n表示next的意思</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 《3 查看变量的值》</span></span><br><span class="line"><span class="comment"># p----&gt;能够查看变量的值，p表示prit打印输出的意思</span></span><br><span class="line">    <span class="comment">#例如：</span></span><br><span class="line">    <span class="comment"># p name 表示查看变量name的值</span></span><br></pre></td></tr></table></figure>

<h3 id="demo-2"><a href="#demo-2" class="headerlink" title="demo 2"></a>demo 2</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb </span><br><span class="line">a = <span class="string">"aaa"</span></span><br><span class="line">pdb.set_trace()</span><br><span class="line">b = <span class="string">"bbb"</span></span><br><span class="line">c = <span class="string">"ccc"</span></span><br><span class="line">pdb.set_trace()</span><br><span class="line">final = a + b + c </span><br><span class="line"><span class="keyword">print</span> final</span><br><span class="line"></span><br><span class="line"><span class="comment"># 《4 将程序继续运行》</span></span><br><span class="line"><span class="comment"># c-----&gt;让程序继续向下执行，与n的区别是n只会执行下面的一行代码，而c会像python xxxx.py一样 继续执行不会停止；c表示continue的意思</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 《5 set_trace()》</span></span><br><span class="line"><span class="comment"># 如果程序中有多个set_trace()，那么能够让程序在使用c的时候停留在下一个set_trace()位置处</span></span><br></pre></td></tr></table></figure>

<h3 id="demo-3"><a href="#demo-3" class="headerlink" title="demo 3"></a>demo 3</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> pdb </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">(s1,s2)</span>:</span></span><br><span class="line">    s3 = s1 + s2 + s1</span><br><span class="line">    s3 = <span class="string">'"'</span> + s3 +<span class="string">'"'</span></span><br><span class="line">    <span class="keyword">return</span> s3</span><br><span class="line"></span><br><span class="line">a = <span class="string">"aaa"</span></span><br><span class="line">pdb.set_trace() </span><br><span class="line">b = <span class="string">"bbb"</span></span><br><span class="line">c = <span class="string">"ccc"</span></span><br><span class="line">final = combine(a,b)</span><br><span class="line"><span class="keyword">print</span> final</span><br><span class="line"></span><br><span class="line"><span class="comment"># 《6 设置断点》</span></span><br><span class="line"><span class="comment"># b----&gt;设置断点，即当使用c的时候，c可以在遇到set_trace()的时候停止，也可以在遇到标记有断点的地方停止；b表示break的意思</span></span><br><span class="line">    <span class="comment">#例如：</span></span><br><span class="line">    <span class="comment">#b 11 在第11行设置断点，注意这个11可以使用l来得到</span></span><br><span class="line">    <span class="comment"># (Pdb) l</span></span><br><span class="line">    <span class="comment">#   4          s3 = s1 + s2 + s1</span></span><br><span class="line">    <span class="comment">#   5          s3 = '"' + s3 +'"'</span></span><br><span class="line">    <span class="comment">#   6          return s3</span></span><br><span class="line">    <span class="comment">#   7      a = "aaa"</span></span><br><span class="line">    <span class="comment">#   8      pdb.set_trace()</span></span><br><span class="line">    <span class="comment">#   9  -&gt;    b = "bbb"</span></span><br><span class="line">    <span class="comment">#  10      c = "ccc"</span></span><br><span class="line">    <span class="comment">#  11      final = combine(a,b)</span></span><br><span class="line">    <span class="comment">#  12      print final</span></span><br><span class="line">    <span class="comment"># [EOF]</span></span><br><span class="line">    <span class="comment"># (Pdb) b 11</span></span><br><span class="line">    <span class="comment"># Breakpoint 1 at /Users/wangmingdong/Desktop/test3.py:11</span></span><br><span class="line">    <span class="comment"># (Pdb) c</span></span><br><span class="line">    <span class="comment"># &gt; /Users/wangmingdong/Desktop/test3.py(11)&lt;module&gt;()</span></span><br><span class="line">    <span class="comment"># -&gt; final = combine(a,b)</span></span><br><span class="line">    <span class="comment"># (Pdb) l</span></span><br><span class="line">    <span class="comment">#   6          return s3</span></span><br><span class="line">    <span class="comment">#   7      a = "aaa"</span></span><br><span class="line">    <span class="comment">#   8      pdb.set_trace()</span></span><br><span class="line">    <span class="comment">#   9      b = "bbb"</span></span><br><span class="line">    <span class="comment">#  10      c = "ccc"</span></span><br><span class="line">    <span class="comment">#  11 B-&gt;    final = combine(a,b)</span></span><br><span class="line">    <span class="comment">#  12      print final</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 《7 进入函数继续调试》</span></span><br><span class="line"><span class="comment"># s----&gt;进入函数里面继续调试，如果使用n表示把一个函数的调用当做一条语句执行过去，而使用s的话，会进入到这个函数 并且停止</span></span><br><span class="line">    <span class="comment">#例如</span></span><br><span class="line">    <span class="comment"># (Pdb) l</span></span><br><span class="line">    <span class="comment">#   6          return s3</span></span><br><span class="line">    <span class="comment">#   7      a = "aaa"</span></span><br><span class="line">    <span class="comment">#   8      pdb.set_trace()</span></span><br><span class="line">    <span class="comment">#   9      b = "bbb"</span></span><br><span class="line">    <span class="comment">#  10      c = "ccc"</span></span><br><span class="line">    <span class="comment">#  11 B-&gt;    final = combine(a,b)</span></span><br><span class="line">    <span class="comment">#  12      print final</span></span><br><span class="line">    <span class="comment"># [EOF]</span></span><br><span class="line">    <span class="comment"># (Pdb) s</span></span><br><span class="line">    <span class="comment"># --Call--</span></span><br><span class="line">    <span class="comment"># &gt; /Users/wangmingdong/Desktop/test3.py(3)combine()</span></span><br><span class="line">    <span class="comment"># -&gt; def combine(s1,s2):</span></span><br><span class="line">    <span class="comment"># (Pdb) l</span></span><br><span class="line">    <span class="comment">#   1      import pdb</span></span><br><span class="line">    <span class="comment">#   2</span></span><br><span class="line">    <span class="comment">#   3  -&gt;    def combine(s1,s2):</span></span><br><span class="line">    <span class="comment">#   4          s3 = s1 + s2 + s1</span></span><br><span class="line">    <span class="comment">#   5          s3 = '"' + s3 +'"'</span></span><br><span class="line">    <span class="comment">#   6          return s3</span></span><br><span class="line">    <span class="comment">#   7      a = "aaa"</span></span><br><span class="line">    <span class="comment">#   8      pdb.set_trace()</span></span><br><span class="line">    <span class="comment">#   9      b = "bbb"</span></span><br><span class="line">    <span class="comment">#  10      c = "ccc"</span></span><br><span class="line">    <span class="comment">#  11 B    final = combine(a,b)</span></span><br><span class="line">    <span class="comment"># (Pdb)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 《8 查看传递到函数中的变量》</span></span><br><span class="line"><span class="comment"># a----&gt;调用一个函数时，可以查看传递到这个函数中的所有的参数；a表示arg的意思</span></span><br><span class="line">    <span class="comment">#例如：</span></span><br><span class="line">    <span class="comment"># (Pdb) l</span></span><br><span class="line">    <span class="comment">#   1      #coding=utf-8</span></span><br><span class="line">    <span class="comment">#   2      import pdb</span></span><br><span class="line">    <span class="comment">#   3</span></span><br><span class="line">    <span class="comment">#   4  -&gt;    def combine(s1,s2):</span></span><br><span class="line">    <span class="comment">#   5          s3 = s1 + s2 + s1</span></span><br><span class="line">    <span class="comment">#   6          s3 = '"' + s3 +'"'</span></span><br><span class="line">    <span class="comment">#   7          return s3</span></span><br><span class="line">    <span class="comment">#   8</span></span><br><span class="line">    <span class="comment">#   9      a = "aaa"</span></span><br><span class="line">    <span class="comment">#  10      pdb.set_trace()</span></span><br><span class="line">    <span class="comment">#  11      b = "bbb"</span></span><br><span class="line">    <span class="comment"># (Pdb) a</span></span><br><span class="line">    <span class="comment"># s1 = aaa</span></span><br><span class="line">    <span class="comment"># s2 = bbb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 《9 执行到函数的最后一步》</span></span><br><span class="line"><span class="comment"># r-----&gt;如果在函数中不想一步步的调试了，只是想到这个函数的最后一条语句那个位置，比如return语句，那么就可以使用r；r表示return的意思</span></span><br></pre></td></tr></table></figure>

<h3 id="demo-4"><a href="#demo-4" class="headerlink" title="demo 4"></a>demo 4</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="function"><span class="keyword">def</span> <span class="title">pdb_test</span><span class="params">(arg)</span>:</span></span><br><span class="line">   ...:     <span class="keyword">for</span> i <span class="keyword">in</span> range(arg):</span><br><span class="line">   ...:         print(i)</span><br><span class="line">   ...:     <span class="keyword">return</span> arg</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="comment">#在python交互模式中，如果想要调试这个函数，那么可以</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="comment">#采用，pdb.run的方式，如下：</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="keyword">import</span> pdb</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: pdb.run(<span class="string">"pdb_test(10)"</span>)</span><br><span class="line">&gt; &lt;string&gt;(<span class="number">1</span>)&lt;module&gt;()</span><br><span class="line">(Pdb) s</span><br><span class="line">--Call--</span><br><span class="line">&gt; &lt;ipython-input<span class="number">-1</span>-ef4d08b8cc81&gt;(<span class="number">1</span>)pdb_test()</span><br><span class="line">-&gt; def pdb_test(arg):</span><br><span class="line">(Pdb) l</span><br><span class="line">  1  -&gt;    def pdb_test(arg):</span><br><span class="line">  <span class="number">2</span>          <span class="keyword">for</span> i <span class="keyword">in</span> range(arg):</span><br><span class="line">  <span class="number">3</span>              print(i)</span><br><span class="line">  <span class="number">4</span>          <span class="keyword">return</span> arg</span><br><span class="line">[EOF]</span><br><span class="line">(Pdb) n</span><br><span class="line">&gt; &lt;ipython-input<span class="number">-1</span>-ef4d08b8cc81&gt;(<span class="number">2</span>)pdb_test()</span><br><span class="line">-&gt; for i in range(arg):</span><br><span class="line">(Pdb) l</span><br><span class="line">  <span class="number">1</span>      <span class="function"><span class="keyword">def</span> <span class="title">pdb_test</span><span class="params">(arg)</span>:</span></span><br><span class="line">  2  -&gt;        for i in range(arg):</span><br><span class="line">  <span class="number">3</span>              print(i)</span><br><span class="line">  <span class="number">4</span>          <span class="keyword">return</span> arg</span><br><span class="line">[EOF]</span><br><span class="line">(Pdb) n</span><br><span class="line">&gt; &lt;ipython-input<span class="number">-1</span>-ef4d08b8cc81&gt;(<span class="number">3</span>)pdb_test()</span><br><span class="line">-&gt; print(i)</span><br><span class="line">(Pdb)</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt; &lt;ipython-input<span class="number">-1</span>-ef4d08b8cc81&gt;(<span class="number">2</span>)pdb_test()</span><br><span class="line">-&gt; for i in range(arg):</span><br><span class="line">(Pdb)</span><br><span class="line">&gt; &lt;ipython-input<span class="number">-1</span>-ef4d08b8cc81&gt;(<span class="number">3</span>)pdb_test()</span><br><span class="line">-&gt; print(i)</span><br><span class="line">(Pdb)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt; &lt;ipython-input<span class="number">-1</span>-ef4d08b8cc81&gt;(<span class="number">2</span>)pdb_test()</span><br><span class="line">-&gt; for i in range(arg):</span><br><span class="line">(Pdb)</span><br></pre></td></tr></table></figure>

<h3 id="demo-5"><a href="#demo-5" class="headerlink" title="demo 5"></a>demo 5</h3><ul>
<li>运行过程中使用pdb修改变量的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">7</span>]: pdb.run(<span class="string">"pdb_test(1)"</span>)</span><br><span class="line">&gt; &lt;string&gt;(<span class="number">1</span>)&lt;module&gt;()</span><br><span class="line">(Pdb) s</span><br><span class="line">--Call--</span><br><span class="line">&gt; &lt;ipython-input<span class="number">-1</span>-ef4d08b8cc81&gt;(<span class="number">1</span>)pdb_test()</span><br><span class="line">-&gt; def pdb_test(arg):</span><br><span class="line">(Pdb) a</span><br><span class="line">arg = <span class="number">1</span></span><br><span class="line">(Pdb) l</span><br><span class="line">  1  -&gt;    def pdb_test(arg):</span><br><span class="line">  <span class="number">2</span>          <span class="keyword">for</span> i <span class="keyword">in</span> range(arg):</span><br><span class="line">  <span class="number">3</span>              print(i)</span><br><span class="line">  <span class="number">4</span>          <span class="keyword">return</span> arg</span><br><span class="line">[EOF]</span><br><span class="line">(Pdb) !arg = <span class="number">100</span>  <span class="comment">#!!!这里是修改变量的方法</span></span><br><span class="line">(Pdb) n</span><br><span class="line">&gt; &lt;ipython-input<span class="number">-1</span>-ef4d08b8cc81&gt;(<span class="number">2</span>)pdb_test()</span><br><span class="line">-&gt; for i in range(arg):</span><br><span class="line">(Pdb) l</span><br><span class="line">  <span class="number">1</span>      <span class="function"><span class="keyword">def</span> <span class="title">pdb_test</span><span class="params">(arg)</span>:</span></span><br><span class="line">  2  -&gt;        for i in range(arg):</span><br><span class="line">  <span class="number">3</span>              print(i)</span><br><span class="line">  <span class="number">4</span>          <span class="keyword">return</span> arg</span><br><span class="line">[EOF]</span><br><span class="line">(Pdb) p arg</span><br><span class="line"><span class="number">100</span></span><br><span class="line">(Pdb)</span><br></pre></td></tr></table></figure>

<ul>
<li>练一练:请使用所学的pdb调试技巧对其进行调试出bug</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> pdb </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add3Nums</span><span class="params">(a1,a2,a3)</span>:</span></span><br><span class="line">    result = a1+a2+a3</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get3NumsAvarage</span><span class="params">(s1,s2)</span>:</span></span><br><span class="line">    s3 = s1 + s2 + s1</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    result = add3Nums(s1,s2,s3)/<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    a = <span class="number">11</span></span><br><span class="line">    <span class="comment"># pdb.set_trace() </span></span><br><span class="line">    b = <span class="number">12</span></span><br><span class="line">    final = get3NumsAvarage(a,b)</span><br><span class="line">    <span class="keyword">print</span> final</span><br></pre></td></tr></table></figure>

<p>pdb 调试有个明显的缺陷就是对于多线程，远程调试等支持得不够好，同时没有较为直观的界面显示，不太适合大型的 python 项目。而在较大的 python 项目中，这些调试需求比较常见，因此需要使用更为高级的调试工具。</p>
<h1 id="编码风格"><a href="#编码风格" class="headerlink" title="编码风格"></a>编码风格</h1><h2 id="错误认知"><a href="#错误认知" class="headerlink" title="错误认知"></a>错误认知</h2><ul>
<li>这很浪费时间</li>
<li>我是个艺术家</li>
<li>所有人都能穿的鞋不会合任何人的脚</li>
<li>我善长制定编码规范</li>
</ul>
<h2 id="正确认知"><a href="#正确认知" class="headerlink" title="正确认知"></a>正确认知</h2><ul>
<li>促进团队合作</li>
<li>减少bug处理</li>
<li>提高可读性，降低维护成本</li>
<li>有助于代码审查</li>
<li>养成习惯，有助于程序员自身的成长</li>
</ul>
<h2 id="pep8-编码规范"><a href="#pep8-编码规范" class="headerlink" title="pep8 编码规范"></a>pep8 编码规范</h2><p>Python Enhancement Proposals ：python改进方案</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kZXYvcGVwcy8=" title="https://www.python.org/dev/peps/">https://www.python.org/dev/peps/<i class="fa fa-external-link"></i></span></p>
<p>pep8 官网规范地址</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kZXYvcGVwcy9wZXAtMDAwOC8=" title="https://www.python.org/dev/peps/pep-0008/">https://www.python.org/dev/peps/pep-0008/<i class="fa fa-external-link"></i></span></p>
<p>Guido的关键点之一是：代码更多是用来读而不是写。编码规范旨在改善Python代码的可读性。</p>
<p>风格指南强调一致性。项目、模块或函数保持一致都很重要。</p>
<blockquote>
<p> 每级缩进用4个空格。</p>
</blockquote>
<p>括号中使用垂直隐式缩进或使用悬挂缩进。后者应该注意第一行要没有参数，后续行要有缩进。</p>
<ul>
<li>Yes</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对准左括号</span></span><br><span class="line">foo = long_function_name(var_one, var_two,</span><br><span class="line">                         var_three, var_four)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不对准左括号，但加多一层缩进，以和后面内容区别。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_function_name</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        var_one, var_two, var_three,</span></span></span><br><span class="line"><span class="function"><span class="params">        var_four)</span>:</span></span><br><span class="line">    print(var_one)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 悬挂缩进必须加多一层缩进.</span></span><br><span class="line">foo = long_function_name(</span><br><span class="line">    var_one, var_two,</span><br><span class="line">    var_three, var_four)</span><br></pre></td></tr></table></figure>

<ul>
<li>No</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不使用垂直对齐时，第一行不能有参数。</span></span><br><span class="line">foo = long_function_name(var_one, var_two,</span><br><span class="line">    var_three, var_four)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数的缩进和后续内容缩进不能区别。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_function_name</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    var_one, var_two, var_three,</span></span></span><br><span class="line"><span class="function"><span class="params">    var_four)</span>:</span></span><br><span class="line">    print(var_one)</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 4个空格的规则是对续行可选的。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 悬挂缩进不一定是4个空格</span></span><br><span class="line">foo = long_function_name(</span><br><span class="line">  var_one, var_two,</span><br><span class="line">  var_three, var_four)</span><br><span class="line"><span class="keyword">if</span>语句跨行时，两个字符关键字(比如<span class="keyword">if</span>)加上一个空格，再加上左括号构成了很好的缩进。后续行暂时没有规定，至少有如下三种格式，建议使用第<span class="number">3</span>种。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有额外缩进，不是很好看，个人不推荐.</span></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing <span class="keyword">and</span></span><br><span class="line">    that_is_another_thing):</span><br><span class="line">    do_something()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加注释</span></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing <span class="keyword">and</span></span><br><span class="line">    that_is_another_thing):</span><br><span class="line">    <span class="comment"># Since both conditions are true, we can frobnicate.</span></span><br><span class="line">    do_something()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 额外添加缩进,推荐。</span></span><br><span class="line"><span class="comment"># Add some extra indentation on the conditional continuation line.</span></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing</span><br><span class="line">        <span class="keyword">and</span> that_is_another_thing):</span><br><span class="line">    do_something()</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 右边括号也可以另起一行。有两种格式，建议第2种。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 右括号不回退，个人不推荐</span></span><br><span class="line">my_list = [</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">    ]</span><br><span class="line">result = some_function_that_takes_arguments(</span><br><span class="line">    <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右括号回退</span></span><br><span class="line">my_list = [</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">]</span><br><span class="line">result = some_function_that_takes_arguments(</span><br><span class="line">    <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 空格或Tab</p>
</blockquote>
<ul>
<li>空格是首选的缩进方法。</li>
<li>Tab仅仅在已经使用tab缩进的代码中为了保持一致性而使用。</li>
<li>Python 3中不允许混合使用Tab和空格缩进。</li>
<li>Python 2的包含空格与Tab和空格缩进的应该全部转为空格缩进。</li>
</ul>
<blockquote>
<p>最大行宽</p>
</blockquote>
<ul>
<li>限制所有行的最大行宽为79字符。</li>
<li>文本长块，比如文档字符串或注释，行长度应限制为72个字符。</li>
</ul>
<blockquote>
<p>两行空行分割顶层函数和类的定义。</p>
</blockquote>
<ul>
<li>类的方法定义用单个空行分割。</li>
<li>额外的空行可以必要的时候用于分割不同的函数组，但是要尽量节约使用。</li>
<li>额外的空行可以必要的时候在函数中用于分割不同的逻辑块，但是要尽量节约使用。</li>
<li>在核心Python发布的代码应该总是使用UTF-8(ASCII在Python 2)。</li>
<li>Python 3(默认UTF-8)不应有编码声明。</li>
</ul>
<blockquote>
<p>导入在单独行</p>
</blockquote>
<ul>
<li><p>Yes：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br></pre></td></tr></table></figure>
</li>
<li><p>No:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, os</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入始终在文件的顶部，在模块注释和文档字符串之后，在模块全局变量和常量之前。</p>
</li>
<li><p>导入顺序如下：标准库进口,相关的第三方库，本地库。各组的导入之间要有空行。</p>
</li>
</ul>
<blockquote>
<p>禁止使用通配符导入。</p>
</blockquote>
<p>通配符导入(from import *)应该避免，因为它不清楚命名空间有哪些名称存，混淆读者和许多自动化的工具。</p>
<blockquote>
<p>字符串引用</p>
</blockquote>
<ul>
<li>Python中单引号字符串和双引号字符串都是相同的。注意尽量避免在字符串中的反斜杠以提高可读性。</li>
<li>根据PEP 257, 三个引号都使用双引号。</li>
</ul>
<blockquote>
<p>括号里边避免空格</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 括号里边避免空格</span></span><br><span class="line"><span class="comment"># Yes</span></span><br><span class="line">spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="comment"># No</span></span><br><span class="line">spam( ham[ <span class="number">1</span> ], &#123; eggs: <span class="number">2</span> &#125; )</span><br></pre></td></tr></table></figure>

<blockquote>
<p>逗号，冒号，分号之前避免空格</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 逗号，冒号，分号之前避免空格</span></span><br><span class="line"><span class="comment"># Yes</span></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">4</span>: <span class="keyword">print</span> x, y; x, y = y, x</span><br><span class="line"><span class="comment"># No</span></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">4</span> : <span class="keyword">print</span> x , y ; x , y = y , x</span><br></pre></td></tr></table></figure>

<blockquote>
<p>索引操作中的冒号当作操作符处理前后要有同样的空格(一个空格或者没有空格，个人建议是没有。)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Yes</span></span><br><span class="line">ham[<span class="number">1</span>:<span class="number">9</span>], ham[<span class="number">1</span>:<span class="number">9</span>:<span class="number">3</span>], ham[:<span class="number">9</span>:<span class="number">3</span>], ham[<span class="number">1</span>::<span class="number">3</span>], ham[<span class="number">1</span>:<span class="number">9</span>:]</span><br><span class="line">ham[lower:upper], ham[lower:upper:], ham[lower::step]</span><br><span class="line">ham[lower+offset : upper+offset]</span><br><span class="line">ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]</span><br><span class="line">ham[lower + offset : upper + offset]</span><br><span class="line"><span class="comment"># No</span></span><br><span class="line">ham[lower + offset:upper + offset]</span><br><span class="line">ham[<span class="number">1</span>: <span class="number">9</span>], ham[<span class="number">1</span> :<span class="number">9</span>], ham[<span class="number">1</span>:<span class="number">9</span> :<span class="number">3</span>]</span><br><span class="line">ham[lower : : upper]</span><br><span class="line">ham[ : upper]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>函数调用的左括号之前不能有空格</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Yes</span></span><br><span class="line">spam(<span class="number">1</span>)</span><br><span class="line">dct[<span class="string">'key'</span>] = lst[index]</span><br><span class="line"></span><br><span class="line"><span class="comment"># No</span></span><br><span class="line">spam (<span class="number">1</span>)</span><br><span class="line">dct [<span class="string">'key'</span>] = lst [index]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>赋值等操作符前后不能因为对齐而添加多个空格</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Yes</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">long_variable = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># No</span></span><br><span class="line">x             = <span class="number">1</span></span><br><span class="line">y             = <span class="number">2</span></span><br><span class="line">long_variable = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>二元运算符两边放置一个空格</p>
</blockquote>
<p>涉及 =、符合操作符 ( += , -=等)、比较( == , &lt; , &gt; , != , &lt;&gt; , &lt;= , &gt;= , in , not in , is , is not )、布尔( and , or , not )。</p>
<p>优先级高的运算符或操作符的前后不建议有空格。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Yes</span></span><br><span class="line">i = i + <span class="number">1</span></span><br><span class="line">submitted += <span class="number">1</span></span><br><span class="line">x = x*<span class="number">2</span> - <span class="number">1</span></span><br><span class="line">hypot2 = x*x + y*y</span><br><span class="line">c = (a+b) * (a-b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># No</span></span><br><span class="line">i=i+<span class="number">1</span></span><br><span class="line">submitted +=<span class="number">1</span></span><br><span class="line">x = x * <span class="number">2</span> - <span class="number">1</span></span><br><span class="line">hypot2 = x * x + y * y</span><br><span class="line">c = (a + b) * (a - b)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关键字参数和默认值参数的前后不要加空格</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Yes</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag=<span class="number">0.0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> magic(r=real, i=imag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># No</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag = <span class="number">0.0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> magic(r = real, i = imag)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通常不推荐复合语句(Compound statements: 多条语句写在同一行)。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Yes</span></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>:</span><br><span class="line">    do_blah_thing()</span><br><span class="line">do_one()</span><br><span class="line">do_two()</span><br><span class="line">do_three()</span><br><span class="line"></span><br><span class="line"><span class="comment"># No</span></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: do_blah_thing()</span><br><span class="line">do_one(); do_two(); do_three()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>尽管有时可以在if/for/while 的同一行跟一小段代码，但绝不要跟多个子句，并尽量避免换行。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># No</span></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: do_blah_thing()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> lst: total += x</span><br><span class="line"><span class="keyword">while</span> t &lt; <span class="number">10</span>: t = delay()</span><br><span class="line">更不是：</span><br><span class="line"></span><br><span class="line"><span class="comment"># No</span></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: do_blah_thing()</span><br><span class="line"><span class="keyword">else</span>: do_non_blah_thing()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: something()</span><br><span class="line"><span class="keyword">finally</span>: cleanup()</span><br><span class="line"></span><br><span class="line">do_one(); do_two(); do_three(long, argument,</span><br><span class="line">                             list, like, this)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: one(); two(); three()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>避免采用的名字</p>
</blockquote>
<p>决不要用字符’l’(小写字母el)，’O’(大写字母oh)，或 ‘I’(大写字母eye) 作为单个字符的变量名。一些字体中，这些字符不能与数字1和0区别。用’L’ 代替’l’时。</p>
<blockquote>
<p>包和模块名</p>
</blockquote>
<p>模块名要简短，全部用小写字母，可使用下划线以提高可读性。包名和模块名类似，但不推荐使用下划线。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python-base</tag>
      </tags>
  </entry>
  <entry>
    <title>python-垃圾回收</title>
    <url>/2018/10/27/python%E7%9B%B8%E5%85%B3/python-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    <content><![CDATA[<h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><h2 id="1-小整数对象池"><a href="#1-小整数对象池" class="headerlink" title="1. 小整数对象池"></a>1. 小整数对象池</h2><p>整数在程序中的使用非常广泛，Python为了优化速度，使用了小整数对象池， 避免为整数频繁申请和销毁内存空间。</p>
<p>Python 对小整数的定义是 [-5, 257) 这些整数对象是提前建立好的，不会被垃圾回收。在一个 Python 的程序中，所有位于这个范围内的整数使用的都是同一个对象.</p>
<p>同理，单个字母也是这样的。</p>
<p>但是当定义2个相同的字符串时，引用计数为0，触发垃圾回收</p>
<a id="more"></a>

<h2 id="2-大整数对象池"><a href="#2-大整数对象池" class="headerlink" title="2. 大整数对象池"></a>2. 大整数对象池</h2><p>每一个大整数，均创建一个新的对象。</p>
<h2 id="3-intern机制"><a href="#3-intern机制" class="headerlink" title="3. intern机制"></a>3. intern机制</h2><blockquote>
<p>python会不会创建9个对象呢？在内存中会不会开辟9个”HelloWorld”的内存空间呢？ 想一下，如果是这样的话，我们写10000个对象，比如a1=”HelloWorld”…..a1000=”HelloWorld”， 那他岂不是开辟了1000个”HelloWorld”所占的内存空间了呢？如果真这样，内存不就爆了吗？所以python中有这样一个机制——<code>intern机制</code>，让他只占用一个”HelloWorld”所占的内存空间。靠引用计数去维护何时释放。</p>
</blockquote>
<blockquote>
<p>intern机制相当于共享机制</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'abcde'</span></span><br><span class="line">b = <span class="string">'abcde'</span></span><br><span class="line">id(a)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">116404992</span></span><br><span class="line">id(b)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">116404992</span></span><br><span class="line">c = <span class="string">'a b'</span></span><br><span class="line">d = <span class="string">'a b'</span></span><br><span class="line">id(c)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">116283136</span></span><br><span class="line">id(d)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">116282208</span></span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line"><span class="keyword">del</span> b</span><br><span class="line">e = <span class="string">'abcde'</span></span><br><span class="line">id(e)</span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">116282400</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>小整数[-5,257)共用对象，常驻内存</li>
<li>单个字符共用对象，常驻内存</li>
<li>单个单词，不可修改，默认开启intern机制，共用对象，引用计数为0，则销毁 </li>
<li>字符串（含有空格、特殊符号），不可修改，没开启intern机制，不共用对象，引用计数为0，销毁 </li>
<li>大整数不共用内存，引用计数为0，销毁 </li>
<li>数值类型和字符串类型在 Python 中都是不可变的，这意味着你无法修改这个对象的值，每次对变量的修改，实际上是创建一个新的对象 </li>
</ul>
<h2 id="4-Garbage-collection"><a href="#4-Garbage-collection" class="headerlink" title="4. Garbage collection"></a>4. Garbage collection</h2><p>现在的高级语言如java，c#等，都采用了垃圾收集机制，而不再是c，c++里用户自己管理维护内存的方式。自己管理内存极其自由，可以任意申请内存，但如同一把双刃剑，为大量内存泄露，悬空指针等bug埋下隐患。 对于一个字符串、列表、类甚至数值都是对象，且定位简单易用的语言，自然不会让用户去处理如何分配回收内存的问题。 python里也同java一样采用了垃圾收集机制，不过不一样的是: <strong>python采用的是引用计数机制为主，隔代收集两种机制为辅的策略。</strong></p>
<p>引用计数机制：</p>
<p>python里每一个东西都是对象，它们的核心就是一个结构体：<code>PyObject</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct_object &#123;</span><br><span class="line">    int ob_refcnt;</span><br><span class="line">    struct_typeobject *ob_type;</span><br><span class="line">&#125; PyObject;</span><br></pre></td></tr></table></figure>

<p>PyObject是每个对象必有的内容，其中ob_refcnt就是做为引用计数。当一个对象有新的引用时，它的ob_refcnt就会增加，当引用它的对象被删除，它的ob_refcnt就会减少</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define Py_INCREF(op)   ((op)-&gt;ob_refcnt++) &#x2F;&#x2F;增加计数</span><br><span class="line">#define Py_DECREF(op) \ &#x2F;&#x2F;减少计数</span><br><span class="line">    if (--(op)-&gt;ob_refcnt !&#x3D; 0) \</span><br><span class="line">        ; \</span><br><span class="line">    else \</span><br><span class="line">        __Py_Dealloc((PyObject *)(op))</span><br></pre></td></tr></table></figure>

<p>当引用计数为0时，该对象生命就结束了。</p>
<h3 id="引用计数机制的优点："><a href="#引用计数机制的优点：" class="headerlink" title="引用计数机制的优点："></a>引用计数机制的优点：</h3><ul>
<li>简单</li>
<li>实时性：一旦没有引用，内存就直接释放了。不用像其他机制等到特定时机。实时性还带来一个好处：处理回收内存的时间分摊到了平时。</li>
</ul>
<h3 id="引用计数机制的缺点："><a href="#引用计数机制的缺点：" class="headerlink" title="引用计数机制的缺点："></a>引用计数机制的缺点：</h3><ul>
<li><p>维护引用计数消耗资源</p>
</li>
<li><p>循环引用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 &#x3D; []</span><br><span class="line">list2 &#x3D; []</span><br><span class="line">list1.append(list2)</span><br><span class="line">list2.append(list1)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>list1与list2相互引用，如果不存在其他对象对它们的引用，list1与list2的引用计数也仍然为1，所占用的内存永远无法被回收，这将是致命的。 对于如今的强大硬件，缺点1尚可接受，但是循环引用导致内存泄露，注定python还将引入新的回收机制。(标记清除和分代收集)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'object born,id:%s'</span>%str(hex(id(self))))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c1 = ClassA()</span><br><span class="line">        c2 = ClassA()</span><br><span class="line">        c1.t = c2</span><br><span class="line">        c2.t = c1</span><br><span class="line">        <span class="keyword">del</span> c1</span><br><span class="line">        <span class="keyword">del</span> c2</span><br><span class="line">        gc.collect()</span><br><span class="line">gc.disable()</span><br><span class="line">f2()</span><br><span class="line"><span class="comment"># C1和C2对象相互引用，引用计数解决不了，内存泄漏，程序蹦。</span></span><br></pre></td></tr></table></figure>

<h2 id="5-Ruby标记-清除"><a href="#5-Ruby标记-清除" class="headerlink" title="5. Ruby标记-清除"></a>5. Ruby标记-清除</h2><h3 id="标记-删除-vs-引用计数"><a href="#标记-删除-vs-引用计数" class="headerlink" title="标记-删除 vs. 引用计数"></a>标记-删除 vs. 引用计数</h3><p>乍一看，Python的GC算法貌似远胜于Ruby的：宁舍洁宇而居秽室乎？为什么Ruby宁愿定期强制程序停止运行，也不使用Python的算法呢？</p>
<p>然而，引用计数并不像第一眼看上去那样简单。有许多原因使得不许多语言不像Python这样使用引用计数GC算法：</p>
<p>首先，它不好实现。Python不得不在每个对象内部留一些空间来处理引用数。这样付出了一小点儿空间上的代价。但更糟糕的是，每个简单的操作（像修改变量或引用）都会变成一个更复杂的操作，因为Python需要增加一个计数，减少另一个，还可能释放对象。</p>
<p>第二点，它相对较慢。虽然Python随着程序执行GC很稳健（一把脏碟子放在洗碗盆里就开始洗啦），但这并不一定更快。Python不停地更新着众多引用数值。特别是当你不再使用一个大数据结构的时候，比如一个包含很多元素的列表，Python可能必须一次性释放大量对象。减少引用数就成了一项复杂的递归过程了。</p>
<p>最后，它不是总奏效的。引用计数不能处理环形数据结构–也就是含有循环引用的数据结构。</p>
<h2 id="6-Python中的零代（隔代回收）"><a href="#6-Python中的零代（隔代回收）" class="headerlink" title="6. Python中的零代（隔代回收）"></a>6. Python中的零代（隔代回收）</h2><p>解决循环引用</p>
<blockquote>
<p>创建ABC节点的时候，Python将其加入零代链表。请注意到这并不是一个真正的列表，并不能直接在你的代码中访问，事实上这个链表是一个完全内部的Python运行时。 相似的，当我们创建DEF节点的时候，Python将其加入同样的链表</p>
<p>现在零代包含了两个节点对象。(他还将包含Python创建的每个其他值，与一些Python自己使用的内部值。)</p>
<p>随后，Python会循环遍历零代列表上的每个对象，检查列表中每个互相引用的对象，根据规则减掉其引用计数。在这个过程中，Python会一个接一个的统计内部引用的数量以防过早地释放对象。</p>
<p>通过识别内部引用，Python能够减少许多零代链表对象的引用计数。当节点对象的引用计数已经变为零了，这意味着收集器可以释放它们并回收内存空间了。剩下的活跃的对象则被移动到一个新的链表：一代链表。</p>
<p>达到某种情况下(<code>gc.get_count()..</code>)，对零代上的节点对象的引用减一。引用为零的节点被删除。</p>
<p>对还活跃在一代链表的继续减一，总共有三代链表。</p>
</blockquote>
<h2 id="7-Python中的GC阈值"><a href="#7-Python中的GC阈值" class="headerlink" title="7. Python中的GC阈值"></a>7. Python中的GC阈值</h2><p>Python什么时候会进行这个标记过程？随着你的程序运行，Python解释器保持对新创建的对象，以及因为引用计数为零而被释放掉的对象的追踪。从理论上说，这两个值应该保持一致，因为程序新建的每个对象都应该最终被释放掉。</p>
<p>当然，事实并非如此。因为循环引用的原因，并且因为你的程序使用了一些比其他对象存在时间更长的对象，从而被分配对象的计数值与被释放对象的计数值之间的差异在逐渐增长。一旦这个差异累计超过某个阈值，则Python的收集机制就启动了，并且触发上边所说到的零代算法，释放“浮动的垃圾”，并且将剩下的对象移动到一代列表。</p>
<p>随着时间的推移，程序所使用的对象逐渐从零代列表移动到一代列表。而Python对于一代列表中对象的处理遵循同样的方法，一旦被分配计数值与被释放计数值累计到达一定阈值，Python会将剩下的活跃对象移动到二代列表。</p>
<p>通过这种方法，你的代码所长期使用的对象，那些你的代码持续访问的活跃对象，会从零代链表转移到一代再转移到二代。通过不同的阈值设置，Python可以在不同的时间间隔处理这些对象。Python处理零代最为频繁，其次是一代然后才是二代。</p>
<p>弱代假说</p>
<p>来看看代垃圾回收算法的核心行为：垃圾回收器会更频繁的处理新对象。一个新的对象即是你的程序刚刚创建的，而一个来的对象则是经过了几个时间周期之后仍然存在的对象。Python会在当一个对象从零代移动到一代，或是从一代移动到二代的过程中提升(promote)这个对象。</p>
<p>为什么要这么做？这种算法的根源来自于弱代假说(weak generational hypothesis)。这个假说由两个观点构成：首先是年亲的对象通常死得也快，而老对象则很有可能存活更长的时间。</p>
<p>假定现在我用Python或是Ruby创建一个新对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n1 = Node(<span class="string">'ABC'</span>)         n2 = Node.new(<span class="string">'ABC'</span>)</span><br></pre></td></tr></table></figure>

<p>根据假说，我的代码很可能仅仅会使用ABC很短的时间。这个对象也许仅仅只是一个方法中的中间结果，并且随着方法的返回这个对象就将变成垃圾了。大部分的新对象都是如此般地很快变成垃圾。然而，偶尔程序会创建一些很重要的，存活时间比较长的对象-例如web应用中的session变量或是配置项。</p>
<p>通过频繁的处理零代链表中的新对象，Python的垃圾收集器将把时间花在更有意义的地方：它处理那些很快就可能变成垃圾的新对象。同时只在很少的时候，当满足阈值的条件，收集器才回去处理那些老变量。</p>
<h1 id="垃圾回收-gc模块"><a href="#垃圾回收-gc模块" class="headerlink" title="垃圾回收-gc模块"></a>垃圾回收-gc模块</h1><h2 id="一-垃圾回收机制"><a href="#一-垃圾回收机制" class="headerlink" title="一.垃圾回收机制"></a>一.垃圾回收机制</h2><p>Python中的垃圾回收是以引用计数为主，分代收集为辅。</p>
<h3 id="1、导致引用计数-1的情况"><a href="#1、导致引用计数-1的情况" class="headerlink" title="1、导致引用计数+1的情况"></a>1、导致引用计数+1的情况</h3><ul>
<li><code>对象被创建，例如a=23</code></li>
<li><code>对象被引用，例如b=a</code></li>
<li><code>对象被作为参数，传入到一个函数中，例如func(a)</code></li>
<li><code>对象作为一个元素，存储在容器中，例如list1=[a,a]</code></li>
</ul>
<h3 id="2、导致引用计数-1的情况"><a href="#2、导致引用计数-1的情况" class="headerlink" title="2、导致引用计数-1的情况"></a>2、导致引用计数-1的情况</h3><ul>
<li><code>对象的别名被显式销毁，例如del a</code></li>
<li><code>对象的别名被赋予新的对象，例如a=24</code></li>
<li><code>一个对象离开它的作用域，例如f函数执行完毕时，func函数中的局部变量（全局变量不会）</code></li>
<li><code>对象所在的容器被销毁，或从容器中删除对象</code></li>
</ul>
<h3 id="3、查看一个对象的引用计数"><a href="#3、查看一个对象的引用计数" class="headerlink" title="3、查看一个对象的引用计数"></a>3、查看一个对象的引用计数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">a = <span class="string">"hello world"</span></span><br><span class="line">sys.getrefcount(a)</span><br></pre></td></tr></table></figure>

<p>可以查看a对象的引用计数，但是比正常计数大1，因为调用函数的时候传入a，这会让a的引用计数+1</p>
<h2 id="二-循环引用导致内存泄露"><a href="#二-循环引用导致内存泄露" class="headerlink" title="二.循环引用导致内存泄露"></a>二.循环引用导致内存泄露</h2><p>引用计数的缺陷是循环引用的问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'object born,id:%s'</span>%str(hex(id(self))))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c1 = ClassA()</span><br><span class="line">        c2 = ClassA()</span><br><span class="line">        c1.t = c2</span><br><span class="line">        c2.t = c1</span><br><span class="line">        <span class="keyword">del</span> c1</span><br><span class="line">        <span class="keyword">del</span> c2</span><br><span class="line"></span><br><span class="line"><span class="comment">#把python的gc关闭</span></span><br><span class="line">gc.disable()</span><br><span class="line"></span><br><span class="line">f2()</span><br></pre></td></tr></table></figure>

<p>执行f2()，进程占用的内存会不断增大。</p>
<ul>
<li>创建了c1，c2后这两块内存的引用计数都是1，执行<code>c1.t=c2</code>和<code>c2.t=c1</code>后，这两块内存的引用计数变成2.</li>
<li>在del c1后，内存1的对象的引用计数变为1，由于不是为0，所以内存1的对象不会被销毁，所以内存2的对象的引用数依然是2，在del c2后，同理，内存1的对象，内存2的对象的引用数都是1。</li>
<li>虽然它们两个的对象都是可以被销毁的，但是由于循环引用，导致垃圾回收器都不会回收它们，所以就会导致内存泄露。</li>
</ul>
<h2 id="三-垃圾回收"><a href="#三-垃圾回收" class="headerlink" title="三.垃圾回收"></a>三.垃圾回收</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'object born,id:%s'</span>%str(hex(id(self))))</span><br><span class="line">    <span class="comment"># def __del__(self):</span></span><br><span class="line">    <span class="comment">#     print('object del,id:%s'%str(hex(id(self))))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"-----0------"</span>)</span><br><span class="line">    <span class="comment"># print(gc.collect())</span></span><br><span class="line">    c1 = ClassA()</span><br><span class="line">    c2 = ClassA()</span><br><span class="line">    c1.t = c2</span><br><span class="line">    c2.t = c1</span><br><span class="line">    print(<span class="string">"-----1------"</span>)</span><br><span class="line">    <span class="keyword">del</span> c1</span><br><span class="line">    <span class="keyword">del</span> c2</span><br><span class="line">    print(<span class="string">"-----2------"</span>)</span><br><span class="line">    print(gc.garbage)</span><br><span class="line">    print(<span class="string">"-----3------"</span>)</span><br><span class="line">    print(gc.collect()) <span class="comment">#显式执行垃圾回收</span></span><br><span class="line">    print(<span class="string">"-----4------"</span>)</span><br><span class="line">    print(gc.garbage)</span><br><span class="line">    print(<span class="string">"-----5------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    gc.set_debug(gc.DEBUG_LEAK) <span class="comment">#设置gc模块的日志</span></span><br><span class="line">    f3()</span><br></pre></td></tr></table></figure>

<p>python2运行结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">----<span class="number">-0</span>------</span><br><span class="line">object born,id:<span class="number">0x724b20</span></span><br><span class="line">object born,id:<span class="number">0x724b48</span></span><br><span class="line">----<span class="number">-1</span>------</span><br><span class="line">----<span class="number">-2</span>------</span><br><span class="line">[]</span><br><span class="line">----<span class="number">-3</span>------</span><br><span class="line">gc: collectable &lt;ClassA instance at <span class="number">0x724b20</span>&gt;</span><br><span class="line">gc: collectable &lt;ClassA instance at <span class="number">0x724b48</span>&gt;</span><br><span class="line">gc: collectable &lt;dict <span class="number">0x723300</span>&gt;</span><br><span class="line">gc: collectable &lt;dict <span class="number">0x71bf60</span>&gt;</span><br><span class="line"><span class="number">4</span></span><br><span class="line">----<span class="number">-4</span>------</span><br><span class="line">[&lt;__main__.ClassA instance at <span class="number">0x724b20</span>&gt;, &lt;__main__.ClassA instance at <span class="number">0x724b48</span>&gt;, &#123;<span class="string">'t'</span>: &lt;__main__.ClassA instance at <span class="number">0x724b48</span>&gt;&#125;, &#123;<span class="string">'t'</span>: &lt;__main__.ClassA instance at <span class="number">0x724b20</span>&gt;&#125;]</span><br><span class="line">----<span class="number">-5</span>------</span><br></pre></td></tr></table></figure>

<h5 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h5><ul>
<li>垃圾回收后的对象会放在gc.garbage列表里面</li>
<li>gc.collect()会返回不可达的对象数目，4等于两个对象以及它们对应的dict</li>
</ul>
<h3 id="有三种情况会触发垃圾回收："><a href="#有三种情况会触发垃圾回收：" class="headerlink" title="有三种情况会触发垃圾回收："></a>有三种情况会触发垃圾回收：</h3><ol>
<li>调用gc.collect(),</li>
<li>当gc模块的计数器达到阀值的时候。</li>
<li>程序退出的时候</li>
</ol>
<h2 id="四-gc模块常用功能解析"><a href="#四-gc模块常用功能解析" class="headerlink" title="四.gc模块常用功能解析"></a>四.gc模块常用功能解析</h2><p><code>gc模块提供一个接口给开发者设置垃圾回收的选项</code>。上面说到，采用引用计数的方法管理内存的一个缺陷是循环引用，而gc模块的一个主要功能就是解决循环引用的问题。</p>
<h5 id="常用函数："><a href="#常用函数：" class="headerlink" title="常用函数："></a>常用函数：</h5><p>1、gc.set_debug(flags) 设置gc的debug日志，一般设置为gc.DEBUG_LEAK</p>
<p>2、gc.collect([generation]) 显式进行垃圾回收，可以输入参数，0代表只检查第一代的对象，1代表检查一，二代的对象，2代表检查一，二，三代的对象，如果不传参数，执行一个full collection，也就是等于传2。 返回不可达（unreachable objects）对象的数目</p>
<p>3、gc.get_threshold() 获取的gc模块中自动执行垃圾回收的频率。</p>
<p>4、gc.set_threshold(threshold0[, threshold1[, threshold2]) 设置自动执行垃圾回收的频率。</p>
<p>5、gc.get_count() 获取当前自动执行垃圾回收的计数器，返回一个长度为3的列表</p>
<h4 id="gc模块的自动垃圾回收机制"><a href="#gc模块的自动垃圾回收机制" class="headerlink" title="gc模块的自动垃圾回收机制"></a>gc模块的自动垃圾回收机制</h4><p>必须要import gc模块，并且<code>gc.isenabled()=True</code>才会启动自动垃圾回收。</p>
<p>这个机制的<code>主要作用就是发现并处理不可达的垃圾对象</code>。</p>
<p><code>垃圾回收=垃圾检查+垃圾回收</code></p>
<p>在Python中，采用分代收集的方法。把对象分为三代，一开始，对象在创建的时候，放在一代中，如果在一次一代的垃圾检查中，改对象存活下来，就会被放到二代中，同理在一次二代的垃圾检查中，该对象存活下来，就会被放到三代中。</p>
<p>gc模块里面会有一个长度为3的列表的计数器，可以通过gc.get_count()获取。</p>
<p>例如(488,3,0)，其中488是指距离上一次一代垃圾检查，Python分配内存的数目减去释放内存的数目，注意是内存分配，而不是引用计数的增加。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> gc.get_count() <span class="comment"># (590, 8, 0)</span></span><br><span class="line">a = ClassA()</span><br><span class="line"><span class="keyword">print</span> gc.get_count() <span class="comment"># (591, 8, 0)</span></span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line"><span class="keyword">print</span> gc.get_count() <span class="comment"># (590, 8, 0)</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>3是指距离上一次二代垃圾检查，一代垃圾检查的次数，同理，0是指距离上一次三代垃圾检查，二代垃圾检查的次数。</p>
<p>gc模快有一个自动垃圾回收的<code>阀值</code>，即通过gc.get_threshold函数获取到的长度为3的元组，例如(700,10,10) 每一次计数器的增加，gc模块就会检查增加后的计数是否达到阀值的数目，如果是，就会执行对应的代数的垃圾检查，然后重置计数器</p>
<p>例如，假设阀值是(700,10,10)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当计数器从(<span class="number">699</span>,<span class="number">3</span>,<span class="number">0</span>)增加到(<span class="number">700</span>,<span class="number">3</span>,<span class="number">0</span>)，gc模块就会执行gc.collect(<span class="number">0</span>),即检查一代对象的垃圾，并重置计数器为(<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>)</span><br><span class="line">当计数器从(<span class="number">699</span>,<span class="number">9</span>,<span class="number">0</span>)增加到(<span class="number">700</span>,<span class="number">9</span>,<span class="number">0</span>)，gc模块就会执行gc.collect(<span class="number">1</span>),即检查一、二代对象的垃圾，并重置计数器为(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">当计数器从(<span class="number">699</span>,<span class="number">9</span>,<span class="number">9</span>)增加到(<span class="number">700</span>,<span class="number">9</span>,<span class="number">9</span>)，gc模块就会执行gc.collect(<span class="number">2</span>),即检查一、二、三代对象的垃圾，并重置计数器为(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>gc模块唯一处理不了的是循环引用的类都有<strong>del</strong>方法，所以项目中要避免定义<strong>del</strong>方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gc</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># def __del__(self):</span></span><br><span class="line">    <span class="comment">#     print('object born,id:%s'%str(hex(id(self))))</span></span><br><span class="line"></span><br><span class="line">gc.set_debug(gc.DEBUG_LEAK)</span><br><span class="line">a = ClassA()</span><br><span class="line">b = ClassA()</span><br><span class="line"></span><br><span class="line">a.next = b</span><br><span class="line">b.prev = a</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"--1--"</span></span><br><span class="line"><span class="keyword">print</span> gc.collect()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"--2--"</span></span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line"><span class="keyword">print</span> <span class="string">"--3--"</span></span><br><span class="line"><span class="keyword">del</span> b</span><br><span class="line"><span class="keyword">print</span> <span class="string">"--3-1--"</span></span><br><span class="line"><span class="keyword">print</span> gc.collect()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"--4--"</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-<span class="number">-1</span>--</span><br><span class="line"><span class="number">0</span></span><br><span class="line">-<span class="number">-2</span>--</span><br><span class="line">-<span class="number">-3</span>--</span><br><span class="line">-<span class="number">-3</span><span class="number">-1</span>--</span><br><span class="line">gc: collectable &lt;ClassA instance at <span class="number">0x21248c8</span>&gt;</span><br><span class="line">gc: collectable &lt;ClassA instance at <span class="number">0x21248f0</span>&gt;</span><br><span class="line">gc: collectable &lt;dict <span class="number">0x2123030</span>&gt;</span><br><span class="line">gc: collectable &lt;dict <span class="number">0x2123150</span>&gt;</span><br><span class="line"><span class="number">4</span></span><br><span class="line">-<span class="number">-4</span>--</span><br></pre></td></tr></table></figure>

<p>如果把<strong>del</strong>打开，运行结果为:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-<span class="number">-1</span>--</span><br><span class="line"><span class="number">0</span></span><br><span class="line">-<span class="number">-2</span>--</span><br><span class="line">-<span class="number">-3</span>--</span><br><span class="line">-<span class="number">-3</span><span class="number">-1</span>--</span><br><span class="line">gc: uncollectable &lt;ClassA instance at <span class="number">0x6269b8</span>&gt;</span><br><span class="line">gc: uncollectable &lt;ClassA instance at <span class="number">0x6269e0</span>&gt;</span><br><span class="line">gc: uncollectable &lt;dict <span class="number">0x61bed0</span>&gt;</span><br><span class="line">gc: uncollectable &lt;dict <span class="number">0x6230c0</span>&gt;</span><br><span class="line"><span class="number">4</span></span><br><span class="line">-<span class="number">-4</span>--</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python-base</tag>
      </tags>
  </entry>
  <entry>
    <title>python-元类</title>
    <url>/2018/10/27/python%E7%9B%B8%E5%85%B3/python-%E5%85%83%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h2><h3 id="1-类也是对象"><a href="#1-类也是对象" class="headerlink" title="1. 类也是对象"></a>1. 类也是对象</h3><p>在大多数编程语言中，类就是一组用来描述如何生成一个对象的代码段。在Python中这一点仍然成立：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ObjectCreator</span><span class="params">(object)</span>:</span></span><br><span class="line">…       <span class="keyword">pass</span></span><br><span class="line">…</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_object = ObjectCreator()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> my_object</span><br><span class="line">&lt;__main__.ObjectCreator object at <span class="number">0x8974f2c</span>&gt;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>但是，Python中的类还远不止如此。类同样也是一种对象。是的，没错，就是对象。只要你使用关键字class，Python解释器在执行的时候就会创建一个对象。</p>
<p>下面的代码段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ObjectCreator</span><span class="params">(object)</span>:</span></span><br><span class="line">…       <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>将在内存中创建一个对象，名字就是ObjectCreator。这个对象（类对象ObjectCreator）拥有创建对象（实例对象）的能力。但是，它的本质仍然是一个对象，于是乎你可以对它做如下的操作：</p>
<ol>
<li>你可以将它赋值给一个变量</li>
<li>你可以拷贝它</li>
<li>你可以为它增加属性</li>
<li>你可以将它作为函数参数进行传递</li>
</ol>
<p>下面是示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> ObjectCreator     <span class="comment"># 你可以打印一个类，因为它其实也是一个对象</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">ObjectCreator</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">def</span> <span class="title">echo</span><span class="params">(o)</span>:</span></span><br><span class="line">…       <span class="keyword">print</span> o</span><br><span class="line">…</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>echo(ObjectCreator)                 <span class="comment"># 你可以将类做为参数传给函数</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">ObjectCreator</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span> <span class="title">hasattr</span><span class="params">(ObjectCreator, <span class="string">'new_attribute'</span>)</span></span></span><br><span class="line"><span class="class"><span class="title">Fasle</span></span></span><br><span class="line">&gt;&gt;&gt; ObjectCreator.new_attribute = 'foo' #  你可以为类增加属性</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> hasattr(ObjectCreator, <span class="string">'new_attribute'</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> ObjectCreator.new_attribute</span><br><span class="line">foo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ObjectCreatorMirror = ObjectCreator <span class="comment"># 你可以将类赋值给一个变量</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> ObjectCreatorMirror()</span><br><span class="line">&lt;__main__.ObjectCreator object at <span class="number">0x8997b4c</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-动态地创建类"><a href="#2-动态地创建类" class="headerlink" title="2. 动态地创建类"></a>2. 动态地创建类</h3><p>因为类也是对象，你可以在运行时动态的创建它们，就像其他任何对象一样。首先，你可以在函数中创建类，使用class关键字即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">choose_class</span><span class="params">(name)</span>:</span></span><br><span class="line">…       <span class="keyword">if</span> name == <span class="string">'foo'</span>:</span><br><span class="line">…           <span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">…               <span class="keyword">pass</span></span><br><span class="line">…           <span class="keyword">return</span> Foo     <span class="comment"># 返回的是类，不是类的实例</span></span><br><span class="line">…       <span class="keyword">else</span>:</span><br><span class="line">…           <span class="class"><span class="keyword">class</span> <span class="title">Bar</span><span class="params">(object)</span>:</span></span><br><span class="line">…               <span class="keyword">pass</span></span><br><span class="line">…           <span class="keyword">return</span> Bar</span><br><span class="line">…</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MyClass = choose_class(<span class="string">'foo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> MyClass              <span class="comment"># 函数返回的是类，不是类的实例</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>'.<span class="title">Foo</span>&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span> <span class="title">MyClass</span><span class="params">()</span>            # 你可以通过这个类创建类实例，也就是对象</span></span><br><span class="line"><span class="class">&lt;<span class="title">__main__</span>.<span class="title">Foo</span> <span class="title">object</span> <span class="title">at</span> 0<span class="title">x89c6d4c</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但这还不够动态，因为你仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是通过什么东西来生成的才对。当你使用class关键字时，Python解释器自动创建这个对象。但就和Python中的大多数事情一样，Python仍然提供给你手动处理的方法。</p>
<p>还记得内建函数type吗？这个古老但强大的函数能够让你知道一个对象的类型是什么，就像这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> type(<span class="number">1</span>) <span class="comment">#数值的类型</span></span><br><span class="line">&lt;type <span class="string">'int'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> type(<span class="string">"1"</span>) <span class="comment">#字符串的类型</span></span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> type(ObjectCreator()) <span class="comment">#实例对象的类型</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">ObjectCreator</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span> <span class="title">type</span><span class="params">(ObjectCreator)</span> #类的类型</span></span><br><span class="line"><span class="class">&lt;<span class="title">type</span> '<span class="title">type</span>'&gt;</span></span><br></pre></td></tr></table></figure>

<p>仔细观察上面的运行结果，发现使用type对ObjectCreator查看类型是，答案为type， 是不是有些惊讶。。。看下面</p>
<h3 id="3-使用type创建类"><a href="#3-使用type创建类" class="headerlink" title="3. 使用type创建类"></a>3. 使用type创建类</h3><p>type还有一种完全不同的功能，动态的创建类。</p>
<p>type可以接受一个类的描述作为参数，然后返回一个类。（要知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在Python中是为了保持向后兼容性）</p>
<p>type可以像这样工作：</p>
<p>type(类名, 由父类名称组成的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)</p>
<p>比如下面的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">2</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span> <span class="comment">#定义了一个Test类</span></span><br><span class="line">   ...:     <span class="keyword">pass</span></span><br><span class="line">   ...:</span><br><span class="line">In [<span class="number">3</span>]: Test() <span class="comment">#创建了一个Test类的实例对象</span></span><br><span class="line">Out[<span class="number">3</span>]: &lt;__main__.Test at <span class="number">0x10d3f8438</span>&gt;</span><br></pre></td></tr></table></figure>

<p>可以手动像这样创建：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Test2 = type(<span class="string">"Test2"</span>,(),&#123;&#125;) <span class="comment">#定了一个Test2类</span></span><br><span class="line">In [<span class="number">5</span>]: Test2() <span class="comment">#创建了一个Test2类的实例对象</span></span><br><span class="line">Out[<span class="number">5</span>]: &lt;__main__.Test2 at <span class="number">0x10d406b38</span>&gt;</span><br></pre></td></tr></table></figure>

<p>我们使用”Test2”作为类名，并且也可以把它当做一个变量来作为类的引用。类和变量是不同的，这里没有任何理由把事情弄的复杂。即type函数中第1个实参，也可以叫做其他的名字，这个名字表示类的名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">23</span>]: MyDogClass = type(<span class="string">'MyDog'</span>, (), &#123;&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: <span class="keyword">print</span> MyDogClass</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">MyDog</span>'&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用help来测试这2个类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">10</span>]: help(Test) <span class="comment">#用help查看Test类</span></span><br><span class="line"></span><br><span class="line">Help on <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="title">in</span> <span class="title">module</span> <span class="title">__main__</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(builtins.object)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">Data</span> <span class="title">descriptors</span> <span class="title">defined</span> <span class="title">here</span>:</span></span><br><span class="line"> |</span><br><span class="line"> |  __dict__</span><br><span class="line"> |      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined)</span><br><span class="line"> |</span><br><span class="line"> |  __weakref__</span><br><span class="line"> |      list of weak references to the object (<span class="keyword">if</span> defined)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">8</span>]: help(Test2) <span class="comment">#用help查看Test2类</span></span><br><span class="line"></span><br><span class="line">Help on <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> <span class="title">in</span> <span class="title">module</span> <span class="title">__main__</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span><span class="params">(builtins.object)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">Data</span> <span class="title">descriptors</span> <span class="title">defined</span> <span class="title">here</span>:</span></span><br><span class="line"> |</span><br><span class="line"> |  __dict__</span><br><span class="line"> |      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined)</span><br><span class="line"> |</span><br><span class="line"> |  __weakref__</span><br><span class="line"> |      list of weak references to the object (<span class="keyword">if</span> defined)</span><br></pre></td></tr></table></figure>

<h3 id="4-使用type创建带有属性的类"><a href="#4-使用type创建带有属性的类" class="headerlink" title="4. 使用type创建带有属性的类"></a>4. 使用type创建带有属性的类</h3><p>type 接受一个字典来为类定义属性，因此</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo = type(<span class="string">'Foo'</span>, (), &#123;<span class="string">'bar'</span>:<span class="literal">True</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>可以翻译为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">…       bar = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>并且可以将Foo当成一个普通的类一样使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> Foo</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Foo</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span> <span class="title">Foo</span>.<span class="title">bar</span></span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line">&gt;&gt;&gt; f = Foo()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> f</span><br><span class="line">&lt;__main__.Foo object at <span class="number">0x8a9b84c</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> f.bar</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>当然，你可以向这个类继承，所以，如下的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">FooChild</span><span class="params">(Foo)</span>:</span></span><br><span class="line">…       <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>就可以写成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>FooChild = type(<span class="string">'FooChild'</span>, (Foo,),&#123;&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> FooChild</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">FooChild</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span> <span class="title">FooChild</span>.<span class="title">bar</span>   # <span class="title">bar</span>属性是由<span class="title">Foo</span>继承而来</span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br></pre></td></tr></table></figure>

<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul>
<li>type的第2个参数，元组中是父类的名字，而不是字符串</li>
<li>添加的属性是类属性，并不是实例属性</li>
</ul>
<h3 id="5-使用type创建带有方法的类"><a href="#5-使用type创建带有方法的类" class="headerlink" title="5. 使用type创建带有方法的类"></a>5. 使用type创建带有方法的类</h3><p>最终你会希望为你的类增加方法。只需要定义一个有着恰当签名的函数并将其作为属性赋值就可以了。</p>
<h4 id="添加实例方法"><a href="#添加实例方法" class="headerlink" title="添加实例方法"></a>添加实例方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">46</span>]: <span class="function"><span class="keyword">def</span> <span class="title">echo_bar</span><span class="params">(self)</span>:</span> <span class="comment">#定义了一个普通的函数</span></span><br><span class="line">    ...:     print(self.bar)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: FooChild = type(<span class="string">'FooChild'</span>, (Foo,), &#123;<span class="string">'echo_bar'</span>: echo_bar&#125;) <span class="comment">#让FooChild类中的echo_bar属性，指向了上面定义的函数</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: hasattr(Foo, <span class="string">'echo_bar'</span>) <span class="comment">#判断Foo类中，是否有echo_bar这个属性</span></span><br><span class="line">Out[<span class="number">48</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]:</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: hasattr(FooChild, <span class="string">'echo_bar'</span>) <span class="comment">#判断FooChild类中，是否有echo_bar这个属性</span></span><br><span class="line">Out[<span class="number">49</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: my_foo = FooChild()</span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: my_foo.echo_bar()</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h4 id="添加静态方法"><a href="#添加静态方法" class="headerlink" title="添加静态方法"></a>添加静态方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">36</span>]: @staticmethod</span><br><span class="line">    ...: <span class="function"><span class="keyword">def</span> <span class="title">testStatic</span><span class="params">()</span>:</span></span><br><span class="line">    ...:     print(<span class="string">"static method ...."</span>)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: Foochild = type(<span class="string">'Foochild'</span>, (Foo,), &#123;<span class="string">"echo_bar"</span>:echo_bar, <span class="string">"testStatic"</span>:</span><br><span class="line">    ...: testStatic&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: fooclid = Foochild()</span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: fooclid.testStatic</span><br><span class="line">Out[<span class="number">39</span>]: &lt;function __main__.testStatic&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: fooclid.testStatic()</span><br><span class="line">static method ....</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: fooclid.echo_bar()</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h4 id="添加类方法"><a href="#添加类方法" class="headerlink" title="添加类方法"></a>添加类方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">42</span>]: @classmethod</span><br><span class="line">    ...: <span class="function"><span class="keyword">def</span> <span class="title">testClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">    ...:     print(cls.bar)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]:</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: Foochild = type(<span class="string">'Foochild'</span>, (Foo,), &#123;<span class="string">"echo_bar"</span>:echo_bar, <span class="string">"testStatic"</span>:</span><br><span class="line">    ...: testStatic, <span class="string">"testClass"</span>:testClass&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]:</span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: fooclid = Foochild()</span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: fooclid.testClass()</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>你可以看到，在Python中，类也是对象，你可以动态的创建类。这就是当你使用关键字class时Python在幕后做的事情，而这就是通过元类来实现的。</p>
<h3 id="6-到底什么是元类"><a href="#6-到底什么是元类" class="headerlink" title="6. 到底什么是元类"></a>6. 到底什么是元类</h3><p>元类就是用来创建类的“东西”。你创建类就是为了创建类的实例对象，不是吗？但是我们已经学习到了Python中的类也是对象。</p>
<p>元类就是用来创建这些类（对象）的，元类就是类的类，你可以这样理解为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MyClass = MetaClass() <span class="comment">#使用元类创建出一个对象，这个对象称为“类”</span></span><br><span class="line">MyObject = MyClass() <span class="comment">#使用“类”来创建出实例对象</span></span><br></pre></td></tr></table></figure>

<p>你已经看到了type可以让你像这样做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MyClass = type(<span class="string">'MyClass'</span>, (), &#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>这是因为函数type实际上是一个元类。type就是Python在背后用来创建所有类的元类。现在你想知道那为什么type会全部采用小写形式而不是Type呢？好吧，我猜这是为了和str保持一致性，str是用来创建字符串对象的类，而int是用来创建整数对象的类。type就是创建类对象的类。你可以通过检查<strong>class</strong>属性来看到这一点。Python中所有的东西，注意，我是指所有的东西——都是对象。这包括整数、字符串、函数以及类。它们全部都是对象，而且它们都是从一个类创建而来，这个类就是type。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">35</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age.__class__</span><br><span class="line">&lt;type <span class="string">'int'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">'bob'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name.__class__</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span> <span class="keyword">pass</span></span><br><span class="line">&gt;&gt;&gt;foo.__class__</span><br><span class="line">&lt;type <span class="string">'function'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Bar</span><span class="params">(object)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = Bar()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Bar</span>'&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在，对于任何一个<strong>class</strong>的<strong>class</strong>属性又是什么呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.__class__.__class__</span><br><span class="line">&lt;type <span class="string">'type'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age.__class__.__class__</span><br><span class="line">&lt;type <span class="string">'type'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foo.__class__.__class__</span><br><span class="line">&lt;type <span class="string">'type'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.__class__.__class__</span><br><span class="line">&lt;type <span class="string">'type'</span>&gt;</span><br></pre></td></tr></table></figure>

<p>因此，元类就是创建类这种对象的东西。type就是Python的内建元类，当然了，你也可以创建自己的元类。</p>
<h3 id="7-metaclass属性"><a href="#7-metaclass属性" class="headerlink" title="7. metaclass属性"></a>7. <strong>metaclass</strong>属性</h3><p>你可以在定义一个类的时候为其添加<strong>metaclass</strong>属性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    __metaclass__ = something…</span><br><span class="line">    ...省略...</span><br></pre></td></tr></table></figure>

<p>如果你这么做了，Python就会用元类来创建类Foo。小心点，这里面有些技巧。你首先写下class Foo(object)，但是类Foo还没有在内存中创建。Python会在类的定义中寻找<strong>metaclass</strong>属性，如果找到了，Python就会用它来创建类Foo，如果没有找到，就会用内建的type来创建这个类。把下面这段话反复读几次。当你写如下代码时 :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(Bar)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>Python做了如下的操作：</p>
<ol>
<li>Foo中有<strong>metaclass</strong>这个属性吗？如果是，Python会通过<strong>metaclass</strong>创建一个名字为Foo的类(对象)</li>
<li>如果Python没有找到<strong>metaclass</strong>，它会继续在Bar（父类）中寻找<strong>metaclass</strong>属性，并尝试做和前面同样的操作。</li>
<li>如果Python在任何父类中都找不到<strong>metaclass</strong>，它就会在模块层次中去寻找<strong>metaclass</strong>，并尝试做同样的操作。</li>
<li>如果还是找不到<strong>metaclass</strong>,Python就会用内置的type来创建这个类对象。</li>
</ol>
<p>现在的问题就是，你可以在<strong>metaclass</strong>中放置些什么代码呢？答案就是：可以创建一个类的东西。那么什么可以用来创建一个类呢？type，或者任何使用到type或者子类化type的东东都可以。</p>
<h3 id="8-自定义元类"><a href="#8-自定义元类" class="headerlink" title="8. 自定义元类"></a>8. 自定义元类</h3><p>元类的主要目的就是为了当创建类时能够自动地改变类。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。</p>
<p>假想一个很傻的例子，你决定在你的模块里所有的类的属性都应该是大写形式。有好几种方法可以办到，但其中一种就是通过在模块级别设定<strong>metaclass</strong>。采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改成大写形式就万事大吉了。</p>
<p>幸运的是，<strong>metaclass</strong>实际上可以被任意调用，它并不需要是一个正式的类。所以，我们这里就先以一个简单的函数作为例子开始。</p>
<h4 id="python2中"><a href="#python2中" class="headerlink" title="python2中"></a>python2中</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upper_attr</span><span class="params">(future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#遍历属性字典，把不是__开头的属性名字变为大写</span></span><br><span class="line">    newAttr = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> name,value <span class="keyword">in</span> future_class_attr.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">"__"</span>):</span><br><span class="line">            newAttr[name.upper()] = value</span><br><span class="line"></span><br><span class="line">    <span class="comment">#调用type来创建一个类</span></span><br><span class="line">    <span class="keyword">return</span> type(future_class_name, future_class_parents, newAttr)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    __metaclass__ = upper_attr <span class="comment">#设置Foo类的元类为upper_attr</span></span><br><span class="line">    bar = <span class="string">'bip'</span></span><br><span class="line"></span><br><span class="line">print(hasattr(Foo, <span class="string">'bar'</span>))</span><br><span class="line">print(hasattr(Foo, <span class="string">'BAR'</span>))</span><br><span class="line"></span><br><span class="line">f = Foo()</span><br><span class="line">print(f.BAR)</span><br></pre></td></tr></table></figure>

<h4 id="python3中"><a href="#python3中" class="headerlink" title="python3中"></a>python3中</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upper_attr</span><span class="params">(future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#遍历属性字典，把不是__开头的属性名字变为大写</span></span><br><span class="line">    newAttr = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> name,value <span class="keyword">in</span> future_class_attr.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">"__"</span>):</span><br><span class="line">            newAttr[name.upper()] = value</span><br><span class="line"></span><br><span class="line">    <span class="comment">#调用type来创建一个类</span></span><br><span class="line">    <span class="keyword">return</span> type(future_class_name, future_class_parents, newAttr)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object, metaclass=upper_attr)</span>:</span></span><br><span class="line">    bar = <span class="string">'bip'</span></span><br><span class="line"></span><br><span class="line">print(hasattr(Foo, <span class="string">'bar'</span>))</span><br><span class="line">print(hasattr(Foo, <span class="string">'BAR'</span>))</span><br><span class="line"></span><br><span class="line">f = Foo()</span><br><span class="line">print(f.BAR)</span><br></pre></td></tr></table></figure>

<p>现在让我们再做一次，这一次用一个真正的class来当做元类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="comment"># __new__ 是在__init__之前被调用的特殊方法</span></span><br><span class="line">    <span class="comment"># __new__是用来创建对象并返回之的方法</span></span><br><span class="line">    <span class="comment"># 而__init__只是用来将传入的参数初始化给对象</span></span><br><span class="line">    <span class="comment"># 你很少用到__new__，除非你希望能够控制对象的创建</span></span><br><span class="line">    <span class="comment"># 这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__</span></span><br><span class="line">    <span class="comment"># 如果你希望的话，你也可以在__init__中做些事情</span></span><br><span class="line">    <span class="comment"># 还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class="line">        <span class="comment">#遍历属性字典，把不是__开头的属性名字变为大写</span></span><br><span class="line">        newAttr = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> name,value <span class="keyword">in</span> future_class_attr.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">"__"</span>):</span><br><span class="line">                newAttr[name.upper()] = value</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法1：通过'type'来做类对象的创建</span></span><br><span class="line">        <span class="comment"># return type(future_class_name, future_class_parents, newAttr)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法2：复用type.__new__方法</span></span><br><span class="line">        <span class="comment"># 这就是基本的OOP编程，没什么魔法</span></span><br><span class="line">        <span class="comment"># return type.__new__(cls, future_class_name, future_class_parents, newAttr)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方法3：使用super方法</span></span><br><span class="line">        <span class="keyword">return</span> super(UpperAttrMetaClass, cls).__new__(cls, future_class_name, future_class_parents, newAttr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#python2的用法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    __metaclass__ = UpperAttrMetaClass</span><br><span class="line">    bar = <span class="string">'bip'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python3的用法</span></span><br><span class="line"><span class="comment"># class Foo(object, metaclass = UpperAttrMetaClass):</span></span><br><span class="line"><span class="comment">#     bar = 'bip'</span></span><br><span class="line"></span><br><span class="line">print(hasattr(Foo, <span class="string">'bar'</span>))</span><br><span class="line"><span class="comment"># 输出: False</span></span><br><span class="line">print(hasattr(Foo, <span class="string">'BAR'</span>))</span><br><span class="line"><span class="comment"># 输出:True</span></span><br><span class="line"></span><br><span class="line">f = Foo()</span><br><span class="line">print(f.BAR)</span><br><span class="line"><span class="comment"># 输出:'bip'</span></span><br></pre></td></tr></table></figure>

<p>就是这样，除此之外，关于元类真的没有别的可说的了。但就元类本身而言，它们其实是很简单的：</p>
<ol>
<li>拦截类的创建</li>
<li>修改类</li>
<li>返回修改之后的类</li>
</ol>
<h4 id="究竟为什么要使用元类？"><a href="#究竟为什么要使用元类？" class="headerlink" title="究竟为什么要使用元类？"></a>究竟为什么要使用元类？</h4><p>现在回到我们的大主题上来，究竟是为什么你会去使用这样一种容易出错且晦涩的特性？好吧，一般来说，你根本就用不上它：</p>
<p>“元类就是深度的魔法，99%的用户应该根本不必为此操心。如果你想搞清楚究竟是否需要用到元类，那么你就不需要它。那些实际用到元类的人都非常清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类。” —— Python界的领袖 Tim Peters</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python-base</tag>
      </tags>
  </entry>
  <entry>
    <title>python-进程和线程</title>
    <url>/2018/10/26/python%E7%9B%B8%E5%85%B3/python-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="0-进程的创建-fork"><a href="#0-进程的创建-fork" class="headerlink" title="0. 进程的创建-fork"></a>0. 进程的创建-fork</h2><h3 id="1-进程-VS-程序"><a href="#1-进程-VS-程序" class="headerlink" title="1. 进程 VS 程序"></a>1. 进程 VS 程序</h3><p>编写完毕的代码，在没有运行的时候，称之为<strong>程序</strong></p>
<p>正在运行着的代码，就成为<strong>进程</strong></p>
<p>进程，除了包含代码以外，还有需要运行的环境等，所以和程序是有区别的</p>
<a id="more"></a>

<h3 id="2-fork"><a href="#2-fork" class="headerlink" title="2. fork( )"></a>2. fork( )</h3><p>Python的os模块封装了常见的系统调用，其中就包括fork，可以在Python程序中轻松创建子进程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意，fork函数，只在Unix/Linux/Mac上运行，windows不可以</span></span><br><span class="line">pid = os.fork()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'哈哈1'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'哈哈2'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>说明：</strong></li>
</ul>
<ul>
<li>程序执行到os.fork()时，操作系统会创建一个新的进程（子进程），然后复制父进程的所有信息到子进程中</li>
<li>然后父进程和子进程都会从fork()函数中得到一个返回值，在子进程中这个值一定是0，而父进程中是子进程的 id号</li>
</ul>
<p>在Unix/Linux操作系统中，提供了一个fork()系统函数，它非常特殊。</p>
<p>普通的函数调用，调用一次，返回一次，但是fork()调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</p>
<p>子进程永远返回0，而父进程返回子进程的ID。</p>
<p>这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用getppid()就可以拿到父进程的ID。</p>
<h3 id="3-getpid-、getppid"><a href="#3-getpid-、getppid" class="headerlink" title="3. getpid()、getppid()"></a>3. getpid()、getppid()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">rpid = os.fork()</span><br><span class="line"><span class="keyword">if</span> rpid&lt;<span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"fork调用失败。"</span>)</span><br><span class="line"><span class="keyword">elif</span> rpid == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"我是子进程（%s），我的父进程是（%s）"</span>%(os.getpid(),os.getppid()))</span><br><span class="line">    x+=<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"我是父进程（%s），我的子进程是（%s）"</span>%(os.getpid(),rpid))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"父子进程都可以执行这里的代码"</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我是父进程（<span class="number">19360</span>），我的子进程是（<span class="number">19361</span>）</span><br><span class="line">父子进程都可以执行这里的代码</span><br><span class="line">我是子进程（<span class="number">19361</span>），我的父进程是（<span class="number">19360</span>）</span><br><span class="line">父子进程都可以执行这里的代码</span><br></pre></td></tr></table></figure>

<h3 id="4-多进程修改全局变量"><a href="#4-多进程修改全局变量" class="headerlink" title="4. 多进程修改全局变量"></a>4. 多进程修改全局变量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意，fork函数，只在Unix/Linux/Mac上运行，windows不可以</span></span><br><span class="line">pid = os.fork()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">    num+=<span class="number">1</span></span><br><span class="line">    print(<span class="string">'哈哈1---num=%d'</span>%num)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>) <span class="comment"># 1</span></span><br><span class="line">    num+=<span class="number">1</span></span><br><span class="line">    print(<span class="string">'哈哈2---num=%d'</span>%num) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>总结：</li>
</ul>
<ul>
<li>多进程中，每个进程中所有数据（包括全局变量）都各有拥有一份，互不影响</li>
</ul>
<h2 id="5-multiprocessing模块"><a href="#5-multiprocessing模块" class="headerlink" title="5. multiprocessing模块"></a>5. multiprocessing模块</h2><p>由于Python是跨平台的，自然也应该提供一个跨平台的多进程支持。multiprocessing模块就是跨平台版本的多进程模块。</p>
<p>multiprocessing模块提供了一个Process类来代表一个进程对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程要执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'子进程运行中，name= %s ,pid=%d...'</span> % (name, os.getpid()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'父进程 %d.'</span> % os.getpid())</span><br><span class="line">    p = Process(target=run_proc, args=(<span class="string">'test'</span>,))</span><br><span class="line">    print(<span class="string">'子进程将要执行'</span>)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'子进程已结束'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动，这样创建进程比fork()还要简单。</li>
<li>join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。</li>
</ul>
<h2 id="6-Process语法结构"><a href="#6-Process语法结构" class="headerlink" title="6. Process语法结构"></a>6. Process语法结构</h2><p>Process([group [, target [, name [, args [, kwargs]]]]])</p>
<ul>
<li>target：表示这个进程实例所调用对象；</li>
<li>args：表示调用对象的位置参数元组；</li>
<li>kwargs：表示调用对象的关键字参数字典；</li>
<li>name：为当前进程实例的别名；</li>
<li>group：大多数情况下用不到；</li>
</ul>
<p>Process类常用方法：</p>
<ul>
<li>is_alive()：判断进程实例是否还在执行；</li>
<li>join([timeout])：是否等待进程实例执行结束，或等待多少秒；</li>
<li>start()：启动进程实例（创建子进程）；</li>
<li>run()：如果没有给定target参数，对这个对象调用start()方法时，就将执行对象中的run()方法；</li>
<li>terminate()：不管任务是否完成，立即终止；</li>
</ul>
<p>Process类常用属性：</p>
<ul>
<li>name：当前进程实例别名，默认为Process-N，N为从1开始递增的整数；</li>
<li>pid：当前进程实例的PID值；</li>
</ul>
<h2 id="7-进程的创建-Process子类"><a href="#7-进程的创建-Process子类" class="headerlink" title="7. 进程的创建-Process子类"></a>7. 进程的创建-Process子类</h2><p>创建新的进程还能够使用类的方式，可以自定义一个类，继承Process类，每次实例化这个类的时候，就等同于实例化一个进程对象，请看下面的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#继承Process类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process_Class</span><span class="params">(Process)</span>:</span></span><br><span class="line">    <span class="comment">#因为Process类本身也有__init__方法，这个子类相当于重写了这个方法，</span></span><br><span class="line">    <span class="comment">#但这样就会带来一个问题，我们并没有完全的初始化一个Process类，所以就不能使用从这个类继承的一些方法和属性，</span></span><br><span class="line">    <span class="comment">#最好的方法就是将继承类本身传递给Process.__init__方法，完成这些初始化操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,interval)</span>:</span></span><br><span class="line">        Process.__init__(self)</span><br><span class="line">        self.interval = interval</span><br><span class="line"></span><br><span class="line">    <span class="comment">#重写了Process类的run()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"子进程(%s) 开始执行，父进程为（%s）"</span>%(os.getpid(),os.getppid()))</span><br><span class="line">        t_start = time.time()</span><br><span class="line">        time.sleep(self.interval)</span><br><span class="line">        t_stop = time.time()</span><br><span class="line">        print(<span class="string">"(%s)执行结束，耗时%0.2f秒"</span>%(os.getpid(),t_stop-t_start))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    t_start = time.time()</span><br><span class="line">    print(<span class="string">"当前程序进程(%s)"</span>%os.getpid())        </span><br><span class="line">    p1 = Process_Class(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#对一个不包含target属性的Process类执行start()方法，就会运行这个类中的run()方法，所以这里会执行p1.run()</span></span><br><span class="line">    p1.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    t_stop = time.time()</span><br><span class="line">    print(<span class="string">"(%s)执行结束，耗时%0.2f"</span>%(os.getpid(),t_stop-t_start))</span><br></pre></td></tr></table></figure>

<h2 id="8-进程池Pool"><a href="#8-进程池Pool" class="headerlink" title="8. 进程池Pool"></a>8. 进程池Pool</h2><blockquote>
<p>当需要创建的子进程数量不多时，可以直接利用multiprocessing中的Process动态成生多个进程，但如果是上百甚至上千个目标，手动的去创建进程的工作量巨大，此时就可以用到multiprocessing模块提供的Pool方法。</p>
</blockquote>
<blockquote>
<p>初始化Pool时，可以指定一个最大进程数，当有新的请求提交到Pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到指定的最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程来执行。<br>multiprocessing.Pool常用函数解析：</p>
</blockquote>
<ul>
<li>apply_async(func[, args[, kwds]]) ：使用非阻塞方式调用func（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表；</li>
<li>apply(func[, args[, kwds]])：使用阻塞方式调用func</li>
<li>close()：关闭Pool，使其不再接受新的任务；</li>
<li>terminate()：不管任务是否完成，立即终止；</li>
<li>join()：主进程阻塞，等待子进程的退出， 必须在close或terminate之后使用；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(msg)</span>:</span></span><br><span class="line">    t_start = time.time()</span><br><span class="line">    print(<span class="string">"%s开始执行,进程号为%d"</span>%(msg,os.getpid()))</span><br><span class="line">    <span class="comment">#random.random()随机生成0~1之间的浮点数</span></span><br><span class="line">    time.sleep(random.random()*<span class="number">2</span>) </span><br><span class="line">    t_stop = time.time()</span><br><span class="line">    print(msg,<span class="string">"执行完毕，耗时%0.2f"</span>%(t_stop-t_start))</span><br><span class="line"></span><br><span class="line">po=Pool(<span class="number">3</span>) <span class="comment">#定义一个进程池，最大进程数3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="comment">#Pool.apply_async(要调用的目标,(传递给目标的参数元祖,))</span></span><br><span class="line">    <span class="comment">#每次循环将会用空闲出来的子进程去调用目标</span></span><br><span class="line">    po.apply_async(worker,(i,)) <span class="comment"># 异步加入进程</span></span><br><span class="line">    <span class="comment"># po.apply(worker,(i,)) # 阻塞式，就是加入一个进程，等这一个进程运行结束才执行下一个进程</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"----start----"</span>)</span><br><span class="line">po.close() <span class="comment">#关闭进程池，关闭后po不再接收新的请求</span></span><br><span class="line">po.join() <span class="comment">#等待po中所有子进程执行完成，必须放在close语句之后</span></span><br><span class="line">print(<span class="string">"-----end-----"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="9-进程间通信-Queue"><a href="#9-进程间通信-Queue" class="headerlink" title="9. 进程间通信-Queue"></a>9. 进程间通信-Queue</h2><p>Process之间有时需要通信，操作系统提供了很多机制来实现进程间的通信。</p>
<h3 id="1-Queue的使用"><a href="#1-Queue的使用" class="headerlink" title="1. Queue的使用"></a>1. Queue的使用</h3><p>可以使用multiprocessing模块的Queue实现多进程之间的数据传递，Queue本身是一个消息列队程序</p>
<p>初始化Queue()对象时（例如：q=Queue()），若括号中没有指定最大可接收的消息数量，或数量为负值，那么就代表可接受的消息数量没有上限（直到内存的尽头）；</p>
<blockquote>
</blockquote>
<ul>
<li>Queue.qsize()：返回当前队列包含的消息数量；</li>
<li>Queue.empty()：如果队列为空，返回True，反之False ；</li>
<li>Queue.full()：如果队列满了，返回True,反之False；</li>
<li>Queue.get([block[, timeout]])：获取队列中的一条消息，然后将其从列队中移除，block默认值为True；</li>
</ul>
<p>1）如果block使用默认值，且没有设置timeout（单位秒），消息列队如果为空，此时程序将被阻塞（停在读取状态），直到从消息列队读到消息为止，如果设置了timeout，则会等待timeout秒，若还没读取到任何消息，则抛出”Queue.Empty”异常；</p>
<p>2）如果block值为False，消息列队如果为空，则会立刻抛出”Queue.Empty”异常；</p>
<blockquote>
</blockquote>
<ul>
<li>Queue.get_nowait()：相当Queue.get(False)；</li>
<li>Queue.put(item,[block[, timeout]])：将item消息写入队列，block默认值为True；</li>
</ul>
<p>1）如果block使用默认值，且没有设置timeout（单位秒），消息列队如果已经没有空间可写入，此时程序将被阻塞（停在写入状态），直到从消息列队腾出空间为止，如果设置了timeout，则会等待timeout秒，若还没空间，则抛出”Queue.Full”异常；</p>
<p>2）如果block值为False，消息列队如果没有空间可写入，则会立刻抛出”Queue.Full”异常；</p>
<ul>
<li>Queue.put_nowait(item)：相当Queue.put(item, False)；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q=Queue(<span class="number">3</span>) <span class="comment">#初始化一个Queue对象，最多可接收三条put消息</span></span><br><span class="line">q.put(<span class="string">"消息1"</span>) </span><br><span class="line">q.put(<span class="string">"消息2"</span>)</span><br><span class="line">print(q.full())  <span class="comment">#False</span></span><br><span class="line">q.put(<span class="string">"消息3"</span>)</span><br><span class="line">print(q.full()) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#因为消息列队已满下面的try都会抛出异常，第一个try会等待2秒后再抛出异常，第二个Try会立刻抛出异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put(<span class="string">"消息4"</span>,<span class="literal">True</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"消息列队已满，现有消息数量:%s"</span>%q.qsize())</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put_nowait(<span class="string">"消息4"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"消息列队已满，现有消息数量:%s"</span>%q.qsize())</span><br><span class="line"></span><br><span class="line"><span class="comment">#推荐的方式，先判断消息列队是否已满，再写入</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.full():</span><br><span class="line">    q.put_nowait(<span class="string">"消息4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取消息时，先判断消息列队是否为空，再读取</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(q.qsize()):</span><br><span class="line">        print(q.get_nowait())</span><br></pre></td></tr></table></figure>

<h3 id="2-Queue实例"><a href="#2-Queue实例" class="headerlink" title="2. Queue实例"></a>2. Queue实例</h3><p>我们以Queue为例，在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Put %s to queue...'</span> % value</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            value = q.get(<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'Get %s from queue.'</span> % value</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程pw，写入:</span></span><br><span class="line">    pw.start()    </span><br><span class="line">    <span class="comment"># 等待pw结束:</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取:</span></span><br><span class="line">    pr.start()</span><br><span class="line">    pr.join()</span><br><span class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'所有数据都写入并且读完'</span></span><br></pre></td></tr></table></figure>

<h3 id="3-进程池中的Queue"><a href="#3-进程池中的Queue" class="headerlink" title="3. 进程池中的Queue"></a>3. 进程池中的Queue</h3><p>如果要使用Pool创建进程，就需要使用multiprocessing.Manager()中的Queue()，而不是multiprocessing.Queue()，否则会得到一条如下的错误信息：</p>
<p>RuntimeError: Queue objects should only be shared between processes through inheritance.</p>
<p>下面的实例演示了进程池中的进程如何通信：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改import中的Queue为Manager</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager,Pool</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reader</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"reader启动(%s),父进程为(%s)"</span>%(os.getpid(),os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(q.qsize()):</span><br><span class="line">        print(<span class="string">"reader从Queue获取到消息：%s"</span>%q.get(<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writer</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"writer启动(%s),父进程为(%s)"</span>%(os.getpid(),os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"dongGe"</span>:</span><br><span class="line">        q.put(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"(%s) start"</span>%os.getpid())</span><br><span class="line">    q=Manager().Queue() <span class="comment">#使用Manager中的Queue来初始化</span></span><br><span class="line">    po=Pool()</span><br><span class="line">    <span class="comment">#使用阻塞模式创建进程，这样就不需要在reader中使用死循环了，可以让writer完全执行完成后，再用reader去读取</span></span><br><span class="line">    po.apply(writer,(q,))</span><br><span class="line">    po.apply(reader,(q,))</span><br><span class="line">    po.close()</span><br><span class="line">    po.join()</span><br><span class="line">    print(<span class="string">"(%s) End"</span>%os.getpid())</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(21156) start</span><br><span class="line">writer启动(21162),父进程为(21156)</span><br><span class="line">reader启动(21162),父进程为(21156)</span><br><span class="line">reader从Queue获取到消息：d</span><br><span class="line">reader从Queue获取到消息：o</span><br><span class="line">reader从Queue获取到消息：n</span><br><span class="line">reader从Queue获取到消息：g</span><br><span class="line">reader从Queue获取到消息：G</span><br><span class="line">reader从Queue获取到消息：e</span><br><span class="line">(21156) End</span><br></pre></td></tr></table></figure>

<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><blockquote>
<p>python的thread模块是比较底层的模块，python的threading模块是对thread做了一些包装的，可以更加方便的被使用</p>
<p>创建方法与进程Process类似</p>
</blockquote>
<h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> enumerate(<span class="string">'hello'</span>):</span><br><span class="line">        print(<span class="string">'dance'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Thread(target=dance)</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">'main线程'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>主线程会等待所有的子线程结束后才结束</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep,ctime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在唱歌...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在跳舞...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'---开始---:%s'</span>%ctime())</span><br><span class="line"></span><br><span class="line">    t1 = threading.Thread(target=sing)</span><br><span class="line">    t2 = threading.Thread(target=dance)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#sleep(5) # 屏蔽此行代码，试试看，程序是否会立马结束？</span></span><br><span class="line">    print(<span class="string">'---结束---:%s'</span>%ctime())</span><br><span class="line">    </span><br><span class="line">---开始---:Sat Jan <span class="number">13</span> <span class="number">13</span>:<span class="number">52</span>:<span class="number">47</span> <span class="number">2018</span></span><br><span class="line">正在唱歌..<span class="number">.0</span></span><br><span class="line">正在跳舞..<span class="number">.0</span></span><br><span class="line">---结束---:Sat Jan <span class="number">13</span> <span class="number">13</span>:<span class="number">52</span>:<span class="number">47</span> <span class="number">2018</span></span><br><span class="line">正在唱歌..<span class="number">.1</span></span><br><span class="line">正在跳舞..<span class="number">.1</span></span><br><span class="line">正在唱歌..<span class="number">.2</span></span><br><span class="line">正在跳舞..<span class="number">.2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看线程数量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep,ctime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在唱歌...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在跳舞...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'---开始---:%s'</span>%ctime())</span><br><span class="line"></span><br><span class="line">    t1 = threading.Thread(target=sing)</span><br><span class="line">    t2 = threading.Thread(target=dance)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        length = len(threading.enumerate())</span><br><span class="line">        print(<span class="string">'当前运行的线程数为：%d'</span>%length)</span><br><span class="line">        <span class="keyword">if</span> length&lt;=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>

<h2 id="线程的创建-Thread子类"><a href="#线程的创建-Thread子类" class="headerlink" title="线程的创建-Thread子类"></a>线程的创建-Thread子类</h2><ul>
<li>示例</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread_Class</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            print(<span class="string">'i\'m &#123;&#125; @ &#123;&#125;'</span>.format(self.name,i))</span><br><span class="line"><span class="keyword">if</span> __name__ = <span class="string">'__main__'</span>:</span><br><span class="line">	t = Thread_Class()</span><br><span class="line">	t.start()</span><br></pre></td></tr></table></figure>

<h2 id="线程的执行顺序"><a href="#线程的执行顺序" class="headerlink" title="线程的执行顺序"></a>线程的执行顺序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            msg = <span class="string">"I'm "</span>+self.name+<span class="string">' @ '</span>+str(i)</span><br><span class="line">            print(msg)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        t.start()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>

<p>执行结果：(运行的结果可能不一样，但是大体是一致的)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I&#39;m Thread-1 @ 0</span><br><span class="line">I&#39;m Thread-2 @ 0</span><br><span class="line">I&#39;m Thread-5 @ 0</span><br><span class="line">I&#39;m Thread-3 @ 0</span><br><span class="line">I&#39;m Thread-4 @ 0</span><br><span class="line">I&#39;m Thread-3 @ 1</span><br><span class="line">I&#39;m Thread-4 @ 1</span><br><span class="line">I&#39;m Thread-5 @ 1</span><br><span class="line">I&#39;m Thread-1 @ 1</span><br><span class="line">I&#39;m Thread-2 @ 1</span><br><span class="line">I&#39;m Thread-4 @ 2</span><br><span class="line">I&#39;m Thread-5 @ 2</span><br><span class="line">I&#39;m Thread-2 @ 2</span><br><span class="line">I&#39;m Thread-1 @ 2</span><br><span class="line">I&#39;m Thread-3 @ 2</span><br></pre></td></tr></table></figure>

<ul>
<li>说明</li>
</ul>
<p>从代码和执行结果我们可以看出，多线程程序的执行顺序是不确定的。当执行到sleep语句时，线程将被阻塞（Blocked），到sleep结束后，线程进入就绪（Runnable）状态，等待调度。而线程调度将自行选择一个线程执行。上面的代码中只能保证每个线程都运行完整个run函数，但是线程的启动顺序、run函数中每次循环的执行顺序都不能确定。</p>
<ul>
<li>总结</li>
</ul>
<ol>
<li>每个线程一定会有一个名字，尽管上面的例子中没有指定线程对象的name，但是python会自动为线程指定一个名字。</li>
<li>当线程的run()方法结束时该线程完成。</li>
<li>无法控制线程调度程序，但可以通过别的方式来影响线程调度的方式。</li>
<li>线程的几种状态</li>
<li>新建、就绪、等待、运行、死亡</li>
</ol>
<h2 id="多线程-共享全局变量"><a href="#多线程-共享全局变量" class="headerlink" title="多线程-共享全局变量"></a>多线程-共享全局变量</h2><ul>
<li>在一个进程内的所有线程共享全局变量，能够在不适用其他方式的前提下完成多线程之间的数据共享（这点要比多进程要好）</li>
<li>缺点就是，线程是对全局变量随意遂改可能造成多线程之间对全局变量的混乱（即线程非安全）</li>
</ul>
<h2 id="进程VS线程"><a href="#进程VS线程" class="headerlink" title="进程VS线程"></a>进程VS线程</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>进程，能够完成多任务，比如 在一台电脑上能够同时运行多个QQ</li>
<li>线程，能够完成多任务，比如 一个QQ中的多个聊天窗口</li>
</ul>
<h3 id="定义的不同"><a href="#定义的不同" class="headerlink" title="定义的不同"></a>定义的不同</h3><ul>
<li>进程是系统进行资源分配和调度的一个独立单位.</li>
<li>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.</li>
</ul>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul>
<li>一个程序至少有一个进程,一个进程至少有一个线程.</li>
<li>线程的划分尺度小于进程(资源比进程少)，使得多线程程序的并发性高。</li>
<li>进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率</li>
<li>线程不能够独立执行，必须依存在进程中</li>
</ul>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。</p>
<h2 id="同步的概念"><a href="#同步的概念" class="headerlink" title="同步的概念"></a>同步的概念</h2><h3 id="1-多线程开发可能遇到的问题"><a href="#1-多线程开发可能遇到的问题" class="headerlink" title="1. 多线程开发可能遇到的问题"></a>1. 多线程开发可能遇到的问题</h3><p>假设两个线程t1和t2都要对num=0进行增1运算，t1和t2都各对num修改10次，num的最终的结果应该为20。</p>
<p>但是由于是多线程访问，有可能出现下面情况：</p>
<p>在num=0时，t1取得num=0。此时系统把t1调度为”sleeping”状态，把t2转换为”running”状态，t2也获得num=0。然后t2对得到的值进行加1并赋给num，使得num=1。然后系统又把t2调度为”sleeping”，把t1转为”running”。线程t1又把它之前得到的0加1后赋值给num。这样，明明t1和t2都完成了1次加1工作，但结果仍然是num=1。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"---test1---g_num=%d"</span>%g_num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"---test2---g_num=%d"</span>%g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Thread(target=test1)</span><br><span class="line">p1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># time.sleep(3) #取消屏蔽之后 再次运行程序，结果会不一样，，，为啥呢？</span></span><br><span class="line"></span><br><span class="line">p2 = Thread(target=test2)</span><br><span class="line">p2.start()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"---g_num=%d---"</span>%g_num)</span><br></pre></td></tr></table></figure>

<p>运行结果(可能不一样，但是结果往往不是2000000)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---g_num&#x3D;284672---</span><br><span class="line">---test1---g_num&#x3D;1166544</span><br><span class="line">---test2---g_num&#x3D;1406832</span><br></pre></td></tr></table></figure>

<p>取消屏蔽之后，再次运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---test1---g_num&#x3D;1000000</span><br><span class="line">---g_num&#x3D;1041802---</span><br><span class="line">---test2---g_num&#x3D;2000000</span><br></pre></td></tr></table></figure>

<p>问题产生的原因就是没有控制多个线程对同一资源的访问，对数据造成破坏，使得线程运行的结果不可预期。这种现象称为“线程不安全”。</p>
<h3 id="2-什么是同步"><a href="#2-什么是同步" class="headerlink" title="2. 什么是同步"></a>2. 什么是同步</h3><p>同步就是协同步调，按预定的先后次序进行运行。如:你说完，我再说。</p>
<p>“同”字从字面上容易理解为一起动作</p>
<p>其实不是，”同”字应是指协同、协助、互相配合。</p>
<p>如进程、线程同步，可理解为进程或线程A和B一块配合，A执行到一定程度时要依靠B的某个结果，于是停下来，示意B运行;B依言执行，再将结果给A;A再继续操作。</p>
<h3 id="3-解决问题的思路"><a href="#3-解决问题的思路" class="headerlink" title="3. 解决问题的思路"></a>3. 解决问题的思路</h3><p>对于本小节提出的那个计算错误的问题，可以通过<code>线程同步</code>来进行解决</p>
<p>思路，如下:</p>
<ol>
<li>系统调用t1，然后获取到num的值为0，此时上一把锁，即不允许其他现在操作num</li>
<li>对num的值进行+1</li>
<li>解锁，此时num的值为1，其他的线程就可以使用num了，而且是num的值不是0而是1</li>
<li>同理其他线程在对num进行修改时，都要先上锁，处理完后再解锁，在上锁的整个过程中不允许其他线程访问，就保证了数据的正确性</li>
</ol>
<h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p><strong>当多个线程几乎同时修改某一个共享数据的时候，需要进行同步控制</strong></p>
<p>线程同步能够保证多个线程安全访问竞争资源，最简单的同步机制是引入互斥锁。</p>
<p>互斥锁为资源引入一个状态：锁定/非锁定。</p>
<p>某个线程要更改共享数据时，先将其锁定，此时资源的状态为“锁定”，其他线程不能更改；直到该线程释放资源，将资源的状态变成“非锁定”，其他的线程才能再次锁定该资源。互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。</p>
<p>threading模块中定义了Lock类，可以方便的处理锁定：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建锁</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"><span class="comment">#锁定</span></span><br><span class="line">mutex.acquire([blocking])</span><br><span class="line"><span class="comment">#释放</span></span><br><span class="line">mutex.release()</span><br></pre></td></tr></table></figure>

<p>其中，锁定方法acquire可以有一个blocking参数。</p>
<ul>
<li>如果设定blocking为True，则当前线程会堵塞，直到获取到这个锁为止（如果没有指定，那么默认为True）</li>
<li>如果设定blocking为False，则当前线程不会堵塞</li>
</ul>
<p>使用互斥锁实现上面的例子的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        <span class="comment">#True表示堵塞 即如果这个锁在上锁之前已经被上锁了，那么这个线程会在这里一直等待到解锁为止 </span></span><br><span class="line">        <span class="comment">#False表示非堵塞，即不管本次调用能够成功上锁，都不会卡在这,而是继续执行下面的代码</span></span><br><span class="line">        mutexFlag = mutex.acquire(<span class="literal">True</span>) </span><br><span class="line">        <span class="keyword">if</span> mutexFlag:</span><br><span class="line">            g_num += <span class="number">1</span></span><br><span class="line">            mutex.release()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"---test1---g_num=%d"</span>%g_num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        mutexFlag = mutex.acquire(<span class="literal">True</span>) <span class="comment">#True表示堵塞</span></span><br><span class="line">        <span class="keyword">if</span> mutexFlag:</span><br><span class="line">            g_num += <span class="number">1</span></span><br><span class="line">            mutex.release()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"---test2---g_num=%d"</span>%g_num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个互斥锁</span></span><br><span class="line"><span class="comment">#这个所默认是未上锁的状态</span></span><br><span class="line">mutex = Lock()</span><br><span class="line"></span><br><span class="line">p1 = Thread(target=test1)</span><br><span class="line">p1.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p2 = Thread(target=test2)</span><br><span class="line">p2.start()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"---g_num=%d---"</span>%g_num)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---g_num&#x3D;61866---</span><br><span class="line">---test1---g_num&#x3D;1861180</span><br><span class="line">---test2---g_num&#x3D;2000000</span><br></pre></td></tr></table></figure>

<p>可以看到，加入互斥锁后，运行结果与预期相符。</p>
<h3 id="上锁解锁过程"><a href="#上锁解锁过程" class="headerlink" title="上锁解锁过程"></a>上锁解锁过程</h3><p>当一个线程调用锁的acquire()方法获得锁时，锁就进入“locked”状态。</p>
<p>每次只有一个线程可以获得锁。如果此时另一个线程试图获得这个锁，该线程就会变为“blocked”状态，称为“阻塞”，直到拥有锁的线程调用锁的release()方法释放锁之后，锁进入“unlocked”状态。</p>
<p>线程调度程序从处于同步阻塞状态的线程中选择一个来获得锁，并使得该线程进入运行（running）状态。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>锁的好处：</p>
<ul>
<li>确保了某段关键代码只能由一个线程从头到尾完整地执行</li>
</ul>
<p>锁的坏处：</p>
<ul>
<li>阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了</li>
<li>由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁</li>
</ul>
<h2 id="多线程-非共享数据"><a href="#多线程-非共享数据" class="headerlink" title="多线程-非共享数据"></a>多线程-非共享数据</h2><p>对于全局变量，在多线程中要格外小心，否则容易造成数据错乱的情况发生</p>
<h3 id="非全局变量是否要加锁"><a href="#非全局变量是否要加锁" class="headerlink" title="非全局变量是否要加锁"></a>非全局变量是否要加锁</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="comment">#coding=utf-8</span></span><br><span class="line">    <span class="keyword">import</span> threading</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">        <span class="comment"># 重写 构造方法</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,num,sleepTime)</span>:</span></span><br><span class="line">            threading.Thread.__init__(self)</span><br><span class="line">            self.num = num</span><br><span class="line">            self.sleepTime = sleepTime</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">            self.num += <span class="number">1</span></span><br><span class="line">            time.sleep(self.sleepTime)</span><br><span class="line">            print(<span class="string">'线程(%s),num=%d'</span>%(self.name, self.num))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">        mutex = threading.Lock()</span><br><span class="line">        t1 = MyThread(<span class="number">100</span>,<span class="number">5</span>)</span><br><span class="line">        t1.start()</span><br><span class="line">        t2 = MyThread(<span class="number">200</span>,<span class="number">1</span>)</span><br><span class="line">        t2.start()</span><br><span class="line">        </span><br><span class="line">线程(Thread<span class="number">-182</span>),num=<span class="number">201</span></span><br><span class="line">线程(Thread<span class="number">-181</span>),num=<span class="number">101</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(sleepTime)</span>:</span></span><br><span class="line">  num=<span class="number">1</span></span><br><span class="line">  sleep(sleepTime)</span><br><span class="line">  num+=<span class="number">1</span></span><br><span class="line">  print(<span class="string">'---(%s)--num=%d'</span>%(threading.current_thread(), num))</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target = test,args=(<span class="number">5</span>,))</span><br><span class="line">t2 = threading.Thread(target = test,args=(<span class="number">1</span>,))</span><br><span class="line"></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line">---(&lt;Thread(Thread<span class="number">-100</span>, started <span class="number">5808</span>)&gt;)--num=<span class="number">2</span></span><br><span class="line">---(&lt;Thread(Thread<span class="number">-99</span>, started <span class="number">11024</span>)&gt;)--num=<span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul>
<li>在多线程开发中，全局变量是多个线程都共享的数据，而局部变量等是各自线程的，是非共享的</li>
</ul>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁。</p>
<p>尽管死锁很少发生，但一旦发生就会造成应用的停止响应。下面看一个死锁的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> mutexA.acquire():                     <span class="comment"># 对mutexA进行上锁    </span></span><br><span class="line">            print(self.name+<span class="string">'----do1---up----'</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> mutexB.acquire():                 <span class="comment"># 互相等待对方释放锁，然后上锁，但事与愿违          </span></span><br><span class="line">                print(self.name+<span class="string">'----do1---down----'</span>)</span><br><span class="line">                mutexB.release()</span><br><span class="line">            mutexA.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> mutexB.acquire():                     <span class="comment"># 多mutexB进行上锁     </span></span><br><span class="line">            print(self.name+<span class="string">'----do2---up----'</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> mutexA.acquire():                 <span class="comment"># 互相等待对方释放锁，然后上锁，但事与愿违 </span></span><br><span class="line">                print(self.name+<span class="string">'----do2---down----'</span>)</span><br><span class="line">                mutexA.release()</span><br><span class="line">            mutexB.release()</span><br><span class="line"></span><br><span class="line">mutexA = threading.Lock()</span><br><span class="line">mutexB = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = MyThread1()</span><br><span class="line">    t2 = MyThread2()</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure>

<h3 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h3><ul>
<li>程序设计时要尽量避免（银行家算法）</li>
<li>添加超时时间等</li>
</ul>
<h2 id="同步应用"><a href="#同步应用" class="headerlink" title="同步应用"></a>同步应用</h2><h3 id="多个线程有序执行"><a href="#多个线程有序执行" class="headerlink" title="多个线程有序执行"></a>多个线程有序执行</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task1</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> lock1.acquire():</span><br><span class="line">                print(<span class="string">"------Task 1 -----"</span>)</span><br><span class="line">                sleep(<span class="number">0.5</span>)</span><br><span class="line">                lock2.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task2</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> lock2.acquire():</span><br><span class="line">                print(<span class="string">"------Task 2 -----"</span>)</span><br><span class="line">                sleep(<span class="number">0.5</span>)</span><br><span class="line">                lock3.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task3</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> lock3.acquire():</span><br><span class="line">                print(<span class="string">"------Task 3 -----"</span>)</span><br><span class="line">                sleep(<span class="number">0.5</span>)</span><br><span class="line">                lock1.release()</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用Lock创建出的锁默认没有“锁上”</span></span><br><span class="line">lock1 = Lock()</span><br><span class="line"><span class="comment">#创建另外一把锁，并且“锁上”</span></span><br><span class="line">lock2 = Lock()</span><br><span class="line">lock2.acquire()</span><br><span class="line"><span class="comment">#创建另外一把锁，并且“锁上”</span></span><br><span class="line">lock3 = Lock()</span><br><span class="line">lock3.acquire()</span><br><span class="line"></span><br><span class="line">t1 = Task1()</span><br><span class="line">t2 = Task2()</span><br><span class="line">t3 = Task3()</span><br><span class="line"></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t3.start()</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">------Task 1 -----</span><br><span class="line">------Task 2 -----</span><br><span class="line">------Task 3 -----</span><br><span class="line">------Task 1 -----</span><br><span class="line">------Task 2 -----</span><br><span class="line">------Task 3 -----</span><br><span class="line">------Task 1 -----</span><br><span class="line">------Task 2 -----</span><br><span class="line">------Task 3 -----</span><br><span class="line">------Task 1 -----</span><br><span class="line">------Task 2 -----</span><br><span class="line">------Task 3 -----</span><br><span class="line">------Task 1 -----</span><br><span class="line">------Task 2 -----</span><br><span class="line">------Task 3 -----</span><br><span class="line">...省略...</span><br></pre></td></tr></table></figure>

<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul>
<li>可以使用互斥锁完成多个任务，有序的进程工作，这就是线程的同步</li>
</ul>
<h2 id="生产者与消费者模式"><a href="#生产者与消费者模式" class="headerlink" title="生产者与消费者模式"></a>生产者与消费者模式</h2><p>Python的Queue模块中提供了同步的、线程安全的队列类，包括FIFO（先入先出)队列<strong>Queue</strong>，LIFO（后入先出）队列<strong>LifoQueue</strong>，和优先级队列<strong>PriorityQueue</strong>。这些队列都实现了锁原语（可以理解为原子操作，即要么不做，要么就做完），能够在多线程中直接使用。可以使用队列来实现线程间的同步。</p>
<p>用FIFO队列实现上述生产者与消费者问题的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#python2中</span></span><br><span class="line"><span class="comment"># from Queue import Queue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python3中</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> queue</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> queue.qsize() &lt; <span class="number">1000</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">                    count = count +<span class="number">1</span></span><br><span class="line">                    msg = <span class="string">'生成产品'</span>+str(count)</span><br><span class="line">                    queue.put(msg)</span><br><span class="line">                    print(msg)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> queue</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> queue.qsize() &gt; <span class="number">100</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                    msg = self.name + <span class="string">'消费了 '</span>+queue.get()</span><br><span class="line">                    print(msg)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    queue = Queue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">        queue.put(<span class="string">'初始产品'</span>+str(i))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        p = Producer()</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        c = Consumer()</span><br><span class="line">        c.start()</span><br></pre></td></tr></table></figure>

<h3 id="Queue的说明"><a href="#Queue的说明" class="headerlink" title="Queue的说明"></a>Queue的说明</h3><ol>
<li>对于Queue，在多线程通信之间扮演重要的角色</li>
<li>添加数据到队列中，使用put()方法</li>
<li>从队列中取数据，使用get()方法</li>
<li>判断队列中是否还有数据，使用qsize()方法</li>
</ol>
<h3 id="生产者消费者模式的说明"><a href="#生产者消费者模式的说明" class="headerlink" title="生产者消费者模式的说明"></a>生产者消费者模式的说明</h3><ul>
<li>为什么要使用生产者和消费者模式</li>
</ul>
<p>在线程世界里，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。</p>
<ul>
<li>什么是生产者消费者模式</li>
</ul>
<p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p>
<p>这个阻塞队列就是用来给生产者和消费者解耦的。纵观大多数设计模式，都会找一个第三者出来进行解耦.</p>
<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>在多线程环境下，每个线程都有自己的数据。一个线程使用自己的局部变量比使用全局变量好，因为局部变量只有线程自己能看见，不会影响其他线程，而全局变量的修改必须加锁。</p>
<h3 id="1-使用函数传参的方法"><a href="#1-使用函数传参的方法" class="headerlink" title="1. 使用函数传参的方法"></a>1. 使用函数传参的方法</h3><p>但是局部变量也有问题，就是在函数调用的时候，传递起来很麻烦：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_student</span><span class="params">(name)</span>:</span></span><br><span class="line">    std = Student(name)</span><br><span class="line">    <span class="comment"># std是局部变量，但是每个函数都要用它，因此必须传进去：</span></span><br><span class="line">    do_task_1(std)</span><br><span class="line">    do_task_2(std)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_task_1</span><span class="params">(std)</span>:</span></span><br><span class="line">    do_subtask_1(std)</span><br><span class="line">    do_subtask_2(std)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_task_2</span><span class="params">(std)</span>:</span></span><br><span class="line">    do_subtask_2(std)</span><br><span class="line">    do_subtask_2(std)</span><br></pre></td></tr></table></figure>

<p>每个函数一层一层调用都这么传参数那还得了？用全局变量？也不行，因为每个线程处理不同的Student对象，不能共享。</p>
<h3 id="2-使用全局字典的方法"><a href="#2-使用全局字典的方法" class="headerlink" title="2. 使用全局字典的方法"></a>2. 使用全局字典的方法</h3><p>如果用一个全局dict存放所有的Student对象，然后以thread自身作为key获得线程对应的Student对象如何？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">global_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">std_thread</span><span class="params">(name)</span>:</span></span><br><span class="line">    std = Student(name)</span><br><span class="line">    <span class="comment"># 把std放到全局变量global_dict中：</span></span><br><span class="line">    global_dict[threading.current_thread()] = std</span><br><span class="line">    do_task_1()</span><br><span class="line">    do_task_2()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_task_1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 不传入std，而是根据当前线程查找：</span></span><br><span class="line">    std = global_dict[threading.current_thread()]</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_task_2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 任何函数都可以查找出当前线程的std变量：</span></span><br><span class="line">    std = global_dict[threading.current_thread()]</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>这种方式理论上是可行的，它最大的优点是消除了std对象在每层函数中的传递问题，但是，每个函数获取std的代码有点low。</p>
<p>有没有更简单的方式？</p>
<h3 id="3-使用ThreadLocal的方法"><a href="#3-使用ThreadLocal的方法" class="headerlink" title="3. 使用ThreadLocal的方法"></a>3. 使用ThreadLocal的方法</h3><p>ThreadLocal应运而生，不用查找dict，ThreadLocal帮你自动做这件事：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建全局ThreadLocal对象:</span></span><br><span class="line">local_school = threading.local()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取当前线程关联的student:</span></span><br><span class="line">    std = local_school.student</span><br><span class="line">    print(<span class="string">'Hello, %s (in %s)'</span> % (std, threading.current_thread().name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_thread</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="comment"># 绑定ThreadLocal的student:</span></span><br><span class="line">    local_school.student = name</span><br><span class="line">    process_student()</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target= process_thread, args=(<span class="string">'dongGe'</span>,), name=<span class="string">'Thread-A'</span>)</span><br><span class="line">t2 = threading.Thread(target= process_thread, args=(<span class="string">'老王'</span>,), name=<span class="string">'Thread-B'</span>)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello, dongGe (in Thread-A)</span><br><span class="line">Hello, 老王 (in Thread-B)</span><br></pre></td></tr></table></figure>

<ul>
<li>​    说明</li>
</ul>
<p>全局变量local_school就是一个ThreadLocal对象，每个Thread对它都可以读写student属性，但互不影响。你可以把local_school看成全局变量，但每个属性如local_school.student都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，ThreadLocal内部会处理。</p>
<p>可以理解为全局变量local_school是一个dict，不但可以用local_school.student，还可以绑定其他变量，如local_school.teacher等等。</p>
<p>ThreadLocal最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。</p>
<h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h3><p>一个ThreadLocal变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。ThreadLocal解决了参数在一个线程中各个函数之间互相传递的问题</p>
<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><ul>
<li>同步调用就是你 喊 你朋友吃饭 ，你朋友在忙 ，你就一直在那等，等你朋友忙完了 ，你们一起去</li>
<li>异步调用就是你 喊 你朋友吃饭 ，你朋友说知道了 ，待会忙完去找你 ，你就去做别的了。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"---进程池中的进程---pid=%d,ppid=%d--"</span>%(os.getpid(),os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"----%d---"</span>%i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hahah"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(args)</span>:</span></span><br><span class="line">    print(<span class="string">"---callback func--pid=%d"</span>%os.getpid())</span><br><span class="line">    print(<span class="string">"---callback func--args=%s"</span>%args)</span><br><span class="line"></span><br><span class="line">pool = Pool(<span class="number">3</span>)</span><br><span class="line">pool.apply_async(func=test,callback=test2)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"----主进程-pid=%d----"</span>%os.getpid())</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---进程池中的进程---pid&#x3D;9401,ppid&#x3D;9400--</span><br><span class="line">----0---</span><br><span class="line">----1---</span><br><span class="line">----2---</span><br><span class="line">---callback func--pid&#x3D;9400</span><br><span class="line">---callback func--args&#x3D;hahah</span><br><span class="line">----主进程-pid&#x3D;9400----</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python-base</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础知识06</title>
    <url>/2018/10/25/python%E7%9B%B8%E5%85%B3/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8606/</url>
    <content><![CDATA[<h1 id="内建属性"><a href="#内建属性" class="headerlink" title="内建属性"></a>内建属性</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">39</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    ...:     <span class="keyword">pass</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: dir(Person)</span><br><span class="line">Out[<span class="number">40</span>]:</span><br><span class="line">[<span class="string">'__class__'</span>,</span><br><span class="line"> <span class="string">'__delattr__'</span>,</span><br><span class="line"> <span class="string">'__dict__'</span>,</span><br><span class="line"> <span class="string">'__dir__'</span>,</span><br><span class="line"> <span class="string">'__doc__'</span>,</span><br><span class="line"> <span class="string">'__eq__'</span>,</span><br><span class="line"> <span class="string">'__format__'</span>,</span><br><span class="line"> <span class="string">'__ge__'</span>,</span><br><span class="line"> <span class="string">'__getattribute__'</span>,</span><br><span class="line"> <span class="string">'__gt__'</span>,</span><br><span class="line"> <span class="string">'__hash__'</span>,</span><br><span class="line"> <span class="string">'__init__'</span>,</span><br><span class="line"> <span class="string">'__init_subclass__'</span>,</span><br><span class="line"> <span class="string">'__le__'</span>,</span><br><span class="line"> <span class="string">'__lt__'</span>,</span><br><span class="line"> <span class="string">'__module__'</span>,</span><br><span class="line"> <span class="string">'__ne__'</span>,</span><br><span class="line"> <span class="string">'__new__'</span>,</span><br><span class="line"> <span class="string">'__reduce__'</span>,</span><br><span class="line"> <span class="string">'__reduce_ex__'</span>,</span><br><span class="line"> <span class="string">'__repr__'</span>,</span><br><span class="line"> <span class="string">'__setattr__'</span>,</span><br><span class="line"> <span class="string">'__sizeof__'</span>,</span><br><span class="line"> <span class="string">'__str__'</span>,</span><br><span class="line"> <span class="string">'__subclasshook__'</span>,</span><br><span class="line"> <span class="string">'__weakref__'</span>]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<blockquote>
<p>经典类(旧式类),早期如果没有要继承的父类,继承里空着不写的类</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#py2中无继承父类，称之经典类,py3中已默认继承object</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>子类没有实现<code>__init__</code>方法时，默认自动调用父类的。 如定义<code>__init__</code>方法时，需自己手动调用父类的<code>__init__</code>方法</p>
<table>
<thead>
<tr>
<th>常用专有属性</th>
<th>说明</th>
<th>触发方式</th>
</tr>
</thead>
<tbody><tr>
<td><code>__init__</code></td>
<td>构造初始化函数</td>
<td>创建实例后,赋值时使用,在<code>__new__</code>后</td>
</tr>
<tr>
<td><code>__new__</code></td>
<td>生成实例所需属性</td>
<td>创建实例时</td>
</tr>
<tr>
<td><code>__class__</code></td>
<td>实例所在的类</td>
<td>实例.<code>__class__</code></td>
</tr>
<tr>
<td><code>__str__</code></td>
<td>实例字符串表示,可读性</td>
<td>print(类实例),如没实现，使用repr结果</td>
</tr>
<tr>
<td><code>__repr__</code></td>
<td>实例字符串表示,准确性</td>
<td>类实例 回车 或者 print(repr(类实例))</td>
</tr>
<tr>
<td><code>__del__</code></td>
<td>析构</td>
<td>del删除实例</td>
</tr>
<tr>
<td><code>__dict__</code></td>
<td>实例自定义属性</td>
<td><code>vars(实例.__dict__)</code>   返回字典</td>
</tr>
<tr>
<td><code>__doc__</code></td>
<td>类文档,子类不继承</td>
<td>help(类或实例)</td>
</tr>
<tr>
<td><code>__getattribute__</code></td>
<td>属性访问拦截器</td>
<td>访问实例属性时</td>
</tr>
<tr>
<td><code>__bases__</code></td>
<td>类的所有父类构成元素</td>
<td><code>类名.__bases__</code> <strong>返回父类元组</strong></td>
</tr>
</tbody></table>
<p><code>__getattribute__</code>例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">It</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,subject1)</span>:</span></span><br><span class="line">        self.subject1 = subject1</span><br><span class="line">        self.subject2 = <span class="string">'cpp'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#属性访问时拦截器，打log</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self,obj)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> obj == <span class="string">'subject1'</span>:</span><br><span class="line">            print(<span class="string">'log subject1'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'redirect python'</span></span><br><span class="line">        <span class="keyword">else</span>:   <span class="comment">#测试时注释掉这2行，将找不到subject2</span></span><br><span class="line">            <span class="keyword">return</span> object.__getattribute__(self,obj)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'this is Itcast'</span>)</span><br><span class="line"></span><br><span class="line">s = It(<span class="string">"python"</span>)</span><br><span class="line">print(s.subject1)</span><br><span class="line">print(s.subject2)</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">log subject1</span><br><span class="line">redirect python</span><br><span class="line">cpp</span><br></pre></td></tr></table></figure>

<ul>
<li>getattribute__的坑</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self,obj)</span>:</span></span><br><span class="line">        print(<span class="string">"---test---"</span>)</span><br><span class="line">        <span class="keyword">if</span> obj.startswith(<span class="string">"a"</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hahha"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"heihei"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t.Person()</span><br><span class="line"></span><br><span class="line">t.a <span class="comment">#返回hahha</span></span><br><span class="line"></span><br><span class="line">t.b <span class="comment">#会让程序死掉</span></span><br><span class="line">    <span class="comment">#原因是：当t.b执行时，会调用Person类中定义的__getattribute__方法，但是在这个方法的执行过程中</span></span><br><span class="line">    <span class="comment">#if条件不满足，所以 程序执行else里面的代码，即return self.test  问题就在这，因为return 需要把</span></span><br><span class="line">    <span class="comment">#self.test的值返回，那么首先要获取self.test的值，因为self此时就是t这个对象，所以self.test就是</span></span><br><span class="line">    <span class="comment">#t.test 此时要获取t这个对象的test属性，那么就会跳转到__getattribute__方法去执行，即此时产</span></span><br><span class="line">    <span class="comment">#生了递归调用，由于这个递归过程中 没有判断什么时候推出，所以这个程序会永无休止的运行下去，又因为</span></span><br><span class="line">    <span class="comment">#每次调用函数，就需要保存一些数据，那么随着调用的次数越来越多，最终内存吃光，所以程序 崩溃</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># 注意：以后不要在__getattribute__方法中调用self.xxxx</span></span><br></pre></td></tr></table></figure>

<h1 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h1><p>Build-in Function,启动python解释器，输入<code>dir(__builtins__)</code>, 可以看到很多python解释器启动后默认加载的属性和函数，这些函数称之为内建函数， 这些函数因为在编程时使用较多，cpython解释器用c语言实现了这些函数，启动解释器 时默认加载。</p>
<p>这些函数数量众多，不宜记忆，开发时不是都用到的，待用到时再help(function), 查看如何使用，或结合百度查询即可，在这里介绍些常用的内建函数。    </p>
<h2 id="range函数"><a href="#range函数" class="headerlink" title="range函数"></a>range函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">range(stop) -&gt; list of integers</span><br><span class="line">range(start, stop[, step]) -&gt; list of integers</span><br></pre></td></tr></table></figure>

<ul>
<li>start:计数从start开始。默认是从0开始。例如range（5）等价于range（0， 5）;</li>
<li>stop:到stop结束，但不包括stop.例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</li>
<li>step:每次跳跃的间距，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for i in range(50,101,3):</span></span><br><span class="line"><span class="comment">#  print(i)</span></span><br><span class="line"></span><br><span class="line">a = range(<span class="number">5</span>)</span><br><span class="line">print(list(a)) <span class="comment"># [0,1,2,3,4]</span></span><br></pre></td></tr></table></figure>

<h2 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h2><p>map函数会根据提供的函数对指定序列做映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map(...)</span><br><span class="line">    map(function, sequence[, sequence, ...]) -&gt; list</span><br></pre></td></tr></table></figure>

<ul>
<li>function:是一个函数</li>
<li>sequence:是一个或多个序列,取决于function需要几个参数</li>
<li>返回值是一个<strong>list</strong></li>
</ul>
<p>参数序列中的每一个元素分别调用function函数，返回包含每次function函数返回值的list。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#函数需要一个参数</span></span><br><span class="line">map(<span class="keyword">lambda</span> x: x*x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">#结果为:[1, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#函数需要两个参数</span></span><br><span class="line">map(<span class="keyword">lambda</span> x, y: x+y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="comment">#结果为:[5, 7, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">( x, y )</span>:</span>  </span><br><span class="line">    <span class="keyword">return</span> (x,y)</span><br><span class="line"></span><br><span class="line">l1 = [ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ]  </span><br><span class="line">l2 = [ <span class="string">'Sun'</span>, <span class="string">'M'</span>, <span class="string">'T'</span>, <span class="string">'W'</span>, <span class="string">'T'</span>, <span class="string">'F'</span>, <span class="string">'S'</span> ]</span><br><span class="line">l3 = map( f1, l1, l2 ) </span><br><span class="line">print(list(l3))</span><br><span class="line"><span class="comment">#结果为:[(0, 'Sun'), (1, 'M'), (2, 'T'), (3, 'W'), (4, 'T'), (5, 'F'), (6, 'S')]</span></span><br></pre></td></tr></table></figure>

<h2 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h2><p>filter函数会对指定序列执行过滤操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filter(...)</span><br><span class="line">    filter(function or None, sequence) -&gt; list, tuple, or string</span><br><span class="line"></span><br><span class="line">    Return those items of sequence for which function(item) is true.  If</span><br><span class="line">    function is None, return the items that are true.  If sequence is a tuple</span><br><span class="line">    or string, return the same type, else return a list.</span><br></pre></td></tr></table></figure>

<ul>
<li>function:接受一个参数，返回布尔值True或False</li>
<li>sequence:序列可以是str，tuple，list</li>
</ul>
<p>filter函数会对序列参数sequence中的每个元素调用function函数，最后返回的结果包含调用结果为True的元素。</p>
<p>返回值的类型和参数sequence的类型相同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filter(lambda x: x%2, [1, 2, 3, 4])</span><br><span class="line">[1, 3]</span><br><span class="line"></span><br><span class="line">filter(None, &quot;she&quot;)</span><br><span class="line">&#39;she&#39;</span><br></pre></td></tr></table></figure>

<h2 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h2><p>reduce函数，reduce函数会对参数序列中元素进行累积</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reduce(...)</span><br><span class="line">    reduce(function, sequence[, initial]) -&gt; value</span><br><span class="line"></span><br><span class="line">    Apply a function of two arguments cumulatively to the items of a sequence,</span><br><span class="line">    from left to right, so as to reduce the sequence to a single value.</span><br><span class="line">    For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates</span><br><span class="line">    ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items</span><br><span class="line">    of the sequence in the calculation, and serves as a default when the</span><br><span class="line">    sequence is empty.</span><br></pre></td></tr></table></figure>

<ul>
<li>function:该函数有两个参数</li>
<li>sequence:序列可以是str，tuple，list</li>
<li>initial:固定初始值</li>
</ul>
<p>reduce依次从sequence中取一个元素，和上一次调用function的结果做参数再次调用function。 第一次调用function时，如果提供initial参数，会以sequence中的第一个元素和initial 作为参数调用function，否则会以序列sequence中的前两个元素做参数调用function。 注意function函数不能为None。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reduce(lambda x, y: x+y, [1,2,3,4])</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line">reduce(lambda x, y: x+y, [1,2,3,4], 5)</span><br><span class="line">15</span><br><span class="line"></span><br><span class="line">reduce(lambda x, y: x+y, [&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;], &#39;dd&#39;)</span><br><span class="line">&#39;ddaabbcc&#39;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在Python3里,reduce函数已经被从全局名字空间里移除了, 它现在被放置在<strong>functools</strong>模块里用的话要先引入： <code>from functools import reduce</code></p>
</blockquote>
<h2 id="sorted函数"><a href="#sorted函数" class="headerlink" title="sorted函数"></a>sorted函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sorted(...)</span><br><span class="line">    sorted(iterable, cmp=None, key=None, reverse=False) --&gt; new sorted list</span><br><span class="line">   </span><br><span class="line">In [<span class="number">58</span>]: sorted([<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>])</span><br><span class="line">Out[<span class="number">58</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: sorted([<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>],reverse=<span class="literal">True</span>)</span><br><span class="line">Out[<span class="number">59</span>]: [<span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h1 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h1><p>集合与之前列表、元组类似，可以存储多个数据，但是这些数据是不重复的</p>
<p>集合对象还支持union(联合), intersection(交), difference(差)和sysmmetric_difference(对称差集)等数学运算.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = set(<span class="string">'abcd'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">&#123;<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(x)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">set</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; </span></span><br><span class="line"><span class="class">&gt;&gt;&gt; </span></span><br><span class="line">&gt;&gt;&gt; y = set(['h','e','l','l','o'])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">&#123;<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'o'</span>, <span class="string">'l'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = set(<span class="string">'spam'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line">&#123;<span class="string">'s'</span>, <span class="string">'a'</span>, <span class="string">'m'</span>, <span class="string">'p'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y&amp;z <span class="comment">#交集</span></span><br><span class="line">set()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x&amp;z <span class="comment">#交集</span></span><br><span class="line">&#123;<span class="string">'a'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x|y <span class="comment">#并集</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'d'</span>, <span class="string">'l'</span>, <span class="string">'c'</span>, <span class="string">'h'</span>, <span class="string">'o'</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x-y <span class="comment">#差集</span></span><br><span class="line">&#123;<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x^z <span class="comment">#对称差集(在x或z中，但不会同时出现在二者中)</span></span><br><span class="line">&#123;<span class="string">'m'</span>, <span class="string">'d'</span>, <span class="string">'s'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'p'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(x)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(y)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(z)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<h1 id="functools"><a href="#functools" class="headerlink" title="functools"></a>functools</h1><p>functools 是python2.5被引人的,一些工具函数放在此包里。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">print(dir(functools))</span><br><span class="line"><span class="comment"># 很多方法</span></span><br></pre></td></tr></table></figure>

<p>python3中增加了更多工具函数，做业务开发时大多情况下用不到，此处介绍使用频率较高的2个函数。</p>
<h2 id="partial函数-偏函数"><a href="#partial函数-偏函数" class="headerlink" title="partial函数(偏函数)"></a>partial函数(偏函数)</h2><p>把一个函数的某些参数设置默认值，返回一个新的函数，调用这个新函数会更简单。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showarg</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line">    print(kw)</span><br><span class="line"></span><br><span class="line">p1=functools.partial(showarg, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">p1()</span><br><span class="line">p1(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">p1(a=<span class="string">'python'</span>, b=<span class="string">'it'</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="string">'python'</span>, <span class="string">'b'</span>: <span class="string">'it'</span>&#125;</span><br><span class="line"></span><br><span class="line">p2=functools.partial(showarg, a=<span class="number">3</span>,b=<span class="string">'linux'</span>)</span><br><span class="line">p2()</span><br><span class="line">p2(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">p2(a=<span class="string">'python'</span>, b=<span class="string">'it'</span>)</span><br><span class="line">()</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="string">'linux'</span>&#125;</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="string">'linux'</span>&#125;</span><br><span class="line">()</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="string">'python'</span>, <span class="string">'b'</span>: <span class="string">'itcast'</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="wraps函数"><a href="#wraps函数" class="headerlink" title="wraps函数"></a>wraps函数</h2><p>使用装饰器时，有一些细节需要被注意。例如，被装饰后的函数其实已经是另外一个函数了（函数名等函数属性会发生改变）。</p>
<p>添加后由于函数名和函数的doc发生了改变，对测试结果有一些影响，例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">note</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"note function"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">"wrapper function"</span></span><br><span class="line">        print(<span class="string">'note something'</span>)</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@note</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"test function"</span></span><br><span class="line">    print(<span class="string">'I am test'</span>)</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line">print(test.__doc__)</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">note something</span><br><span class="line">I am test</span><br><span class="line">wrapper function</span><br></pre></td></tr></table></figure>

<p>所以，Python的functools包中提供了一个叫wraps的装饰器来消除这样的副作用。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">note</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"note function"</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">"wrapper function"</span></span><br><span class="line">        print(<span class="string">'note something'</span>)</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@note</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"test function"</span></span><br><span class="line">    print(<span class="string">'I am test'</span>)</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line">print(test.__doc__)</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">note something</span><br><span class="line">I am test</span><br><span class="line">test function</span><br></pre></td></tr></table></figure>

<h1 id="模块进阶"><a href="#模块进阶" class="headerlink" title="模块进阶"></a>模块进阶</h1><p>Python有一套很有用的标准库(standard library)。标准库会随着Python解释器，一起安装在你的电脑中的。 它是Python的一个组成部分。这些标准库是Python为你准备好的利器，可以让编程事半功倍。</p>
<h2 id="常用标准库"><a href="#常用标准库" class="headerlink" title="常用标准库"></a>常用标准库</h2><table>
<thead>
<tr>
<th>标准库</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>builtins</td>
<td>内建函数默认加载</td>
</tr>
<tr>
<td>os</td>
<td>操作系统接口</td>
</tr>
<tr>
<td>sys</td>
<td>Python自身的运行环境</td>
</tr>
<tr>
<td>functools</td>
<td>常用的工具</td>
</tr>
<tr>
<td>json</td>
<td>编码和解码 JSON 对象</td>
</tr>
<tr>
<td>logging</td>
<td>记录日志，调试</td>
</tr>
<tr>
<td>multiprocessing</td>
<td>多进程</td>
</tr>
<tr>
<td>threading</td>
<td>多线程</td>
</tr>
<tr>
<td>copy</td>
<td>拷贝</td>
</tr>
<tr>
<td>time</td>
<td>时间</td>
</tr>
<tr>
<td>datetime</td>
<td>日期和时间</td>
</tr>
<tr>
<td>calendar</td>
<td>日历</td>
</tr>
<tr>
<td>hashlib</td>
<td>加密算法</td>
</tr>
<tr>
<td>random</td>
<td>生成随机数</td>
</tr>
<tr>
<td>re</td>
<td>字符串正则匹配</td>
</tr>
<tr>
<td>socket</td>
<td>标准的 BSD Sockets API</td>
</tr>
<tr>
<td>shutil</td>
<td>文件和目录管理</td>
</tr>
<tr>
<td>glob</td>
<td>基于文件通配符搜索</td>
</tr>
</tbody></table>
<h2 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">m = hashlib.md5()   <span class="comment">#创建hash对象，md5:(message-Digest Algorithm 5)消息摘要算法,得出一个128位的密文</span></span><br><span class="line"><span class="keyword">print</span> m             <span class="comment">#&lt;md5 HASH object&gt;</span></span><br><span class="line">m.update(<span class="string">'itcast'</span>)  <span class="comment">#更新哈希对象以字符串参数</span></span><br><span class="line"><span class="keyword">print</span> m.hexdigest() <span class="comment">#返回十六进制数字字符串</span></span><br></pre></td></tr></table></figure>

<h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>用于注册、登录….</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">KEY_VALUE = <span class="string">'Itcast'</span></span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">str = <span class="string">'%s%s'</span> % (KEY_VALUE,now.strftime(<span class="string">"%Y%m%d"</span>))</span><br><span class="line">m.update(str.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">value = m.hexdigest()</span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span>ad2d682e3529dac50e586fee8dc05c0</span><br></pre></td></tr></table></figure>

<p>更多标准库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://python.usyiyi.cn/translate/python_352/library/index.html</span><br></pre></td></tr></table></figure>

<h2 id="常用扩展库"><a href="#常用扩展库" class="headerlink" title="常用扩展库"></a>常用扩展库</h2><table>
<thead>
<tr>
<th>扩展库</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>requests</td>
<td>使用的是 urllib3，继承了urllib2的所有特性</td>
</tr>
<tr>
<td>urllib</td>
<td>基于http的高层库</td>
</tr>
<tr>
<td>scrapy</td>
<td>爬虫</td>
</tr>
<tr>
<td>beautifulsoup4</td>
<td>HTML/XML的解析器</td>
</tr>
<tr>
<td>celery</td>
<td>分布式任务调度模块</td>
</tr>
<tr>
<td>redis</td>
<td>缓存</td>
</tr>
<tr>
<td>Pillow(PIL)</td>
<td>图像处理</td>
</tr>
<tr>
<td>xlsxwriter</td>
<td>仅写excle功能,支持xlsx</td>
</tr>
<tr>
<td>xlwt</td>
<td>仅写excle功能,支持xls ,2013或更早版office</td>
</tr>
<tr>
<td>xlrd</td>
<td>仅读excle功能</td>
</tr>
<tr>
<td>elasticsearch</td>
<td>全文搜索引擎</td>
</tr>
<tr>
<td>pymysql</td>
<td>数据库连接库</td>
</tr>
<tr>
<td>mongoengine/pymongo</td>
<td>mongodbpython接口</td>
</tr>
<tr>
<td>matplotlib</td>
<td>画图</td>
</tr>
<tr>
<td>numpy/scipy</td>
<td>科学计算</td>
</tr>
<tr>
<td>django/tornado/flask</td>
<td>web框架</td>
</tr>
<tr>
<td>xmltodict</td>
<td>xml 转 dict</td>
</tr>
<tr>
<td>SimpleHTTPServer</td>
<td>简单地HTTP Server,不使用Web框架</td>
</tr>
<tr>
<td>gevent</td>
<td>基于协程的Python网络库</td>
</tr>
<tr>
<td>fabric</td>
<td>系统管理</td>
</tr>
<tr>
<td>pandas</td>
<td>数据处理库</td>
</tr>
<tr>
<td>scikit-learn</td>
<td>机器学习库</td>
</tr>
</tbody></table>
<p>就可以运行起来静态服务。平时用它预览和下载文件太方便了。</p>
<p>在终端中输入命令：</p>
<p>python2中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer PORT</span><br></pre></td></tr></table></figure>

<p>python3中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m http.server PORT</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
        <tag>python-base</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础知识05</title>
    <url>/2018/10/25/python%E7%9B%B8%E5%85%B3/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8605/</url>
    <content><![CDATA[<h2 id="python是动态语言"><a href="#python是动态语言" class="headerlink" title="python是动态语言"></a>python是动态语言</h2><h3 id="1-动态语言的定义"><a href="#1-动态语言的定义" class="headerlink" title="1. 动态语言的定义"></a>1. 动态语言的定义</h3><p><code>动态编程语言</code> 是 <code>高级程序设计语言</code> 的一个类别，在计算机科学领域已被广泛应用。它是一类 在<code>运行时可以改变其结构</code>的语言 ：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。动态语言目前非常具有活力。例如JavaScript便是一个动态语言，除此之外如 PHP 、 Ruby 、 Python 等也都属于动态语言，而 C 、 C++ 等语言则不属于动态语言。—-来自 维基百科</p>
<a id="more"></a>

<h3 id="2-运行的过程中给对象绑定-添加-属性"><a href="#2-运行的过程中给对象绑定-添加-属性" class="headerlink" title="2. 运行的过程中给对象绑定(添加)属性"></a>2. 运行的过程中给对象绑定(添加)属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name = None, age = None)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P = Person(<span class="string">"小明"</span>, <span class="string">"24"</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>在这里，我们定义了1个类Person，在这个类里，定义了两个初始属性name和age，但是人还有性别啊！如果这个类不是你写的是不是你会尝试访问性别这个属性呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>P.sex = <span class="string">"male"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P.sex</span><br><span class="line"><span class="string">'male'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>这时候就发现问题了，我们定义的类里面没有sex这个属性啊！怎么回事呢？ 这就是动态语言的魅力和坑！ 这里 实际上就是 动态给实例绑定属性！</p>
<h3 id="3-运行的过程中给类绑定-添加-属性"><a href="#3-运行的过程中给类绑定-添加-属性" class="headerlink" title="3. 运行的过程中给类绑定(添加)属性"></a>3. 运行的过程中给类绑定(添加)属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>P1 = Person(<span class="string">"小丽"</span>, <span class="string">"25"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P1.sex</span><br><span class="line">  File <span class="string">"&lt;pyshell#21&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    P1.sex</span><br><span class="line">AttributeError: Person instance has no attribute <span class="string">'sex'</span></span><br></pre></td></tr></table></figure>

<p>我们尝试打印P1.sex，发现报错，P1没有sex这个属性！—- 给P这个实例绑定属性对P1这个实例不起作用！ 那我们要给所有的Person的实例加上 sex属性怎么办呢？ 答案就是直接给Person绑定属性！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt; Person.sex = <span class="literal">None</span> <span class="comment">#给类Person添加一个属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P1 = Person(<span class="string">"小丽"</span>, <span class="string">"25"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(P1.sex) <span class="comment">#如果P1这个实例对象中没有sex属性的话，那么就会访问它的类属性</span></span><br><span class="line"><span class="literal">None</span> <span class="comment">#可以看到没有出现异常</span></span><br></pre></td></tr></table></figure>

<h3 id="4-运行的过程中给类绑定-添加-方法"><a href="#4-运行的过程中给类绑定-添加-方法" class="headerlink" title="4. 运行的过程中给类绑定(添加)方法"></a>4. 运行的过程中给类绑定(添加)方法</h3><p>我们直接给Person绑定sex这个属性，重新实例化P1后，P1就有sex这个属性了！ 那么function呢？怎么绑定？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name = None, age = None)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"eat food"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, speed)</span>:</span></span><br><span class="line">    print(<span class="string">"%s在移动, 速度是 %d km/h"</span>%(self.name, speed))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P = Person(<span class="string">"老王"</span>, <span class="number">24</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P.eat()</span><br><span class="line">eat food</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P.run()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#5&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    P.run()</span><br><span class="line">AttributeError: Person instance has no attribute <span class="string">'run'</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> types</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P.run = types.MethodType(run, P)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P.run(<span class="number">180</span>)</span><br><span class="line">老王在移动,速度是 <span class="number">180</span> km/h</span><br></pre></td></tr></table></figure>

<p>既然给类添加方法，是使用<code>类名.方法名 = xxxx</code>，那么给对象添加一个方法也是类似的<code>对象.方法名 = xxxx</code></p>
<p><strong>完整的代码如下：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义了一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name = None, age = None)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"eat food"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个实例方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, speed)</span>:</span></span><br><span class="line">    print(<span class="string">"%s在移动, 速度是 %d km/h"</span>%(self.name, speed))</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个类方法</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">    cls.num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个静态方法</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testStatic</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"---static method----"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个实例对象</span></span><br><span class="line">P = Person(<span class="string">"老王"</span>, <span class="number">24</span>)</span><br><span class="line"><span class="comment">#调用在class中的方法</span></span><br><span class="line">P.eat()</span><br><span class="line"></span><br><span class="line"><span class="comment">#给这个对象添加实例方法</span></span><br><span class="line">P.run = types.MethodType(run, P)</span><br><span class="line"><span class="comment">#调用实例方法</span></span><br><span class="line">P.run(<span class="number">180</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#给Person类绑定类方法</span></span><br><span class="line">Person.testClass = testClass</span><br><span class="line"><span class="comment">#调用类方法</span></span><br><span class="line">print(Person.num)</span><br><span class="line">Person.testClass()</span><br><span class="line">print(Person.num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#给Person类绑定静态方法</span></span><br><span class="line">Person.testStatic = testStatic</span><br><span class="line"><span class="comment">#调用静态方法</span></span><br><span class="line">Person.testStatic()</span><br></pre></td></tr></table></figure>

<h3 id="5-运行的过程中删除属性、方法"><a href="#5-运行的过程中删除属性、方法" class="headerlink" title="5. 运行的过程中删除属性、方法"></a>5. 运行的过程中删除属性、方法</h3><p>删除的方法:</p>
<ol>
<li>del 对象.属性名</li>
<li>delattr(对象, “属性名”)</li>
</ol>
<p>通过以上例子可以得出一个结论：相对于动态语言，静态语言具有严谨性！所以，玩动态语言的时候，小心动态的坑！</p>
<p>那么怎么避免这种情况呢？ 请使用<strong>slots</strong>，</p>
<h3 id="6-slots"><a href="#6-slots" class="headerlink" title="6. slots"></a>6. <strong>slots</strong></h3><p>现在我们终于明白了，动态语言与静态语言的不同</p>
<p>动态语言：可以在运行的过程中，修改代码</p>
<p>静态语言：编译时已经确定好代码，运行过程中不能修改</p>
<p>如果我们想要限制实例的属性怎么办？比如，只允许对Person实例添加name和age属性。</p>
<p>为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的<strong>slots</strong>变量，来限制该class实例能添加的属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">"name"</span>, <span class="string">"age"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P = Person()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P.name = <span class="string">"老王"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P.age = <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>P.score = <span class="number">100</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#3&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: Person instance has no attribute <span class="string">'score'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意:</li>
</ul>
<ul>
<li>使用<strong>slots</strong>要注意，<strong>slots</strong>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">67</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(Person)</span>:</span></span><br><span class="line">    ...:     <span class="keyword">pass</span></span><br><span class="line">In [<span class="number">68</span>]: t = Test()</span><br><span class="line">In [<span class="number">69</span>]: t.score = <span class="number">100</span></span><br></pre></td></tr></table></figure>

<h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><h3 id="1-什么是生成器"><a href="#1-什么是生成器" class="headerlink" title="1. 什么是生成器"></a>1. 什么是生成器</h3><p>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</p>
<h3 id="2-创建生成器方法1"><a href="#2-创建生成器方法1" class="headerlink" title="2. 创建生成器方法1"></a>2. 创建生成器方法1</h3><p>要创建一个生成器，有很多种方法。第一种方法很简单，只要把一个列表生成式的 [ ] 改成 ( )</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">15</span>]: L = [ x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: L</span><br><span class="line">Out[<span class="number">16</span>]: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: G = ( x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: G</span><br><span class="line">Out[<span class="number">18</span>]: &lt;generator object &lt;genexpr&gt; at <span class="number">0x7f626c132db0</span>&gt;</span><br></pre></td></tr></table></figure>

<p>创建 L 和 G 的区别仅在于最外层的 [ ] 和 ( ) ， L 是一个列表，而 G 是一个生成器。我们可以直接打印出L的每一个元素，但我们怎么打印出G的每一个元素呢？如果要一个一个打印出来，可以通过 next() 函数获得生成器的下一个返回值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">19</span>]: next(G)</span><br><span class="line">Out[<span class="number">19</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: next(G)</span><br><span class="line">Out[<span class="number">20</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: next(G)</span><br><span class="line">Out[<span class="number">21</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: next(G)</span><br><span class="line">Out[<span class="number">22</span>]: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: next(G)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: next(G)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-24</span><span class="number">-380e167</span>d6934&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 next(G)</span><br><span class="line">StopIteration:</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">26</span>]: G = ( x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: <span class="keyword">for</span> x <span class="keyword">in</span> G:</span><br><span class="line">   ....:     print(x)   </span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>生成器保存的是算法，每次调用 next(G) ，就计算出 G 的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出 StopIteration 的异常。当然，这种不断调用 next() 实在是太变态了，正确的方法是使用 for 循环，因为生成器也是可迭代对象。所以，我们创建了一个生成器后，基本上永远不会调用 next() ，而是通过 for 循环来迭代它，并且不需要关心 StopIteration 异常。</p>
<h3 id="3-创建生成器方法2"><a href="#3-创建生成器方法2" class="headerlink" title="3. 创建生成器方法2"></a>3. 创建生成器方法2</h3><p>generator非常强大。如果推算的算法比较复杂，用类似列表生成式的 for 循环无法实现的时候，还可以用函数来实现。</p>
<p>比如，著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到：</p>
<p>1, 1, 2, 3, 5, 8, 13, 21, 34, …</p>
<p>斐波拉契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">28</span>]: <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(times)</span>:</span></span><br><span class="line">   ....:     n = <span class="number">0</span></span><br><span class="line">   ....:     a,b = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">   ....:     <span class="keyword">while</span> n&lt;times:</span><br><span class="line">   ....:         print(b)</span><br><span class="line">   ....:         a,b = b,a+b</span><br><span class="line">   ....:         n+=<span class="number">1</span></span><br><span class="line">   ....:     <span class="keyword">return</span> <span class="string">'done'</span></span><br><span class="line">In [<span class="number">29</span>]: fib(<span class="number">5</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">Out[<span class="number">29</span>]: <span class="string">'done'</span></span><br></pre></td></tr></table></figure>

<p>仔细观察，可以看出，fib函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似generator。</p>
<p>也就是说，上面的函数和generator仅一步之遥。要把fib函数变成generator，只需要把print(b)改为yield b就可以了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">30</span>]: <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(times)</span>:</span></span><br><span class="line">   ....:     n = <span class="number">0</span></span><br><span class="line">   ....:     a,b = <span class="number">0</span>,<span class="number">1</span></span><br><span class="line">   ....:     <span class="keyword">while</span> n&lt;times:</span><br><span class="line">   ....:         <span class="keyword">yield</span> b</span><br><span class="line">   ....:         a,b = b,a+b</span><br><span class="line">   ....:         n+=<span class="number">1</span></span><br><span class="line">   ....:     <span class="keyword">return</span> <span class="string">'done'</span></span><br><span class="line">   ....: </span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: F = fib(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: next(F)</span><br><span class="line">Out[<span class="number">32</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: next(F)</span><br><span class="line">Out[<span class="number">33</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: next(F)</span><br><span class="line">Out[<span class="number">34</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: next(F)</span><br><span class="line">Out[<span class="number">35</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: next(F)</span><br><span class="line">Out[<span class="number">36</span>]: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: next(F)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-37</span><span class="number">-8</span>c2b02b4361a&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 next(F)</span><br><span class="line">StopIteration: done</span><br></pre></td></tr></table></figure>

<p>在上面fib 的例子，我们在循环过程中不断调用 yield ，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。同样的，把函数改成generator后，我们基本上从来不会用 next() 来获取下一个返回值，而是直接使用 for 循环来迭代：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">38</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> fib(<span class="number">5</span>):</span><br><span class="line">   ....:     print(n)</span><br><span class="line">   ....:     </span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">In [<span class="number">39</span>]:</span><br></pre></td></tr></table></figure>

<p>但是用for循环调用generator时，发现拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">39</span>]: g = fib(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   ....:     <span class="keyword">try</span>:</span><br><span class="line">   ....:         x = next(g)</span><br><span class="line">   ....:         print(<span class="string">"value:%d"</span>%x)      </span><br><span class="line">   ....:     <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">   ....:         print(<span class="string">"生成器返回值:%s"</span>%e.value)</span><br><span class="line">   ....:         <span class="keyword">break</span>   </span><br><span class="line">value:<span class="number">1</span></span><br><span class="line">value:<span class="number">1</span></span><br><span class="line">value:<span class="number">2</span></span><br><span class="line">value:<span class="number">3</span></span><br><span class="line">value:<span class="number">5</span></span><br><span class="line">生成器返回值:done</span><br></pre></td></tr></table></figure>

<h3 id="4-send"><a href="#4-send" class="headerlink" title="4. send"></a>4. send</h3><p>例子：执行到yield时，gen函数作用暂时保存，返回i的值;</p>
<p>temp接收下次c.send(“python”)，send发送过来的值，c.next()等价c.send(None)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">10</span>]: <span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></span><br><span class="line">   ....:     i = <span class="number">0</span></span><br><span class="line">   ....:     <span class="keyword">while</span> i&lt;<span class="number">5</span>:</span><br><span class="line">   ....:         temp = <span class="keyword">yield</span> i</span><br><span class="line">   ....:         print(temp)</span><br><span class="line">   ....:         i+=<span class="number">1</span></span><br><span class="line">   ....:</span><br></pre></td></tr></table></figure>

<h4 id="使用next函数"><a href="#使用next函数" class="headerlink" title="使用next函数"></a>使用next函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">11</span>]: f = gen()</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: next(f)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-17</span><span class="number">-468</span>f0afdf1b9&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 next(f)</span><br><span class="line">StopIteration:</span><br></pre></td></tr></table></figure>

<h4 id="使用-next-方法"><a href="#使用-next-方法" class="headerlink" title="使用__next__()方法"></a>使用<code>__next__()</code>方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">18</span>]: f = gen()</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: f.__next__()</span><br><span class="line">Out[<span class="number">19</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">20</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">21</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">22</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">23</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-24</span><span class="number">-39</span>ec527346a9&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 f.__next__()</span><br><span class="line"></span><br><span class="line">StopIteration:</span><br></pre></td></tr></table></figure>

<h4 id="使用send"><a href="#使用send" class="headerlink" title="使用send"></a>使用send</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">43</span>]: f = gen()</span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: f.__next__()</span><br><span class="line">Out[<span class="number">44</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: f.send(<span class="string">'haha'</span>)</span><br><span class="line">haha</span><br><span class="line">Out[<span class="number">45</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">46</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: f.send(<span class="string">'haha'</span>)</span><br><span class="line">haha</span><br><span class="line">Out[<span class="number">47</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>生成器是这样一个函数，它记住上一次返回时在函数体中的位置。对生成器函数的第二次（或第 n 次）调用跳转至该函数中间，而上次调用的所有局部变量都保持不变。</p>
<p>生成器不仅“记住”了它数据状态；生成器还“记住”了它在流控制构造（在命令式编程中，这种构造不只是数据值）中的位置。</p>
<p>生成器的特点：</p>
<ol>
<li>节约内存</li>
<li>迭代到下一次的调用时，所使用的参数都是第一次所保留下的，即是说，在整个所有函数调用的参数都是第一次所调用时保留的，而不是新创建的</li>
</ol>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p>
<h3 id="1-可迭代对象"><a href="#1-可迭代对象" class="headerlink" title="1. 可迭代对象"></a>1. 可迭代对象</h3><p>以直接作用于 for 循环的数据类型有以下几种：</p>
<p>一类是集合数据类型，如 list 、 tuple 、 dict 、 set 、 str 等；</p>
<p>一类是 generator ，包括生成器和带 yield 的generator function。</p>
<p>这些可以直接作用于 for 循环的对象统称为可迭代对象： Iterable 。</p>
<h3 id="2-判断是否可以迭代"><a href="#2-判断是否可以迭代" class="headerlink" title="2. 判断是否可以迭代"></a>2. 判断是否可以迭代</h3><p>可以使用 isinstance() 判断一个对象是否是 Iterable 对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">50</span>]: <span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: isinstance([], Iterable)</span><br><span class="line">Out[<span class="number">51</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: isinstance(&#123;&#125;, Iterable)</span><br><span class="line">Out[<span class="number">52</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: isinstance(<span class="string">'abc'</span>, Iterable)</span><br><span class="line">Out[<span class="number">53</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterable)</span><br><span class="line">Out[<span class="number">54</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: isinstance(<span class="number">100</span>, Iterable)</span><br><span class="line">Out[<span class="number">55</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>而生成器不但可以作用于 for 循环，还可以被 next() 函数不断调用并返回下一个值，直到最后抛出 StopIteration 错误表示无法继续返回下一个值了。</p>
<h3 id="3-迭代器"><a href="#3-迭代器" class="headerlink" title="3.迭代器"></a>3.迭代器</h3><p>可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。</p>
<p>可以使用 isinstance() 判断一个对象是否是 Iterator 对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">56</span>]: <span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterator)</span><br><span class="line">Out[<span class="number">57</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: isinstance([], Iterator)</span><br><span class="line">Out[<span class="number">58</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: isinstance(&#123;&#125;, Iterator)</span><br><span class="line">Out[<span class="number">59</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: isinstance(<span class="string">'abc'</span>, Iterator)</span><br><span class="line">Out[<span class="number">60</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: isinstance(<span class="number">100</span>, Iterator)</span><br><span class="line">Out[<span class="number">61</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="4-iter-函数"><a href="#4-iter-函数" class="headerlink" title="4.iter()函数"></a>4.iter()函数</h3><p>生成器都是 Iterator 对象，但 list 、 dict 、 str 虽然是 Iterable ，却不是 Iterator 。</p>
<p>把 list 、 dict 、 str 等 Iterable 变成 Iterator 可以使用 iter() 函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">62</span>]: isinstance(iter([]), Iterator)</span><br><span class="line">Out[<span class="number">62</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">63</span>]: isinstance(iter(<span class="string">'abc'</span>), Iterator)</span><br><span class="line">Out[<span class="number">63</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="5-总结-1"><a href="#5-总结-1" class="headerlink" title="5. 总结"></a>5. 总结</h3><ul>
<li>凡是可作用于 for 循环的对象都是 Iterable 类型；</li>
<li>凡是可作用于 next() 函数的对象都是 Iterator 类型</li>
<li>集合数据类型如 list 、 dict 、 str 等是 Iterable 但不是 Iterator ，不过可以通过 iter() 函数获得一个 Iterator 对象。</li>
</ul>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="1-函数引用"><a href="#1-函数引用" class="headerlink" title="1. 函数引用"></a>1. 函数引用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"--- in test1 func----"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用函数</span></span><br><span class="line">test1()</span><br><span class="line"></span><br><span class="line"><span class="comment">#引用函数</span></span><br><span class="line">ret = test1</span><br><span class="line"></span><br><span class="line">print(id(ret))</span><br><span class="line">print(id(test1))</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过引用调用函数</span></span><br><span class="line">ret()</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">--- <span class="keyword">in</span> test1 func----</span><br><span class="line"><span class="number">140212571149040</span></span><br><span class="line"><span class="number">140212571149040</span></span><br><span class="line">--- <span class="keyword">in</span> test1 func----</span><br></pre></td></tr></table></figure>

<h3 id="2-什么是闭包"><a href="#2-什么是闭包" class="headerlink" title="2. 什么是闭包"></a>2. 什么是闭包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(number)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，那么将这个函数以及用到的一些变量称之为闭包</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_in</span><span class="params">(number_in)</span>:</span></span><br><span class="line">        print(<span class="string">"in test_in 函数, number_in is %d"</span>%number_in)</span><br><span class="line">        <span class="keyword">return</span> number+number_in</span><br><span class="line">    <span class="comment">#其实这里返回的就是闭包的结果</span></span><br><span class="line">    <span class="keyword">return</span> test_in</span><br><span class="line"></span><br><span class="line"><span class="comment">#给test函数赋值，这个20就是给参数number</span></span><br><span class="line">ret = test(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意这里的100其实给参数number_in</span></span><br><span class="line">print(ret(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意这里的200其实给参数number_in</span></span><br><span class="line">print(ret(<span class="number">200</span>))</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">in</span> test_in 函数, number_in <span class="keyword">is</span> <span class="number">100</span></span><br><span class="line"><span class="number">120</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span> test_in 函数, number_in <span class="keyword">is</span> <span class="number">200</span></span><br><span class="line"><span class="number">220</span></span><br></pre></td></tr></table></figure>

<h3 id="3-闭包再理解"><a href="#3-闭包再理解" class="headerlink" title="3. 闭包再理解"></a>3. 闭包再理解</h3><p>内部函数对外部函数作用域里变量的引用（非全局变量），则称内部函数为闭包。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># closure.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">(start=<span class="number">0</span>)</span>:</span></span><br><span class="line">    count=[start]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">()</span>:</span></span><br><span class="line">        count[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> incr</span><br></pre></td></tr></table></figure>

<p>启动python解释器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> closeure</span><br><span class="line">&gt;&gt;&gt;c1=closeure.counter(<span class="number">5</span>)</span><br><span class="line">&gt;&gt;&gt;print(c1())</span><br><span class="line"><span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;print(c1())</span><br><span class="line"><span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;c2=closeure.counter(<span class="number">100</span>)</span><br><span class="line">&gt;&gt;&gt;print(c2())</span><br><span class="line"><span class="number">101</span></span><br><span class="line">&gt;&gt;&gt;print(c2())</span><br><span class="line"><span class="number">102</span></span><br></pre></td></tr></table></figure>

<ul>
<li>nonlocal访问外部函数的局部变量(python3)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">(start=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> start</span><br><span class="line">        start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line">    <span class="keyword">return</span> incr</span><br><span class="line"></span><br><span class="line">c1 = counter(<span class="number">5</span>)</span><br><span class="line">print(c1())</span><br><span class="line">print(c1())</span><br><span class="line"></span><br><span class="line">c2 = counter(<span class="number">50</span>)</span><br><span class="line">print(c2())</span><br><span class="line">print(c2())</span><br><span class="line"></span><br><span class="line">print(c1())</span><br><span class="line">print(c1())</span><br><span class="line"></span><br><span class="line">print(c2())</span><br><span class="line">print(c2())</span><br></pre></td></tr></table></figure>

<h3 id="4-看一个闭包的实际例子："><a href="#4-看一个闭包的实际例子：" class="headerlink" title="4. 看一个闭包的实际例子："></a>4. 看一个闭包的实际例子：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line_conf</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">line</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a*x + b</span><br><span class="line">    <span class="keyword">return</span> line</span><br><span class="line"></span><br><span class="line">line1 = line_conf(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">line2 = line_conf(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(line1(<span class="number">5</span>))</span><br><span class="line">print(line2(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<p>这个例子中，函数line与变量a,b构成闭包。在创建闭包的时候，我们通过line_conf的参数a,b说明了这两个变量的取值，这样，我们就确定了函数的最终形式(y = x + 1和y = 4x + 5)。我们只需要变换参数a,b，就可以获得不同的直线表达函数。由此，我们可以看到，闭包也具有提高代码可复用性的作用。</p>
<p>如果没有闭包，我们需要每次创建直线函数的时候同时说明a,b,x。这样，我们就需要更多的参数传递，也减少了代码的可移植性。</p>
<p>闭包思考：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>闭包似优化了变量，原来需要类对象完成的工作，闭包也可以完成</span><br><span class="line"><span class="number">2.</span>由于闭包引用了外部函数的局部变量，则外部函数的局部变量没有及时释放，消耗内存</span><br></pre></td></tr></table></figure>

<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h3 id="1-单独以f1为例："><a href="#1-单独以f1为例：" class="headerlink" title="1.单独以f1为例："></a>1.单独以f1为例：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># 验证1</span></span><br><span class="line">        <span class="comment"># 验证2</span></span><br><span class="line">        <span class="comment"># 验证3</span></span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br></pre></td></tr></table></figure>

<p>python解释器就会从上到下解释代码，步骤如下：</p>
<ol>
<li>def w1(func): ==&gt;将w1函数加载到内存</li>
<li>@w1</li>
</ol>
<p>没错， 从表面上看解释器仅仅会解释这两句代码，因为函数在 没有被调用之前其内部代码不会被执行。</p>
<p>从表面上看解释器着实会执行这两句，但是 @w1 这一句代码里却有大文章， @函数名 是python的一种语法糖。</p>
<ul>
<li>上例@w1内部会执行一下操作：</li>
<li>执行w1函数</li>
</ul>
<blockquote>
<p>执行w1函数 ，并将 @w1 下面的函数作为w1函数的参数，即：*<em>@w1 等价于 w1(f1) *</em>所以，内部就会去执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="comment">#验证 1</span></span><br><span class="line">    <span class="comment">#验证 2</span></span><br><span class="line">    <span class="comment">#验证 3</span></span><br><span class="line">    f1()     <span class="comment"># func是参数，此时 func 等于 f1 </span></span><br><span class="line"><span class="keyword">return</span> inner<span class="comment"># 返回的 inner，inner代表的是函数，非执行函数 ,其实就是将原来的 f1 函数塞进另外一个函数中</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="2-w1的返回值"><a href="#2-w1的返回值" class="headerlink" title="2.w1的返回值"></a>2.w1的返回值</h3><blockquote>
<p>将执行完的w1函数返回值 赋值 给@w1下面的函数的函数名f1 即将w1的返回值再重新赋值给 f1，即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">新f1 = <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span> </span><br><span class="line">            <span class="comment">#验证 1</span></span><br><span class="line">            <span class="comment">#验证 2</span></span><br><span class="line">            <span class="comment">#验证 3</span></span><br><span class="line">            原来f1()</span><br><span class="line">        <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure>

<p>所以，以后业务部门想要执行 f1 函数时，就会执行 新f1 函数，在新f1 函数内部先执行验证，再执行原来的f1函数，然后将原来f1 函数的返回值返回给了业务调用者。</p>
</blockquote>
<blockquote>
<p>如此一来， 即执行了验证的功能，又执行了原来f1函数的内容，并将原f1函数返回值 返回给业务调用着</p>
</blockquote>
<h3 id="3-再议装饰器"><a href="#3-再议装饰器" class="headerlink" title="3. 再议装饰器"></a>3. 再议装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义函数：完成包裹数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeBold</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;b&gt;"</span> + fn() + <span class="string">"&lt;/b&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义函数：完成包裹数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeItalic</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;i&gt;"</span> + fn() + <span class="string">"&lt;/i&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@makeBold</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world-1"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@makeItalic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world-2"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@makeBold</span></span><br><span class="line"><span class="meta">@makeItalic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world-3"</span></span><br><span class="line"></span><br><span class="line">print(test1())</span><br><span class="line">print(test2())</span><br><span class="line">print(test3())</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;hello world-1&lt;/b&gt;</span><br><span class="line">&lt;i&gt;hello world-2&lt;/i&gt;</span><br><span class="line">&lt;b&gt;&lt;i&gt;hello world-3&lt;/i&gt;&lt;/b&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-装饰器-decorator-功能"><a href="#4-装饰器-decorator-功能" class="headerlink" title="4. 装饰器(decorator)功能"></a>4. 装饰器(decorator)功能</h3><ol>
<li>引入日志</li>
<li>函数执行时间统计</li>
<li>执行函数前预备处理</li>
<li>执行函数后清理功能</li>
<li>权限校验等场景</li>
<li>缓存</li>
</ol>
<h3 id="5-装饰器示例"><a href="#5-装饰器示例" class="headerlink" title="5. 装饰器示例"></a>5. 装饰器示例</h3><h4 id="1-无参数的函数"><a href="#1-无参数的函数" class="headerlink" title="1.无参数的函数"></a>1.无参数的函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrappedfunc</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"%s called at %s"</span>%(func.__name__, ctime()))</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrappedfunc</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I am foo"</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p>上面代码理解装饰器执行行为可理解成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">foo = timefun(foo)</span><br><span class="line"><span class="comment">#foo先作为参数赋值给func后,foo接收指向timefun返回的wrappedfunc</span></span><br><span class="line">foo()</span><br><span class="line"><span class="comment">#调用foo(),即等价调用wrappedfunc()</span></span><br><span class="line"><span class="comment">#内部函数wrappedfunc被引用，所以外部函数的func变量(自由变量)并没有释放</span></span><br><span class="line"><span class="comment">#func里保存的是原foo函数对象</span></span><br></pre></td></tr></table></figure>

<h4 id="2-被装饰的函数有参数"><a href="#2-被装饰的函数有参数" class="headerlink" title="2.被装饰的函数有参数"></a>2.被装饰的函数有参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrappedfunc</span><span class="params">(a, b)</span>:</span></span><br><span class="line">        print(<span class="string">"%s called at %s"</span>%(func.__name__, ctime()))</span><br><span class="line">        print(a, b)</span><br><span class="line">        func(a, b)</span><br><span class="line">    <span class="keyword">return</span> wrappedfunc</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(a+b)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo(<span class="number">2</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<h4 id="3-被装饰的函数有不定长参数"><a href="#3-被装饰的函数有不定长参数" class="headerlink" title="3.被装饰的函数有不定长参数"></a>3.被装饰的函数有不定长参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrappedfunc</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"%s called at %s"</span>%(func.__name__, ctime()))</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrappedfunc</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    print(a+b+c)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo(<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>)</span><br></pre></td></tr></table></figure>

<h4 id="4-装饰器中的return"><a href="#4-装饰器中的return" class="headerlink" title="4.装饰器中的return"></a>4.装饰器中的return</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrappedfunc</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"%s called at %s"</span>%(func.__name__, ctime()))</span><br><span class="line">        func()  <span class="comment"># return func()</span></span><br><span class="line">    <span class="keyword">return</span> wrappedfunc</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I am foo"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInfo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'----hahah---'</span></span><br><span class="line"></span><br><span class="line">foo() <span class="comment"># </span></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br><span class="line">print(getInfo())</span><br></pre></td></tr></table></figure>

<p>执行结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">foo called at Fri Nov  <span class="number">4</span> <span class="number">21</span>:<span class="number">55</span>:<span class="number">35</span> <span class="number">2016</span></span><br><span class="line">I am foo</span><br><span class="line">foo called at Fri Nov  <span class="number">4</span> <span class="number">21</span>:<span class="number">55</span>:<span class="number">37</span> <span class="number">2016</span></span><br><span class="line">I am foo</span><br><span class="line">getInfo called at Fri Nov  <span class="number">4</span> <span class="number">21</span>:<span class="number">55</span>:<span class="number">37</span> <span class="number">2016</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p><strong>如果修改装饰器为<code>return func()</code>，则运行结果：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">foo called at Fri Nov  <span class="number">4</span> <span class="number">21</span>:<span class="number">55</span>:<span class="number">57</span> <span class="number">2016</span></span><br><span class="line">I am foo</span><br><span class="line">foo called at Fri Nov  <span class="number">4</span> <span class="number">21</span>:<span class="number">55</span>:<span class="number">59</span> <span class="number">2016</span></span><br><span class="line">I am foo</span><br><span class="line">getInfo called at Fri Nov  <span class="number">4</span> <span class="number">21</span>:<span class="number">55</span>:<span class="number">59</span> <span class="number">2016</span></span><br><span class="line">----hahah---</span><br></pre></td></tr></table></figure>

<ul>
<li>总结：</li>
</ul>
<ul>
<li>一般情况下为了让装饰器更通用，可以有return</li>
</ul>
<h4 id="5-装饰器带参数"><a href="#5-装饰器带参数" class="headerlink" title="5.装饰器带参数"></a>5.装饰器带参数</h4><ul>
<li>在原有装饰器的基础上，设置外部变量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#decorator2.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun_arg</span><span class="params">(pre=<span class="string">"hello"</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timefun</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrappedfunc</span><span class="params">()</span>:</span></span><br><span class="line">            print(<span class="string">"%s called at %s %s"</span>%(func.__name__, ctime(), pre))</span><br><span class="line">            <span class="keyword">return</span> func()</span><br><span class="line">        <span class="keyword">return</span> wrappedfunc</span><br><span class="line">    <span class="keyword">return</span> timefun</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun_arg("itcast")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I am foo"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun_arg("python")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">too</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I am too"</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line">too()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">too()</span><br></pre></td></tr></table></figure>

<p>可以理解为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">foo()==timefun_arg(<span class="string">"itcast"</span>)(foo)()</span><br></pre></td></tr></table></figure>

<h4 id="6-类装饰器"><a href="#6-类装饰器" class="headerlink" title="6.类装饰器"></a>6.类装饰器</h4><p>装饰器函数其实是这样一个接口约束，它必须接受一个callable对象作为参数，然后返回一个callable对象。在Python中一般callable对象都是函数，但也有例外。只要某个对象重写了 <code>__call__()</code> 方法，那么这个对象就是callable的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'call me!'</span>)</span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t()  <span class="comment"># call me</span></span><br></pre></td></tr></table></figure>

<p>类装饰器demo</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        print(<span class="string">"---初始化---"</span>)</span><br><span class="line">        print(<span class="string">"func name is %s"</span>%func.__name__)</span><br><span class="line">        self.__func = func</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"---装饰器中的功能---"</span>)</span><br><span class="line">        self.__func()</span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line"><span class="comment">#1. 当用Test来装作装饰器对test函数进行装饰的时候，首先会创建Test的实例对象</span></span><br><span class="line"><span class="comment">#    并且会把test这个函数名当做参数传递到__init__方法中</span></span><br><span class="line"><span class="comment">#    即在__init__方法中的func变量指向了test函数体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. test函数相当于指向了用Test创建出来的实例对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 当在使用test()进行调用时，就相当于让这个对象()，因此会调用这个对象的__call__方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 为了能够在__call__方法中调用原来test指向的函数体，所以在__init__方法中就需要一个实例属性来保存这个函数体的引用</span></span><br><span class="line"><span class="comment">#    所以才有了self.__func = func这句代码，从而在调用__call__方法中能够调用到test之前的函数体</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"----test---"</span>)</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">---初始化---</span><br><span class="line">func name <span class="keyword">is</span> test</span><br><span class="line">---装饰器中的功能---</span><br><span class="line">----test---</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python-base</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础知识04</title>
    <url>/2018/10/25/python%E7%9B%B8%E5%85%B3/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8604/</url>
    <content><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><ul>
<li>对象：在现实生活中存在具体的一个事物。</li>
<li>类：实际就是对某种类型事物的共性属性与行为的抽取。 </li>
</ul>
<p>类(Class) 由3个部分构成</p>
<ul>
<li>类的名称:类名</li>
<li>类的属性:一组数据</li>
<li>类的方法:允许对进行操作的方法 (行为)</li>
</ul>
<a id="more"></a>

<h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># class 类名:</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例(新式类，python3中不写继承类，默认继承object)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span>  <span class="comment"># 类名命名是大驼峰</span></span><br><span class="line">    name = <span class="string">'张三'</span> <span class="comment"># 类的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intro</span><span class="params">(self)</span>:</span> <span class="comment"># 类的方法</span></span><br><span class="line">        print(<span class="string">'我的姓名是 '</span>,name)</span><br></pre></td></tr></table></figure>
<h2 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h2><h3 id="init-方法"><a href="#init-方法" class="headerlink" title="__init()__方法"></a><code>__init()__方法</code></h3><p>类的初始化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.addr = <span class="string">'ah'</span></span><br></pre></td></tr></table></figure>

<p>此方法对象创建时自动调用。self，每个类中的方法不可缺少，代表本实例对象。</p>
<p>如果初始化方法中有除self的参数，创建对象时应添加相应参数对应的值。</p>
<p>p = People(‘zhang’,21)</p>
<h3 id="str-方法"><a href="#str-方法" class="headerlink" title="__str__()方法"></a><code>__str__()</code>方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'姓名：&#123;&#125; 年龄：&#123;&#125; 地址：&#123;&#125;'</span>.format(self.name,self.age,self.addr)</span><br><span class="line"><span class="comment"># 没有此方法之前</span></span><br><span class="line">stu = Student(<span class="string">'张三'</span>, <span class="number">22</span>)</span><br><span class="line">print(stu) <span class="comment"># &lt;__main__.Student object at 0x04F01370&gt;</span></span><br><span class="line"><span class="comment"># 加此方法后</span></span><br><span class="line"><span class="comment"># 姓名：张三 年龄：22 地址：ah</span></span><br></pre></td></tr></table></figure>

<h3 id="del-方法"><a href="#del-方法" class="headerlink" title="__del__()方法"></a><code>__del__()</code>方法</h3><p>创建对象后，python解释器默认调用<code>__init__()</code>方法</p>
<p>当删除一个对象时，python解释器也会默认调用一个方法，这个方法为<code>__del__()</code>方法</p>
<ul>
<li>当有1个变量保存了对象的引用时，此对象的引用计数就会加1</li>
<li>当使用del删除变量指向的对象时，如果对象的引用计数不会1，比如3，那么此时只会让这个引用计数减1，即变为2，当再次调用del时，变为1，如果再调用1次del，此时会真的把对象进行删除</li>
<li>del 对象名    删除对象</li>
</ul>
<h3 id="new-方法"><a href="#new-方法" class="headerlink" title="__new__方法"></a><code>__new__</code>方法</h3><ul>
<li><code>__new__和__init__</code>的作用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"这是 init 方法"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"这是 new 方法"</span>)</span><br><span class="line">        <span class="keyword">return</span> object.__new__(cls) <span class="comment"># 返回的就是self</span></span><br><span class="line">A()</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li><code>__new__</code>至少要有一个参数cls，代表要实例化的类，此参数在实例化时由Python解释器自动提供</li>
<li><code>__new__</code>必须要有返回值，返回实例化出来的实例，这点在自己实现<code>__new__</code>时要特别注意，可以return父类<code>__new__</code>出来的实例，或者直接是object的<code>__new__</code>出来的实例</li>
<li><code>__init__</code>有一个参数self，就是这个<code>__new__</code>返回的实例，<code>__init__</code>在<code>__new__</code>的基础上可以完成一些其它初始化的动作，<code>__init__</code>不需要返回值</li>
<li>我们可以将类比作制造商，<code>__new__</code>方法就是前期的原材料购买环节，<code>__init__</code>方法就是在有原材料的基础上，加工，初始化商品环节</li>
</ul>
<h2 id="隐藏数据"><a href="#隐藏数据" class="headerlink" title="隐藏数据"></a>隐藏数据</h2><ul>
<li>Python中没有像C++中public和private这些关键字来区别公有属性和私有属性</li>
<li>它是以属性命名方式来区分，如果在属性名前面加了2个下划线’__’，则表明该属性是私有属性，否则为公有属性（方法也是一样，方法名前面加了2个下划线的话表示该方法是私有的，否则为公有的）</li>
</ul>
<ul>
<li>私有的属性，不能通过对象直接访问，但是可以<strong>通过方法访问</strong></li>
<li>私有的方法，不能通过对象直接访问</li>
<li>私有的属性、方法，不会被子类继承，也不能被访问</li>
<li>一般情况下，私有的属性、方法都是不对外公布的，往往用来做内部的事情，起到安全的作用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.__age = <span class="number">22</span> <span class="comment"># 年龄私有，外部不可访问</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__say</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'我今年&#123;&#125;岁了！'</span>.format(self.__age))</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'我今年&#123;&#125;岁了！'</span>.format(self.__age))</span><br><span class="line">f = Foo(<span class="string">'zs'</span>)</span><br><span class="line">print(f.name)  <span class="comment"># zs</span></span><br><span class="line">print(f.__age) <span class="comment"># AttributeError: 'Foo' object has no attribute '__age'</span></span><br><span class="line">f.__say() <span class="comment">#'Foo' object has no attribute '__say'</span></span><br><span class="line">f.say() <span class="comment"># 我今年22岁了！。对象内部可以使用私有变量</span></span><br></pre></td></tr></table></figure>

<p>修改私有变量数据</p>
<ol>
<li>getXXX(),setXXX()方法修改数据</li>
<li>装饰器 @property 修改数据</li>
</ol>
<h2 id="私有化"><a href="#私有化" class="headerlink" title="私有化"></a>私有化</h2><ul>
<li>xx: 公有变量</li>
<li>_x: 单前置下划线,私有化属性或方法，from somemodule import *禁止导入,类对象和子类可以访问</li>
<li>__xx：双前置下划线,避免与子类中的属性命名冲突，无法在外部直接访问(名字重整所以访问不到)</li>
<li><code>__xx__</code>:双前后下划线,用户名字空间的魔法对象或属性。例如:<code>__init__</code> , __ 不要自己发明这样的名字</li>
<li>xx_:单后置下划线,用于避免与Python关键词的冲突</li>
</ul>
<p>通过name mangling（名字重整(目的就是以防子类意外重写基类的方法或者属性)</p>
<p>如：<code>_Class__object 、_Money__money</code>机制就可以访问private了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, taste)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self._age = age </span><br><span class="line">        self.__taste = taste</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showperson</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name)</span><br><span class="line">        print(self._age)</span><br><span class="line">        print(self.__taste)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dowork</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._work()</span><br><span class="line">        self.__away()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_work</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'my _work'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__away</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'my __away'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">construction</span><span class="params">(self, name, age, taste)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self._age = age </span><br><span class="line">        self.__taste = taste</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showstudent</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name)</span><br><span class="line">        print(self._age)</span><br><span class="line">        print(self.__taste)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testbug</span><span class="params">()</span>:</span></span><br><span class="line">        _Bug.showbug()</span><br><span class="line"></span><br><span class="line"><span class="comment">#模块内可以访问，当from  cur_module import *时，不导入</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Bug</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showbug</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"showbug"</span>)</span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">'jack'</span>, <span class="number">25</span>, <span class="string">'football'</span>)</span><br><span class="line">s1.showperson()</span><br><span class="line">print(<span class="string">'*'</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#无法访问__taste,导致报错</span></span><br><span class="line"><span class="comment">#s1.showstudent() </span></span><br><span class="line">s1.construction(<span class="string">'rose'</span>, <span class="number">30</span>, <span class="string">'basketball'</span>)</span><br><span class="line">s1.showperson()</span><br><span class="line">print(<span class="string">'*'</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">s1.showstudent()</span><br><span class="line">print(<span class="string">'*'</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">Student.testbug() <span class="comment">#showbug</span></span><br></pre></td></tr></table></figure>

<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul>
<li>父类中属性名为<code>__名字</code>的，子类不继承，子类不能访问</li>
<li>如果在子类中向<code>__名字</code>赋值，那么会在子类中定义的一个与父类相同名字的属性</li>
<li><code>_名</code>的变量、函数、类在使用<code>from xxx import *</code>时都不会被导入</li>
</ul>
<h2 id="属性property"><a href="#属性property" class="headerlink" title="属性property"></a>属性property</h2><ol>
<li>私有属性添加getter和setter方法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Money</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__money = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMoney</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setMoney</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(value, int):</span><br><span class="line">            self.__money = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"error:不是整型数字"</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用property升级getter和setter方法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Money</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__money = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMoney</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setMoney</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(value, int):</span><br><span class="line">            self.__money = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"error:不是整型数字"</span>)</span><br><span class="line">    money = property(getMoney, setMoney)</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> get_set <span class="keyword">import</span> Money</span><br><span class="line">In [<span class="number">2</span>]: a = Money()</span><br><span class="line">In [<span class="number">3</span>]: a.money</span><br><span class="line">Out[<span class="number">3</span>]: <span class="number">0</span></span><br><span class="line">In [<span class="number">4</span>]: a.money = <span class="number">100</span></span><br><span class="line">In [<span class="number">5</span>]: a.money</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">100</span></span><br><span class="line">In [<span class="number">6</span>]: a.getMoney()</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">100</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用property取代getter和setter方法</li>
</ol>
<p><code>@property</code>成为属性函数，可以对属性赋值时做必要的检查，并保证代码的清晰短小，主要有2个作用</p>
<ul>
<li>将方法转换为只读</li>
<li>重新实现一个属性的设置和读取方法,可做边界判定</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Money</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__money = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">money</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"></span><br><span class="line"><span class="meta">    @money.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">money</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(value, int):</span><br><span class="line">            self.__money = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"error:不是整型数字"</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: a = Money()</span><br><span class="line">In [<span class="number">4</span>]: a.money</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">0</span></span><br><span class="line">In [<span class="number">5</span>]: a.money = <span class="number">100</span></span><br><span class="line">In [<span class="number">6</span>]: a.money</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">100</span></span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li>子类在继承的时候，在定义类时，小括号()中为父类的名字</li>
<li>父类的属性、方法，会被继承给子类</li>
</ul>
<ul>
<li><p>python中是可以多继承的</p>
</li>
<li><p><code>print(类名.__mro__) #可以查看类的对象搜索方法时的先后顺序</code></p>
</li>
</ul>
<h3 id="调用父类方法"><a href="#调用父类方法" class="headerlink" title="调用父类方法"></a>调用父类方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = <span class="string">'yellow'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bosi</span><span class="params">(Cat)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        <span class="comment"># 调用父类的__init__方法1(python2)</span></span><br><span class="line">        <span class="comment">#Cat.__init__(self,name)</span></span><br><span class="line">        <span class="comment"># 调用父类的__init__方法2</span></span><br><span class="line">        <span class="comment">#super(Bosi,self).__init__(name)</span></span><br><span class="line">        <span class="comment"># 调用父类的__init__方法3</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">bosi = Bosi(<span class="string">'xiaohua'</span>)</span><br><span class="line"></span><br><span class="line">print(bosi.name)</span><br><span class="line">print(bosi.color)</span><br></pre></td></tr></table></figure>

<h2 id="类属性、实例属性"><a href="#类属性、实例属性" class="headerlink" title="类属性、实例属性"></a>类属性、实例属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    var = <span class="string">'zhang'</span> <span class="comment"># 类属性，通过类对象修改，Test.var = 'li'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">		self.name = <span class="string">'huahua'</span> <span class="comment"># 实例属性</span></span><br></pre></td></tr></table></figure>

<h2 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h2><h3 id="1-类方法"><a href="#1-类方法" class="headerlink" title="1. 类方法"></a>1. 类方法</h3><p>是类对象所拥有的方法，需要用修饰器<code>@classmethod</code>来标识其为类方法，对于类方法，第一个参数必须是类对象，一般以<code>cls</code>作为第一个参数（当然可以用其他名称的变量作为其第一个参数，但是大部分人都习惯以’cls’作为第一个参数的名字，就最好用’cls’了），能够通过实例<strong>对象和类对象去访问</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    country = <span class="string">'china'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#类方法，用classmethod来进行修饰</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.country</span><br><span class="line"></span><br><span class="line">p = People()</span><br><span class="line"><span class="keyword">print</span>（p.getCountry()）    <span class="comment">#可以用过实例对象引用</span></span><br><span class="line"><span class="keyword">print</span>（People.getCountry()）    <span class="comment">#可以通过类对象引用</span></span><br></pre></td></tr></table></figure>

<p>类方法还有一个用途就是可以对类属性进行修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    country = <span class="string">'china'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#类方法，用classmethod来进行修饰</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.country</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCountry</span><span class="params">(cls,country)</span>:</span></span><br><span class="line">        cls.country = country</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = People()</span><br><span class="line"><span class="keyword">print</span>（p.getCountry()）    <span class="comment">#可以用过实例对象引用 # china</span></span><br><span class="line"><span class="keyword">print</span>（p.getCountry()）    <span class="comment">#可以通过类对象引用 # china</span></span><br><span class="line"></span><br><span class="line">p.setCountry(<span class="string">'japan'</span>)   </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>（p.getCountry()）    <span class="comment">#japan</span></span><br><span class="line"><span class="keyword">print</span>（p.getCountry()）    <span class="comment"># #japan</span></span><br></pre></td></tr></table></figure>

<h3 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2. 静态方法"></a>2. 静态方法</h3><p>需要通过修饰器<code>@staticmethod</code>来进行修饰，静态方法不需要多定义参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    country = <span class="string">'china'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="comment">#静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> People.country</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(People.getCountry())</span><br></pre></td></tr></table></figure>

<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>从类方法和实例方法以及静态方法的定义形式就可以看出来，类方法的第一个参数是类对象cls，那么通过cls引用的必定是类对象的属性和方法；</p>
<p>而实例方法的第一个参数是实例对象self，那么通过self引用的可能是类属性、也有可能是实例属性（这个需要具体分析），不过在存在相同名称的类属性和实例属性的情况下，实例属性优先级更高。</p>
<p>静态方法中不需要额外定义参数，因此在静态方法中引用类属性的话，必须通过类对象来引用</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><ul>
<li>捕获单个异常</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'-----test--1---'</span>)</span><br><span class="line">    open(<span class="string">'123.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">    print(<span class="string">'-----test--2---'</span>)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ul>
<li>捕获多个异常</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'-----test--1---'</span>)</span><br><span class="line">    open(<span class="string">'123.txt'</span>,<span class="string">'r'</span>) <span class="comment"># 如果123.txt文件不存在，那么会产生 IOError 异常</span></span><br><span class="line">    print(<span class="string">'-----test--2---'</span>)</span><br><span class="line">    print(num)<span class="comment"># 如果num变量没有定义，那么会产生 NameError 异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> (IOError,NameError): </span><br><span class="line">    <span class="comment">#如果想通过一次except捕获到多个异常可以用一个元组的方式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># errorMsg里会保存捕获到的错误信息</span></span><br><span class="line">    print(errorMsg)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>else</p>
<p>如果没有捕获到异常，那么就执行else中的事情。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    <span class="keyword">print</span> num</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> errorMsg:</span><br><span class="line">    print(<span class="string">'产生错误了:%s'</span>%errorMsg)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'没有捕获到异常，真高兴'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>try…finally…</p>
</li>
</ul>
<p>try…finally…语句用来表达这样的情况：</p>
<blockquote>
<p>在程序中，如果一个段代码必须要执行，即无论异常是否产生都要执行，那么此时就需要使用finally。 比如文件关闭，释放锁，把数据库连接返还给连接池等</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'test.txt'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            content = f.readline()</span><br><span class="line">            <span class="keyword">if</span> len(content) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            print(content)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment">#如果在读取文件的过程中，产生了异常，那么就会捕获到</span></span><br><span class="line">        <span class="comment">#比如 按下了 ctrl+c</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line">        print(<span class="string">'关闭文件'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"没有这个文件"</span>)</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<blockquote>
<p>test.txt文件中每一行数据打印，但是我有意在每打印一行之前用time.sleep方法暂停2秒钟。这样做的原因是让程序运行得慢一些。在程序运行的时候，按Ctrl+c中断（取消）程序。</p>
<p>我们可以观察到KeyboardInterrupt异常被触发，程序退出。但是在程序退出之前，finally从句仍然被执行，把文件关闭。</p>
</blockquote>
<h3 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h3><ul>
<li>如果try嵌套，那么如果里面的try没有捕获到这个异常，那么外面的try会接收到这个异常，然后进行处理，如果外边的try依然没有捕获到，那么再进行传递。。。</li>
<li>如果一个异常是在一个函数中产生的，例如函数A—-&gt;函数B—-&gt;函数C,而异常是在函数C中产生的，那么如果函数C中没有对这个异常进行处理，那么这个异常会传递到函数B中，如果函数B有异常处理那么就会按照函数B的处理方式进行执行；如果函数B也没有异常处理，那么这个异常会继续传递，以此类推。。。如果所有的函数都没有处理，那么此时就会进行异常的默认处理，即通常见到的那样<h3 id="抛出自定义的异常"><a href="#抛出自定义的异常" class="headerlink" title="抛出自定义的异常"></a>抛出自定义的异常</h3></li>
</ul>
<ul>
<li>raise关键字抛出异常</li>
<li>自定义类继承Exception或Error</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShortInputException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">'''自定义的异常类'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, atleast)</span>:</span></span><br><span class="line">        <span class="comment">#super().__init__()</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.atleast = atleast</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = input(<span class="string">'请输入 --&gt; '</span>)</span><br><span class="line">        <span class="keyword">if</span> len(s) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="comment"># raise引发一个你定义的异常</span></span><br><span class="line">            <span class="keyword">raise</span> ShortInputException(len(s), <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">except</span> ShortInputException <span class="keyword">as</span> result:<span class="comment">#x这个变量被绑定到了错误的实例</span></span><br><span class="line">        print(<span class="string">'ShortInputException: 输入的长度是 %d,长度至少应是 %d'</span>% (result.length, result.atleast))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'没有异常发生.'</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<ul>
<li>注意</li>
</ul>
<ul>
<li><p>以上程序中，关于代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#super().__init__()</span></span><br></pre></td></tr></table></figure>

<p>的说明</p>
<blockquote>
<p>这一行代码，可以调用也可以不调用，建议调用，因为<code>__init__</code>方法往往是用来对创建完的对象进行初始化工作，如果在子类中重写了父类的<code>__init__</code>方法，即意味着父类中的很多初始化工作没有做，这样就不保证程序的稳定了，所以在以后的开发中，如果重写了父类的<code>__init__</code>方法，最好是先调用父类的这个方法，然后再添加自己的功能</p>
</blockquote>
</li>
</ul>
<h3 id="异常处理中抛出异常"><a href="#异常处理中抛出异常" class="headerlink" title="异常处理中抛出异常"></a>异常处理中抛出异常</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">88</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    ...:     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, switch)</span>:</span></span><br><span class="line">    ...:         self.switch = switch <span class="comment">#开关</span></span><br><span class="line">    ...:     <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">    ...:         <span class="keyword">try</span>:</span><br><span class="line">    ...:             <span class="keyword">return</span> a/b</span><br><span class="line">    ...:         <span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    ...:             <span class="keyword">if</span> self.switch:</span><br><span class="line">    ...:                 print(<span class="string">"捕获开启，已经捕获到了异常，信息如下:"</span>)</span><br><span class="line">    ...:                 print(result)</span><br><span class="line">    ...:             <span class="keyword">else</span>:</span><br><span class="line">    ...:                 <span class="comment">#重新抛出这个异常，此时就不会被这个异常处理给捕获到，从而触发默认的异常处理</span></span><br><span class="line">    ...:                 <span class="keyword">raise</span></span><br><span class="line">    ...:</span><br><span class="line">    ...:</span><br><span class="line">    ...: a = Test(<span class="literal">True</span>)</span><br><span class="line">    ...: a.calc(<span class="number">11</span>,<span class="number">0</span>)</span><br><span class="line">    ...:</span><br><span class="line">    ...: print(<span class="string">"----------------------华丽的分割线----------------"</span>)</span><br><span class="line">    ...:</span><br><span class="line">    ...: a.switch = <span class="literal">False</span></span><br><span class="line">    ...: a.calc(<span class="number">11</span>,<span class="number">0</span>)</span><br><span class="line">    ...:</span><br><span class="line">捕获开启，已经捕获到了异常，信息如下:</span><br><span class="line">division by zero</span><br><span class="line">----------------------华丽的分割线----------------</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ZeroDivisionError                         Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-88</span><span class="number">-6</span>ed9f062ae00&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">     <span class="number">20</span></span><br><span class="line">     <span class="number">21</span> a.switch = <span class="literal">False</span></span><br><span class="line">---&gt; 22 a.calc(11,0)</span><br><span class="line"></span><br><span class="line">&lt;ipython-input<span class="number">-88</span><span class="number">-6</span>ed9f062ae00&gt; <span class="keyword">in</span> calc(self, a, b)</span><br><span class="line">      <span class="number">4</span>     <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">      <span class="number">5</span>         <span class="keyword">try</span>:</span><br><span class="line">----&gt; 6             return a/b</span><br><span class="line">      <span class="number">7</span>         <span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">      <span class="number">8</span>             <span class="keyword">if</span> self.switch:</span><br><span class="line"></span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="给程序传参数"><a href="#给程序传参数" class="headerlink" title="给程序传参数"></a>给程序传参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.argv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">python3 test.py</span><br></pre></td></tr></table></figure>

<h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><ol>
<li>生成一个[[1,2,3],[4,5,6]….]的列表最大值在100以内</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [[x, x + <span class="number">1</span>, x + <span class="number">2</span>] <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>) <span class="keyword">if</span> x % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line">print(my_list)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>请写出一段 Python 代码实现分组一个 list 里面的元素,比如 [1,2,3,…100]变成 [[1,2,3],[4,5,6]….]</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>)]</span><br><span class="line">print(my_list)</span><br><span class="line"></span><br><span class="line">list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> my_list:</span><br><span class="line">	<span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">		list.append([i,i+<span class="number">1</span>,i+<span class="number">2</span>])</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python-base</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础知识03</title>
    <url>/2018/10/25/python%E7%9B%B8%E5%85%B3/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8603/</url>
    <content><![CDATA[<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件</p>
<p>open(文件名，访问模式)</p>
<p>示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># def open(file, mode='r', buffering=None, encoding=None, errors=None, newline=None, closefd=True):</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>
<p>说明:</p>
<table>
<thead>
<tr>
<th>访问模式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>w</td>
<td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>a</td>
<td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td>rb</td>
<td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td>wb</td>
<td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>ab</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td>r+</td>
<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>w+</td>
<td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>a+</td>
<td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td>rb+</td>
<td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>wb+</td>
<td>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>ab+</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody></table>
<h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><p>close( )</p>
<p>示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个文件，文件名为:test.txt</span></span><br><span class="line">f = open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭这个文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<h2 id="文件操作方法"><a href="#文件操作方法" class="headerlink" title="文件操作方法"></a>文件操作方法</h2><p>fileObject.</p>
<pre><code>buffer         encoding       isatty()       newlines       readlines()    truncate()
close()        errors         line_buffering read()         seek()         writable()
closed         fileno()       mode           readable()     seekable()     write()
detach()       flush()        name           readline()     tell()         writelines()</code></pre><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table>
<thead>
<tr>
<th>序号</th>
<th>方法及描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>file.close()  关闭文件。关闭后文件不能再进行读写操作。</td>
</tr>
<tr>
<td>2</td>
<td>file.flush()  刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。</td>
</tr>
<tr>
<td>3</td>
<td>file.fileno())  返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。</td>
</tr>
<tr>
<td>4</td>
<td>file.isatty()  如果文件连接到一个终端设备返回 True，否则返回 False。</td>
</tr>
<tr>
<td>5</td>
<td>file.next()  返回文件下一行。</td>
</tr>
<tr>
<td>6</td>
<td>file.read([size])  从文件读取指定的字节数，如果未给定或为负则读取所有。<strong>（一个汉字也是1，虽然一个汉字占3个字节）</strong></td>
</tr>
<tr>
<td>7</td>
<td>file.readline([size])  读取整行，<strong>包括 “\n” 字符</strong>。</td>
</tr>
<tr>
<td>8</td>
<td>file.readlines(sizeint)  读取所有行并返回<strong>列表</strong>，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, 实际读取值可能比sizhint较大, 因为需要填充缓冲区。</td>
</tr>
<tr>
<td>9</td>
<td>file.seek(offset[, whence])  设置文件当前位置。</td>
</tr>
<tr>
<td>10</td>
<td>file.tell()  返回文件当前位置。</td>
</tr>
<tr>
<td>11</td>
<td>file.truncate([size])  截取文件，截取的字节通过size指定，默认为当前文件位置。<strong>截取文件，其余的删除，无size，截取全部并删除。</strong></td>
</tr>
<tr>
<td>12</td>
<td>file.write(str)  将字符串写入文件，没有返回值。</td>
</tr>
<tr>
<td>13</td>
<td>file.writelines(sequence)  向文件写入一个序列<strong>字符串列表</strong>，如果需要换行则要自己加入每行的换行符。</td>
</tr>
</tbody></table>
<h4 id="seek-方法"><a href="#seek-方法" class="headerlink" title="seek() 方法"></a>seek() 方法</h4><ul>
<li><strong>offset</strong> – 开始的偏移量，也就是代表需要移动偏移的字节数</li>
<li><strong>whence：</strong>可选，默认值为 0。给offset参数一个定义，表示要从哪个位置开始偏移；0代表从文件开头开始算起，1代表从当前位置开始算起，2代表从文件末尾算起。</li>
<li>把位置设置为：从文件开头，偏移5个字节</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'dis_test.py'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fr:</span><br><span class="line">	<span class="comment"># 查找当前的位置</span></span><br><span class="line">	read_val = fr.read(<span class="number">10</span>)</span><br><span class="line">	print(<span class="string">"当前文件的位置: &#123;:d&#125;"</span>.format(fr.tell()))</span><br><span class="line">	print(<span class="string">"读取的内容是: &#123;0&#125;"</span>.format(read_val))</span><br><span class="line">	<span class="comment"># 重新设置位置</span></span><br><span class="line">	fr.seek(<span class="number">5</span>,<span class="number">0</span>) <span class="comment"># f.seek(-3,2)  # 离文件末尾，3字节处，打开文件必须是以二进制打开 'rb'</span></span><br><span class="line">	print(<span class="string">"当前文件的位置: &#123;:d&#125;"</span>.format(fr.tell()))</span><br><span class="line">	print(<span class="string">"读取的内容是: &#123;0&#125;"</span>.format(fr.read(<span class="number">5</span>)))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 结果</span></span><br><span class="line">当前文件的位置: <span class="number">10</span></span><br><span class="line">读取的内容是: <span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">当前文件的位置: <span class="number">5</span></span></span></span><br><span class="line"><span class="function"><span class="params">读取的内容是: uter<span class="params">(</span></span></span></span><br></pre></td></tr></table></figure>
<h2 id="案列："><a href="#案列：" class="headerlink" title="案列："></a>案列：</h2><ul>
<li>读取一个文件，显示除了以井号(#)开头的行以外的所有行并保存到一个文件中.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">	old_file = <span class="string">'test.py'</span></span><br><span class="line">	new_file = <span class="string">'dis_test.py'</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">with</span> open(old_file, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">		lines = f.readlines()</span><br><span class="line">		<span class="comment"># print(lines)</span></span><br><span class="line">		fw = open(new_file, <span class="string">'w'</span>)</span><br><span class="line">		<span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> line.lstrip().startswith(<span class="string">'#'</span>) <span class="keyword">and</span> <span class="keyword">not</span> line.isspace():</span><br><span class="line">				print(type(line))</span><br><span class="line">				fw.writelines(line)</span><br><span class="line">		fw.close()</span><br><span class="line">		f.close()</span><br></pre></td></tr></table></figure>

<h2 id="文件的重命名、删除"><a href="#文件的重命名、删除" class="headerlink" title="文件的重命名、删除"></a>文件的重命名、删除</h2><p>有些时候，需要对文件进行重命名、删除等一些操作，python的os模块中都有这么功能</p>
<h3 id="lt-1-gt-文件重命名"><a href="#lt-1-gt-文件重命名" class="headerlink" title="&lt;1&gt;文件重命名"></a>&lt;1&gt;文件重命名</h3><p>os模块中的rename()可以完成对文件的重命名操作</p>
<p>rename(需要修改的文件名, 新的文件名)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rename(<span class="string">"毕业论文.txt"</span>, <span class="string">"毕业论文-最终版.txt"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="lt-2-gt-删除文件"><a href="#lt-2-gt-删除文件" class="headerlink" title="&lt;2&gt;删除文件"></a>&lt;2&gt;删除文件</h3><p>os模块中的remove()可以完成对文件的删除操作</p>
<p>remove(待删除的文件名)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.remove(<span class="string">"毕业论文.txt"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="文件夹的相关操作"><a href="#文件夹的相关操作" class="headerlink" title="文件夹的相关操作"></a>文件夹的相关操作</h2><p>实际开发中，有时需要用程序的方式对文件夹进行一定的操作，比如创建、删除等</p>
<p>就像对文件操作需要os模块一样，如果要操作文件夹，同样需要os模块</p>
<h3 id="lt-1-gt-创建文件夹"><a href="#lt-1-gt-创建文件夹" class="headerlink" title="&lt;1&gt;创建文件夹"></a>&lt;1&gt;创建文件夹</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.mkdir(<span class="string">"张三"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="lt-2-gt-获取当前目录"><a href="#lt-2-gt-获取当前目录" class="headerlink" title="&lt;2&gt;获取当前目录"></a>&lt;2&gt;获取当前目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure>

<h3 id="lt-3-gt-改变默认目录"><a href="#lt-3-gt-改变默认目录" class="headerlink" title="&lt;3&gt;改变默认目录"></a>&lt;3&gt;改变默认目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(<span class="string">"../"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="lt-4-gt-获取目录列表"><a href="#lt-4-gt-获取目录列表" class="headerlink" title="&lt;4&gt;获取目录列表"></a>&lt;4&gt;获取目录列表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.listdir(<span class="string">"./"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="lt-5-gt-删除文件夹"><a href="#lt-5-gt-删除文件夹" class="headerlink" title="&lt;5&gt;删除文件夹"></a>&lt;5&gt;删除文件夹</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rmdir(<span class="string">"张三"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="案列"><a href="#案列" class="headerlink" title="案列"></a>案列</h2><h3 id="批量修改文件名"><a href="#批量修改文件名" class="headerlink" title="批量修改文件名"></a>批量修改文件名</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="comment"># 利用rename(旧名字，新名字)</span></span><br><span class="line">	<span class="keyword">for</span> name <span class="keyword">in</span> os.listdir():</span><br><span class="line">		<span class="keyword">if</span> name.endswith(<span class="string">'.py'</span>):</span><br><span class="line">			<span class="comment"># print(name)</span></span><br><span class="line">			<span class="keyword">if</span> name[<span class="number">0</span>].isdigit():</span><br><span class="line">				<span class="comment"># print(name)</span></span><br><span class="line">				new_name = name[:<span class="number">2</span>] + <span class="string">'-'</span> + name[<span class="number">2</span>:]</span><br><span class="line">				<span class="comment"># print(new_name)</span></span><br><span class="line">				os.rename(name, new_name)</span><br></pre></td></tr></table></figure>

<h3 id="学生管理系统（文件版）"><a href="#学生管理系统（文件版）" class="headerlink" title="学生管理系统（文件版）"></a>学生管理系统（文件版）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加学生信息，文件有重复不添加</span></span><br><span class="line">stus = []</span><br><span class="line"><span class="comment"># 添加一个学生信息</span></span><br><span class="line"><span class="comment"># stu_info_default = &#123;'name': 'zhangsan', 'age': 21, 'addr': 'anhui'&#125;</span></span><br><span class="line"><span class="comment"># stus.append(stu_info_default)</span></span><br><span class="line">file_name = <span class="string">'stu.txt'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_stu</span><span class="params">()</span>:</span></span><br><span class="line">	name = input(<span class="string">'输入姓名: '</span>)</span><br><span class="line">	age = int(input(<span class="string">'输入年龄: '</span>))</span><br><span class="line">	addr = input(<span class="string">'输入地址: '</span>)</span><br><span class="line">	<span class="keyword">global</span> stus</span><br><span class="line">	stus.append(&#123;<span class="string">'name'</span>: name, <span class="string">'age'</span>: age, <span class="string">'addr'</span>: addr&#125;)</span><br><span class="line">	print(<span class="string">'内存保存学生的列表 '</span>, stus)</span><br><span class="line">	<span class="keyword">for</span> stu <span class="keyword">in</span> stus:</span><br><span class="line">		stu_name = stu[<span class="string">'name'</span>]</span><br><span class="line">		stu_age = str(stu[<span class="string">'age'</span>])</span><br><span class="line">		stu_addr = stu[<span class="string">'addr'</span>]</span><br><span class="line">		info = stu_name + <span class="string">'\t\t'</span> + stu_age + <span class="string">'\t\t'</span> + stu_addr + <span class="string">'\n'</span></span><br><span class="line">		<span class="comment"># print('默认',info)</span></span><br><span class="line">		<span class="comment"># 当添加的信息相同时，不再添加到文件</span></span><br><span class="line">		<span class="comment"># print('--', is_read(stu_name, stu_age, stu_addr))</span></span><br><span class="line">		<span class="keyword">if</span> is_read(stu_name, int(stu_age), stu_addr):</span><br><span class="line">			write_stu(info)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			print(<span class="string">'信息重复'</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_read</span><span class="params">(stu_name, stu_age, stu_addr)</span>:</span></span><br><span class="line">	fr = open(file_name, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">	<span class="comment"># 除去文本的第一行</span></span><br><span class="line">	fr.readline()</span><br><span class="line">	readlines = fr.readlines()</span><br><span class="line">	print(<span class="string">'读取的每一行 '</span>, readlines)</span><br><span class="line">	<span class="comment"># 判断是否添加重复</span></span><br><span class="line">	is_rep = <span class="literal">False</span></span><br><span class="line">	<span class="keyword">for</span> stu <span class="keyword">in</span> readlines:</span><br><span class="line">		name = stu.split()[<span class="number">0</span>]</span><br><span class="line">		age = int(stu.split()[<span class="number">1</span>])</span><br><span class="line">		addr = stu.split()[<span class="number">2</span>]</span><br><span class="line">		print(<span class="string">'从文件中读取的学生信息'</span>)</span><br><span class="line">		print(<span class="string">'name '</span>, name, <span class="string">'age '</span>,<span class="string">'age类型'</span>,type(age), age, <span class="string">'addr '</span>, addr)</span><br><span class="line">		<span class="keyword">if</span> stu_name == name <span class="keyword">and</span> stu_age == age <span class="keyword">and</span> stu_addr == addr:</span><br><span class="line">			print(<span class="string">'error'</span>)</span><br><span class="line">			is_rep = <span class="literal">False</span></span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			is_rep = <span class="literal">True</span></span><br><span class="line">	fr.close()</span><br><span class="line">	<span class="keyword">return</span> is_rep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_stu</span><span class="params">(info=<span class="string">'姓名\t\t年龄\t\t地址\n'</span>)</span>:</span></span><br><span class="line">	<span class="string">"""写文件中"""</span></span><br><span class="line">	<span class="keyword">with</span> open(file_name, <span class="string">'a+'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fw:</span><br><span class="line">		fw.write(str(info))</span><br><span class="line">		fw.flush()</span><br><span class="line">		print(<span class="string">'写入成功'</span>)</span><br><span class="line">		fw.close()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python-base</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础知识02</title>
    <url>/2018/10/25/python%E7%9B%B8%E5%85%B3/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8602/</url>
    <content><![CDATA[<h1 id="列表、元组、字典"><a href="#列表、元组、字典" class="headerlink" title="列表、元组、字典"></a>列表、元组、字典</h1><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。</li>
<li>序列都可以进行的操作包括索引，切片，加，乘，检查成员。</li>
<li>类似C语言中数组，但列表中类型可以不一致</li>
</ul>
<a id="more"></a>

<h3 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h3><p>列表函数操作</p>
<p>In [120]: my_list = [‘a’,’b’,’c’]</p>
<p>In [121]: my_list.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">append()  count()   insert()  reverse()</span><br><span class="line">clear()   extend()  pop()     sort()</span><br><span class="line">copy()     index()   remove()</span><br></pre></td></tr></table></figure>
<h4 id="查看列表"><a href="#查看列表" class="headerlink" title="查看列表"></a>查看列表</h4><p>分为下标和遍历和切片查看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">print(my_list[<span class="number">1</span>]) <span class="comment"># 返回'b'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># len(list) 查看列表长度</span></span><br><span class="line">print(len(my_list)) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历</span></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> my_list:</span><br><span class="line">    print(val)</span><br><span class="line"><span class="comment">#跟字符串切片操作一样</span></span><br><span class="line">my_list[<span class="number">0</span>:<span class="number">2</span>]  <span class="comment"># ['a', 'b']</span></span><br><span class="line">my_list[::<span class="number">-1</span>] <span class="comment"># ['c', 'b', 'a']</span></span><br></pre></td></tr></table></figure>

<h4 id="添加列表"><a href="#添加列表" class="headerlink" title="添加列表"></a>添加列表</h4><ul>
<li>append(val),往列表后添加元素</li>
<li>insert(index,val),指定位置添加元素</li>
<li>extend(list),添加 列表list里的元素到此列表中</li>
</ul>
<h4 id="删除列表"><a href="#删除列表" class="headerlink" title="删除列表"></a>删除列表</h4><p>列表元素的常用删除方法有：</p>
<ul>
<li>del：根据下标进行删除</li>
<li>pop：删除最后一个元素，返回删除的值</li>
<li>remove：根据元素的值进行删除</li>
</ul>
<h4 id="修改列表"><a href="#修改列表" class="headerlink" title="修改列表"></a>修改列表</h4><ul>
<li>通过下标赋值</li>
</ul>
<h4 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h4><p>sort方法是将list按特定顺序重新排列，默认为由小到大，参数reverse=True可改为倒序，由大到小。</p>
<p>reverse方法是将list逆置。</p>
<p><strong>注意</strong>：列表类型一致才能排序否则，异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">148</span>]: my_list</span><br><span class="line">Out[<span class="number">148</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">2</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, [<span class="string">'aa'</span>, <span class="string">'bb'</span>], <span class="string">'aa'</span>, <span class="string">'bb'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">149</span>]: my_list.sort()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-149</span>-cbf3d7920d40&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 my_list.sort()</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">'&lt;'</span> <span class="keyword">not</span> supported between instances of <span class="string">'int'</span> <span class="keyword">and</span> <span class="string">'str'</span></span><br></pre></td></tr></table></figure>

<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><ul>
<li>Python的元组与列表类似，不同之处在于<strong>元组的元素不能修改</strong>。元组使用小括号，列表使用方括号。</li>
<li>与列表一样查询方式，下标、切片、遍历</li>
<li>元组只有一个元素时，元素后面有逗号，my_tuple = (1,)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">158</span>]: a = (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">159</span>]: a</span><br><span class="line">Out[<span class="number">159</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">160</span>]: a = (<span class="number">1</span>,)</span><br><span class="line"></span><br><span class="line">In [<span class="number">161</span>]: a</span><br><span class="line">Out[<span class="number">161</span>]: (<span class="number">1</span>,)</span><br></pre></td></tr></table></figure>

<h3 id="元组操作"><a href="#元组操作" class="headerlink" title="元组操作"></a><strong>元组操作</strong></h3><p>元组不可以修改</p>
<p> my_tuple.</p>
<pre><code>count() index()</code></pre><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul>
<li>字典和列表一样，也能够存储多个数据</li>
<li>列表中找某个元素时，是根据下标进行的</li>
<li>字典中找某个元素时，是根据’名字’（就是冒号:前面的那个值，例如上面代码中的’name’、’id’、’sex’）</li>
<li>字典的每个元素由2部分组成，键:值。例如 ‘name’:’班长’ ,’name’为键，’班长’为值</li>
</ul>
<h3 id="字典操作"><a href="#字典操作" class="headerlink" title="字典操作"></a>字典操作</h3><p>In [162]: my_dict = {‘name’:’zhang’,’age’:21}</p>
<p>In [163]: my_dict.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">               clear()      get()        pop()        update()</span><br><span class="line">               copy()浅复制       items()      popitem()    values()</span><br><span class="line">               fromkeys()   keys()       setdefault()</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"><span class="comment"># pop(key[,default])</span></span><br><span class="line"><span class="comment"># 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</span></span><br><span class="line">my_dict.pop(<span class="string">'name'</span>)</span><br><span class="line"><span class="string">'zhang'</span></span><br><span class="line">my_dict.pop(<span class="string">'nameaa'</span>)</span><br><span class="line"><span class="comment"># 异常</span></span><br><span class="line">my_dict.pop(<span class="string">'nameaa'</span>,<span class="string">'nop'</span>)</span><br><span class="line"><span class="string">'nop'</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>直接赋值：</strong>其实就是对象的引用（别名）。</p>
</li>
<li><p><strong>浅拷贝(copy)：</strong>拷贝父对象，不会拷贝对象的内部的子对象。</p>
</li>
<li><p><strong>深拷贝(deepcopy)：</strong> copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</p>
<p>​</p>
</li>
</ul>
<p><strong>fromkeys(seq,[val])</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fromkeys(seq,[val])</span></span><br><span class="line"><span class="comment"># 创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</span></span><br><span class="line"><span class="comment"># 返回： 新字典</span></span><br><span class="line">dict.fromkeys([<span class="string">'name'</span>,<span class="string">'age'</span>])</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="literal">None</span>, <span class="string">'name'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">dict.fromkeys([<span class="string">'name'</span>,<span class="string">'age'</span>],[<span class="string">'zhang'</span>,<span class="number">222</span>])</span><br><span class="line">&#123;<span class="string">'age'</span>: [<span class="string">'zhang'</span>, <span class="number">222</span>], <span class="string">'name'</span>: [<span class="string">'zhang'</span>, <span class="number">222</span>]&#125;</span><br></pre></td></tr></table></figure>

<p><strong>setdefault(val,def)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setdefault(key, default=None)</span></span><br><span class="line"><span class="comment"># 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</span></span><br><span class="line"><span class="comment"># 函数返回 ： 设置的键对应的值</span></span><br><span class="line">my_dict</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">21</span>&#125;</span><br><span class="line"></span><br><span class="line">my_dict.setdefault(<span class="string">'name'</span>,<span class="string">'zhangsan'</span>)</span><br><span class="line"><span class="string">'zhangsan'</span></span><br><span class="line"></span><br><span class="line">my_dict</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">21</span>, <span class="string">'name'</span>: <span class="string">'zhangsan'</span>&#125;</span><br><span class="line"></span><br><span class="line">my_dict.setdefault(<span class="string">'name'</span>,<span class="string">'lisi'</span>)</span><br><span class="line"><span class="string">'zhangsan'</span></span><br><span class="line"></span><br><span class="line">my_dict</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">21</span>, <span class="string">'name'</span>: <span class="string">'zhangsan'</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>popitem</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># popitem()</span></span><br><span class="line"><span class="comment"># 随机返回并删除字典中的一对键和值(一般删除末尾对)。</span></span><br><span class="line"><span class="comment"># 函数返回 删除的键值对字典</span></span><br><span class="line">my_dict</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">21</span>, <span class="string">'name'</span>: <span class="string">'zhangsan'</span>&#125;</span><br><span class="line"></span><br><span class="line">my_dict.popitem()</span><br><span class="line">(<span class="string">'name'</span>, <span class="string">'zhangsan'</span>)</span><br><span class="line"></span><br><span class="line">my_dict</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">21</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>update(dict)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># update(dict2)</span></span><br><span class="line"><span class="comment"># 把字典dict2的键/值对更新到dict里</span></span><br><span class="line">In [<span class="number">1</span>]: my_dict = &#123;<span class="string">'name'</span>:<span class="string">'zhangsan'</span>,<span class="string">'age'</span>:<span class="number">22</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: update_dict = &#123;<span class="string">'addr'</span>:<span class="string">'anhui'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: my_dict.update(update_dict)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: my_dict</span><br><span class="line">Out[<span class="number">4</span>]: &#123;<span class="string">'addr'</span>: <span class="string">'anhui'</span>, <span class="string">'age'</span>: <span class="number">22</span>, <span class="string">'name'</span>: <span class="string">'zhangsan'</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><ul>
<li>通过键查找</li>
<li>遍历查找</li>
<li>get(‘键名’，默认返回值)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">'name'</span>:<span class="string">'zhang'</span>,<span class="string">'age'</span>:<span class="number">21</span>&#125;</span><br><span class="line"></span><br><span class="line">my_dict[<span class="string">'name'</span>]</span><br><span class="line"><span class="string">'zhang'</span></span><br><span class="line"></span><br><span class="line">my_dict.get(<span class="string">'name'</span>)</span><br><span class="line"><span class="string">'zhang'</span></span><br><span class="line"></span><br><span class="line">my_dict.get(<span class="string">'name'</span>,<span class="string">'xu'</span>)</span><br><span class="line"><span class="string">'zhang'</span></span><br><span class="line"></span><br><span class="line">my_dict.get(<span class="string">'my_name'</span>,<span class="string">'xu'</span>)</span><br><span class="line"><span class="string">'xu'</span></span><br></pre></td></tr></table></figure>

<h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><p><strong>keys</strong></p>
<p>返回一个包含字典所有KEY的列表</p>
<p><strong>values</strong></p>
<p>返回一个包含字典所有value的列表</p>
<p><strong>items</strong></p>
<p>返回一个包含所有（键，值）元祖的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">168</span>]: <span class="keyword">for</span> key,val <span class="keyword">in</span> my_dict.items():</span><br><span class="line">     ...:     print(<span class="string">'键=&#123;&#125;,值=&#123;&#125;'</span>.format(key,val))</span><br><span class="line">键=name,值=zhang</span><br><span class="line">键=age,值=<span class="number">21</span></span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">del dict[&#39;Name&#39;] # 删除键 &#39;Name&#39;</span><br><span class="line">dict.clear()     # 清空字典</span><br><span class="line">del dict         # 删除字典</span><br><span class="line">dict.pop(&#39;Name&#39;,&#39;默认返回值&#39;)</span><br><span class="line">dict.popitem() # 随机删除一个键值对</span><br></pre></td></tr></table></figure>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>定义函数的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def 函数名():</span><br><span class="line">    代码</span><br></pre></td></tr></table></figure>

<h2 id="函数的文档说明"><a href="#函数的文档说明" class="headerlink" title="函数的文档说明"></a>函数的文档说明</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def test(a,b):</span><br><span class="line">...     &quot;用来完成对2个数求和&quot;</span><br><span class="line">...     print(&quot;%d&quot;%(a+b))</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; test(11,22)</span><br><span class="line">33</span><br></pre></td></tr></table></figure>

<p>如果执行，以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; help(test)</span><br></pre></td></tr></table></figure>

<p>能够看到test函数的相关说明</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Help on function test <span class="keyword">in</span> module __main__:</span><br><span class="line">test(a, b)</span><br><span class="line">    用来完成对<span class="number">2</span>个数求和</span><br><span class="line">(END)</span><br></pre></td></tr></table></figure>

<h2 id="函数返回多个值"><a href="#函数返回多个值" class="headerlink" title="函数返回多个值"></a>函数返回多个值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    shang = a//b</span><br><span class="line">    yu = a%b</span><br><span class="line">    <span class="keyword">return</span> shang,yu</span><br><span class="line">a = func(<span class="number">5</span>,<span class="number">2</span>) //(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 利用元组性质实现元组拆分</span></span><br></pre></td></tr></table></figure>

<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>以下是调用函数时可使用的正式参数类型：</p>
<ul>
<li>必需参数</li>
<li>关键字参数</li>
<li>默认参数</li>
<li>不定长参数</li>
</ul>
<h3 id="必需参数"><a href="#必需参数" class="headerlink" title="必需参数"></a>必需参数</h3><p>必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p>
<h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p>
<p>使用关键字参数<strong>允许</strong>函数调用时参数的顺序与声明时<strong>不一致</strong>，因为 Python 解释器能够用参数名匹配参数值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_print</span><span class="params">(name,age)</span>:</span></span><br><span class="line">    print(name,<span class="string">':'</span>,age)</span><br><span class="line"><span class="comment"># 必须参数调用</span></span><br><span class="line">my_print(<span class="string">'zhangsan'</span>,<span class="number">20</span>) </span><br><span class="line"><span class="comment"># 关键字参数</span></span><br><span class="line">my_print(age=<span class="number">20</span>,name=<span class="string">'zhang'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>调用函数时，如果没有传递参数，则会使用默认参数。<strong>默认参数必须放在最后面，否则会报错：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_print</span><span class="params">(name,age,addr=<span class="string">'ah'</span>)</span>:</span></span><br><span class="line">    print(name,<span class="string">':'</span>,age,<span class="string">':'</span>,addr)</span><br><span class="line">    </span><br><span class="line">my_print(<span class="string">'lisi'</span>,<span class="number">20</span>)</span><br><span class="line"><span class="comment"># lisi : 20 : ah</span></span><br><span class="line"></span><br><span class="line">my_print(<span class="string">'lisi'</span>,<span class="number">20</span>,<span class="string">'beijing'</span>)</span><br><span class="line"><span class="comment"># lisi : 20 : beijing</span></span><br></pre></td></tr></table></figure>

<h3 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h3><p>你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述2种参数不同，声明时不会命名。基本语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def functionname([formal_args,] *agrs,**kwargs):</span><br><span class="line">   &quot;函数_文档字符串&quot;</span><br><span class="line">   function_suite</span><br><span class="line">   return [expression]</span><br></pre></td></tr></table></figure>

<p>加了星号（<em>）的变量名会存放所有未命名的变量参数。如果在函数调用时没有指定参数，它就是一个空元组。(*</em>)存放的是所有未命名的变量参数，未指定，代表一个空字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span><span class="params">(name,age,*args,**kwargs)</span>:</span></span><br><span class="line">    print(name,<span class="string">":"</span>,age)</span><br><span class="line">    print(<span class="string">'其他信息'</span>,args)</span><br><span class="line">    print(<span class="string">'其他信息'</span>,kwargs)</span><br><span class="line">print_info(<span class="string">'lisi'</span>,<span class="number">22</span>)</span><br><span class="line">lisi : <span class="number">22</span></span><br><span class="line">其他信息 ()</span><br><span class="line">其他信息 &#123;&#125;</span><br><span class="line"></span><br><span class="line">print_info(<span class="string">'zhang'</span>,<span class="number">22</span>,<span class="string">'莲花村'</span>,<span class="string">'hello'</span>)</span><br><span class="line">zhang : <span class="number">22</span></span><br><span class="line">其他信息 (<span class="string">'莲花村'</span>, <span class="string">'hello'</span>)</span><br><span class="line">其他信息 &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传递的键 不需要引号</span></span><br><span class="line">print_info(<span class="string">'huahua'</span>,<span class="number">22</span>,<span class="string">'美美'</span>,<span class="string">'爱好'</span>=<span class="string">'play'</span>)</span><br><span class="line">  File <span class="string">"&lt;ipython-input-42-474f6d95c05c&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    print_info(<span class="string">'huahua'</span>,<span class="number">22</span>,<span class="string">'美美'</span>,<span class="string">'爱好'</span>=<span class="string">'play'</span>)</span><br><span class="line">                                   ^</span><br><span class="line">SyntaxError: keyword can<span class="string">'t be an expression</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [48]: print_info('</span>huahua<span class="string">',22,'</span>美美<span class="string">',爱好='</span>play<span class="string">')</span></span><br><span class="line"><span class="string">huahua : 22</span></span><br><span class="line"><span class="string">其他信息 ('</span>美美<span class="string">',)</span></span><br><span class="line"><span class="string">其他信息 &#123;'</span>爱好<span class="string">': '</span>play<span class="string">'&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>python 使用 lambda 来创建匿名函数。</p>
<p>所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。</p>
<ul>
<li>lambda 只是一个表达式，函数体比 def 简单很多。</li>
<li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</li>
<li><strong>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。</strong></li>
<li>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>lambda 函数的语法只包含一个语句，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lambda [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure>

<p>如下实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 可写函数说明</span><br><span class="line">sum &#x3D; lambda arg1, arg2: arg1 + arg2;</span><br><span class="line"># 调用sum函数</span><br><span class="line">print (&quot;相加后的值为 : &quot;, sum( 10, 20 ))</span><br><span class="line">print (&quot;相加后的值为 : &quot;, sum( 20, 20 ))</span><br></pre></td></tr></table></figure>

<p>以上实例输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">相加后的值为 :  30</span><br><span class="line">相加后的值为 :  40</span><br></pre></td></tr></table></figure>

<ul>
<li>lambda 匿名函数也是可以使用”<strong>关键字参数</strong>“进行参数传递</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; g&#x3D; lambda x,y : x**2+y**2</span><br><span class="line">&gt;&gt;&gt; g(2,3)</span><br><span class="line">13</span><br><span class="line">&gt;&gt;&gt; g(y&#x3D;3,x&#x3D;2)</span><br><span class="line">13</span><br></pre></td></tr></table></figure>

<ul>
<li>同样地，lambda 匿名函数也可以设定默认值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; g&#x3D; lambda x&#x3D;0,y&#x3D;0 : x**2+y**2</span><br><span class="line">&gt;&gt;&gt; g(2,3)</span><br><span class="line">13</span><br><span class="line">&gt;&gt;&gt; g(2)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; g(y&#x3D;3)</span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>如果只打算给其中一部分参数设定默认值，那么应当将其放在靠后的位置（和定义函数时一样，避免歧义），否则会报错。</p>
<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>Python 中，程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。</p>
<p>变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python的作用域一共有4种，分别是：</p>
<ul>
<li>L （Local） 局部作用域</li>
<li>E （Enclosing） 闭包函数外的函数中</li>
<li>G （Global） 全局作用域</li>
<li>B （Built-in） 内建作用域</li>
</ul>
<p>以 <strong>L –&gt; E –&gt; G –&gt;B</strong> 的规则查找，即：在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内建中找。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = int(<span class="number">2.9</span>)  <span class="comment"># 内建作用域</span></span><br><span class="line"> </span><br><span class="line">g_count = <span class="number">0</span>  <span class="comment"># 全局作用域</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    o_count = <span class="number">1</span>  <span class="comment"># 闭包函数外的函数中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        i_count = <span class="number">2</span>  <span class="comment"># 局部作用域</span></span><br></pre></td></tr></table></figure>

<p>Python 中只有<strong>模块（module），类（class）以及函数（def、lambda</strong>）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这这些语句内定义的变量，外部也可以访问，如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span> msg = <span class="string">'I am from Runoob'</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>msg</span><br><span class="line"><span class="string">'I am from Runoob'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="global-和-nonlocal关键字"><a href="#global-和-nonlocal关键字" class="headerlink" title="global 和 nonlocal关键字"></a>global 和 nonlocal关键字</h3><p>当内部作用域想修改外部作用域的变量时，就要用到global和nonlocal关键字。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">	a = <span class="number">10</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">		<span class="keyword">nonlocal</span> a</span><br><span class="line">		a = a + <span class="number">20</span></span><br><span class="line">		b = <span class="number">30</span></span><br><span class="line">		print(a)</span><br><span class="line">	<span class="keyword">return</span> inner</span><br><span class="line"><span class="comment"># result = outer()</span></span><br><span class="line"><span class="comment"># result()</span></span><br><span class="line">outer()() <span class="comment"># 30</span></span><br></pre></td></tr></table></figure>

<h3 id="内置作用域"><a href="#内置作用域" class="headerlink" title="内置作用域"></a>内置作用域</h3><p>内置作用域是通过一个名为builtin的标准模块来实现的，但是这个变量名自身并没有放入内置作用域内，所以必须导入这个文件才能够使用它。在Python3.0中，可以使用以下的代码来查看到底预定义了哪些变量:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import builtins</span><br><span class="line">&gt;&gt;&gt; dir(builtins)</span><br></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#global a</span></span><br><span class="line">    a = a + <span class="number">1</span></span><br><span class="line">    print(a)</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"test.py"</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    test()</span><br><span class="line">  File <span class="string">"test.py"</span>, line <span class="number">5</span>, <span class="keyword">in</span> test</span><br><span class="line">    a = a + <span class="number">1</span></span><br><span class="line">UnboundLocalError: local variable <span class="string">'a'</span> referenced before assignment</span><br><span class="line"><span class="comment"># 错误信息为局部作用域引用错误，因为 test 函数中的 a 使用的是局部，未定义，无法修改， 全局变量修改需要加global修饰。</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python-base</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础知识01</title>
    <url>/2018/10/25/python%E7%9B%B8%E5%85%B3/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8601/</url>
    <content><![CDATA[<h2 id="变量及其类型"><a href="#变量及其类型" class="headerlink" title="变量及其类型"></a>变量及其类型</h2><h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><p>在程序中，有时我们需要对2个数据进行求和，那么该怎样做呢？</p>
<p>大家类比一下现实生活中，比如去超市买东西，往往咱们需要一个菜篮子，用来进行存储物品，等到所有的物品都购买完成后，在收银台进行结账即可</p>
<p>如果在程序中，需要把2个数据，或者多个数据进行求和的话，那么就需要把这些数据先存储起来，然后把它们累加起来即可</p>
<p>在Python中，存储一个数据，需要一个叫做<code>变量</code>的东西，如下示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num1 &#x3D; 100 #num1就是一个变量，就好一个小菜篮子</span><br><span class="line"></span><br><span class="line">num2 &#x3D; 87  #num2也是一个变量</span><br><span class="line"></span><br><span class="line">result &#x3D; num1 + num2 #把num1和num2这两个&quot;菜篮子&quot;中的数据进行累加，然后放到 result变量中</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<ul>
<li>说明:<ul>
<li>所谓变量，可以理解为<code>菜篮子</code>，如果需要存储多个数据，最简单的方式是有多个变量，当然了也可以使用一个</li>
<li><strong>程序就是用来处理数据的，而变量就是用来存储数据的</strong></li>
</ul>
</li>
</ul>
<p>想一想：我们应该让变量占用多大的空间，保存什么样的数据？</p>
<h3 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h3><ul>
<li><p>生活中的“类型”的例子:大汽车，小汽车</p>
</li>
<li><p>程序中:</p>
<p>为了更充分的利用内存空间以及更有效率的管理内存，变量是有不同的类型的，如下所示:</p>
<ul>
<li>在 <code>Python</code> 中定义变量是 <strong>不需要指定类型</strong>（在其他很多高级语言中都需要）</li>
<li>数据类型可以分为 <strong>数字型</strong> 和 <strong>非数字型</strong></li>
<li>数字型<ul>
<li>整型 (<code>int</code>)</li>
<li>浮点型（<code>float</code>）</li>
<li>布尔型（<code>bool</code>） <ul>
<li>真 <code>True</code> <code>非 0 数</code> —— <strong>非零即真</strong></li>
<li>假 <code>False</code> <code>0</code></li>
</ul>
</li>
<li>复数型 (<code>complex</code>)<ul>
<li>主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题</li>
</ul>
</li>
</ul>
</li>
<li>非数字型<ul>
<li>字符串</li>
<li>列表</li>
<li>元组</li>
<li>字典</li>
</ul>
</li>
</ul>
<blockquote>
<p>提示：在 Python 2.x 中，<strong>整数</strong> 根据保存数值的长度还分为：</p>
<ul>
<li><code>int</code>（整数）</li>
<li><code>long</code>（长整数）</li>
</ul>
</blockquote>
<ul>
<li><p>使用 <code>type</code> 函数可以查看一个变量的类型</p>
<p>type(name)</p>
</li>
</ul>
</li>
<li><p>怎样知道一个变量的类型呢？</p>
<ul>
<li>在python中，只要定义了一个变量，而且它有数据，那么它的类型就已经确定了，不需要咱们开发者主动的去说明它的类型，<strong>系统会自动辨别</strong></li>
<li>可以使用type(变量的名字)，来查看变量的类型</li>
<li><strong>python3没有long类型</strong></li>
</ul>
</li>
</ul>
<h2 id="标示符和关键字"><a href="#标示符和关键字" class="headerlink" title="标示符和关键字"></a>标示符和关键字</h2><ul>
<li><p>标示符由字母、下划线和数字组成，且数字不能开头</p>
</li>
<li><p>区分大小写</p>
</li>
<li><p>关键字：python一些具有特殊功能的标示符</p>
</li>
<li><p>关键字，是python已经使用的了，所以不允许开发者自己定义和关键字相同的名字的标示符</p>
</li>
</ul>
<h3 id="查看关键字"><a href="#查看关键字" class="headerlink" title="查看关键字"></a>查看关键字</h3>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">keyword.kwlist</span><br><span class="line">   <span class="keyword">and</span>     <span class="keyword">as</span>      <span class="keyword">assert</span>     <span class="keyword">break</span>     <span class="class"><span class="keyword">class</span>      <span class="title">continue</span>    <span class="title">def</span>     <span class="title">del</span></span></span><br><span class="line"><span class="class">      <span class="title">elif</span>    <span class="title">else</span>    <span class="title">except</span>     <span class="title">exec</span>      <span class="title">finally</span>    <span class="title">for</span>         <span class="title">from</span>    <span class="title">global</span></span></span><br><span class="line"><span class="class">      <span class="title">if</span>      <span class="title">in</span>      <span class="title">import</span>     <span class="title">is</span>        <span class="title">lambda</span>     <span class="title">not</span>         <span class="title">or</span>      <span class="title">pass</span></span></span><br><span class="line"><span class="class">      <span class="title">print</span>   <span class="title">raise</span>   <span class="title">return</span>     <span class="title">try</span>       <span class="title">while</span>      <span class="title">with</span>        <span class="title">yield</span></span></span><br></pre></td></tr></table></figure>
<h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><h3 id="输入语句"><a href="#输入语句" class="headerlink" title="输入语句"></a>输入语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input_value = input(<span class="string">'请输入：'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'输出语句'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">name = <span class="string">"xiaohua"</span></span><br><span class="line">print(<span class="string">"我的姓名是%s,年龄是%d"</span>%(name,age))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>我的姓名是xiaohua，年龄是<span class="number">18</span></span><br></pre></td></tr></table></figure>

<h3 id="常用的格式符号"><a href="#常用的格式符号" class="headerlink" title="常用的格式符号"></a>常用的格式符号</h3><p>下面是完整的，它可以与％符号使用列表:</p>
<table>
<thead>
<tr>
<th>格式符号</th>
<th>转换</th>
</tr>
</thead>
<tbody><tr>
<td>%c</td>
<td>字符</td>
</tr>
<tr>
<td>%s</td>
<td>通过str() 字符串转换来格式化</td>
</tr>
<tr>
<td>%i</td>
<td>有符号十进制整数</td>
</tr>
<tr>
<td>%d</td>
<td>有符号十进制整数</td>
</tr>
<tr>
<td>%u</td>
<td>无符号十进制整数</td>
</tr>
<tr>
<td>%o</td>
<td>八进制整数</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制整数（小写字母）</td>
</tr>
<tr>
<td>%X</td>
<td>十六进制整数（大写字母）</td>
</tr>
<tr>
<td>%e</td>
<td>索引符号（小写’e’）</td>
</tr>
<tr>
<td>%E</td>
<td>索引符号（大写“E”）</td>
</tr>
<tr>
<td>%f</td>
<td>浮点实数</td>
</tr>
<tr>
<td>%g</td>
<td>％f和％e 的简写</td>
</tr>
<tr>
<td>%G</td>
<td>％F和％E的简写</td>
</tr>
</tbody></table>
<p>%e,%f,%g对于浮点数的打印是有所区别的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="number">1.23456789</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%e|%f|%g'</span>%(x,x,x)</span><br><span class="line"><span class="string">'1.234568e+00|1.234568|1.23457'</span></span><br></pre></td></tr></table></figure>

<p>因为 str.format() 比较新的函数， 大多数的 Python 代码仍然使用 % 操作符。但是因为这种旧式的格式化最终会从该语言中移除, 应该更多的使用 str.format().</p>
<h3 id="format格式化"><a href="#format格式化" class="headerlink" title="format格式化"></a>format格式化</h3><p>Python2.6 开始，新增了一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。</p>
<p><strong>基本语法是通过 {} 和 : 来代替以前的 % 。</strong></p>
<p>format 函数可以接受不限个参数，位置可以不按顺序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">"&#123;&#125; &#123;&#125;"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)    <span class="comment"># 不设置指定位置，按默认顺序</span></span><br><span class="line"><span class="string">'hello world'</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"&#123;0&#125; &#123;1&#125;"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="string">'hello world'</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"&#123;1&#125; &#123;0&#125; &#123;1&#125;"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line"><span class="string">'world hello world'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="string">'&#123;0&#125; &#123;&#125;'</span>.format(<span class="string">'hello'</span>,<span class="string">'world'</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-15</span><span class="number">-0</span>dc69087db51&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 '&#123;0&#125; &#123;&#125;'.format('hello','world')</span><br><span class="line">ValueError: cannot switch <span class="keyword">from</span> manual field specification to automatic field numbering</span><br><span class="line">    不可以一个指定位置，另一个不指定位置</span><br></pre></td></tr></table></figure>

<p>可以设置参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'姓名:&#123;name&#125;,年龄:&#123;age&#125;'</span>.format(name=<span class="string">'张三'</span>,age=<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过字典传递参数</span></span><br><span class="line">user = &#123;<span class="string">'name'</span>:<span class="string">'张三'</span>,<span class="string">'age'</span>:<span class="number">3</span>&#125;</span><br><span class="line">print(<span class="string">'姓名:&#123;name&#125;,年龄:&#123;age&#125;'</span>.format(**user))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过列表索引设置参数</span></span><br><span class="line">my_list = [<span class="string">'张三'</span>, <span class="number">3</span>]</span><br><span class="line">print(<span class="string">'姓名:&#123;0[0]&#125;,年龄:&#123;0[1]&#125;'</span>.format(my_list))   <span class="comment"># "0" 是必须的</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">print(<span class="string">'姓名:&#123;0&#125;,年龄:&#123;1&#125;'</span>.format(*my_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果都是</span></span><br><span class="line"><span class="comment"># 姓名:张三,年龄:3</span></span><br></pre></td></tr></table></figure>

<p>可以向 str.format() 传入对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>:</span></span><br><span class="line">	name = <span class="string">'张三'</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">my_print</span><span class="params">(self)</span>:</span></span><br><span class="line">		print(name)</span><br><span class="line">		</span><br><span class="line">print(<span class="string">'姓名:&#123;0.name&#125;'</span>.format(test()))  <span class="comment">#等价于</span></span><br><span class="line">print(<span class="string">'姓名:&#123;0.name&#125;'</span>.format(test)) </span><br><span class="line">姓名:张三</span><br><span class="line">    </span><br><span class="line">print(<span class="string">'姓名:&#123;name&#125;'</span>.format(test()))</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">KeyError: <span class="string">'name'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'姓名:&#123;0.my_print&#125;'</span>.format(test()))</span><br><span class="line">姓名:&lt;bound method test.my_print of &lt;__main__.test object at <span class="number">0x00BD1070</span>&gt;&gt;</span><br><span class="line">    </span><br><span class="line">print(<span class="string">'姓名:&#123;0.my_print()&#125;'</span>.format(test()))</span><br><span class="line"></span><br><span class="line">AttributeError: <span class="string">'test'</span> object has no attribute <span class="string">'my_print()'</span></span><br></pre></td></tr></table></figure>

<h3 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h3><p>下表展示了 str.format() 格式化数字的多种方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"&#123;:.2f&#125;"</span>.format(<span class="number">3.1415926</span>));</span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>数字</th>
<th>格式</th>
<th>输出</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>3.1415926</td>
<td>{:.2f}</td>
<td>3.14</td>
<td>保留小数点后两位</td>
</tr>
<tr>
<td>3.1415926</td>
<td>{:+.2f}</td>
<td>+3.14</td>
<td>带符号保留小数点后两位</td>
</tr>
<tr>
<td>-1</td>
<td>{:+.2f}</td>
<td>-1.00</td>
<td>带符号保留小数点后两位</td>
</tr>
<tr>
<td>2.71828</td>
<td>{:.0f}</td>
<td>3</td>
<td>不带小数</td>
</tr>
<tr>
<td>5</td>
<td>{:0&gt;2d}</td>
<td>05</td>
<td>数字补零 (填充左边, 宽度为2)</td>
</tr>
<tr>
<td>5</td>
<td>{:x&lt;4d}</td>
<td>5xxx</td>
<td>数字补x (填充右边, 宽度为4)</td>
</tr>
<tr>
<td>10</td>
<td>{:x&lt;4d}</td>
<td>10xx</td>
<td>数字补x (填充右边, 宽度为4)</td>
</tr>
<tr>
<td>1000000</td>
<td>{:,}</td>
<td>1,000,000</td>
<td>以逗号分隔的数字格式</td>
</tr>
<tr>
<td>0.25</td>
<td>{:.2%}</td>
<td>25.00%</td>
<td>百分比格式</td>
</tr>
<tr>
<td>1000000000</td>
<td>{:.2e}</td>
<td>1.00e+09</td>
<td>指数记法</td>
</tr>
<tr>
<td>13</td>
<td>{:10d}</td>
<td>13</td>
<td>右对齐 (默认, 宽度为10)</td>
</tr>
<tr>
<td>13</td>
<td>{:&lt;10d}</td>
<td>13</td>
<td>左对齐 (宽度为10)</td>
</tr>
<tr>
<td>13</td>
<td>{:^10d}</td>
<td>13</td>
<td>中间对齐 (宽度为10)</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>样式</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td>‘{:b}’.format(11)</td>
<td>1011</td>
</tr>
<tr>
<td>‘{:d}’.format(11)</td>
<td>11</td>
</tr>
<tr>
<td>‘{:o}’.format(11)</td>
<td>13</td>
</tr>
<tr>
<td>‘{:x}’.format(11)</td>
<td>b</td>
</tr>
<tr>
<td>‘{:#x}’.format(11)</td>
<td>0xb</td>
</tr>
<tr>
<td>‘{:#X}’.format(11)</td>
<td>0xB</td>
</tr>
</tbody></table>
<p>^, &lt;, &gt; 分别是居中、左对齐、右对齐，后面带宽度， : 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">26</span>]: <span class="string">'&#123;:-^10d&#125;'</span>.format(<span class="number">60</span>)</span><br><span class="line">Out[<span class="number">26</span>]: <span class="string">'----60----'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>表示在正数前显示 +，负数前显示 -；  （空格）表示在正数前加空格</li>
</ul>
<p>b、d、o、x 分别是二进制、十进制、八进制、十六进制。</p>
<p>此外我们可以使用大括号 {} 来转义大括号，如下实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">"&#123;&#125; 对应的位置是 &#123;&#123;0&#125;&#125;"</span>.format(<span class="string">"runoob"</span>))</span><br><span class="line">runoob 对应的位置是 &#123;<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>python支持以下几种运算符</p>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>下面以a=10 ,b=20为例进行计算</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
<td>两个对象相加 a + b 输出结果 30</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>得到负数或是一个数减去另一个数 a - b 输出结果 -10</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 200</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>x除以y b / a 输出结果 2</td>
</tr>
<tr>
<td>//</td>
<td>取整除</td>
<td>返回商的整数部分 9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
<td>返回除法的余数 b % a 输出结果 0</td>
</tr>
<tr>
<td>**</td>
<td>幂</td>
<td>返回x的y次幂 a**b 为10的20次方， 输出结果 100000000000000000000</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 9&#x2F;2.0</span><br><span class="line">4.5</span><br><span class="line">&gt;&gt;&gt; 9&#x2F;&#x2F;2.0</span><br><span class="line">4.0</span><br></pre></td></tr></table></figure>

<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值运算符</td>
<td>把=号右边的结果给左边的变量 num=1+2*3 结果num的值为7</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b &#x3D; 1, 2</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>+=</td>
<td>加法赋值运算符</td>
<td>c += a 等效于 c = c + a</td>
</tr>
<tr>
<td>-=</td>
<td>减法赋值运算符</td>
<td>c -= a 等效于 c = c - a</td>
</tr>
<tr>
<td>*=</td>
<td>乘法赋值运算符</td>
<td>c *= a 等效于 c = c * a</td>
</tr>
<tr>
<td>/=</td>
<td>除法赋值运算符</td>
<td>c /= a 等效于 c = c / a</td>
</tr>
<tr>
<td>%=</td>
<td>取模赋值运算符</td>
<td>c %= a 等效于 c = c % a</td>
</tr>
<tr>
<td>**=</td>
<td>幂赋值运算符</td>
<td><code>c**= a 等效于 c = c**a</code></td>
</tr>
<tr>
<td>//=</td>
<td>取整除赋值运算符</td>
<td>c //= a 等效于 c = c // a</td>
</tr>
</tbody></table>
<h3 id="比较-即关系-运算符"><a href="#比较-即关系-运算符" class="headerlink" title="比较(即关系)运算符"></a>比较(即关系)运算符</h3><p>python中的比较运算符如下表</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>检查两个操作数的值是否相等，如果是则条件变为真。</td>
<td>如a=3,b=3则（a == b) 为 true.</td>
</tr>
<tr>
<td>!=</td>
<td>检查两个操作数的值是否相等，如果值不相等，则条件变为真。</td>
<td>如a=1,b=3则(a != b) 为 true.</td>
</tr>
<tr>
<td>&gt;</td>
<td>检查左操作数的值是否大于右操作数的值，如果是，则条件成立。</td>
<td>如a=7,b=3则(a &gt; b) 为 true.</td>
</tr>
<tr>
<td>&lt;</td>
<td>检查左操作数的值是否小于右操作数的值，如果是，则条件成立。</td>
<td>如a=7,b=3则(a &lt; b) 为 false.</td>
</tr>
<tr>
<td>&gt;=</td>
<td>检查左操作数的值是否大于或等于右操作数的值，如果是，则条件成立。</td>
<td>如a=3,b=3则(a &gt;= b) 为 true.</td>
</tr>
<tr>
<td>&lt;=</td>
<td>检查左操作数的值是否小于或等于右操作数的值，如果是，则条件成立。</td>
<td>如a=3,b=3则(a &lt;= b) 为 true.</td>
</tr>
</tbody></table>
<h4 id="is-与-区别："><a href="#is-与-区别：" class="headerlink" title="is 与 == 区别："></a><strong>is 与 == 区别：</strong></h4><p>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</p>
<p>is not与!=区别于上述一致，一个比较的是引用对象，另一个比较的是两者的值。</p>
<p>在交互式环境中，编译器会有一个小整数池的概念，会把（-5，256）间的数预先创建好，而当a和b超过这个范围的时候，两个变量就会指向不同的对象了，因此地址也会不一样</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>逻辑表达式</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>x and y</td>
<td>布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td>
<td>(a and b) 返回 20。</td>
</tr>
<tr>
<td>or</td>
<td>x or y</td>
<td>布尔”或” - 如果 x 是 True，它返回 True，否则它返回 y 的计算值。</td>
<td>(a or b) 返回 10。</td>
</tr>
<tr>
<td>not</td>
<td>not x</td>
<td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>
<td>not(a and b) 返回 False</td>
</tr>
</tbody></table>
<blockquote>
<p>x and y and z :&gt;&gt;&gt;&gt;    x为真，返回后面第一个为假的值，都为真，返回最后一个值。 x为假返回x</p>
</blockquote>
<blockquote>
<p>x or y or z :  &gt;&gt;&gt;&gt;        返回第一个为真的值，都为假返回最后一个为假的值</p>
</blockquote>
<h3 id="Python位运算符"><a href="#Python位运算符" class="headerlink" title="Python位运算符"></a>Python位运算符</h3><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：（a=60,b=13）</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>按位与运算符</td>
<td>(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td>
</tr>
<tr>
<td>^</td>
<td>按位异或运算符</td>
<td>(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td>
</tr>
<tr>
<td>~</td>
<td>按位取反运算符</td>
<td>(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移动运算符</td>
<td>a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移动运算符</td>
<td>a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td>
</tr>
<tr>
<td>*  按位或运算符  `a</td>
<td>b` 输出结果 61，二进制解析：  0011 1101</td>
<td></td>
</tr>
<tr>
<td><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b</span><br><span class="line">Out[<span class="number">95</span>]: (<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line">a = a^b</span><br><span class="line">b = a^b</span><br><span class="line">a = a^b</span><br><span class="line">a</span><br><span class="line">Out[<span class="number">99</span>]: <span class="number">7</span></span><br><span class="line">b</span><br><span class="line">Out[<span class="number">100</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="原码，补码，反码"><a href="#原码，补码，反码" class="headerlink" title="原码，补码，反码"></a>原码，补码，反码</h4><p>计算机存储的都是补码，给人识别的是源码，正数的原码，补码，反码，一致。</p>
<p>负数的反码是最高位不变，其余位取反，补码为反码加1,数值在计算机中以补码存储。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个字节，60的二进制为 0011 1100 ，在计算机存储的是补码，也就是 0011 1100，</span></span><br><span class="line"><span class="comment"># 取反操作</span></span><br><span class="line">print(~<span class="number">60</span>)  <span class="comment">#-61   60的补码取反，补码计算结果为1100 0011= -1*2**7+1*2**6+1+2 = -128+64+3 = -61</span></span><br><span class="line">print(~<span class="number">-60</span>) <span class="comment">#59</span></span><br><span class="line"><span class="comment"># -60 原码为 1011 1100 ，在计算机存储的补码为：1100 0100，反码为： 10111011,结果为：32+16+8+3=59</span></span><br></pre></td></tr></table></figure>



<h2 id="Python转义字符"><a href="#Python转义字符" class="headerlink" title="Python转义字符"></a>Python转义字符</h2><p>在需要在字符中使用特殊字符时，python用反斜杠()转义字符。如下表：</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>(在行尾时)</td>
<td>续行符</td>
</tr>
<tr>
<td>\</td>
<td>反斜杠符号</td>
</tr>
<tr>
<td>&#39;</td>
<td>单引号</td>
</tr>
<tr>
<td>&quot;</td>
<td>双引号</td>
</tr>
<tr>
<td>\a</td>
<td>响铃</td>
</tr>
<tr>
<td>\b</td>
<td>退格(Backspace)</td>
</tr>
<tr>
<td>\e</td>
<td>转义</td>
</tr>
<tr>
<td>\000</td>
<td>空</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\v</td>
<td>纵向制表符</td>
</tr>
<tr>
<td>\t</td>
<td>横向制表符</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
<tr>
<td>\f</td>
<td>换页</td>
</tr>
<tr>
<td>\oyy</td>
<td>八进制数，yy代表的字符，例如：\o12代表换行</td>
</tr>
<tr>
<td>\xyy</td>
<td>十六进制数，yy代表的字符，例如：\x0a代表换行</td>
</tr>
<tr>
<td>\other</td>
<td>其它的字符以普通格式输出</td>
</tr>
</tbody></table>
<h2 id="Python运算符优先级"><a href="#Python运算符优先级" class="headerlink" title="Python运算符优先级"></a>Python运算符优先级</h2><p>以下表格列出了从最高到最低优先级的所有运算符：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>**</td>
<td>指数 (最高优先级)</td>
</tr>
<tr>
<td>~ + -</td>
<td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>
</tr>
<tr>
<td>* / % //</td>
<td>乘，除，取模和取整除</td>
</tr>
<tr>
<td>+ -</td>
<td>加法减法</td>
</tr>
<tr>
<td>&gt;&gt; &lt;&lt;</td>
<td>右移，左移运算符</td>
</tr>
<tr>
<td>&amp;</td>
<td>位 ‘AND’</td>
</tr>
<tr>
<td>^ |</td>
<td>位运算符</td>
</tr>
<tr>
<td>&lt;= &lt; &gt; &gt;=</td>
<td>比较运算符</td>
</tr>
<tr>
<td>&lt;&gt; == !=</td>
<td>等于运算符</td>
</tr>
<tr>
<td>= %= /= //= -= += <em>= *</em>=</td>
<td>赋值运算符</td>
</tr>
<tr>
<td>is is not</td>
<td>身份运算符</td>
</tr>
<tr>
<td>in not in</td>
<td>成员运算符</td>
</tr>
<tr>
<td>not or and</td>
<td>逻辑运算符</td>
</tr>
</tbody></table>
<h2 id="常用的数据类型转换"><a href="#常用的数据类型转换" class="headerlink" title="常用的数据类型转换"></a>常用的数据类型转换</h2><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int(x [,base ])</td>
<td>将x转换为一个整数</td>
</tr>
<tr>
<td>float(x )</td>
<td>将x转换到一个浮点数</td>
</tr>
<tr>
<td>complex(real [,imag ])</td>
<td>创建一个复数</td>
</tr>
<tr>
<td>str(x )</td>
<td>将对象 x 转换为字符串</td>
</tr>
<tr>
<td>repr(x )</td>
<td>将对象 x 转换为表达式字符串</td>
</tr>
<tr>
<td>eval(str )</td>
<td>用来计算在字符串中的有效Python表达式,并返回一个对象</td>
</tr>
<tr>
<td>tuple(s )</td>
<td>将序列 s 转换为一个元组</td>
</tr>
<tr>
<td>list(s )</td>
<td>将序列 s 转换为一个列表</td>
</tr>
<tr>
<td>chr(x )</td>
<td>将一个整数转换为一个字符</td>
</tr>
<tr>
<td>unichr(x )   -python2</td>
<td>将一个整数转换为Unicode字符</td>
</tr>
<tr>
<td>ord(x )</td>
<td>将一个字符转换为它的整数值</td>
</tr>
<tr>
<td>hex(x )</td>
<td>将一个整数转换为一个十六进制字符串</td>
</tr>
<tr>
<td>oct(x )</td>
<td>将一个整数转换为一个八进制字符串</td>
</tr>
<tr>
<td>bin(x)</td>
<td>将一个十进制数转二进制数</td>
</tr>
</tbody></table>
<p>举例</p>
<pre><code>a = &apos;100&apos; # 此时a的类型是一个字符串，里面存放了100这3个字符
b = int(a) # 此时b的类型是整型，里面存放的是数字100
print(&quot;a=%d&quot;%b)

bin(60)
Out[101]: &apos;0b111100&apos;

hex(60)
Out[102]: &apos;0x3c&apos;

int(&apos;111100&apos;,2)
Out[107]: 60

int(&apos;3c&apos;,16)
Out[108]: 60

int(&apos;0x3c&apos;,16)
Out[109]: 60

int(&apos;0b101110101&apos;,2)
Out[111]: 373</code></pre><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = <span class="number">77</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score&gt;=<span class="number">90</span> <span class="keyword">and</span> score&lt;=<span class="number">100</span>:</span><br><span class="line">    print(<span class="string">'本次考试，等级为A'</span>)</span><br><span class="line"><span class="keyword">elif</span> score&gt;=<span class="number">80</span> <span class="keyword">and</span> score&lt;<span class="number">90</span>:</span><br><span class="line">    print(<span class="string">'本次考试，等级为B'</span>)</span><br><span class="line"><span class="keyword">elif</span> score&gt;=<span class="number">70</span> <span class="keyword">and</span> score&lt;<span class="number">80</span>:</span><br><span class="line">    print(<span class="string">'本次考试，等级为C'</span>)</span><br><span class="line"><span class="keyword">elif</span> score&gt;=<span class="number">60</span> <span class="keyword">and</span> score&lt;<span class="number">70</span>:</span><br><span class="line">    print(<span class="string">'本次考试，等级为D'</span>)</span><br><span class="line"><span class="keyword">elif</span> score&gt;=<span class="number">0</span> <span class="keyword">and</span> score&lt;<span class="number">60</span>:</span><br><span class="line">    print(<span class="string">'本次考试，等级为E'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 99乘法表</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">		j = <span class="number">1</span></span><br><span class="line">		<span class="keyword">while</span> j &lt;= i:</span><br><span class="line">			print(<span class="string">'&#123;&#125;*&#123;&#125;=&#123;&#125;\t'</span>.format(j, i, j * i),end=<span class="string">''</span>)</span><br><span class="line">			j += <span class="number">1</span></span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line">		print()</span><br></pre></td></tr></table></figure>

<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'&#123;&#125;*&#123;&#125;=&#123;&#125;\t'</span>.format(j,i,i*j),end=<span class="string">''</span>)</span><br><span class="line">    print()</span><br><span class="line"><span class="number">1</span>*<span class="number">1</span>=<span class="number">1</span>	</span><br><span class="line"><span class="number">1</span>*<span class="number">2</span>=<span class="number">2</span>	<span class="number">2</span>*<span class="number">2</span>=<span class="number">4</span>	</span><br><span class="line"><span class="number">1</span>*<span class="number">3</span>=<span class="number">3</span>	<span class="number">2</span>*<span class="number">3</span>=<span class="number">6</span>	<span class="number">3</span>*<span class="number">3</span>=<span class="number">9</span>	</span><br><span class="line"><span class="number">1</span>*<span class="number">4</span>=<span class="number">4</span>	<span class="number">2</span>*<span class="number">4</span>=<span class="number">8</span>	<span class="number">3</span>*<span class="number">4</span>=<span class="number">12</span>	<span class="number">4</span>*<span class="number">4</span>=<span class="number">16</span>	</span><br><span class="line"><span class="number">1</span>*<span class="number">5</span>=<span class="number">5</span>	<span class="number">2</span>*<span class="number">5</span>=<span class="number">10</span>	<span class="number">3</span>*<span class="number">5</span>=<span class="number">15</span>	<span class="number">4</span>*<span class="number">5</span>=<span class="number">20</span>	<span class="number">5</span>*<span class="number">5</span>=<span class="number">25</span>	</span><br><span class="line"><span class="number">1</span>*<span class="number">6</span>=<span class="number">6</span>	<span class="number">2</span>*<span class="number">6</span>=<span class="number">12</span>	<span class="number">3</span>*<span class="number">6</span>=<span class="number">18</span>	<span class="number">4</span>*<span class="number">6</span>=<span class="number">24</span>	<span class="number">5</span>*<span class="number">6</span>=<span class="number">30</span>	<span class="number">6</span>*<span class="number">6</span>=<span class="number">36</span>	</span><br><span class="line"><span class="number">1</span>*<span class="number">7</span>=<span class="number">7</span>	<span class="number">2</span>*<span class="number">7</span>=<span class="number">14</span>	<span class="number">3</span>*<span class="number">7</span>=<span class="number">21</span>	<span class="number">4</span>*<span class="number">7</span>=<span class="number">28</span>	<span class="number">5</span>*<span class="number">7</span>=<span class="number">35</span>	<span class="number">6</span>*<span class="number">7</span>=<span class="number">42</span>	<span class="number">7</span>*<span class="number">7</span>=<span class="number">49</span>	</span><br><span class="line"><span class="number">1</span>*<span class="number">8</span>=<span class="number">8</span>	<span class="number">2</span>*<span class="number">8</span>=<span class="number">16</span>	<span class="number">3</span>*<span class="number">8</span>=<span class="number">24</span>	<span class="number">4</span>*<span class="number">8</span>=<span class="number">32</span>	<span class="number">5</span>*<span class="number">8</span>=<span class="number">40</span>	<span class="number">6</span>*<span class="number">8</span>=<span class="number">48</span>	<span class="number">7</span>*<span class="number">8</span>=<span class="number">56</span>	<span class="number">8</span>*<span class="number">8</span>=<span class="number">64</span>	</span><br><span class="line"><span class="number">1</span>*<span class="number">9</span>=<span class="number">9</span>	<span class="number">2</span>*<span class="number">9</span>=<span class="number">18</span>	<span class="number">3</span>*<span class="number">9</span>=<span class="number">27</span>	<span class="number">4</span>*<span class="number">9</span>=<span class="number">36</span>	<span class="number">5</span>*<span class="number">9</span>=<span class="number">45</span>	<span class="number">6</span>*<span class="number">9</span>=<span class="number">54</span>	<span class="number">7</span>*<span class="number">9</span>=<span class="number">63</span>	<span class="number">8</span>*<span class="number">9</span>=<span class="number">72</span>	<span class="number">9</span>*<span class="number">9</span>=<span class="number">81</span></span><br></pre></td></tr></table></figure>

<p>支持break，continue</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是 Python 中最常用的数据类型。我们可以使用引号(‘或”)来创建字符串。</p>
<h3 id="下标"><a href="#下标" class="headerlink" title="下标"></a><strong>下标</strong></h3><p>字符串的下标从零开始。如 aaStr = ‘abcdefg’ 其中a的下标就是0，aaStr[0]就是a 字符</p>
<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a><strong>切片</strong></h3><p><strong>切片的语法：[起始：结束：步长]</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例</span></span><br><span class="line">aa = <span class="string">'abcdefg'</span></span><br><span class="line">aa[<span class="number">0</span>:<span class="number">3</span>] <span class="comment"># 就等于 'abc' 三个字符，分别取得是aa[0] aa[1] aa[2], 0~3  包头不包围</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取得字符串的长度，就是等于 length = 结束-开始</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从尾往前取字符串，最后一位的下标就是 -1, 倒数第二位的下标为-2</li>
<li>步长可以是负数，代表从后往前取 , 此时，从后往前看，开始的位置为结束的位置，结束的位置为开始的位置</li>
<li>起始和结束位置可以省略，默认是从字符串头开始，尾结束</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">'zhangsan'</span></span><br><span class="line">name[<span class="number">1</span>:<span class="number">-1</span>] <span class="comment"># hangsa</span></span><br><span class="line"></span><br><span class="line">name[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>] <span class="comment"># hn </span></span><br><span class="line"></span><br><span class="line">In [<span class="number">80</span>]: name[<span class="number">3</span>::<span class="number">-1</span>]</span><br><span class="line">Out[<span class="number">80</span>]: <span class="string">'nahz'</span> <span class="comment"># 从下标3位置往前安步长取</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串取反</span></span><br><span class="line">In [<span class="number">81</span>]: name[::<span class="number">-1</span>]</span><br><span class="line">Out[<span class="number">81</span>]: <span class="string">'nasgnahz'</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">83</span>]: name[<span class="number">5</span>:<span class="number">2</span>:<span class="number">-2</span>]</span><br><span class="line">Out[<span class="number">83</span>]: <span class="string">'sn'</span></span><br></pre></td></tr></table></figure>

<h3 id="常用字符串操作函数"><a href="#常用字符串操作函数" class="headerlink" title="常用字符串操作函数"></a>常用字符串操作函数</h3><p>字符串的操作函数有：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">84</span>]:  mystr = <span class="string">'abcdefg hello world hello world haha Hello World'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: mystr.</span><br><span class="line"> capitalize()   find()         isdigit()      isupper()      replace()      split()        upper()</span><br><span class="line"> casefold()     format()       isidentifier() join()         rfind()        splitlines()   		  zfill()</span><br><span class="line"> center()       format_map()   islower()      ljust()        rindex()        startswith()</span><br><span class="line"> count()        index()        isnumeric()    lower()        rjust()        strip()</span><br><span class="line"> encode()       isalnum()      isprintable()  lstrip()       rpartition()    swapcase()</span><br><span class="line"> endswith()     isalpha()      isspace()      maketrans()    rsplit()       title()</span><br><span class="line"> expandtabs()   isdecimal()    istitle()      partition()    rstrip()        translate()</span><br></pre></td></tr></table></figure>

<h4 id="查找元素位置"><a href="#查找元素位置" class="headerlink" title="查找元素位置"></a>查找元素位置</h4><p>查找的函数有find,index, 两者的区别是，find查找的元素如果不存在返回-1，而index报错，出现异常。</p>
<p><strong>语法</strong></p>
<p>​    mystr.index(str, start=0, end=len(mystr))</p>
<p>​    mystr.find(str, start=0, end=len(mystr))</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">91</span>]: mystr.find(<span class="string">'hello'</span>)</span><br><span class="line">Out[<span class="number">91</span>]: <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">92</span>]: mystr.index(<span class="string">'hello'</span>)</span><br><span class="line">Out[<span class="number">92</span>]: <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">93</span>]: mystr.find(<span class="string">'haha'</span>)</span><br><span class="line">Out[<span class="number">93</span>]: <span class="number">32</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">94</span>]: mystr.find(<span class="string">'sb'</span>)</span><br><span class="line">Out[<span class="number">94</span>]: <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: mystr.index(<span class="string">'sb'</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-95</span>-e6ebbe011141&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 mystr.index('sb')</span><br><span class="line">ValueError: substring <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure>
<p>类似于 index()，不过是从右边开始.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.rindex( str, start&#x3D;0,end&#x3D;len(mystr))</span><br></pre></td></tr></table></figure>

<p>类似于 find()函数，不过是从右边开始查找.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.rfind(str, start&#x3D;0,end&#x3D;len(mystr) )</span><br></pre></td></tr></table></figure>
<h4 id="查找元素个数"><a href="#查找元素个数" class="headerlink" title="查找元素个数"></a>查找元素个数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">mystr.count(str, start=<span class="number">0</span>, end=len(mystr))</span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: mystr.count(<span class="string">'hello'</span>)</span><br><span class="line">Out[<span class="number">97</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">98</span>]: mystr.count(<span class="string">'Hello'</span>)</span><br><span class="line">Out[<span class="number">98</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="替换replace"><a href="#替换replace" class="headerlink" title="替换replace"></a>替换replace</h4><p>把 mystr 中的 str1 替换成 str2,如果 count 指定，则替换不超过 count 次.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr.replace(str1, str2,  mystr.count(str1))</span><br></pre></td></tr></table></figure>

<h4 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h4><h5 id="split"><a href="#split" class="headerlink" title="split"></a>split</h5><p>以 str 为分隔符切片 mystr，如果 maxsplit有指定值，则仅分隔 maxsplit 个子字符串。返回一个列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">99</span>]: str</span><br><span class="line">Out[<span class="number">99</span>]: <span class="string">'abcdefg hello world hello world haha Hello World'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">100</span>]: str.split(<span class="string">' '</span>)</span><br><span class="line">Out[<span class="number">100</span>]: [<span class="string">'abcdefg'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'haha'</span>, <span class="string">'Hello'</span>, <span class="string">'World'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">101</span>]: str.split(<span class="string">' '</span>,<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">101</span>]: [<span class="string">'abcdefg'</span>, <span class="string">'hello'</span>, <span class="string">'world hello world haha Hello World'</span>]</span><br><span class="line"><span class="comment"># split()不加参数，去除空白字符</span></span><br><span class="line">In [<span class="number">118</span>]: a</span><br><span class="line">Out[<span class="number">118</span>]: <span class="string">'abcdefg hello world\t hello world haha Hello World\t\n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">119</span>]: a.split()</span><br><span class="line">Out[<span class="number">119</span>]: [<span class="string">'abcdefg'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'haha'</span>, <span class="string">'Hello'</span>, <span class="string">'World'</span>]</span><br></pre></td></tr></table></figure>

<h5 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h5><p>把mystr以str分割成三部分,str前，str和str后,<strong>返回一个元组</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.partition(str)</span><br><span class="line">In [103]: mystr.partition(&#39;hello&#39;)</span><br><span class="line">Out[103]: (&#39;abcdefg &#39;, &#39;hello&#39;, &#39; world hello world haha Hello World&#39;)</span><br></pre></td></tr></table></figure>

<p>类似于 partition()函数,不过是从右边开始.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.rpartition(str)</span><br></pre></td></tr></table></figure>

<p>按照行分隔，返回一个包含各行作为元素的列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.splitlines()  </span><br><span class="line"></span><br><span class="line">In [104]: str &#x3D; &#39;hello\nworld&#39;</span><br><span class="line"></span><br><span class="line">In [105]: str.splitlines()</span><br><span class="line">Out[105]: [&#39;hello&#39;, &#39;world&#39;]</span><br></pre></td></tr></table></figure>



<h4 id="判断开始结束字符串"><a href="#判断开始结束字符串" class="headerlink" title="判断开始结束字符串"></a>判断开始结束字符串</h4><p>检查字符串是否是以 obj 开头, 是则返回 True，否则返回 False</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr.startswith(obj)</span><br></pre></td></tr></table></figure>

<p>检查字符串是否以obj结束，如果是返回True,否则返回 False.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr.endswith(obj)</span><br></pre></td></tr></table></figure>

<h4 id="转大小写"><a href="#转大小写" class="headerlink" title="转大小写"></a>转大小写</h4><p>转换 mystr 中所有大写字符为小写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr.lower()</span><br></pre></td></tr></table></figure>

<p>转换 mystr 中的小写字母为大写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr.upper()</span><br></pre></td></tr></table></figure>

<p>把字符串的第一个字符大写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr.capitalize()</span><br></pre></td></tr></table></figure>

<p>把字符串的每个单词首字母大写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"hello china"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.title()</span><br><span class="line"><span class="string">'Hello China'</span></span><br></pre></td></tr></table></figure>
<h4 id="字符串对齐"><a href="#字符串对齐" class="headerlink" title="字符串对齐"></a>字符串对齐</h4><p>返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.ljust(width) </span><br><span class="line">In [106]: mystr &#x3D; &#39;hello&#39;</span><br><span class="line"></span><br><span class="line">In [107]: mystr.ljust(10)</span><br><span class="line">Out[107]: &#39;hello     &#39;</span><br></pre></td></tr></table></figure>

<p>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.rjust(width)</span><br></pre></td></tr></table></figure>

<p>返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.center(width)</span><br></pre></td></tr></table></figure>

<p><strong>空白字符删除</strong></p>
<p>删除 mystr 左边的空白字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.lstrip()</span><br></pre></td></tr></table></figure>

<p>删除 mystr 字符串末尾的空白字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.rstrip()</span><br></pre></td></tr></table></figure>

<p>删除mystr字符串两端的空白字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">108</span>]: str = <span class="string">'\t   hello world \t'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">109</span>]: str</span><br><span class="line">Out[<span class="number">109</span>]: <span class="string">'\t   hello world \t'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">110</span>]: str.strip()</span><br><span class="line">Out[<span class="number">110</span>]: <span class="string">'hello world</span></span><br></pre></td></tr></table></figure>

<h4 id="判断字母、数字、空格"><a href="#判断字母、数字、空格" class="headerlink" title="判断字母、数字、空格"></a>判断字母、数字、空格</h4><p>如果 mystr 所有字符都是字母 则返回 True,否则返回 False</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.isalpha()</span><br></pre></td></tr></table></figure>

<p>如果 mystr 只包含数字则返回 True 否则返回 False.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.isdigit()</span><br></pre></td></tr></table></figure>

<p>如果 mystr 所有字符都是字母或数字则返回 True,否则返回 False</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.isalnum()</span><br></pre></td></tr></table></figure>

<p>如果 mystr 中只包含空格，则返回 True，否则返回 False.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mystr.isspace()</span><br></pre></td></tr></table></figure>

<h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>mystr 中每个字符后面插入str,构造出一个新的字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr.join(str)</span><br><span class="line"></span><br><span class="line">In [<span class="number">111</span>]: a = <span class="string">'abcd'</span></span><br><span class="line">In [<span class="number">112</span>]: <span class="string">'-'</span>.join(a)</span><br><span class="line">Out[<span class="number">112</span>]: <span class="string">'a-b-c-d'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># join 列表 返回字符串</span></span><br><span class="line">In [<span class="number">114</span>]: a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">In [<span class="number">115</span>]: <span class="string">'+'</span>.join(a)</span><br><span class="line">Out[<span class="number">115</span>]: <span class="string">'a+b+c'</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python-base</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础知识-常量池</title>
    <url>/2017/12/05/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/8-String%E5%B8%B8%E9%87%8F%E6%B1%A0/</url>
    <content><![CDATA[<h3 id="1-String实例的初始化"><a href="#1-String实例的初始化" class="headerlink" title="1. String实例的初始化"></a>1. String实例的初始化</h3><p><code>String</code>类型的初始化在Java中分为两类：</p>
<ul>
<li>一类是通过双引号包裹一个字符来初始化；</li>
<li>另一类是通过关键字<code>new</code>像一个普通的对象那样初始化一个<code>String</code>实例。</li>
</ul>
<p>前者在constant pool中开辟一个常量，并返回相应的引用，而后者是在heap中开辟一个常量，再返回相应的对象。所以，两者的reference肯定是不同的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    String s1 = <span class="string">"abcd"</span>;</span><br><span class="line">    String s2 = <span class="keyword">new</span> String(<span class="string">"abcd"</span>);</span><br><span class="line">    System.out.println(s1 == s2);   <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>而constant pool中的常量是可以被共享用于节省内存开销和创建时间的开销（这也是引入constant pool的原因）。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    String s1 = <span class="string">"abcd"</span>;</span><br><span class="line">    String s2 = <span class="string">"abcd"</span>;</span><br><span class="line">    System.out.println(s1 == s2);   <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结合这两者，其实还可以回答另外一个常见的面试题目：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    String s = <span class="keyword">new</span> String(<span class="string">"abcd"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这句话创建了几个对象？</p>
<p>首先毫无疑问，<code>&quot;abcd&quot;</code>本身是一个对象，被放于常量池。而由于这里使用了<code>new</code>关键字，所以<code>s</code>得到的对象必然是被创建在heap里的。所以，这里其实一共创建了2个对象。</p>
<p>但tricky的部分是，如果在这个函数被调用前的别的地方，已经有了<code>&quot;abcd&quot;</code>这个字符串，那么它就事先在constant pool中被创建了出来。此时，这里就只会创建一个对象，即创建在heap的<code>new String(&quot;abcd&quot;)</code>对象。</p>
<p>但String的内存分配，远远没有这么简单。对于String的拼接，需要做更深入的理解和思考。</p>
<h3 id="2-String的拼接"><a href="#2-String的拼接" class="headerlink" title="2. String的拼接"></a>2. String的拼接</h3><p>下面看一个问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    String s1 = <span class="string">"hell"</span> + <span class="string">"o"</span>;</span><br><span class="line">    String s2 = <span class="string">"h"</span> + <span class="string">"ello"</span>;</span><br><span class="line">    System.out.println(s1 == s2);   <span class="comment">// true</span></span><br><span class="line">    System.out.println(s1 == <span class="string">"hello"</span>);  <span class="comment">// true</span></span><br><span class="line">    System.out.println(s2 == <span class="string">"hello"</span>);  <span class="comment">// true</span></span><br><span class="line">    System.out.println(<span class="string">"hello"</span> == <span class="string">"hello"</span>); <span class="comment">// true</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ------------------------</span></span><br><span class="line">    </span><br><span class="line">    String c1 = <span class="string">"ab"</span>;</span><br><span class="line">    String c2 = c1 + <span class="string">"c"</span>;</span><br><span class="line">    System.out.println(c2 == <span class="string">"abc"</span>);  <span class="comment">// false</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前面四个输出其实很容易理解，最终的结果，都指向了constant pool里的一个常量<code>&quot;hello&quot;</code>。但奇怪的是，最后一个输出也是<code>&quot;abc&quot;</code>，并且还都是用指向constant pool中常量的变量来做的拼接，但却得到了一个<code>false</code>的结果。</p>
<p>原因是，Java的<code>String</code>拼接有两个规则：</p>
<ul>
<li>对于拼接的值，如果都是双引号包裹字符串的形式，则将结果放于constant pool，如果constant pool已经有这个值了，则直接返回这个已有值。</li>
<li>而如果拼接的值中，有一个是非双引号包裹字符串的形式，则从heap中开辟一个新的区域保存常量。也即是使用了String变量来做拼接的情况。</li>
</ul>
<p>在这样的大原则下，对声明为<code>final</code>的String变量需要做更多的考虑：</p>
<ul>
<li>如果String变量被声明为<code>final</code>时就已经被赋值，则它被编译器自动处理为常量，因而它就会被当作常量池的变量来处理。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantPool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String s1 = <span class="string">"ab"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String s2 = <span class="string">"cd"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        String s = s1 + s2;</span><br><span class="line">        String ss = <span class="string">"abcd"</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(s == ss);  <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>而如果声明为<code>final</code>的字符串没有在声明时被赋值，则编译器无法事先决定它的准确值，所以依旧会把它当作一个变量来处理。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantPool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String s1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String s2;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        s1 = <span class="string">"ab"</span>;</span><br><span class="line">        s2 = <span class="string">"cd"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        String s = s1 + s2;</span><br><span class="line">        String ss = <span class="string">"abcd"</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(s == ss);  <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-intern-方法"><a href="#3-intern-方法" class="headerlink" title="3. intern()方法"></a>3. intern()方法</h3><p><code>String.intern()</code>方法，可以在runtime期间将常量加入到常量池（constant pool）。它的运作方式是：</p>
<ol>
<li>如果constant pool中存在一个常量恰好等于这个字符串的值，则<code>inter()</code>方法返回这个存在于constant pool中的常量的引用。</li>
<li>如果constant pool不存在常量恰好等于这个字符串的值，则在constant pool中创建一个新的常量，并将这个字符串的值赋予这个新创建的在constant pool中的常量。<code>intern()</code>方法返回这个新创建的常量的引用。</li>
</ol>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    String s1 = <span class="string">"abcd"</span>;</span><br><span class="line">    String s2 = <span class="keyword">new</span> String(<span class="string">"abcd"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * s2.intern() will first search String constant pool,</span></span><br><span class="line"><span class="comment">     * of which the value is the same as s2.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String s3 = s2.intern();</span><br><span class="line">    <span class="comment">// As s1 comes from constant pool, and s3 is also comes from constant pool, they're same.</span></span><br><span class="line">    System.out.println(s1 == s3);</span><br><span class="line">    <span class="comment">// As s2 comes from heap but s3 comes from constant pool, they're different.</span></span><br><span class="line">    System.out.println(s2 == s3); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Output:</span></span><br><span class="line"><span class="comment"> *     true</span></span><br><span class="line"><span class="comment"> *     false</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>回顾到最开始的第一部分，为什么要引入<code>intern()</code>这个函数呢？就是因为，虽然<code>&quot;abcd&quot;</code>是被分配在constant pool里的，但是，一旦使用<code>new String(&quot;abcd&quot;)</code>就会在heap中新创建一个值为<code>abcd</code>的对象出来。试想，如果有100个这样的语句，岂不是就要在heap里创建100个同样值的对象？！这就造成了运行的低效和空间的浪费。</p>
<p>于是，如果引入了<code>intern()</code>它就会直接去constant pool找寻是否有值相同的String对象，这就极大地节省了空间也提高了运行效率。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础知识-线程</title>
    <url>/2017/12/04/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/4-Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86_%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>1 线程：进程中负责程序执行的执行单元<br>    线程本身依靠程序进行运行<br>    线程是程序中的顺序控制流，只能使用分配给程序的资源和环境</p>
<p>2 进程：执行中的程序<br>    一个进程至少包含一个线程</p>
<p>3 单线程：程序中只存在一个线程，实际上主方法就是一个主线程</p>
<p>4 多线程：在一个程序中运行多个任务<br>    目的是更好地使用CPU资源</p>
<a id="more"></a>

<p><strong>多线程的好处：</strong></p>
<ol>
<li><p>解决了一个进程里面可以同时运行多个任务（执行路径）。</p>
</li>
<li><p>提供资源的利用率，而不是提供效率。</p>
</li>
</ol>
<p><strong>多线程的弊端:</strong></p>
<ol>
<li>降低了一个进程里面的线程的执行频率。</li>
</ol>
<ol start="2">
<li><p>对线程进行管理要求额外的CPU开销。线程的使用会给系统带来上下文切换的额外负担。</p>
</li>
<li><p>公有变量的同时读或写。当多个线程需要对公有变量进行写操作时,后一个线程往往会修改掉前一个线程存的数据，发生线程安全问题。</p>
</li>
<li><p>线程的死锁。即较长时间的等待或资源竞争以及死锁等多线程症状。</p>
</li>
</ol>
<h1 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h1><p>在正式学习Thread类中的具体方法之前，我们先来了解一下线程有哪些状态，这个将会有助于后面对Thread类中的方法的理解。</p>
<ul>
<li>创建（new）状态: 准备好了一个多线程的对象</li>
<li>就绪（runnable）状态: 调用了<code>start()</code>方法, 等待CPU进行调度</li>
<li>运行（running）状态: 执行<code>run()</code>方法</li>
<li>阻塞（blocked）状态: 暂时停止执行, 可能将资源交给其它线程使用</li>
<li>终止（dead）状态: 线程销毁</li>
</ul>
<p>当需要新起一个线程来执行某个子任务时，就创建了一个线程。但是线程创建之后，不会立即进入就绪状态，因为线程的运行需要一些条件（比如内存资源，在前面的JVM内存区域划分一篇博文中知道程序计数器、Java栈、本地方法栈都是线程私有的，所以需要为线程分配一定的内存空间），只有线程运行需要的所有条件满足了，才进入就绪状态。</p>
<p>当线程进入就绪状态后，不代表立刻就能获取CPU执行时间，也许此时CPU正在执行其他的事情，因此它要等待。当得到CPU执行时间之后，线程便真正进入运行状态。</p>
<p>线程在运行状态过程中，可能有多个原因导致当前线程不继续运行下去，比如用户主动让线程睡眠（睡眠一定的时间之后再重新执行）、用户主动让线程等待，或者被同步块给阻塞，此时就对应着多个状态：time waiting（睡眠或等待一定的事件）、waiting（等待被唤醒）、blocked（阻塞）。</p>
<p>当由于突然中断或者子任务执行完毕，线程就会被消亡。</p>
<p>在有些教程上将blocked、waiting、time waiting统称为阻塞状态，这个也是可以的，只不过这里我想将线程的状态和Java中的方法调用联系起来，所以将waiting和time waiting两个状态分离出来。</p>
<p>注:sleep和wait的区别:</p>
<ul>
<li><code>sleep</code>是<code>Thread</code>类的方法,<code>wait</code>是<code>Object</code>类中定义的方法.</li>
<li><code>Thread.sleep</code>不会导致锁行为的改变, 如果当前线程是拥有锁的, 那么<code>Thread.sleep</code>不会让线程释放锁.</li>
<li><code>Thread.sleep</code>和<code>Object.wait</code>都会暂停当前的线程. OS会将执行时间分配给其它线程. 区别是, 调用<code>wait</code>后, 需要别的线程执行<code>notify/notifyAll</code>才能够重新获得CPU执行时间.</li>
</ul>
<h1 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h1><h2 id="常见线程的方法"><a href="#常见线程的方法" class="headerlink" title="常见线程的方法"></a>常见线程的方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread(String name)     初始化线程的名字</span><br><span class="line"> getName()             返回线程的名字</span><br><span class="line"> setName(String name)    设置线程对象名</span><br><span class="line"> sleep()                 线程睡眠指定的毫秒数。</span><br><span class="line"> getPriority()             返回当前线程对象的优先级   默认线程的优先级是<span class="number">5</span></span><br><span class="line"> setPriority(<span class="keyword">int</span> newPriority) 设置线程的优先级    虽然设置了线程的优先级，但是具体的实现取决于底层的操作系统的实现（最大的优先级是<span class="number">10</span> ，最小的<span class="number">1</span> ， 默认是<span class="number">5</span>）。</span><br><span class="line"> currentThread()      返回CPU正在执行的线程的对象</span><br><span class="line"> </span><br><span class="line">getName和setName</span><br><span class="line">用来得到或者设置线程名称。</span><br><span class="line"></span><br><span class="line">getPriority和setPriority</span><br><span class="line">用来获取和设置线程优先级。</span><br><span class="line"></span><br><span class="line">setDaemon和isDaemon</span><br><span class="line">用来设置线程是否成为守护线程和判断线程是否是守护线程。</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>编号</th>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><code>public void start()</code></td>
<td>使该线程开始执行；Java 虚拟机调用该线程的 run 方法。</td>
</tr>
<tr>
<td>2</td>
<td><code>public void run()</code></td>
<td>如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</td>
</tr>
<tr>
<td>3</td>
<td><code>public final void setName(String name)</code></td>
<td>改变线程名称，使之与参数 name 相同。</td>
</tr>
<tr>
<td>4</td>
<td><code>public final void setPriority(int priority)</code></td>
<td>更改线程的优先级。</td>
</tr>
<tr>
<td>5</td>
<td><code>public final void setDaemon(boolean on)</code></td>
<td>将该线程标记为守护线程或用户线程。</td>
</tr>
<tr>
<td>6</td>
<td><code>public final void join(long millisec)</code></td>
<td>等待该线程终止的时间最长为 millis 毫秒。</td>
</tr>
<tr>
<td>7</td>
<td><code>public void interrupt()</code></td>
<td>中断线程。</td>
</tr>
<tr>
<td>8</td>
<td><code>public final boolean isAlive()</code></td>
<td>测试线程是否处于活动状态。</td>
</tr>
<tr>
<td>9</td>
<td><code>public static void yield()</code></td>
<td>暂停当前正在执行的线程对象，并执行其他线程。</td>
</tr>
<tr>
<td>10</td>
<td><code>public static void sleep(long millisec)</code></td>
<td>在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</td>
</tr>
<tr>
<td>11</td>
<td><code>public static Thread currentThread()</code></td>
<td>返回对当前正在执行的线程对象的引用。</td>
</tr>
</tbody></table>
<h2 id="线程创建方式一"><a href="#线程创建方式一" class="headerlink" title="线程创建方式一"></a>线程创建方式一</h2><p>方式一 ：<br>    1. 自定义一个类继承Thread类。<br>    2. 重写Thread类的run方法，把自定义线程的任务代码写在run方法上。<br>    3. 创建Thread的子类对象，并且调用start方法启动一个线程。 </p>
<pre><code>注意：千万不要直接调用run方法，调用start方法的时候线程就会开启，线程一旦开启就会执行run方法中代码，如果直接调用run方法，那么就 相当于调用了一个普通的方法而已。</code></pre><p>方式二：<br>    1. 自定义一个类实现Runnable接口。<br>    2. 实现Runnable接口 的run方法，把自定义线程的任务定义在run方法上。<br>    3. 创建Runnable实现类对象。<br>    4. 创建Thread类 的对象，并且把Runnable实现类的对象作为实参传递。<br>    5. 调用Thread对象 的start方法开启一个线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主动创建的第"</span>+num+<span class="string">"个线程"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新线程的创建不会影响主线程的后续执行</span></span><br></pre></td></tr></table></figure>

<h2 id="线程创建方式二"><a href="#线程创建方式二" class="headerlink" title="线程创建方式二"></a>线程创建方式二</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"主线程ID："</span>+Thread.currentThread().getId());</span><br><span class="line">        MyRunnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable); <span class="comment">// 需要创建Thread类</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> /*任务*/</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRunnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子线程ID："</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="有返回值的线程创建"><a href="#有返回值的线程创建" class="headerlink" title="*有返回值的线程创建"></a>*有返回值的线程创建</h2><ul>
<li><strong>使用ExecutorService、Callable、Future实现有返回结果的多线程</strong></li>
</ul>
<p>多线程后续会学到，这里暂时先知道一下有这种方法即可。</p>
<p>ExecutorService、Callable、Future这个对象实际上都是属于Executor框架中的功能类。想要详细了解Executor框架的可以访问<span class="exturl" data-url="aHR0cDovL3d3dy5qYXZhZXllLmNvbS90b3BpYy8zNjY1OTE=" title="http://www.javaeye.com/topic/366591">http://www.javaeye.com/topic/366591<i class="fa fa-external-link"></i></span> ，这里面对该框架做了很详细的解释。返回结果的线程是在JDK1.5中引入的新特征，确实很实用，有了这种特征我就不需要再为了得到返回值而大费周折了，而且即便实现了也可能漏洞百出。</p>
<p>可返回值的任务必须实现Callable接口，类似的，无返回值的任务必须Runnable接口。执行Callable任务后，可以获取一个Future的对象，在该对象上调用get就可以获取到Callable任务返回的Object了，再结合线程池接口ExecutorService就可以实现传说中有返回结果的多线程了。下面提供了一个完整的有返回结果的多线程测试例子，在JDK1.5下验证过没问题可以直接使用。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 有返回值的线程 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException,  </span></span><br><span class="line"><span class="function">    InterruptedException </span>&#123;  </span><br><span class="line">   System.out.println(<span class="string">"----程序开始运行----"</span>);  </span><br><span class="line">   Date date1 = <span class="keyword">new</span> Date();  </span><br><span class="line"> </span><br><span class="line">   <span class="keyword">int</span> taskSize = <span class="number">5</span>;  </span><br><span class="line">   <span class="comment">// 创建一个线程池  </span></span><br><span class="line">   ExecutorService pool = Executors.newFixedThreadPool(taskSize);  </span><br><span class="line">   <span class="comment">// 创建多个有返回值的任务  </span></span><br><span class="line">   List&lt;Future&gt; list = <span class="keyword">new</span> ArrayList&lt;Future&gt;();  </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; taskSize; i++) &#123;  </span><br><span class="line">    Callable c = <span class="keyword">new</span> MyCallable(i + <span class="string">" "</span>);  </span><br><span class="line">    <span class="comment">// 执行任务并获取Future对象  </span></span><br><span class="line">    Future f = pool.submit(c);  </span><br><span class="line">    <span class="comment">// System.out.println("&gt;&gt;&gt;" + f.get().toString());  </span></span><br><span class="line">    list.add(f);  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 关闭线程池  </span></span><br><span class="line">   pool.shutdown();  </span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 获取所有并发任务的运行结果  </span></span><br><span class="line">   <span class="keyword">for</span> (Future f : list) &#123;  </span><br><span class="line">    <span class="comment">// 从Future对象上获取任务的返回值，并输出到控制台  </span></span><br><span class="line">    System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + f.get().toString());  </span><br><span class="line">   &#125;  </span><br><span class="line"> </span><br><span class="line">   Date date2 = <span class="keyword">new</span> Date();  </span><br><span class="line">   System.out.println(<span class="string">"----程序结束运行----，程序运行时间【"</span> </span><br><span class="line">     + (date2.getTime() - date1.getTime()) + <span class="string">"毫秒】"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Object</span>&gt; </span>&#123;  </span><br><span class="line"><span class="keyword">private</span> String taskNum;  </span><br><span class="line"> </span><br><span class="line">MyCallable(String taskNum) &#123;  </span><br><span class="line">   <span class="keyword">this</span>.taskNum = taskNum;  </span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">   System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + taskNum + <span class="string">"任务启动"</span>);  </span><br><span class="line">   Date dateTmp1 = <span class="keyword">new</span> Date();  </span><br><span class="line">   Thread.sleep(<span class="number">1000</span>);  </span><br><span class="line">   Date dateTmp2 = <span class="keyword">new</span> Date();  </span><br><span class="line">   <span class="keyword">long</span> time = dateTmp2.getTime() - dateTmp1.getTime();  </span><br><span class="line">   System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + taskNum + <span class="string">"任务终止"</span>);  </span><br><span class="line">   <span class="keyword">return</span> taskNum + <span class="string">"任务返回运行结果,当前任务时间【"</span> + time + <span class="string">"毫秒】"</span>;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码说明：<br>上述代码中Executors类，提供了一系列工厂方法用于创先线程池，返回的线程池都实现了ExecutorService接口。<br>public static ExecutorService newFixedThreadPool(int nThreads)<br>创建固定数目线程的线程池。</p>
<p>public static ExecutorService newCachedThreadPool()<br>创建一个可缓存的线程池，调用execute 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。</p>
<p>public static ExecutorService newSingleThreadExecutor()<br>创建一个单线程化的Executor。</p>
<p>public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)<br>创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。</p>
<p>ExecutoreService提供了submit()方法，传递一个Callable，或Runnable，返回Future。如果Executor后台线程池还没有完成Callable的计算，这调用返回Future对象的get()方法，会阻塞直到计算完成。</p>
<h1 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h1><p>对于单核CPU来说（对于多核CPU，此处就理解为一个核），CPU在一个时刻只能运行一个线程，当在运行一个线程的过程中转去运行另外一个线程，这个叫做线程上下文切换（对于进程也是类似）。</p>
<p>由于可能当前线程的任务并没有执行完毕，所以在切换时需要保存线程的运行状态，以便下次重新切换回来时能够继续切换之前的状态运行。举个简单的例子：比如一个线程A正在读取一个文件的内容，正读到文件的一半，此时需要暂停线程A，转去执行线程B，当再次切换回来执行线程A的时候，我们不希望线程A又从文件的开头来读取。</p>
<p>因此需要记录线程A的运行状态，那么会记录哪些数据呢？因为下次恢复时需要知道在这之前当前线程已经执行到哪条指令了，所以需要记录程序计数器的值，另外比如说线程正在进行某个计算的时候被挂起了，那么下次继续执行的时候需要知道之前挂起时变量的值时多少，因此需要记录CPU寄存器的状态。所以一般来说，线程上下文切换过程中会记录程序计数器、CPU寄存器状态等数据。</p>
<p>说简单点的：对于线程的上下文切换实际上就是 <strong>存储和恢复CPU状态的过程，它使得线程执行能够从中断点恢复执行</strong>。</p>
<p>虽然多线程可以使得任务执行的效率得到提升，但是由于在线程切换时同样会带来一定的开销代价，并且多个线程会导致系统资源占用的增加，所以在进行多线程编程时要注意这些因素。</p>
<h1 id="sleep-方法"><a href="#sleep-方法" class="headerlink" title="sleep()方法"></a>sleep()方法</h1><p>方法sleep()的作用是在指定的毫秒数内让当前“正在执行的线程”休眠（暂停执行）。这个“正在执行的线程”是指this.currentThread()返回的线程。</p>
<p>sleep方法有两个重载版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sleep(<span class="keyword">long</span> millis)     <span class="comment">//参数为毫秒</span></span><br><span class="line">sleep(<span class="keyword">long</span> millis,<span class="keyword">int</span> nanoseconds)    <span class="comment">//第一参数为毫秒，第二个参数为纳秒</span></span><br></pre></td></tr></table></figure>

<p>sleep相当于让线程睡眠，交出CPU，让CPU去执行其他的任务。<br>但是有一点要非常注意，sleep方法不会释放锁，也就是说如果当前线程持有对某个对象的锁，则即使调用sleep方法，其他线程也无法访问这个对象。看下面这个例子就清楚了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        MyThread thread1 = test.<span class="keyword">new</span> MyThread();</span><br><span class="line">        MyThread thread2 = test.<span class="keyword">new</span> MyThread();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                System.out.println(<span class="string">"i:"</span>+i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"进入睡眠状态"</span>);</span><br><span class="line">                    Thread.currentThread().sleep(<span class="number">10000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"睡眠结束"</span>);</span><br><span class="line">                i++;</span><br><span class="line">                System.out.println(<span class="string">"i:"</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">i:<span class="number">11</span></span><br><span class="line">线程Thread-<span class="number">0</span>进入睡眠状态</span><br><span class="line">线程Thread-<span class="number">0</span>睡眠结束</span><br><span class="line">i:<span class="number">12</span></span><br><span class="line">i:<span class="number">13</span></span><br><span class="line">线程Thread-<span class="number">1</span>进入睡眠状态</span><br><span class="line">线程Thread-<span class="number">1</span>睡眠结束</span><br><span class="line">i:<span class="number">14</span></span><br></pre></td></tr></table></figure>

<p>从上面输出结果可以看出，当Thread-0进入睡眠状态之后，Thread-1并没有去执行具体的任务。只有当Thread-0执行完之后，此时Thread-0释放了对象锁，Thread-1才开始执行。</p>
<p>注意，如果调用了sleep方法，必须捕获InterruptedException异常或者将该异常向上层抛出。当线程睡眠时间满后，不一定会立即得到执行，因为此时可能CPU正在执行其他的任务。所以说调用sleep方法相当于让线程进入阻塞状态。</p>
<h1 id="yield-方法"><a href="#yield-方法" class="headerlink" title="yield()方法"></a>yield()方法</h1><p>调用yield方法会让当前线程交出CPU权限，让CPU去执行其他的线程。它跟sleep方法类似，同样不会释放锁。但是yield不能控制具体的交出CPU的时间，另外，yield方法只能让拥有相同优先级的线程有获取CPU执行时间的机会。</p>
<p>注意，调用yield方法并不会让线程进入阻塞状态，<strong>而是让线程重回就绪状态</strong>，它只需要等待重新获取CPU执行时间，这一点是和sleep方法不一样的。<br>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>  <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> beginTime=System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50000000</span>;i++)&#123;</span><br><span class="line">            count=count+(i+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//Thread.yield();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endTime=System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"用时："</span>+(endTime-beginTime)+<span class="string">" 毫秒！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread t= <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：3ms   Thread.yield(); 注释去掉，结果为：16080ms.</p>
<h1 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h1><p>在很多情况下，主线程创建并启动了线程，如果子线程中药进行大量耗时运算，主线程往往将早于子线程结束之前结束。这时，如果主线程想等待子线程执行完成之后再结束，比如子线程处理一个数据，主线程要取得这个数据中的值，就要用到join()方法了。方法join()的作用是等待线程对象销毁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread4</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thread4</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">"  "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 启动子进程</span></span><br><span class="line">        <span class="keyword">new</span> Thread4(<span class="string">"new thread"</span>).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                Thread4 th = <span class="keyword">new</span> Thread4(<span class="string">"joined thread"</span>);</span><br><span class="line">                th.start();</span><br><span class="line">                th.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"  "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p>由上可以看出main主线程等待joined thread线程先执行完了才结束的。如果把th.join()这行注释掉，运行结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">main  <span class="number">0</span></span><br><span class="line">main  <span class="number">1</span></span><br><span class="line">main  <span class="number">2</span></span><br><span class="line">main  <span class="number">3</span></span><br><span class="line">main  <span class="number">4</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">0</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">1</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">2</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">3</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">4</span></span><br><span class="line">joined thread  <span class="number">0</span></span><br><span class="line">joined thread  <span class="number">1</span></span><br><span class="line">joined thread  <span class="number">2</span></span><br><span class="line">joined thread  <span class="number">3</span></span><br><span class="line">joined thread  <span class="number">4</span></span><br><span class="line">main  <span class="number">5</span></span><br><span class="line">main  <span class="number">6</span></span><br><span class="line">main  <span class="number">7</span></span><br><span class="line">main  <span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>由上可以看出main主线程等待joined thread线程先执行完了才结束的。如果把th.join()这行注释掉，运行结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">main  <span class="number">0</span></span><br><span class="line">main  <span class="number">1</span></span><br><span class="line">main  <span class="number">2</span></span><br><span class="line">main  <span class="number">3</span></span><br><span class="line">main  <span class="number">4</span></span><br><span class="line">main  <span class="number">5</span></span><br><span class="line">main  <span class="number">6</span></span><br><span class="line">main  <span class="number">7</span></span><br><span class="line">main  <span class="number">8</span></span><br><span class="line">main  <span class="number">9</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">0</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">1</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">2</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">3</span></span><br><span class="line"><span class="keyword">new</span> thread  <span class="number">4</span></span><br><span class="line">joined thread  <span class="number">0</span></span><br><span class="line">joined thread  <span class="number">1</span></span><br><span class="line">joined thread  <span class="number">2</span></span><br><span class="line">joined thread  <span class="number">3</span></span><br><span class="line">joined thread  <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h1 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h1><p>在Java线程中有两种线程，一种是User Thread（用户线程），另一种是Daemon Thread(守护线程)、（后台线程）。<br>Daemon的作用是为其他线程的运行提供服务，比如说GC线程。其实User Thread线程和Daemon Thread守护线程本质上来说去没啥区别的，唯一的区别之处就在虚拟机的离开：如果User Thread全部撤离，那么Daemon Thread也就没啥线程好服务的了，所以虚拟机也就退出了。</p>
<p>守护线程并非虚拟机内部可以提供，用户也可以自行的设定守护线程，方法：public final void setDaemon(boolean on) ；但是有几点需要注意：</p>
<ul>
<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。 （备注：这点与守护进程有着明显的区别，守护进程是创建后，让进程摆脱原会话的控制+让进程摆脱原进程组的控制+让进程摆脱原控制终端的控制；所以说寄托于虚拟机的语言机制跟系统级语言有着本质上面的区别）</li>
<li>在Daemon线程中产生的新线程也是Daemon的。 （这一点又是有着本质的区别了：守护进程fork()出来的子进程不再是守护进程，尽管它把父进程的进程相关信息复制过去了，但是子进程的进程的父进程不是init进程，所谓的守护进程本质上说就是“父进程挂掉，init收养，然后文件0,1,2都是/dev/null，当前目录到/”）</li>
<li>不是所有的应用都可以分配给Daemon线程来进行服务，比如读写操作或者计算逻辑。因为在Daemon Thread还没来的及进行操作时，虚拟机可能已经退出了。</li>
</ul>
<p>守护线程和用户线程的区别在于：守护线程依赖于创建它的线程，而用户线程则不依赖。举个简单的例子：如果在main线程中创建了一个守护线程，当main方法运行完毕之后，守护线程也会随着消亡。而用户线程则不会，用户线程会一直运行直到其运行完毕。在JVM中，像垃圾收集器线程就是守护线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 守护线程（后台线程）:在一个进程中如果只剩下 了守护线程，那么守护线程也会死亡。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 需求： 模拟QQ下载更新包。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 一个线程默认都不是守护线程。</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo7</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Demo7</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=<span class="number">100</span> ; i++)&#123;</span><br><span class="line">			System.out.println(<span class="string">"更新包目前下载"</span>+i+<span class="string">"%"</span>);</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">100</span>)&#123;</span><br><span class="line">				System.out.println(<span class="string">"更新包下载完毕,准备安装.."</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">100</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		 Demo7 d = <span class="keyword">new</span> Demo7(<span class="string">"后台线程"</span>);</span><br><span class="line">		 d.setDaemon(<span class="keyword">true</span>); <span class="comment">//setDaemon() 设置线程是否为守护线程，true为守护线程， false为非守护线程。</span></span><br><span class="line">		<span class="comment">// System.out.println("是守护线程吗？"+ d.isDaemon()); //判断线程是否为守护线程。</span></span><br><span class="line">		 d.start();</span><br><span class="line">		 </span><br><span class="line">		 <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i&lt;=<span class="number">100</span> ; i++)&#123;</span><br><span class="line">			 System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">		 &#125;</span><br><span class="line">		 </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h1><p>停止线程是在多线程开发时很重要的技术点，掌握此技术可以对线程的停止进行有效的处理。<br>停止一个线程可以使用Thread.stop()方法，但最好不用它。该方法是不安全的，已被弃用。<br>在Java中有以下3种方法可以终止正在运行的线程：</p>
<ul>
<li>使用退出标志，使线程正常退出，也就是当run方法完成后线程终止</li>
<li>使用stop方法强行终止线程，但是不推荐使用这个方法，因为stop和suspend及resume一样，都是作废过期的方法，使用他们可能产生不可预料的结果。</li>
<li>使用interrupt方法中断线程，但这个<strong>不会终止一个正在运行的线程</strong>，还需要加入一个判断才可以完成线程的停止。</li>
</ul>
<p>线程的停止：</p>
<ol>
<li>停止一个线程 我们一般都会通过一个变量去控制的。</li>
<li>如果需要停止一个处于等待状态下的线程，那么我们需要通过变量配合notify方法或者interrupt()来使用。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Demo6</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span> ;</span><br><span class="line">		<span class="keyword">while</span>(flag)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.wait(); <span class="comment">//狗娃等待..</span></span><br><span class="line">			</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				System.out.println(<span class="string">"接收到了异常了...."</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Demo6 d = <span class="keyword">new</span> Demo6(<span class="string">"狗娃"</span>);</span><br><span class="line">		d.setPriority(<span class="number">10</span>);</span><br><span class="line">		d.start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;<span class="number">100</span> ; i++)&#123;</span><br><span class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">			<span class="comment">//当主线程的i是80的时候停止狗娃线程。</span></span><br><span class="line">			<span class="comment">//d.interrupt();  // interrupt()根本就是无法停止一个线程。</span></span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">80</span>)&#123;</span><br><span class="line">				d.flag = <span class="keyword">false</span>;</span><br><span class="line">				d.interrupt(); <span class="comment">//把线程的等待状态强制清除，被清除状态的线程会接收到一个InterruptedException。 // （2种）接收到了异常了....</span></span><br><span class="line">				<span class="comment">/*synchronized (d) &#123;					</span></span><br><span class="line"><span class="comment">					d.notify(); // 可以结束等待的线程（1种）</span></span><br><span class="line"><span class="comment">				&#125;*/</span>	</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="同步与死锁"><a href="#同步与死锁" class="headerlink" title="同步与死锁"></a>同步与死锁</h1></li>
</ol>
<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>线程 安全问题的解决方案：sun提供了线程同步机制让我们解决这类问题的。</p>
<pre><code>java线程同步机制的方式：

    方式一：同步代码块

        同步代码块的格式：

            synchronized(锁对象){
                需要被同步的代码...
            }
    方式二：同步函数就是使用synchronized修饰一个函数。</code></pre><p>同步代码块要注意事项：<br>        1. 任意的一个对象都可以做为锁对象。<br>        2. 在同步代码块中调用了sleep方法并不是释放锁对象的。<br>        3. 只有真正存在线程安全问题的时候才使用同步代码块，否则会降低效率的。<br>        4. 多线程操作的锁 对象必须 是唯一共享 的。否则无效。</p>
<p>出现线程安全问题的根本原因：<br>    1.存在两个或者两个以上 的线程对象,而且线程之间共享着一个资源。<br>    2.有多个语句操作了共享资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SaleTicket</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	 <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">50</span>;<span class="comment">//票数非静态的成员变量,非静态的成员变量数据是在每个对象中都会维护一份数据的。</span></span><br><span class="line">     <span class="keyword">static</span>	Object o = <span class="keyword">new</span> Object();</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> <span class="title">SaleTicket</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			<span class="comment">//同步代码块</span></span><br><span class="line">			<span class="keyword">synchronized</span> (<span class="string">"锁"</span>) &#123;				</span><br><span class="line">				<span class="keyword">if</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">					System.out.println(Thread.currentThread().getName()+<span class="string">"售出了第"</span>+num+<span class="string">"号票"</span>);</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						Thread.sleep(<span class="number">100</span>);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">					num--;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					System.out.println(<span class="string">"售罄了.."</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;		</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建三个线程对象，模拟三个窗口</span></span><br><span class="line">		SaleTicket thread1 = <span class="keyword">new</span> SaleTicket(<span class="string">"窗口1"</span>);</span><br><span class="line">		SaleTicket thread2 = <span class="keyword">new</span> SaleTicket(<span class="string">"窗口2"</span>);</span><br><span class="line">		SaleTicket thread3 = <span class="keyword">new</span> SaleTicket(<span class="string">"窗口3"</span>);</span><br><span class="line">		<span class="comment">//开启线程售票</span></span><br><span class="line">		thread1.start();</span><br><span class="line">		thread2.start();</span><br><span class="line">		thread3.start();		</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同步函数要注意的事项 ：</p>
<pre><code>1. 如果是一个非静态的同步函数的锁 对象是this对象，如果是静态的同步函数的锁对象是当前函数所属的类的字节码文件（class对象）。


2. 同步函数的锁对象是固定的，不能由你来指定的。</code></pre><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>死锁现象出现的根本原因：<br>    1. 存在两个或者两个以上的线程。<br>    2. 存在两个或者两个以上的共享资源。<br>死锁现象的解决方案： 没有方案。只能尽量避免发生而已。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DeadLock</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"张三"</span>.equals(Thread.currentThread().getName()))&#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (<span class="string">"遥控器"</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">"张三拿到了遥控器，准备 去拿电池!!"</span>);</span><br><span class="line">				<span class="keyword">synchronized</span> (<span class="string">"电池"</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">"张三拿到了遥控器与电池了，开着空调爽歪歪的吹着..."</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"狗娃"</span>.equals(Thread.currentThread().getName()))&#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (<span class="string">"电池"</span>) &#123; </span><br><span class="line">				System.out.println(<span class="string">"狗娃拿到了电池，准备去拿遥控器!!"</span>);</span><br><span class="line">				<span class="keyword">synchronized</span> (<span class="string">"遥控器"</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">"狗娃拿到了遥控器与电池了，开着空调爽歪歪的吹着..."</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		DeadLock thread1 = <span class="keyword">new</span> DeadLock(<span class="string">"张三"</span>);</span><br><span class="line">		DeadLock thread2 = <span class="keyword">new</span> DeadLock(<span class="string">"狗娃"</span>);</span><br><span class="line">		<span class="comment">//开启线程</span></span><br><span class="line">		thread1.start();</span><br><span class="line">		thread2.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="生产者和消费者"><a href="#生产者和消费者" class="headerlink" title="生产者和消费者"></a>生产者和消费者</h1><h2 id="wait、notify"><a href="#wait、notify" class="headerlink" title="wait、notify"></a>wait、notify</h2><p>wait():  等待如果线程执行了wait方法，那么该线程会进入等待的状态，等待状态下的线程必须要被其他线程调用notify方法才能唤醒。<br>notify()： 唤醒唤醒线程池等待线程其中的一个。<br>notifyAll() : 唤醒线程池所有等待线程。</p>
<p>wait与notify方法要注意的事项：<br>    1. wait方法与notify方法是属于Object对象的。（锁是任意对象）<br>    2. wait方法与notify方法必须要在同步代码块或者是同步函数中才能使用。（其中有锁对象）<br>    3. wait方法与notify方法必需要由锁对象调用。（以锁对象为标识符放入线程池等待或唤醒）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//产品类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	String name;  <span class="comment">//名字</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">double</span> price;  <span class="comment">//价格</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">boolean</span> flag = <span class="keyword">false</span>; <span class="comment">//产品是否生产完毕的标识，默认情况是没有生产完成。</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	Product  p ;  	<span class="comment">//产品</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Product p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.p  = p ;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span> ; </span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">		 <span class="keyword">synchronized</span> (p) &#123;</span><br><span class="line">			<span class="keyword">if</span>(p.flag==<span class="keyword">false</span>)&#123;</span><br><span class="line">				 <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">					 p.name = <span class="string">"苹果"</span>;</span><br><span class="line">					 p.price = <span class="number">6.5</span>;</span><br><span class="line">				 &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					 p.name=<span class="string">"香蕉"</span>;</span><br><span class="line">					 p.price = <span class="number">2.0</span>;</span><br><span class="line">				 &#125;</span><br><span class="line">				 System.out.println(<span class="string">"生产者生产出了："</span>+ p.name+<span class="string">" 价格是："</span>+ p.price);</span><br><span class="line">				 p.flag = <span class="keyword">true</span>;</span><br><span class="line">				 i++;</span><br><span class="line">				 p.notify(); <span class="comment">//唤醒消费者去消费</span></span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="comment">//已经生产 完毕，等待消费者先去消费</span></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					p.wait();   <span class="comment">//生产者等待</span></span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			 </span><br><span class="line">		&#125;	</span><br><span class="line">	  &#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	Product p; </span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="title">Customer</span><span class="params">(Product p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.p = p;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (p) &#123;	</span><br><span class="line">				<span class="keyword">if</span>(p.flag==<span class="keyword">true</span>)&#123;  <span class="comment">//产品已经生产完毕</span></span><br><span class="line">					System.out.println(<span class="string">"消费者消费了"</span>+p.name+<span class="string">" 价格："</span>+ p.price);</span><br><span class="line">					p.flag = <span class="keyword">false</span>; </span><br><span class="line">					p.notifyAll(); <span class="comment">// 唤醒生产者去生产</span></span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="comment">//产品还没有生产,应该 等待生产者先生产。</span></span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						p.wait(); <span class="comment">//消费者也等待了...</span></span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Product p = <span class="keyword">new</span> Product();  <span class="comment">//产品</span></span><br><span class="line">		<span class="comment">//创建生产对象</span></span><br><span class="line">		Producer producer = <span class="keyword">new</span> Producer(p);</span><br><span class="line">		<span class="comment">//创建消费者</span></span><br><span class="line">		Customer customer = <span class="keyword">new</span> Customer(p);</span><br><span class="line">		<span class="comment">//调用start方法开启线程</span></span><br><span class="line">		producer.start();</span><br><span class="line">		customer.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：生产出来就消费</p>
<p>生产者生产出了：香蕉 价格是：2.0<br>消费者消费了香蕉 价格：2.0<br>生产者生产出了：苹果 价格是：6.5<br>消费者消费了苹果 价格：6.5</p>
<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p><strong>线程和进程有什么区别？</strong><br>答：一个进程是一个独立(self contained)的运行环境，它可以被看作一个程序或者一个应用。而线程是在进程中执行的一个任务。线程是进程的子集，一个进程可以有很多线程，每条线程并行执行不同的任务。不同的进程使用不同的内存空间，而所有的线程共享一片相同的内存空间。别把它和栈内存搞混，每个线程都拥有单独的栈内存用来存储本地数据。</p>
<p><strong>如何在Java中实现线程？</strong><br>答：<br>创建线程有两种方式：<br>一、继承 Thread 类，扩展线程。<br>二、实现 Runnable 接口。</p>
<p><strong>启动一个线程是调用run()还是start()方法？</strong><br>答：启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM 调度并执行，这并不意味着线程就会立即运行。run()方法是线程启动后要进行回调（callback）的方法。</p>
<p><strong>Thread类的sleep()方法和对象的wait()方法都可以让线程暂停执行，它们有什么区别?</strong><br>答：sleep()方法（休眠）是线程类（Thread）的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复（线程回到就绪状态，请参考第66题中的线程状态转换图）。wait()是Object类的方法，调用对象的wait()方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用对象的notify()方法（或notifyAll()方法）时才能唤醒等待池中的线程进入等锁池（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。</p>
<p><strong>线程的sleep()方法和yield()方法有什么区别？</strong><br>答：<br>① sleep()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；yield()方法只会给相同优先级或更高优先级的线程以运行的机会；<br>② 线程执行sleep()方法后转入阻塞（blocked）状态，而执行yield()方法后转入就绪（ready）状态；<br>③ sleep()方法声明抛出InterruptedException，而yield()方法没有声明任何异常；<br>④ sleep()方法比yield()方法（跟操作系统CPU调度相关）具有更好的可移植性。</p>
<p><strong>请说出与线程同步以及线程调度相关的方法。</strong><br>答：</p>
<ul>
<li>wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁；</li>
<li>sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理InterruptedException异常；</li>
<li>notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且与优先级无关；</li>
<li>notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态；</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础知识-正则-枚举</title>
    <url>/2017/12/04/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/7-Java_%E6%AD%A3%E5%88%99_%E6%9E%9A%E4%B8%BE_jdk1.5%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>一些方法在运行时，它需要的数据不能是任意的，而必须是一定范围内的值，此类问题在JDK5以前采用自定义带有枚举功能的类解决，Java5以后可以直接使用枚举予以解决。</p>
<p>例如: </p>
<ul>
<li>交通灯(红、黄、绿)    性别(男、女)   星期(星期一、二、三…..)</li>
<li>分数等级(A、B、C、D、E)</li>
</ul>
<p>JDK 5新增的 enum 关键字用于定义一个枚举类。</p>
<p>枚举的实现：</p>
<p>使用enum定义枚举类</p>
<p>在枚举类中定义枚举值(大写)</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Gender &#123;</span><br><span class="line">	MALE,FEMALE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>javap -p Gender.class:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Compiled from <span class="string">"Gender.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 枚举.<span class="title">Gender</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Enum</span>&lt;枚举.<span class="title">Gender</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> 枚举.Gender MALE;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> 枚举.Gender FEMALE;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> 枚举.Gender[] ENUM$VALUES;</span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">  <span class="keyword">private</span> 枚举.Gender(java.lang.String, <span class="keyword">int</span>);</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> 枚举.Gender[] values();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> 枚举.<span class="function">Gender <span class="title">valueOf</span><span class="params">(java.lang.String)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现其中每一个枚举值都是枚举类的具体实例对象.只不过是静态常量.</p>
<p>枚举类具有如下特性：</p>
<ul>
<li>枚举类也是一种特殊形式的Java类。</li>
<li>枚举类中声明的每一个枚举值代表枚举类的一个实例对象。</li>
<li>与java中的普通类一样，在声明枚举类时，也可以声明属性、方法和构造函数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Gender &#123;</span><br><span class="line">	MALE(<span class="string">"男"</span>), FEMALE;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 成员变量</span></span><br><span class="line">	<span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 构造函数</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Gender</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Gender</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.info = info;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 成员方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> info;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Gender male = Gender.MALE;</span><br><span class="line">System.out.println(male.getInfo());</span><br></pre></td></tr></table></figure>

<ul>
<li>枚举类可以声明抽象方法，但要有具体的枚举值去实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Gender &#123;</span><br><span class="line">	MALE(<span class="string">"男"</span>) &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"是男人"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	FEMALE &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"是女人"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 成员变量</span></span><br><span class="line">	<span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 构造函数</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Gender</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Gender</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.info = info;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 成员方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> info;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">Gender male = Gender.MALE;</span><br><span class="line">System.out.println(male.getInfo());</span><br><span class="line">male.speak();</span><br></pre></td></tr></table></figure>

<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul>
<li>正则表达式：其实一种规则，有自己特殊的应用,其作用就是针对于字符串进行操作。</li>
<li>正则：就是用于操作字符串的规则,其中这些规则使用了一些字符表示。</li>
</ul>
<p>字符串的matches方法可以匹配正则表达式，返回布尔类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只匹配数字</span></span><br><span class="line">String str = <span class="string">"12343"</span>;</span><br><span class="line"><span class="keyword">boolean</span> flag = str.matches([<span class="number">0</span>-<span class="number">9</span>]+); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="正则表达式的符号"><a href="#正则表达式的符号" class="headerlink" title="正则表达式的符号"></a>正则表达式的符号</h2><h3 id="预定义字符类"><a href="#预定义字符类" class="headerlink" title="预定义字符类"></a>预定义字符类</h3><table>
<thead>
<tr>
<th>.</th>
<th>任何字符（与行结束符可能匹配也可能不匹配）</th>
</tr>
</thead>
<tbody><tr>
<td>\d</td>
<td>数字：[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>非数字：<code>[^0-9]</code></td>
</tr>
<tr>
<td>\s</td>
<td>空白字符：<code>[  \t\n\x0B\f\r]</code></td>
</tr>
<tr>
<td>\S</td>
<td>非空白字符：<code>[^\s]</code></td>
</tr>
<tr>
<td>\w</td>
<td>单词字符：<code>[a-zA-Z_0-9]</code></td>
</tr>
<tr>
<td>\W</td>
<td>非单词字符：<code>[^\w]</code></td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"a"</span>.matches(<span class="string">"."</span>)); <span class="comment">// 转义字符不匹配</span></span><br><span class="line">System.out.println(<span class="string">"1"</span>.matches(<span class="string">"\\d"</span>));</span><br><span class="line">System.out.println(<span class="string">"%"</span>.matches(<span class="string">"\\D"</span>));</span><br><span class="line">System.out.println(<span class="string">"\r"</span>.matches(<span class="string">"\\s"</span>));</span><br><span class="line">System.out.println(<span class="string">"^"</span>.matches(<span class="string">"\\S"</span>));</span><br><span class="line">System.out.println(<span class="string">"a"</span>.matches(<span class="string">"\\w"</span>)); <span class="comment">// 都是true</span></span><br></pre></td></tr></table></figure>

<h3 id="数量词（greedy）"><a href="#数量词（greedy）" class="headerlink" title="数量词（greedy）"></a>数量词（greedy）</h3><table>
<thead>
<tr>
<th>X?</th>
<th>X，一次或一次也没有</th>
</tr>
</thead>
<tbody><tr>
<td>X*</td>
<td>X，零次或多次</td>
</tr>
<tr>
<td>X+</td>
<td>X，一次或多次</td>
</tr>
<tr>
<td>X{n}</td>
<td>X，恰好n次</td>
</tr>
<tr>
<td>X{n,}</td>
<td>X，至少n次</td>
</tr>
<tr>
<td>X{n,m}</td>
<td>X，至少n次，但是不超过m次</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println( <span class="string">"a"</span>.matches(<span class="string">"."</span>) ); <span class="comment">// true</span></span><br><span class="line">System.out.println( <span class="string">"a"</span>.matches(<span class="string">"a"</span>) ); <span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">"a"</span>.matches(<span class="string">"a?"</span>) ); <span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="string">"aaa"</span>.matches(<span class="string">"a*"</span>) );<span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="string">""</span>.matches(<span class="string">"a+"</span>) ); <span class="comment">//false</span></span><br><span class="line">System.out.println( <span class="string">"aaaaa"</span>.matches(<span class="string">"a&#123;5&#125;"</span>) );<span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="string">"aaaaaaaaa"</span>.matches(<span class="string">"a&#123;5,8&#125;"</span>) );<span class="comment">//false</span></span><br><span class="line">System.out.println( <span class="string">"aaa"</span>.matches(<span class="string">"a&#123;5,&#125;"</span>) );<span class="comment">//false</span></span><br><span class="line">System.out.println( <span class="string">"aaaaab"</span>.matches(<span class="string">"a&#123;5,&#125;"</span>) );<span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="范围表示"><a href="#范围表示" class="headerlink" title="范围表示"></a>范围表示</h3><table>
<thead>
<tr>
<th>[abc]</th>
<th>a、b 或 c（简单类）</th>
</tr>
</thead>
<tbody><tr>
<td><code>[^abc]</code></td>
<td>任何字符，除了 a、b 或 c（否定）</td>
</tr>
<tr>
<td>[a-zA-Z]</td>
<td>a 到 z 或 A 到 Z，两头的字母包括在内（范围）</td>
</tr>
<tr>
<td>[a-d[m-p]]</td>
<td>a 到 d 或 m 到 p：[a-dm-p]（并集）</td>
</tr>
<tr>
<td>[a-z&amp;&amp;[def]]</td>
<td>d、e 或 f（交集）</td>
</tr>
<tr>
<td><code>[a-z&amp;&amp;[^bc]]</code></td>
<td>a 到 z，除了 b 和 c：[ad-z]（减去）</td>
</tr>
<tr>
<td><code>[a-z&amp;&amp;[^m-p]]</code></td>
<td>a 到 z，而非 m 到 p：[a-lp-z]（减去）</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println( <span class="string">"a"</span>.matches(<span class="string">"[a]"</span>) ); <span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="string">"aa"</span>.matches(<span class="string">"[a]+"</span>) );<span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="string">"abc"</span>.matches(<span class="string">"[abc]&#123;3,&#125;"</span>) );<span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="string">"abc"</span>.matches(<span class="string">"[abc]+"</span>) );<span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="string">"dshfshfu1"</span>.matches(<span class="string">"[^abc]+"</span>) );<span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="string">"abcdsaA"</span>.matches(<span class="string">"[a-z]&#123;5,&#125;"</span>) );<span class="comment">//false</span></span><br><span class="line">System.out.println( <span class="string">"abcdsaA12"</span>.matches(<span class="string">"[a-zA-Z]&#123;5,&#125;"</span>) );<span class="comment">//false</span></span><br><span class="line">System.out.println( <span class="string">"abcdsaA12"</span>.matches(<span class="string">"[a-zA-Z0-9]&#123;5,&#125;"</span>) );<span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="string">"abdxyz"</span>.matches(<span class="string">"[a-c[x-z]]+"</span>));<span class="comment">//false</span></span><br><span class="line">System.out.println( <span class="string">"abcxyz"</span>.matches(<span class="string">"[a-c[x-z]]+"</span>));<span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="string">"bcbcbc"</span>.matches(<span class="string">"[a-z&amp;&amp;[b-c]]&#123;5,&#125;"</span>));<span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="string">"tretrt"</span>.matches(<span class="string">"[a-z&amp;&amp;[^b-c]]&#123;5,&#125;"</span>));<span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="string">"tretrtb"</span>.matches(<span class="string">"[a-z&amp;&amp;[^b-c]]&#123;5,&#125;"</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="匹配功能"><a href="#匹配功能" class="headerlink" title="匹配功能"></a>匹配功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户输入电话号码，判断号码是否合法？1 3458 </span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String phoneNum = sc.next();</span><br><span class="line">String regex = <span class="string">"^1[3458]\\d&#123;9&#125;$"</span>;</span><br><span class="line">System.out.println(<span class="string">"号码是否合法？"</span>+phoneNum.matches(regex));</span><br></pre></td></tr></table></figure>

<h3 id="切割功能"><a href="#切割功能" class="headerlink" title="切割功能"></a>切割功能</h3><p>String arr[] = str.split(regex);</p>
<ul>
<li>根据空格对一段字符串进行分割</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"a b cb c f   djk  "</span>;</span><br><span class="line">String [] arr = str.split(<span class="string">" *"</span>);</span><br><span class="line"><span class="keyword">for</span>(String s : arr)&#123;</span><br><span class="line">    System.out.print(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abcbcfdjk</span></span><br></pre></td></tr></table></figure>

<ul>
<li>根据重叠词进行分割</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	String str = <span class="string">"sdqqfgkkkhjppppkl"</span>;</span><br><span class="line">		String[] arr = str.split(<span class="string">"(.)\\1+"</span>);</span><br><span class="line">		<span class="keyword">for</span>(String s : arr)                </span><br><span class="line">		&#123;                                  </span><br><span class="line">			System.out.print(s);         </span><br><span class="line">		&#125;     </span><br><span class="line"><span class="comment">// sdfghjkl</span></span><br></pre></td></tr></table></figure>

<p>注意：为了提高规则复用，用()进行封装，每一个括号都有一个编号，从1开始，为了复用这个规则。可以通过编号来完成该规则的调用。需要对编号数字进行转义。\1就代表获取1组规则。</p>
<h3 id="替换功能"><a href="#替换功能" class="headerlink" title="替换功能"></a>替换功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"联系我：13567012119联系我：13567012119联系我：13567012119联系我：13567012119联系我：13567012119联系我：13567012119"</span>;</span><br><span class="line">		String reg= <span class="string">"1[34578]\\d&#123;9&#125;"</span>;</span><br><span class="line">		str =	str.replaceAll(reg,<span class="string">"******"</span>);</span><br><span class="line">		System.out.println(<span class="string">"替换后的帖子："</span>+ str);</span><br><span class="line">替换后的帖子：联系我：******联系我：******联系我：******联系我：******联系我：******联系我：******</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我我....我...我.要...要要...要学....学学..学.编..编编.编.程.程.程..程</span></span><br><span class="line">		<span class="comment">//将字符串还原成:  我要学编程。</span></span><br><span class="line">String str = <span class="string">"我我....我...我.要...要要...要学....学学..学.编..编编.编.程.程.程..程"</span>;</span><br><span class="line">String str1 = <span class="string">"我我....我...我.要...要要...要学....学学..学.编..编编.编.程.程.程..程"</span>;</span><br><span class="line">		<span class="comment">// 先将点去掉</span></span><br><span class="line">		String str2 = str1.replaceAll(<span class="string">"\\.+"</span>,<span class="string">""</span>);</span><br><span class="line">		System.out.println(str2);</span><br><span class="line">		String str3 = str2.replaceAll(<span class="string">"(.)\\1+"</span>, <span class="string">"$1"</span>);</span><br><span class="line">		System.out.println(str3);</span><br></pre></td></tr></table></figure>

<h3 id="获取功能"><a href="#获取功能" class="headerlink" title="获取功能"></a>获取功能</h3><p>获取需要使用到正则的两个对象：使用的是用正则对象Pattern 和匹配器Matcher。</p>
<p>用法：</p>
<p>​       范例：</p>
<p>​        Pattern p = Pattern.compile(“a*b”);</p>
<p>​        Matcher m = p.matcher(“aaaaab”);</p>
<p>​        boolean b = m.matches();</p>
<p>​       步骤：</p>
<p>​       1，先将正则表达式编译成正则对象。使用的是Pattern类一个静态的方法。compile(regex);</p>
<p>​       2，让正则对象和要操作的字符串相关联，通过matcher方法完成，并返回匹配器对象。</p>
<p>​       3，通过匹配器对象的方法将正则模式作用到字符串上对字符串进行针对性的功能操作</p>
<ul>
<li><strong>获取由3个字母组成的单词。</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getDemo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		String str = <span class="string">"da jia zhu yi le,ming tian bu fang jia,xie xie!"</span>;</span><br><span class="line">		<span class="comment">//想要获取由3个字母组成的单词。</span></span><br><span class="line">		<span class="comment">//刚才的功能返回的都是一个结果，只有split返回的是数组，但是它是把规则作为分隔符，不会获取符合规则的内容。</span></span><br><span class="line">		<span class="comment">//这时我们要用到一些正则对象。</span></span><br><span class="line">		String reg = <span class="string">"\\b[a-z]&#123;3&#125;\\b"</span>;</span><br><span class="line">		Pattern p = Pattern.compile(reg);</span><br><span class="line">		Matcher m = p.matcher(str);</span><br><span class="line">		<span class="keyword">while</span>(m.find())</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(m.start()+<span class="string">"...."</span>+m.end());</span><br><span class="line">			System.out.println(<span class="string">"sub:"</span>+str.substring(m.start(),m.end()));</span><br><span class="line">			System.out.println(m.group());</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		System.out.println(m.find());//将规则对字符串进行匹配查找。</span></span><br><span class="line"><span class="comment">//		System.out.println(m.find());//将规则对字符串进行匹配查找。</span></span><br><span class="line"><span class="comment">//		System.out.println(m.group());//在使用group方法之前，必须要先找，找到了才可以取。</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>校验邮件</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkMail</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		String mail = <span class="string">"abc123@sina.com.cn"</span>;</span><br><span class="line">		mail = <span class="string">"1@1.1"</span>;</span><br><span class="line">		String reg = <span class="string">"[a-zA-Z_0-9]+@[a-zA-Z0-9]+(\\.[a-zA-Z]+)+"</span>;</span><br><span class="line">		reg = <span class="string">"\\w+@\\w+(\\.\\w+)+"</span>;<span class="comment">//简化的规则。笼统的匹配。</span></span><br><span class="line">		<span class="keyword">boolean</span> b = mail.matches(reg);</span><br><span class="line">		System.out.println(mail+<span class="string">":"</span>+b);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>网络爬虫</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetMailList</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		String reg = <span class="string">"\\w+@[a-zA-Z]+(\\.[a-zA-Z]+)+"</span>;</span><br><span class="line">		getMailsByWeb(reg);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMailsByWeb</span><span class="params">(String regex)</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		URL url = <span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/myweb/mail.html"</span>);</span><br><span class="line">		</span><br><span class="line">		URLConnection conn = url.openConnection();</span><br><span class="line">		BufferedReader bufIn = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream()));</span><br><span class="line">		String line = <span class="keyword">null</span>;</span><br><span class="line">		Pattern p = Pattern.compile(regex);		</span><br><span class="line">		<span class="keyword">while</span>((line=bufIn.readLine())!=<span class="keyword">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//System.out.println(line);</span></span><br><span class="line">			Matcher m = p.matcher(line);</span><br><span class="line">			<span class="keyword">while</span>(m.find())</span><br><span class="line">			&#123;</span><br><span class="line">				System.out.println(m.group());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		bufIn.close();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMails</span><span class="params">(String regex)</span><span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		BufferedReader bufr = </span><br><span class="line">			<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"mail.txt"</span>));</span><br><span class="line">		String line = <span class="keyword">null</span>;</span><br><span class="line">		Pattern p = Pattern.compile(regex);		</span><br><span class="line">		<span class="keyword">while</span>((line=bufr.readLine())!=<span class="keyword">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//System.out.println(line);</span></span><br><span class="line">			Matcher m = p.matcher(line);</span><br><span class="line">			<span class="keyword">while</span>(m.find())</span><br><span class="line">			&#123;</span><br><span class="line">				System.out.println(m.group());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		bufr.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">非负整数：^\d+$</span><br><span class="line"> </span><br><span class="line">正整数：^[<span class="number">0</span>-<span class="number">9</span>]*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line"> </span><br><span class="line">非正整数：^((-\d+)|(<span class="number">0</span>+))$</span><br><span class="line"> </span><br><span class="line">负整数：^-[<span class="number">0</span>-<span class="number">9</span>]*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*$</span><br><span class="line"> </span><br><span class="line">整数：^-?\d+$</span><br><span class="line"> </span><br><span class="line">非负浮点数：^\d+(\.\d+)?$</span><br><span class="line"> </span><br><span class="line">正浮点数 : ^((<span class="number">0</span>-<span class="number">9</span>)+\.[<span class="number">0</span>-<span class="number">9</span>]*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)|([<span class="number">0</span>-<span class="number">9</span>]*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*\.[<span class="number">0</span>-<span class="number">9</span>]+)|([<span class="number">0</span>-<span class="number">9</span>]*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*)$</span><br><span class="line"> </span><br><span class="line">非正浮点数：^((-\d+\.\d+)?)|(<span class="number">0</span>+(\.<span class="number">0</span>+)?))$</span><br><span class="line"> </span><br><span class="line">负浮点数：^(-((正浮点数正则式)))$</span><br><span class="line"> </span><br><span class="line">英文字符串：^[A-Za-z]+$</span><br><span class="line"> </span><br><span class="line">英文大写串：^[A-Z]+$</span><br><span class="line"> </span><br><span class="line">英文小写串：^[a-z]+$</span><br><span class="line"> </span><br><span class="line">英文字符数字串：^[A-Za-z0-<span class="number">9</span>]+$</span><br><span class="line"> </span><br><span class="line">英数字加下划线串：^\w+$</span><br><span class="line"> </span><br><span class="line">E-mail地址：^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$</span><br><span class="line"> </span><br><span class="line">URL：^[a-zA-Z]+:<span class="comment">//(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\s*)?$ </span></span><br><span class="line"> 或：^http:\/\/[A-Za-z0-<span class="number">9</span>]+\.[A-Za-z0-<span class="number">9</span>]+[\/=\?%\-&amp;_~`@[\]\<span class="string">':+!]*([^&lt;&gt;\"\"])*$</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">邮政编码：^[1-9]\d&#123;5&#125;$</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">中文：^[\u0391-\uFFE5]+$</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">电话号码：^((\(\d&#123;2,3&#125;\))|(\d&#123;3&#125;\-))?(\(0\d&#123;2,3&#125;\)|0\d&#123;2,3&#125;-)?[1-9]\d&#123;6,7&#125;(\-\d&#123;1,4&#125;)?$</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">手机号码：^((\(\d&#123;2,3&#125;\))|(\d&#123;3&#125;\-))?13\d&#123;9&#125;$</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">双字节字符(包括汉字在内)：^\x00-\xff</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">匹配首尾空格：(^\s*)|(\s*$)（像vbscript那样的trim函数）</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">匹配HTML标记：&lt;(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">匹配空行：\n[\s| ]*\r</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">提取信息中的网络链接：(h|H)(r|R)(e|E)(f|F)  *=  *('</span>|<span class="string">")?(\w|\\|\/|\.)+('|"</span>|  *|&gt;)?</span><br><span class="line"> </span><br><span class="line">提取信息中的邮件地址：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</span><br><span class="line"> </span><br><span class="line">提取信息中的图片链接：(s|S)(r|R)(c|C)  *=  *(<span class="string">'|")?(\w|\\|\/|\.)+('</span>|<span class="string">"|  *|&gt;)?</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">提取信息中的IP地址：(\d+)\.(\d+)\.(\d+)\.(\d+)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">提取信息中的中国手机号码：(86)*0*13\d&#123;9&#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">提取信息中的中国固定电话号码：(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-|\s)?\d&#123;8&#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">提取信息中的中国电话号码（包括移动和固定电话）：(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-|\s)?\d&#123;7,14&#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">提取信息中的中国邮政编码：[1-9]&#123;1&#125;(\d+)&#123;5&#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">提取信息中的浮点数（即小数）：(-?\d*)\.?\d+</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">提取信息中的任何数字 ：(-?\d*)(\.\d+)? </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">IP：(\d+)\.(\d+)\.(\d+)\.(\d+)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">电话区号：/^0\d&#123;2,3&#125;$/</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">腾讯QQ号：^[1-9]*[1-9][0-9]*$</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">帐号(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">中文、英文、数字及下划线：^[\u4e00-\u9fa5_a-zA-Z0-9]+$</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">匹配中文字符的正则表达式： [\u4e00-\u9fa5]</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">匹配双字节字符(包括汉字在内)：[^\x00-\xff]</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">匹配空行的正则表达式：\n[\s| ]*\r</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">匹配HTML标记的正则表达式：/&lt;(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt;/</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">sql语句：^(select|drop|delete|create|update|insert).*$</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">匹配首尾空格的正则表达式：(^\s*)|(\s*$)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</span></span><br></pre></td></tr></table></figure>

<h1 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h1><p>jdk1.5新特性之——-静态导入</p>
<p> 静态导入的作用： 简化书写。</p>
<p>静态导入可以作用一个类的所有静态成员。 </p>
<p> 静态导入的格式：<br>     import static 包名.类名.静态的成员；</p>
<p>静态导入要注意的事项：<br>       1. 如果静态导入的成员与本类的成员存在同名的情况下，那么默认使用本类的静态成员，如果需要指定使用静态导入的成员，那么需要在静态成员前面加上类名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Collections.sort;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Collections.binarySearch;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Collections.max;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">		list.add(<span class="number">13</span>);</span><br><span class="line">		list.add(<span class="number">9</span>);</span><br><span class="line">		list.add(<span class="number">10</span>);</span><br><span class="line">		list.add(<span class="number">19</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//排序</span></span><br><span class="line">		Collections.sort(list);</span><br><span class="line">		out.println(<span class="string">"集合的元素："</span>+ list);</span><br><span class="line">		out.println(<span class="string">"索引值："</span>+ binarySearch(list,<span class="number">13</span>));</span><br><span class="line">		out.println(<span class="string">"最大值："</span>+ max(list));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(ArrayList&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"本类 的sort方法....."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><p>jdk1.5新特性之——-&gt;可变参数</p>
<p>需求： 定义一个函数做加法功能（函数做几个数据 的加法功能是不确定）。</p>
<p>可变参数的格式：<br>    数据类型… 变量名</p>
<p>可变参数要 注意的细节：<br>    1. 如果一个函数 的形参使用上了可变参数之后，那么调用该方法的时候可以传递参数也可以不传递参数。<br>    2. 可变参数实际上是一个数组对象。<br>    3. 可变参数必须位于形参中的最后一个参数。<br>    4. 一个函数最多只能有一个可变 参数，因为可变参数要位于形参中最后一个位置上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">		<span class="comment">/*System.out.println(arr);</span></span><br><span class="line"><span class="comment">			add(arr);*/</span></span><br><span class="line">		add();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>... arr)</span></span>&#123; <span class="comment">//长度是0</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> item : arr)&#123;</span><br><span class="line">			result+=item;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"总和："</span>+ result);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h1><p>jdk1.5出现的新特性—-&gt;增强for循环</p>
<p>增强for循环的作用： 简化迭代器的书写格式。(注意：增强for循环的底层还是使用了迭代器遍历。)</p>
<p>增强for循环的适用范围： 如果是实现了Iterable接口的对象或者是数组对象都可以使用增强for循环。</p>
<p>增强for循环的格式：</p>
<pre><code>for(数据类型  变量名  :遍历的目标){

}</code></pre><p>增强for循环要注意的事项：<br>    1. 增强for循环底层也是使用了迭代器获取的，只不过获取迭代器由jvm完成，不需要我们获取迭代器而已，所以在使** 用增强for循环变量元素的过程中不准使用集合<br>    ** 对象对集合的元素个数进行修改。<br>    2. 迭代器遍历元素与增强for循环变量元素的区别：使用迭代器遍历集合的元素时可以删除集合的元素，而增强for循环变量集合的元素时，不能调用迭代器的remove方法删除元素。<br>    3. 普通for循环与增强for循环的区别：普通for循环可以没有变量的目标，而增强for循环一定要有变量的目标。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">		<span class="comment">//添加元素</span></span><br><span class="line">		set.add(<span class="string">"狗娃"</span>);</span><br><span class="line">		set.add(<span class="string">"狗剩"</span>);</span><br><span class="line">		set.add(<span class="string">"铁蛋"</span>);</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		//使用迭代器遍历Set的集合.</span></span><br><span class="line"><span class="comment">		Iterator&lt;String&gt; it  = set.iterator();</span></span><br><span class="line"><span class="comment">		while(it.hasNext())&#123;</span></span><br><span class="line"><span class="comment">			String temp = it.next();</span></span><br><span class="line"><span class="comment">			System.out.println("元素："+ temp);</span></span><br><span class="line"><span class="comment">			it.remove();</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		//使用增强for循环解决</span></span><br><span class="line"><span class="comment">		for(String item : set)&#123;</span></span><br><span class="line"><span class="comment">			System.out.println("元素："+ item);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		int[] arr = &#123;12,5,6,1&#125;;</span></span><br><span class="line"><span class="comment">	 	普通for循环的遍历方式</span></span><br><span class="line"><span class="comment">	 	for(int i =  0 ; i&lt;arr.length ; i++)&#123;</span></span><br><span class="line"><span class="comment">			System.out.println("元素："+ arr[i]);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		//使用增强for循环实现</span></span><br><span class="line"><span class="comment">		for(int item :arr)&#123;</span></span><br><span class="line"><span class="comment">			System.out.println("元素："+ item);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		//需求： 在控制台打印5句hello world.</span></span><br><span class="line"><span class="comment">		for(int i = 0 ; i &lt; 5; i++)&#123;</span></span><br><span class="line"><span class="comment">			System.out.println("hello world");</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="comment">//注意： Map集合没有实现Iterable接口，所以map集合不能直接使用增强for循环，如果需要使用增强for循环需要借助于Collection</span></span><br><span class="line">		<span class="comment">// 的集合。</span></span><br><span class="line">		HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">		map.put(<span class="string">"001"</span>,<span class="string">"张三"</span>);</span><br><span class="line">		map.put(<span class="string">"002"</span>,<span class="string">"李四"</span>);</span><br><span class="line">		map.put(<span class="string">"003"</span>,<span class="string">"王五"</span>);</span><br><span class="line">		map.put(<span class="string">"004"</span>,<span class="string">"赵六"</span>);</span><br><span class="line">		Set&lt;Map.Entry&lt;String, String&gt;&gt; entrys = map.entrySet();</span><br><span class="line">		<span class="keyword">for</span>(Map.Entry&lt;String, String&gt; entry  :entrys)&#123;</span><br><span class="line">			System.out.println(<span class="string">"键："</span>+ entry.getKey()+<span class="string">" 值："</span>+ entry.getValue());</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定一个类使用增强for循环"><a href="#自定一个类使用增强for循环" class="headerlink" title="自定一个类使用增强for循环"></a>自定一个类使用增强for循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Eg</span>自定一个类使用增强<span class="title">for</span>循环 &lt;<span class="title">T</span>&gt;  <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	T[] obj = (T[]) <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Eg自定一个类使用增强<span class="keyword">for</span>循环() &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">		obj[index++] = t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.index;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Iterator&lt;T&gt;()&#123;</span><br><span class="line">			<span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> cursor&lt;index;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> (T) obj[cursor++];</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Eg自定一个类使用增强<span class="keyword">for</span>循环&lt;String&gt; eg = <span class="keyword">new</span> Eg自定一个类使用增强<span class="keyword">for</span>循环&lt;String&gt;();</span><br><span class="line">		eg.add(<span class="string">"aa"</span>);</span><br><span class="line">		eg.add(<span class="string">"bb"</span>);</span><br><span class="line">		eg.add(<span class="string">"cc"</span>);</span><br><span class="line">		Iterator&lt;String&gt; it = eg.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			String s = it.next();</span><br><span class="line">			System.out.print(s+<span class="string">"　"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		<span class="keyword">for</span>(String s : eg)&#123;</span><br><span class="line">			System.out.print(s+<span class="string">" "</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="自动装箱与自动拆箱"><a href="#自动装箱与自动拆箱" class="headerlink" title="自动装箱与自动拆箱"></a>自动装箱与自动拆箱</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> java是面向对象的语言，任何事物都可以使用类进行描述，sun就使用了一些类描述java中八种基本数据类型数据</span><br><span class="line"> </span><br><span class="line"> 	基本数据类型            包装类型</span><br><span class="line"> 	<span class="keyword">byte</span>     	  Byte</span><br><span class="line">	<span class="keyword">short</span>      	  Short</span><br><span class="line">	<span class="keyword">int</span>           Integer</span><br><span class="line">	<span class="keyword">long</span>          Long </span><br><span class="line">	<span class="keyword">float</span>          Float</span><br><span class="line">	<span class="keyword">double</span>         Double </span><br><span class="line">	<span class="keyword">boolean</span>        Boolean </span><br><span class="line">	<span class="keyword">char</span>          Character</span><br><span class="line">基本数据类型数据有了对应 的包装 类型的好处：</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String str = <span class="string">"12"</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//字符串转换成int类型数据。 可以把字符串转换成对应的数字</span></span><br><span class="line">		<span class="keyword">int</span> i = Integer.parseInt(str);</span><br><span class="line">		System.out.println(i+<span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//把数字转换成字符串</span></span><br><span class="line">		System.out.println(<span class="string">"把整数转换成对应 的字符串："</span>+Integer.toString(i));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//把整数转换成对应的进制形式</span></span><br><span class="line">		System.out.println(<span class="string">"10的二进制："</span>+ Integer.toBinaryString(<span class="number">10</span>));</span><br><span class="line">		System.out.println(<span class="string">"10的二进制："</span>+ Integer.toBinaryString(<span class="number">10</span>));</span><br><span class="line">		System.out.println(<span class="string">"10的十六进制："</span>+ Integer.toHexString(<span class="number">10</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//可以把字符串当成对应的进行数据帮你转换</span></span><br><span class="line">		String data = <span class="string">"10"</span>;</span><br><span class="line">		<span class="keyword">int</span> a = Integer.parseInt(data, <span class="number">2</span>);</span><br><span class="line">		System.out.println(<span class="string">"a="</span>+a);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//集合： 集合是可以存储任意对象类型数据的容器。</span></span><br><span class="line">		ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">		list.add(<span class="number">1</span>);</span><br><span class="line">		list.add(<span class="number">2</span>);</span><br><span class="line">		list.add(<span class="number">3</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//自动装箱： 自动把java的基本数据类型数据转换成对象类型数据。</span></span><br><span class="line">		<span class="keyword">int</span> temp = <span class="number">10</span>;  <span class="comment">//基本数据类型</span></span><br><span class="line">		Integer b =temp; <span class="comment">//把a存储的值赋予给b变量。</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//自动拆箱： 把引用类型的数据转换成基本类型的数据</span></span><br><span class="line">		Integer c = <span class="keyword">new</span> Integer(<span class="number">13</span>);</span><br><span class="line">		<span class="keyword">int</span> d = c; <span class="comment">//</span></span><br><span class="line">		System.out.println(d);</span><br><span class="line">		<span class="comment">//引用的数据类型</span></span><br><span class="line">		Integer e = <span class="number">128</span>;</span><br><span class="line">		Integer f = <span class="number">128</span>; </span><br><span class="line">		System.out.println(<span class="string">"同一个对象吗？"</span>+(e==f)); <span class="comment">// Integer类内部维护了缓冲数组，该缓冲数组存储的-128~127 这些数据在一个数组中。如果你获取的数据是落入到这个范围之内的，那么就直接从该缓冲区中获取对应的数据。</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础知识-文件</title>
    <url>/2017/12/03/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/6-Java_%E6%96%87%E4%BB%B6_%E6%B5%81%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">字节流</span><br><span class="line"></span><br><span class="line">输入字节流：</span><br><span class="line">-----------| InputStream  所有输入字节流的基类  抽象类</span><br><span class="line">-----------------| FileInputStream 读取文件数据的输入字节流</span><br><span class="line">-----------------| BufferedInputStream  缓冲输入字符流       该类出现的目的是为了提高读取文件 数据的效率。 这个类其实只不过是在内部维护了一个<span class="number">8</span>kb的字节数组而已。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出字节流：</span><br><span class="line">-----------| OutputStream 所有输出字节流的基类。  抽象类。</span><br><span class="line">----------------| FileOutputStream 向文件输出数据的输出字节流  </span><br><span class="line">----------------| BufferedOutputStream 缓冲输出字节流   该类出现的目的也是为了提高向文件写数据的效率。 这个类的也只不过是在内部维护了一个<span class="number">8</span>kb的字节数组而已。</span><br><span class="line"></span><br><span class="line">字符流 :  字符流 = 字节流  + 编码（解码）</span><br><span class="line"></span><br><span class="line">输入字符流:</span><br><span class="line">---------| Reader   所有输入字符流的基类。  抽象类。</span><br><span class="line">----------------| FileReader 读取文件数据的输入字符流。 </span><br><span class="line">----------------| BufferedReader 缓冲输入字符流           该类出现的目的是为了提高读取文件数据的效率与拓展FileReader的(readLine)功能。  这个类的也只不过是在内部维护了一个<span class="number">8</span>kb的字符数组而已。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出字符流:</span><br><span class="line">---------| Writer 所有输出字符流的基类。  抽象类</span><br><span class="line">----------------| FileWriter 向文件输出数据的输出字符流  </span><br><span class="line">----------------| BufferedWriter 缓冲输出字符流        该类出现的目的是为了提高写文件数据的效率与拓展FileWriter的(newLine)功能.</span><br><span class="line">----------------| 转换流</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in,<span class="string">"gbk"</span>));</span><br><span class="line">System.out.println(<span class="string">"输入："</span>);</span><br><span class="line">System.out.println(br.readLine());</span><br><span class="line"></span><br><span class="line">BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">writer.write(<span class="string">"hello你好\n"</span>);</span><br><span class="line">writer.flush();</span><br><span class="line"></span><br><span class="line">PrintWrter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span>  BufferdWriter(<span class="keyword">new</span> OutputSteamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"a.txt"</span>),<span class="string">"utf-8"</span>)),<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="File对象"><a href="#File对象" class="headerlink" title="File对象"></a>File对象</h1><p>File类可以描述一个文件或者一个文件夹。</p>
<p>File类的构造方法：</p>
<pre><code>File(String pathname)  指定文件或者文件夹的路径创建一个File文件。

File(File parent, String child)   根据 parent 抽象路径名和 child 路径名字符串创建一个新 File 实例。 

File(String parent, String child) </code></pre><p>目录分隔符：  在windows机器上 的目录分隔符是 \  ,在linux机器上的目录分隔符是/ .</p>
<p>注意：  在windows上面\ 与 / 都可以使用作为目录分隔符。 而且，如果写/ 的时候只需要写一个即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"c:/"</span>);</span><br><span class="line"></span><br><span class="line">File f1 = <span class="keyword">new</span> File(f,<span class="string">"a2.txt"</span>);</span><br><span class="line"></span><br><span class="line">File f3 = <span class="keyword">new</span> File(<span class="string">"c:\\"</span>,<span class="string">"a3.txt"</span>);</span><br><span class="line">System.out.println(f1.getAbsolutePath()); <span class="comment">// c:\a2.txt</span></span><br><span class="line">System.out.println(f.getFreeSpace()/<span class="number">1024</span>/<span class="number">1024</span>/<span class="number">1024</span>); <span class="comment">// byte KB MB GB</span></span><br><span class="line">System.out.println(f.isDirectory()); <span class="comment">//true</span></span><br><span class="line">System.out.println(f1.canExecute()); <span class="comment">//false</span></span><br><span class="line">System.out.println(f1.canRead()); <span class="comment">//false</span></span><br><span class="line"><span class="keyword">if</span>(f1.canWrite())&#123;</span><br><span class="line">	f1.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(File.separator <span class="keyword">instanceof</span> String);<span class="comment">// true</span></span><br><span class="line">System.out.println(File.separatorChar); <span class="comment">// \</span></span><br><span class="line">System.out.println(f1.exists()); <span class="comment">// false c:/ 路径访问不了</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> File(<span class="string">"C:/Users/ZhangXu/Desktop/f2.txt"</span>).exists()); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h1 id="File类中常用的方法"><a href="#File类中常用的方法" class="headerlink" title="File类中常用的方法"></a>File类中常用的方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">创建：</span><br><span class="line">createNewFile()	在指定位置创建一个空文件，成功就返回<span class="keyword">true</span>，如果已存在就不创建然后返回<span class="keyword">false</span></span><br><span class="line">mkdir()			在指定位置创建目录，这只会创建最后一级目录，如果上级目录不存在就抛异常。</span><br><span class="line">mkdirs()		在指定位置创建目录，这会创建路径中所有不存在的目录。</span><br><span class="line">renameTo(File dest)	重命名文件或文件夹，也可以操作非空的文件夹，文件不同时相当于文件的剪切,剪切时候不能操作非空的文件夹。移动/重命名成功则返回<span class="keyword">true</span>，失败则返回<span class="keyword">false</span>。</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">删除：</span><br><span class="line">delete()	删除文件或一个空文件夹，如果是文件夹且不为空，则不能删除，成功返回<span class="keyword">true</span>，失败返回<span class="keyword">false</span>。</span><br><span class="line">deleteOnExit()在虚拟机终止时，请求删除此抽象路径名表示的文件或目录，保证程序异常时创建的临时文件也可以被删除</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">判断：</span><br><span class="line">		exists()		文件或文件夹是否存在。</span><br><span class="line">		isFile()		是否是一个文件，如果不存在，则始终为<span class="keyword">false</span>。</span><br><span class="line">		isDirectory()	是否是一个目录，如果不存在，则始终为<span class="keyword">false</span>。</span><br><span class="line">		isHidden()		是否是一个隐藏的文件或是否是隐藏的目录。</span><br><span class="line">		isAbsolute()	测试此抽象路径名是否为绝对路径名。</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">获取：</span><br><span class="line">getName()		获取文件或文件夹的名称，不包含上级路径。</span><br><span class="line">getPath()       返回绝对路径，可以是相对路径，但是目录要指定</span><br><span class="line">getAbsolutePath()	获取文件的绝对路径，与文件是否存在没关系</span><br><span class="line">length()		获取文件的大小（字节数），如果文件不存在则返回<span class="number">0L</span>，如果是文件夹也返回<span class="number">0L</span>。</span><br><span class="line">getParent()		返回此抽象路径名父目录的路径名字符串；如果此路径名没有指定父目录，则返回<span class="keyword">null</span>。</span><br><span class="line">lastModified()	获取最后一次被修改的时间。</span><br><span class="line"></span><br><span class="line">文件夹相关：</span><br><span class="line">staic File[] listRoots()	列出所有的根目录（Window中就是所有系统的盘符）</span><br><span class="line">list()						返回目录下的文件或者目录名，包含隐藏文件。对于文件这样操作会返回<span class="keyword">null</span>。</span><br><span class="line">list(FilenameFilter filter)	返回指定当前目录中符合过滤条件的子文件或子目录。对于文件这样操作会返回<span class="keyword">null</span>。</span><br><span class="line">listFiles()		返回目录下的文件或者目录对象（File类实例），包含隐藏文件。对于文件这样操作会返回<span class="keyword">null</span>。</span><br><span class="line">listFiles(FilenameFilter filter)	返回指定当前目录中符合过滤条件的子文件或子目录。对于文件这样操作会返回<span class="keyword">null</span>。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> File(<span class="string">"c:/aa/bb/dd/cc"</span>).mkdirs(); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">new</span> File(<span class="string">"c:/aa"</span>).mkdir(); <span class="comment">//true</span></span><br><span class="line">File[] listRoots = File.listRoots();</span><br><span class="line">System.out.println(Arrays.toString(listRoots)); <span class="comment">// [C:\]</span></span><br><span class="line"></span><br><span class="line">String[] fileNames = file.list(); </span><br><span class="line"><span class="comment">//把 当前文件夹下面的所有子文件名与子文件夹名 存储到一个String类型 的数组中 返回。</span></span><br><span class="line"><span class="keyword">for</span>(String fileName : fileNames)&#123;</span><br><span class="line">    System.out.println(fileName);</span><br><span class="line">&#125;</span><br><span class="line">				</span><br><span class="line">File[] files = file.listFiles(); </span><br><span class="line"><span class="comment">// 把当前文件夹下面的所有子文件与子文件夹都使用了一个File对象描述，然后把这些File对象存储到一个File数组中返回</span></span><br><span class="line"><span class="keyword">for</span>(File fileItem : files)&#123;</span><br><span class="line">    System.out.println(<span class="string">"文件名："</span>+ fileItem.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>过滤文件，找出.java文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 文件操作;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">FileFilter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> pathname.getName().endsWith(<span class="string">".java"</span>)&amp;&amp;pathname.isFile();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFilterDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		List&lt;String&gt; list = <span class="keyword">null</span>;</span><br><span class="line">		File f = <span class="keyword">new</span> File(<span class="string">"C:/Users/ZhangXu/Desktop/"</span>);</span><br><span class="line">		list = getFileName(f);</span><br><span class="line">		System.out.println(list);</span><br><span class="line">		</span><br><span class="line">		List&lt;String&gt; list2 = getFileName2(f);</span><br><span class="line">		System.out.println(list2);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getFileName2</span><span class="params">(File f)</span> </span>&#123;</span><br><span class="line">		File[] listFiles = f.listFiles(<span class="keyword">new</span> MyFilter());</span><br><span class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		<span class="keyword">for</span>(File file : listFiles)&#123;</span><br><span class="line">			</span><br><span class="line">			list.add(file.getName());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> list;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getFileName</span><span class="params">(File f)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		</span><br><span class="line">		File[] listFiles = f.listFiles();</span><br><span class="line">		<span class="keyword">for</span>(File file : listFiles)&#123;</span><br><span class="line">			<span class="keyword">if</span>(file.isFile() &amp;&amp; file.getName().matches(<span class="string">"^.+\\.java$"</span>))&#123;</span><br><span class="line">				list.add(file.getName());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> list;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p>File对象可以表示存在的文件或文件夹，也可以表示不存在的。</p>
<p>我们想要得到文件的内容怎么办，File只是操作文件，文件的内容如何处理就需要使用io流技术了。</p>
<p>例如:在C盘下有一个名称为a.txt的文本文件.想要通过Java程序读出来文件中的内容,需要使用IO流技术.同样想要将程序中的数据,保存到硬盘的文件中,也需要IO流技术.</p>
<p>读和写文件文件示例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 文件操作;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IODemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		File file = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\ZhangXu\\Desktop\\temp.txt"</span>);</span><br><span class="line">		writeData(file);</span><br><span class="line">		readData(file);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeData</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">		FileOutputStream fout = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span>(file == <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"file null"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				file.createNewFile();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			fout = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">			<span class="keyword">byte</span>[] b = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;;</span><br><span class="line">			fout.write(b);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(fout != <span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					fout.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readData</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">		FileInputStream fin = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span>(file == <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"file null"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				file.createNewFile();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			fin = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">			System.out.println(file.length());</span><br><span class="line">			<span class="keyword">int</span> len;</span><br><span class="line">			<span class="keyword">while</span>((len = fin.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">				System.out.print((<span class="keyword">char</span>)len+<span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(fin != <span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					fin.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当完成流的读写时,应该通过调用close方法来关闭它,这个方法会释放掉十分有限的操作系统资源.如果一个应用程序打开了过多的流而没有关闭它们,那么系统资源将被耗尽.</p>
<p><strong>IO流简介：（Input/Output）</strong></p>
<p>   I/O类库中使用“流”这个抽象概念。Java对设备中数据的操作是通过流的方式。</p>
<p>   表示任何有能力产出数据的数据源对象，或者是有能力接受数据的接收端对象。“流”屏蔽了实际的I/O设备中处理数据的细节。IO流用来处理设备之间的数据传输。设备是指硬盘、内存、键盘录入、网络等。</p>
<p>   Java用于操作流的对象都在IO包中。IO流技术主要用来处理设备之间的数据传输。</p>
<p>   由于Java用于操作流的对象都在IO包中。所以使用IO流需要导包如：import java.io.*;</p>
<p><strong>IO流的分类</strong></p>
<p>   流按操作数据类型的不同分为两种：字节流与字符流。</p>
<p>   流按流向分为：输入流，输出流（以程序为参照物，输入到程序，或是从程序输出）</p>
<h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><p>我们已经知道File对象封装的是文件或者路径属性，但是不包含向（从）文件读（写）数据的方法。为了实现对文件的读和写操作需要学会正确的使用Java的IO创建对象。</p>
<p>字节流的抽象基类：</p>
<p>   输入流：java.io.InputStream</p>
<p>   输出流：java.io.OutputStream</p>
<p>特点：</p>
<p>​      字节流的抽象基类派生出来的子类名称都是以其父类名作为子类名的后缀。</p>
<p>​      如：FileInputStream, ByteArrayInputStream等。</p>
<p>说明：</p>
<p>​      字节流处理的单元是一个字节，用于操作二进制文件（计算机中所有文件都是二进制文件）</p>
<h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h2><p>显然流是Java中的一类对象，要打开流其实就是创建具体流的对象，由于是读取硬盘上的文件，应该使用输入流。所以找到了InputStream类，但是InputStream是抽象类，需要使用它的具体实现类来创建对象就是FileInputStream。通过new 调用FileInputStream 的构造方法来创建对象。发现FileInputStream的构造方法需要指定文件的来源。查看构造方法，可以接受字符串也可以接受File对象。我们通过构建File对象指定文件路径。</p>
<p>使用流就像使用水管一样，要打开就要关闭。所以打开流和关闭流的动作是比不可少的。如何关闭流？使用close方法即可，当完成流的读写时,应该通过调用close方法来关闭它,这个方法会释放掉十分有限的操作系统资源.如果一个应用程序打开了过多的流而没有关闭它们,那么系统资源将被耗尽.</p>
<blockquote>
<p>如何通过流读取内容？</p>
</blockquote>
<p>查找api文档通过read方法，查看该方法，发现有返回值，并且是int类型的，该方法一次读取一个字节（byte）</p>
<h3 id="读取方式一"><a href="#读取方式一" class="headerlink" title="读取方式一"></a>读取方式一</h3><p>read()方法每次读取一个字节，返回int类型，到文件末尾返回-1.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readData1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>((len = fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">			System.out.print((<span class="keyword">char</span>)len);</span><br><span class="line">		&#125;</span><br><span class="line">		fis.close();</span><br><span class="line">	&#125;<span class="comment">// abcde</span></span><br></pre></td></tr></table></figure>

<h3 id="读取方式二"><a href="#读取方式二" class="headerlink" title="读取方式二"></a>读取方式二</h3><p>使用read(byte[] b) 方法,返回读取字节个个数。使用缓冲区(关键是缓冲区大小的确定，一般是1024的倍数)</p>
<p>使用read()方法的时候，流需要读一次就处理一次，将读到的数据装入到字节数组中，一次性的操作数组，可以提高效率。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readData2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>);</span><br><span class="line">		<span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		System.out.println(fis.read(b));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.length;i++)&#123;</span><br><span class="line">			System.out.print((<span class="keyword">char</span>)b[i]);</span><br><span class="line">		&#125;</span><br><span class="line">        fis.close();</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">// 5 abcde</span></span><br></pre></td></tr></table></figure>

<h3 id="读取方式三"><a href="#读取方式三" class="headerlink" title="读取方式三"></a>读取方式三</h3><p>使用read(byte[] b,int off,int len)，返回读的字节数</p>
<p>查看api文档，</p>
<p>b，显然是一个byte类型数组，当做容器来使用</p>
<p>off，是指定从数组的什么位置开始存字节</p>
<p>len，希望读多少个</p>
<p>其实就是把数组的一部分当做流的容器来使用。告诉容器，<strong>从什么地方开始装要装多少</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readData3</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>);</span><br><span class="line">		<span class="comment">// fis.skip(4); // 从文本中跳过4个字节开始读入数据</span></span><br><span class="line">    	<span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">int</span> start = <span class="number">5</span>;</span><br><span class="line">		<span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">		fis.read(b, start, num);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;start+num;i++)&#123;</span><br><span class="line">			System.out.print((<span class="keyword">char</span>)b[i]);<span class="comment">// 打印读入的数据，读出的数据长度为num,\r\n算两个字节</span></span><br><span class="line">		&#125;</span><br><span class="line">		fis.close();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="读取方式四"><a href="#读取方式四" class="headerlink" title="读取方式四"></a>读取方式四</h3><p>使用缓冲(提高效率),并循环读取(读完所有内容).</p>
<p>总结：读完文件的所有内容。很显然可以使用普通的read方法，一次读一个字节直到读到文件末尾。为了提高效率可以使用read(byte[] byt);方法就是所谓的使用缓冲提高效率。</p>
<p>我们可以读取大文本数据测试(大于1K的文本文件.)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readData4</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> ((len = fis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">			System.out.println(<span class="keyword">new</span> String(b, <span class="number">0</span>, len));</span><br><span class="line">		&#125;</span><br><span class="line">		fis.close();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h2><p>OutputStream的实现类FileOutputStream 创建FileOutputStream 流对象,必须指定数据要存放的目的地。通过构造函数的形式。创建流对象时，调用了系统底层的资源。在指定位置建立了数据存放的目的文件。</p>
<h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><p>write(int b)和write(byte[] b)两种方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">write</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> IOException将指定的字节写入此输出流。write 的常规协定是：向输出流写入一个字节。要写入的字节是参数 b 的八个低位。b 的 24 个高位将被忽略。 </span></span><br><span class="line"><span class="function">OutputStream 的子类必须提供此方法的实现。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">JAVA里给<span class="keyword">int</span>类型分配4个字节的存储空间，相当于32位二进制数，8个低位就是b的右边8位，24个高位也就是左边24位。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">参数：</span></span><br><span class="line"><span class="function">b - 字节 </span></span><br><span class="line"><span class="function">抛出： </span></span><br><span class="line"><span class="function">IOException - 如果发生 I/O 错误。尤其是，如果已关闭输出流，则可能抛出 IOException。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeData1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">    	<span class="comment">// true 不覆盖原本文件内容，追加内容。</span></span><br><span class="line">		fos.write(Integer.parseInt(<span class="string">"00111100"</span>, <span class="number">2</span>));</span><br><span class="line">		fos.write(<span class="string">'a'</span>);</span><br><span class="line">		fos.write(<span class="string">'b'</span>);</span><br><span class="line">		fos.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeData2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">		<span class="keyword">byte</span>[] b = <span class="string">"\r\nhahahah"</span>.getBytes();</span><br><span class="line">		fos.write(b);</span><br><span class="line">		fos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h2><p>读多少，写多少。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyImg</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"c:/users/ZhangXu/Desktop/collections.png"</span>);</span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"c:/users/ZhangXu/Desktop/collections2.png"</span>, <span class="keyword">true</span>);</span><br><span class="line">		<span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> ((len = fis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">			fos.write(b, <span class="number">0</span>, len);</span><br><span class="line">		&#125;</span><br><span class="line">		fos.close();</span><br><span class="line">		fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>当程序读取或写入文件内容时，发生异常，输入流或输出流关闭不了，造成资源浪费。</p>
<p>使用try{} catch(){}finally{}语句。try中放入可能出现异常的语句，catch是捕获异常对象，fianlly是一定要执行的代码</p>
<h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><p>上述程序中我们为了提高流的使用效率,自定义了字节数组,作为缓冲区.Java其实提供了专门的字节流缓冲来提高效率.</p>
<p><strong>BufferedInputStream和BufferedOutputStream</strong></p>
<p>BufferedOutputStream和BufferedOutputStream类可以通过减少读写次数来提高输入和输出的速度。它们内部有一个缓冲区，用来提高处理效率。查看API文档，发现可以指定缓冲区的大小。其实内部也是封装了字节数组。没有指定缓冲区大小，默认的字节是8192。</p>
<p>显然缓冲区输入流和缓冲区输出流要配合使用。首先缓冲区输入流会将读取到的数据读入缓冲区，当缓冲区满时，或者调用flush方法，缓冲输出流会将数据写出。</p>
<p>注意：当然使用缓冲流来进行提高效率时，对于小文件可能看不到性能的提升。但是文件稍微大一些的话，就可以看到实质的性能提升了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyImgByBuffered</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"c:/users/ZhangXu/Desktop/collections.png"</span>);</span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"c:/users/ZhangXu/Desktop/collectionsbuffer.png"</span>, <span class="keyword">true</span>);</span><br><span class="line">		BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">		BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">		<span class="keyword">int</span> len;</span><br><span class="line">		<span class="keyword">while</span>((len = bis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">			bos.write(len);</span><br><span class="line">		&#125;</span><br><span class="line">		fos.close();</span><br><span class="line">		fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h1><p>计算机并不区分二进制文件与文本文件。所有的文件都是以二进制形式来存储的，因此，从本质上说，所有的文件都是二进制文件。所以字符流是建立在字节流之上的，它能够提供字符层次的编码和解码。例如，在写入一个字符时，Java虚拟机会将字符转为文件指定的编码（默认是系统默认编码），在读取字符时，再将文件指定的编码转化为字符。</p>
<p><strong>中文字符使用gbk编码是2个字节保存，使用utf-8编码是3个字节编码。因此使用字节流读取不方便。</strong></p>
<p>总结：字符流就是：字节流 + 编码表，为了更便于操作文字数据。字符流的抽象基类：</p>
<p>Reader ， Writer。</p>
<p>由这些类派生出来的子类名称都是以其父类名作为子类名的后缀，如FileReader、FileWriter等。</p>
<h2 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h2><p>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>，<span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span>：</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	读取一个字符。返回的是读到的那个字符。如果读到流的末尾，返回-1.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2，<span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[])</span>：</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	将读到的字符存入指定的数组中，返回的是读到的字符个数，也就是往数组里装的元素的个数。如果读到流的末尾，返回-1.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3，<span class="title">close</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	读取字符其实用的是window系统的功能，就希望使用完毕后，进行资源的释放</span></span><br><span class="line"><span class="function">4，read</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] cbuf,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> off,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">                  <span class="keyword">throws</span> IOException将字符读入数组的某一部分。在某个输入可用、发生 I/O 错误或者到达流的末尾前，此方法一直阻塞。 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    参数：</span></span><br><span class="line"><span class="function">    cbuf - 目标缓冲区</span></span><br><span class="line"><span class="function">    off - 开始存储字符处的偏移量</span></span><br><span class="line"><span class="function">    len - 要读取的最多字符数 </span></span><br><span class="line"><span class="function">    返回：</span></span><br><span class="line"><span class="function">    读取的字符数，如果已到达流的末尾，则返回 -1 </span></span><br><span class="line"><span class="function">    抛出： </span></span><br><span class="line"><span class="function">IOException - 如果发生 I/O 错误																</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">由于Reader也是抽象类，所以想要使用字符输入流需要使用Reader的实现类。查看API文档。找到了FileReader。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    1，用于读取文本文件的流对象。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    2，用于关联文本文件。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    构造函数：在读取流对象初始化的时候，必须要指定一个被读取的文件。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readerData</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">		FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>);</span><br><span class="line">		<span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">int</span> len;</span><br><span class="line">		<span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">			System.out.println(<span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len));</span><br><span class="line">		&#125;</span><br><span class="line">		fr.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h2><p>Writer中的常见的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>，write(ch): 将一个字符写入到流中。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>，write(<span class="keyword">char</span>[]): 将一个字符数组写入到流中。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>，write(String): 将一个字符串写入到流中。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>，flush():刷新流，将流中的数据刷新到目的地中，流还存在。</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>，close():关闭资源：在关闭前会先调用flush()，刷新流中的数据去目的地。然流关闭。</span><br><span class="line"></span><br><span class="line">发现基本方法和OutputStream 类似，有write方法，功能更多一些。可以接收字符串。</span><br><span class="line"></span><br><span class="line">同样道理Writer是抽象类无法创建对象。查阅API文档，找到了Writer的子类FileWriter</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writerData</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">		<span class="keyword">char</span>[] cbuf = <span class="string">"且行且珍惜"</span>.toCharArray();</span><br><span class="line">		fw.write(cbuf);</span><br><span class="line">		fw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符流拷贝文件"><a href="#字符流拷贝文件" class="headerlink" title="字符流拷贝文件"></a>字符流拷贝文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyByRWer</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">	FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>);</span><br><span class="line">	FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"c:/users/ZhangXu/Desktop/tempa.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	<span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">	<span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">		fw.write(cbuf, <span class="number">0</span>, len);</span><br><span class="line">	&#125;</span><br><span class="line">	fr.close();</span><br><span class="line">	fw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>字节流可以拷贝视频和音频等文件，那么字符流可以拷贝这些吗？</p>
<p>经过验证拷贝图片是不行的。发现丢失了信息，为什么呢？</p>
<p>计算机中的所有信息都是以二进制形式进行的存储（1010）图片中的也都是二进制</p>
<p>在读取文件的时候字符流自动对这些二进制按照码表进行了编码处理，但是图片本来就是二进制文件，不需要进行编码。有一些巧合在码表中有对应，就可以处理，并不是所有的二进制都可以找到对应的。信息就会丢失。所以字符流只能拷贝以字符为单位的文本文件</p>
<p>（以ASCII码为例是127个，并不是所有的二进制都可以找到对应的ASCII，有些对不上的，就会丢失信息。）</p>
<h2 id="字符流的异常处理"><a href="#字符流的异常处理" class="headerlink" title="字符流的异常处理"></a>字符流的异常处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		String path1 = <span class="string">"c:/a.txt"</span>;</span><br><span class="line">		String path2 = <span class="string">"c:/b.txt"</span>;</span><br><span class="line"></span><br><span class="line">		copyFile2(path1, path2);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 使用字符流拷贝文件，有完善的异常处理</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile2</span><span class="params">(String path1, String path2)</span> </span>&#123;</span><br><span class="line">		Reader reader = <span class="keyword">null</span>;</span><br><span class="line">		Writer writer = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 打开流</span></span><br><span class="line">			reader = <span class="keyword">new</span> FileReader(path1);</span><br><span class="line">			writer = <span class="keyword">new</span> FileWriter(path2);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 进行拷贝</span></span><br><span class="line">			<span class="keyword">int</span> ch = -<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">while</span> ((ch = reader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">				writer.write(ch);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">// 关闭流，注意一定要能执行到close()方法，所以都要放到finally代码块中</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">					reader.close();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">			&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">						writer.close();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符流缓冲区"><a href="#字符流缓冲区" class="headerlink" title="字符流缓冲区"></a>字符流缓冲区</h2><p>查看Reader 发现Reader,操作的是字符,我们就不需要进行编码解码操作,由字符流读到二进制,自动进行解码得到字符,写入字符自动编码成二进制.</p>
<p>Reader有一个子类BufferedReader。子类继承父类显然子类可以重写父类的方法,也可以增加自己的新方法。例如一次读一行就是常用的操作.那么BufferedReader 类就提供了这个方法,可以查看readLine()方法具备一次读取一个文本行的功能。很显然,该子类可以对功能进行增强。</p>
<p>体验BufferedReader</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>);</span><br><span class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">		String line = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">			System.out.println(line);</span><br><span class="line">		&#125;</span><br><span class="line">		br.close();</span><br><span class="line">		fr.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>在使用缓冲区对象时，要明确，缓冲的存在是为了增强流的功能而存在，所以在建立缓冲区对象时，要先有流对象存在.</p>
<p>缓冲区的出现提高了对流的操作效率。原理：其实就是将数组进行封装。</p>
<p>使用字符流缓冲区拷贝文本文件.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedCopy</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>);</span><br><span class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">		BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"c:/users/ZhangXu/Desktop/tempbuffered.txt"</span>));</span><br><span class="line">		</span><br><span class="line">		String line = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">			bw.write(line);</span><br><span class="line"><span class="comment">//			bw.flush();</span></span><br><span class="line">			bw.newLine(); <span class="comment">// readLine 不包括换行</span></span><br><span class="line">		&#125;</span><br><span class="line">		bw.close();</span><br><span class="line">		br.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><p>使用BufferedReader读取每一行可以重写readLine方法。那么，既想要显示行号又想要显示引号，前面已有重写显示行号和显示引号的类。</p>
<p>发现,就需要再定义子类,发现这样比较麻烦，代码臃肿，而且代码重复.</p>
<p>可以换一种方式.如下:</p>
<p>其实就是一个新类要对原有类进行功能增强.</p>
<ol>
<li>在增强类中维护一个被增强的父类引用变量</li>
<li>在增强类的构造函数中初始化1中的变量</li>
<li>创建需要增强的方法，在刚方法中调用被被增强类的方法，并加以增强。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//带行号的缓冲输入字符流</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedLineNum2</span>  <span class="keyword">extends</span> <span class="title">BufferedReader</span></span>&#123;  </span><br><span class="line">	</span><br><span class="line">	<span class="comment">//在内部维护一个被装饰类的引用。</span></span><br><span class="line">	BufferedReader bufferedReader;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BufferedLineNum2</span><span class="params">(BufferedReader bufferedReader)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(bufferedReader);<span class="comment">// 注意： 该语句没有任何的作用，只不过是为了让代码不报错。</span></span><br><span class="line">		<span class="keyword">this</span>.bufferedReader = bufferedReader;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">readLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		String line = bufferedReader.readLine();</span><br><span class="line">		<span class="keyword">if</span>(line==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		line = count+<span class="string">" "</span>+line;</span><br><span class="line">		count++;</span><br><span class="line">		<span class="keyword">return</span> line;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//带分号缓冲输入字符流</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedSemi2</span> <span class="keyword">extends</span> <span class="title">BufferedReader</span></span>&#123;  <span class="comment">//为什么要继承?  是为了让这些装饰类的对象可以作为参数进行传递，达到互相装饰 的效果。</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//在内部维护一个被装饰类的引用。</span></span><br><span class="line">	BufferedReader bufferedReader;</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BufferedSemi2</span><span class="params">(BufferedReader bufferedReader)</span></span>&#123; <span class="comment">// new BuffereLineNum();</span></span><br><span class="line">		<span class="keyword">super</span>(bufferedReader);<span class="comment">// 注意： 该语句没有任何的作用，只不过是为了让代码不报错。</span></span><br><span class="line">		<span class="keyword">this</span>.bufferedReader = bufferedReader;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">readLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		String line = bufferedReader.readLine();  <span class="comment">//如果这里的ReadLine方法是调用了buffereLineNum的readLine方法，问题马上解决。</span></span><br><span class="line">		<span class="keyword">if</span>(line==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		line = line +<span class="string">";"</span>;</span><br><span class="line">		<span class="keyword">return</span> line;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲类带双引号</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BufferedQuto2</span> <span class="keyword">extends</span> <span class="title">BufferedReader</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//在内部维护一个被装饰的类</span></span><br><span class="line">	BufferedReader bufferedReader;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BufferedQuto2</span><span class="params">(BufferedReader bufferedReader)</span></span>&#123;  <span class="comment">//new  BufferedSemi2();</span></span><br><span class="line">		<span class="keyword">super</span>(bufferedReader) ; <span class="comment">//只是为了让代码不报错..</span></span><br><span class="line">		<span class="keyword">this</span>.bufferedReader = bufferedReader;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">readLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		String line = bufferedReader.readLine();  <span class="comment">//如果这里的ReadLine方法是调用了buffereLineNum的readLine方法，问题马上解决。</span></span><br><span class="line">		<span class="keyword">if</span>(line==<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		line = <span class="string">"\""</span>+line +<span class="string">"\""</span>;</span><br><span class="line">		<span class="keyword">return</span> line;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		File file = <span class="keyword">new</span> File(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>);</span><br><span class="line">		FileReader fileReader = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">		<span class="comment">//建立缓冲输入字符流</span></span><br><span class="line">		BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(fileReader);</span><br><span class="line">		<span class="comment">//建立带行号的缓冲输入字符流</span></span><br><span class="line">		BufferedLineNum2 bufferedLineNum = <span class="keyword">new</span> BufferedLineNum2(bufferedReader);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//带分号的缓冲输入字符流</span></span><br><span class="line">		BufferedSemi2 bufferedSemi2 = <span class="keyword">new</span> BufferedSemi2(bufferedLineNum);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//带双引号的缓冲输入字符流</span></span><br><span class="line">		BufferedQuto2 bufferedQuto2 = <span class="keyword">new</span>  BufferedQuto2(bufferedSemi2);</span><br><span class="line">		</span><br><span class="line">		String line = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span>((line = bufferedQuto2.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">			System.out.println(line);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就是装饰器模式</p>
<p><strong>装饰器模式：</strong></p>
<p>   使用分层对象来动态透明的向单个对象中添加责任（功能）。</p>
<p>   装饰器指定包装在最初的对象周围的所有对象都具有相同的基本接口。</p>
<p>   某些对象是可装饰的，可以通过将其他类包装在这个可装饰对象的四周，来将功能分层。</p>
<p>   装饰器必须具有和他所装饰的对象相同的接口。</p>
<p><strong>JavaIO中的应用：</strong></p>
<p>   Java I/O类库需要多种不同的功能组合，所以使用了装饰器模式。</p>
<p>   FilterXxx类是JavaIO提供的装饰器基类，即我们要想实现一个新的装饰器，就要继承这些类。</p>
<p><strong>装饰器与继承：</strong></p>
<p>问题：</p>
<p>   修饰模式做的增强功能按照继承的特点也是可以实现的，为什么还要提出修饰设计模式呢？</p>
<p>继承实现的增强类和修饰模式实现的增强类有何区别？</p>
<p><strong>继承实现的增强类：</strong></p>
<p>​      优点：代码结构清晰，而且实现简单</p>
<p>​      缺点：对于每一个的需要增强的类都要创建具体的子类来帮助其增强，这样会导致继承体系过于庞大。</p>
<p><strong>修饰模式实现的增强类：</strong></p>
<p>​      优点：内部可以通过多态技术对多个需要增强的类进行增强</p>
<p>​      缺点：需要内部通过多态技术维护需要增强的类的实例。进而使得代码稍微复杂。</p>
<h1 id="其他流"><a href="#其他流" class="headerlink" title="其他流"></a>其他流</h1><h2 id="序列流-合并流"><a href="#序列流-合并流" class="headerlink" title="序列流(合并流)"></a>序列流(合并流)</h2><h3 id="SequenceInputStream"><a href="#SequenceInputStream" class="headerlink" title="SequenceInputStream"></a>SequenceInputStream</h3><p>序列流，对多个流进行合并。</p>
<p>SequenceInputStream表示其他输入流的逻辑串联。它从输入流的有序集合开始，并从第一个输入流开始读取，直到到达文件末尾，接着从第二个输入流读取，依次类推，直到到达包含的最后一个输入流的文件末尾为止。</p>
<p>注意:boxing_glove:</p>
<p>构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SequenceInputStream(InputStream s1,InputStream s2);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SequenceInputStream</span><span class="params">(Enumeration&lt;? extends InputStream&gt; e)</span></span></span><br></pre></td></tr></table></figure>

<p><strong>合并两个流：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> <span class="keyword">throws</span> IOException, FileNotFoundException </span>&#123;</span><br><span class="line">		File f1 = <span class="keyword">new</span> File(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>);</span><br><span class="line">		File f2 = <span class="keyword">new</span> File(<span class="string">"c:/users/ZhangXu/Desktop/tempa.txt"</span>);</span><br><span class="line">		File f3 = <span class="keyword">new</span> File(<span class="string">"c:/users/ZhangXu/Desktop/tempSequence.txt"</span>);</span><br><span class="line">		<span class="keyword">if</span>(!f3.exists())&#123;</span><br><span class="line">			f3.createNewFile();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 合并两个流</span></span><br><span class="line">		FileInputStream fis1 = <span class="keyword">new</span> FileInputStream(f1);</span><br><span class="line">		FileInputStream fis2 = <span class="keyword">new</span> FileInputStream(f2);</span><br><span class="line">		SequenceInputStream sis = <span class="keyword">new</span> SequenceInputStream(fis1, fis2);</span><br><span class="line">		BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(sis);</span><br><span class="line">		<span class="comment">// 输出</span></span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(f3);</span><br><span class="line">		<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>((len = bis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">			fos.write(len);</span><br><span class="line">		&#125;</span><br><span class="line">		fos.close();</span><br><span class="line">		bis.close();</span><br><span class="line">		fis1.close();</span><br><span class="line">		fis2.close();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>合并多个流：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writerMulti</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">		File f0 = <span class="keyword">new</span> File(<span class="string">"c:/users/ZhangXu/Desktop/tempbuffered.txt"</span>);</span><br><span class="line">		File f1 = <span class="keyword">new</span> File(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>);</span><br><span class="line">		File f2 = <span class="keyword">new</span> File(<span class="string">"c:/users/ZhangXu/Desktop/tempa.txt"</span>);</span><br><span class="line">		File f3 = <span class="keyword">new</span> File(<span class="string">"c:/users/ZhangXu/Desktop/tempSequence.txt"</span>);</span><br><span class="line">		FileInputStream fis0 = <span class="keyword">new</span> FileInputStream(f0);</span><br><span class="line">		FileInputStream fis1 = <span class="keyword">new</span> FileInputStream(f1);</span><br><span class="line">		FileInputStream fis2 = <span class="keyword">new</span> FileInputStream(f2);</span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(f3);</span><br><span class="line">		LinkedHashSet&lt;InputStream&gt; lhs = <span class="keyword">new</span> LinkedHashSet&lt;InputStream&gt;();</span><br><span class="line">		lhs.add(fis0);</span><br><span class="line">		lhs.add(fis1);</span><br><span class="line">		lhs.add(fis2);</span><br><span class="line">		<span class="comment">// 创建序列流对象</span></span><br><span class="line">		Iterator&lt;InputStream&gt; it = lhs.iterator();</span><br><span class="line">		SequenceInputStream sis = <span class="keyword">new</span> SequenceInputStream(<span class="keyword">new</span> Enumeration&lt;InputStream&gt;() &#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> it.hasNext();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> InputStream <span class="title">nextElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> it.next();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">0</span>;(len = sis.read()) != -<span class="number">1</span>;)&#123;</span><br><span class="line">			fos.write(len);</span><br><span class="line">		&#125;</span><br><span class="line">		fos.close();</span><br><span class="line">		sis.close();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>案例:将wmv视频文件进行切割拷贝,并合并.</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">splitWMV</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 将视频拆成三分</span></span><br><span class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"c:/users/ZhangXu/Desktop/test.wmv"</span>);</span><br><span class="line">		<span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>]; <span class="comment">// 5Mb</span></span><br><span class="line">		<span class="keyword">int</span> len;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (len = fis.read(buf)) != -<span class="number">1</span>; i++) &#123;</span><br><span class="line">			FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"c:/users/ZhangXu/Desktop/temp_part"</span> + i + <span class="string">".wmv"</span>);</span><br><span class="line">			fos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">			fos.close();</span><br><span class="line">		&#125;</span><br><span class="line">		fis.close();</span><br><span class="line">	&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeWMV</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 合并成完整视频</span></span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"c:/users/ZhangXu/Desktop/tempMerge.wmv"</span>);</span><br><span class="line">		LinkedHashSet&lt;InputStream&gt; lhs = <span class="keyword">new</span> LinkedHashSet&lt;InputStream&gt;();</span><br><span class="line">		lhs.add(<span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\ZhangXu\\Desktop\\temp_part1.wmv"</span>));</span><br><span class="line">		lhs.add(<span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\ZhangXu\\Desktop\\temp_part2.wmv"</span>));</span><br><span class="line">		lhs.add(<span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\ZhangXu\\Desktop\\temp_part3.wmv"</span>));</span><br><span class="line">		lhs.add(<span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\ZhangXu\\Desktop\\temp_part4.wmv"</span>));</span><br><span class="line">		lhs.add(<span class="keyword">new</span> FileInputStream(<span class="string">"C:\\Users\\ZhangXu\\Desktop\\temp_part5.wmv"</span>));</span><br><span class="line">		Iterator&lt;InputStream&gt; it = lhs.iterator();</span><br><span class="line">		SequenceInputStream sis = <span class="keyword">new</span> SequenceInputStream(<span class="keyword">new</span> Enumeration&lt;InputStream&gt;()&#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> it.hasNext();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> InputStream <span class="title">nextElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">return</span> it.next();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;);		</span><br><span class="line">		BufferedInputStream bs = <span class="keyword">new</span> BufferedInputStream(sis);</span><br><span class="line">		<span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>];</span><br><span class="line">		<span class="keyword">int</span> len;</span><br><span class="line">		<span class="keyword">while</span>((len = bs.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">			fos.write(buf,<span class="number">0</span>,len);</span><br><span class="line">		&#125;</span><br><span class="line">		bs.close();</span><br><span class="line">		sis.close();</span><br><span class="line">		fos.close();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对象的序列化"><a href="#对象的序列化" class="headerlink" title="对象的序列化"></a>对象的序列化</h2><p>当创建对象时,程序运行时它就会存在,但是程序停止时,对象也就消失了.但是如果希望对象在程序不运行的情况下仍能存在并保存其信息，将会非常有用，对象将被重建并且拥有与程序上次运行时拥有的信息相同。可以使用对象的序列化。</p>
<p> 对象的序列化：  将内存中的对象直接写入到文件设备中</p>
<p> 对象的反序列化： 将文件设备中持久化的数据转换为内存对象</p>
<p>基本的序列化由两个方法产生：一个方法用于序列化对象并将它们写入一个流，另一个方法用于读取流并反序列化对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">对象的输入输出流 : 对象的输入输出流 主要的作用是用于写对象的信息与读取对象的信息。 对象信息一旦写到文件上那么对象的信息就可以做到持久化了</span><br><span class="line"> </span><br><span class="line">对象的输出流： ObjectOutputStream </span><br><span class="line"> </span><br><span class="line">对象的输入流: ObjectInputStream </span><br><span class="line"> </span><br><span class="line"> 对象输入输出流要注意的细节：</span><br><span class="line"> 	<span class="number">1</span>. 如果对象需要被写出到文件上，那么对象所属的类必须要实现Serializable接口。 Serializable接口没有任何的方法，是一个标识接口而已。</span><br><span class="line"> 	<span class="number">2</span>. 对象的反序列化创建对象的时候并不会调用到构造方法的、</span><br><span class="line"> 	<span class="number">3</span>. serialVersionUID 是用于记录<span class="class"><span class="keyword">class</span>文件的版本信息的，<span class="title">serialVersionUID</span>这个数字是通过一个类的类名、成员、包名、工程名算出的一个数字。</span></span><br><span class="line"><span class="class"> 	4. 使用<span class="title">ObjectInputStream</span>反序列化的时候，<span class="title">ObjectInputStream</span>会先读取文件中的<span class="title">serialVersionUID</span>，然后与本地的<span class="title">class</span>文件的<span class="title">serialVersionUID</span></span></span><br><span class="line"><span class="class"> 	进行对比，如果这两个<span class="title">id</span>不一致，那么反序列化就失败了。</span></span><br><span class="line"><span class="class"> 	5. 如果序列化与反序列化的时候可能会修改类的成员，那么最好一开始就给这个类指定一个<span class="title">serialVersionUID</span>，如果一类已经指定的<span class="title">serialVersionUID</span>，然后</span></span><br><span class="line"><span class="class"> 	在序列化与反序列化的时候，<span class="title">jvm</span>都不会再自己算这个 <span class="title">class</span>的<span class="title">serialVersionUID</span>了。</span></span><br><span class="line"><span class="class"> 	6. 如果一个对象某个数据不想被序列化到硬盘上，可以使用关键字<span class="title">transient</span>修饰。</span></span><br><span class="line"><span class="class"> 	7. 如果一个类维护了另外一个类的引用，那么另外一个类也需要实现<span class="title">Serializable</span>接口。</span></span><br><span class="line"><span class="class"><span class="title">serialVersionUID</span> 	</span></span><br><span class="line"><span class="class">用于给类指定一个<span class="title">UID</span>。该<span class="title">UID</span>是通过类中的可序列化成员的数字签名运算出来的一个<span class="title">long</span>型的值。</span></span><br><span class="line"><span class="class">只要是这些成员没有变化，那么该值每次运算都一样。</span></span><br><span class="line"><span class="class">该值用于判断被序列化的对象和类文件是否兼容。</span></span><br><span class="line"><span class="class">如果被序列化的对象需要被不同的类版本所兼容。可以在类中自定义<span class="title">UID</span>。</span></span><br><span class="line"><span class="class">定义方式：<span class="title">static</span> <span class="title">final</span> <span class="title">long</span> <span class="title">serialVersionUID</span> </span>= <span class="number">42L</span>;</span><br></pre></td></tr></table></figure>

<p><strong>实例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String pwd;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String pwd)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> pwd;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", pwd="</span> + pwd + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectIn_OutputStreamDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 将对象写入硬盘,序列化</span></span><br><span class="line">		ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"Person.msg"</span>));</span><br><span class="line">		oos.writeObject(<span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>, <span class="string">"456789"</span>));</span><br><span class="line">		oos.writeObject(<span class="keyword">new</span> Person(<span class="string">"lisi"</span>, <span class="string">"lisislis"</span>));</span><br><span class="line">		oos.close();</span><br><span class="line">		<span class="comment">// 读数据，反序列化</span></span><br><span class="line">		ObjectInputStream iis = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"Person.msg"</span>));</span><br><span class="line">		Object obj = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//		obj = iis.readObject();</span></span><br><span class="line">		<span class="keyword">while</span>((obj = iis.readObject()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">			System.out.println((Person)obj);</span><br><span class="line">		&#125;<span class="comment">// 文件结束的时候报错，可以catch捕获EOFException,break就行了。</span></span><br><span class="line">		iis.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">Person [name=zhangsan, pwd=<span class="number">456789</span>]</span><br><span class="line">Person [name=lisi, pwd=lisislis]</span><br><span class="line"><span class="comment">// 当给密码属性加上transient修饰时</span></span><br><span class="line">Person [name=zhangsan, pwd=<span class="keyword">null</span>]</span><br><span class="line">Person [name=lisi, pwd=<span class="keyword">null</span>]</span><br></pre></td></tr></table></figure>

<h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p><strong>可以和流相关联的集合对象Properties</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Map</span><br><span class="line">|--Hashtable</span><br><span class="line">|--Properties</span><br><span class="line">Properties:该集合不需要泛型，因为该集合中的键值对都是String类型。</span><br><span class="line"><span class="number">1</span>，存入键值对：setProperty(key,value);</span><br><span class="line"><span class="number">2</span>，获取指定键对应的值：<span class="function">value <span class="title">getProperty</span><span class="params">(key)</span></span>;</span><br><span class="line"><span class="number">3</span>，获取集合中所有键元素：</span><br><span class="line">	<span class="function">Enumeration  <span class="title">propertyNames</span><span class="params">()</span></span>;</span><br><span class="line">	在jdk1<span class="number">.6</span>版本给该类提供一个新的方法。</span><br><span class="line">	<span class="function">Set&lt;String&gt; <span class="title">stringPropertyNames</span><span class="params">()</span></span>;</span><br><span class="line"><span class="number">4</span>，列出该集合中的所有键值对，可以通过参数打印流指定列出到的目的地。</span><br><span class="line">	list(PrintStream);</span><br><span class="line">	list(PrintWriter);</span><br><span class="line">	例：list(System.out):将集合中的键值对打印到控制台。</span><br><span class="line">	list(<span class="keyword">new</span> PrintStream(<span class="string">"prop.txt"</span>)):将集合中的键值对存储到prop.txt文件中。</span><br><span class="line"><span class="number">5</span>，可以将流中的规则数据加载进行集合，并称为键值对。</span><br><span class="line">	load(InputStream):</span><br><span class="line">	jdk1<span class="number">.6</span>版本。提供了新的方法。</span><br><span class="line">	load(Reader):</span><br><span class="line">	注意：流中的数据要是<span class="string">"键=值"</span> 的规则数据。</span><br><span class="line"><span class="number">6</span>，可以将集合中的数据进行指定目的地存储。</span><br><span class="line">	store(OutputStram,String comment)方法。</span><br><span class="line">    jdk1<span class="number">.6</span>版本。提供了新的方法。</span><br><span class="line">    store(Writer ,String comment):</span><br><span class="line">    使用该方法存储时，会带着当时存储的时间。</span><br><span class="line">注意：</span><br><span class="line">Properties只加载key=value这样的键值对，与文件名无关，注释使用#</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sysPropList</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		Properties prop = System.getProperties();  <span class="comment">// 获取jvm的配置属性信息</span></span><br><span class="line"></span><br><span class="line">		prop.list(System.out);<span class="comment">// 目的是控制台。</span></span><br><span class="line">		<span class="comment">// 需求是：将jvm的属性信息存储到一个文件中。</span></span><br><span class="line">		<span class="comment">// prop.list(new PrintStream("java.txt"));</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sysProp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Properties prop = System.getProperties();</span><br><span class="line"></span><br><span class="line">		Set&lt;String&gt; keys = prop.stringPropertyNames();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">			System.out.println(key + <span class="string">":"</span> + prop.getProperty(key));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Properties类与配置文件</strong></p>
<p>注意：是一个Map集合，该集合中的键值对都是字符串。该集合通常用于对键值对形式的配置文件进行操作.</p>
<p>配置文件：将软件中可变的部分数据可以定义到一个文件中，方便以后更改，该文件称之为配置文件。</p>
<p>优势: 提高代码的维护性。</p>
<p>Properties:  该类是一个Map的子类，提供了可以快速操作配置文件的方法</p>
<p>load()  :    将文件设备数据装载为Map集合数据</p>
<p>get(key):    获取Map中的数据</p>
<p>getProperty()获取Map中的数据特有方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">		p.load(<span class="keyword">new</span> FileInputStream(<span class="string">"./src/文件操作/properties.txt"</span>));</span><br><span class="line">		p.setProperty(<span class="string">"age"</span>, <span class="string">"22"</span>); <span class="comment">//文件中没有,需要保存的话，store方法</span></span><br><span class="line">		<span class="comment">// 遍历文件</span></span><br><span class="line">		Set&lt;Map.Entry&lt;Object,Object&gt;&gt; entrySet = p.entrySet();</span><br><span class="line">		Iterator&lt;Entry&lt;Object, Object&gt;&gt; it = entrySet.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			Entry&lt;Object, Object&gt; entry = it.next();</span><br><span class="line">			System.out.println(entry.getKey()+<span class="string">" "</span>+entry.getValue());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 将集合中的数据写入配置文件中，并附加注释内容</span></span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"./src/文件操作/properties.txt"</span>);</span><br><span class="line">		p.store(fos, <span class="string">"附加信息"</span>);</span><br></pre></td></tr></table></figure>

<p><strong>获取记录程序运行次数：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">		File file = <span class="keyword">new</span> File(<span class="string">"c:\\count.ini"</span>);</span><br><span class="line">		FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">			file.createNewFile();</span><br><span class="line">		&#125;</span><br><span class="line">		fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">		pro.load(fis);</span><br><span class="line">		String str = pro.getProperty(<span class="string">"count"</span>);</span><br><span class="line">		<span class="keyword">if</span> (str != <span class="keyword">null</span>) &#123;</span><br><span class="line">			count = Integer.parseInt(str);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (count == <span class="number">3</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"使用次数已到，请付费"</span>);</span><br><span class="line">			System.exit(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		count++;</span><br><span class="line">		System.out.println(<span class="string">"欢迎使用本软件"</span> + <span class="string">"你已经使用了："</span> + count + <span class="string">" 次"</span>);</span><br><span class="line"></span><br><span class="line">		pro.setProperty(<span class="string">"count"</span>, count + <span class="string">""</span>);</span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"c:\\count.ini"</span>));</span><br><span class="line">		pro.store(fos, <span class="string">"请保护知识产权"</span>);</span><br><span class="line">		fis.close();</span><br><span class="line">		fos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p>PrintStream可以接受文件和其他字节输出流，所以打印流是对普通字节输出流的增强，其中定义了很多的重载的print()和println()，方便输出各种类型的数据。</p>
<p><strong><code>PrintStream</code> 打印的所有字符都使用平台的默认字符编码转换为字节。在需要写入字符而不是写入字节的情况下，应该使用 <code>PrintWriter</code> 类。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//		PrintStream ps = new PrintStream("c:/users/ZhangXu/Desktop/temp.txt","gbk");// 可以</span></span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>,<span class="string">"utf-8"</span>);<span class="comment">//乱码，写入的时候编码是系统默认编码，文件保存是按utf-8解码的。</span></span><br><span class="line">		ps.println(<span class="string">"hello你好"</span>);</span><br><span class="line">		ps.close();</span><br></pre></td></tr></table></figure>

<h3 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h3><p>打印流：PrintStream：是一个字节打印流，System.out对应的类型就是PrintStream。它的构造函数可以接收三种数据类型的值。</p>
<p>1，字符串路径。2，File对象。3，OutputStream。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">		PrintStream p = System.out;</span><br><span class="line">		p.println(<span class="string">"hello"</span>);</span><br><span class="line">		p.printf(<span class="string">"%d %s\n"</span>,<span class="number">2</span>,<span class="string">"hello"</span>);</span><br><span class="line">		PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>);</span><br><span class="line">	System.setOut(ps); <span class="comment">// 重新分配标准输出流，不打印在控制台上，以后的printStream都打印在此文件中。</span></span><br><span class="line">		ps.append(<span class="string">"ccc"</span>);</span><br><span class="line">		System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="comment">// write(不可以是字符串)</span></span><br></pre></td></tr></table></figure>

<h3 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">是一个字符打印流。构造函数可以接收四种类型的值。</span><br><span class="line"><span class="number">1</span>，字符串路径。</span><br><span class="line"><span class="number">2</span>，File对象。</span><br><span class="line">对于<span class="number">1</span>，<span class="number">2</span>类型的数据，还可以指定编码表。也就是字符集。</span><br><span class="line"><span class="number">3</span>，OutputStream</span><br><span class="line"><span class="number">4</span>，Writer</span><br><span class="line">    对于<span class="number">3</span>，<span class="number">4</span>类型的数据，可以指定自动刷新。</span><br><span class="line">    注意：该自动刷新值为<span class="keyword">true</span>时，只有三个方法可以用：println,printf,format.</span><br><span class="line">    如果想要既有自动刷新，又可执行编码。如何完成流对象的包装？</span><br><span class="line">PrintWrter pw = </span><br><span class="line"><span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> OutputSteamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"a.txt"</span>),<span class="string">"utf-8"</span>),<span class="keyword">true</span>);</span><br><span class="line">如果想要提高效率。还要使用打印方法。</span><br><span class="line">PrintWrter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span>  BufferdWriter(<span class="keyword">new</span> OutputSteamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"a.txt"</span>),<span class="string">"utf-8"</span>)),<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>,<span class="string">"gbk"</span>);</span><br><span class="line">pw.println(<span class="string">"hfhaks"</span>);</span><br><span class="line">pw.append(<span class="string">"hfa"</span>);</span><br><span class="line">pw.println();</span><br><span class="line">pw.println(<span class="string">'c'</span>);</span><br><span class="line">pw.flush();</span><br><span class="line">pw.close();</span><br></pre></td></tr></table></figure>

<h2 id="操作数组的流对象"><a href="#操作数组的流对象" class="headerlink" title="操作数组的流对象"></a>操作数组的流对象</h2><h3 id="操作字节数组"><a href="#操作字节数组" class="headerlink" title="操作字节数组"></a>操作字节数组</h3><p>ByteArrayInputStream、ByteArrayOutputStream</p>
<p>Arrays.toByteArray();</p>
<p>Arrays.toString();</p>
<p>writeTo(OutputStream);将此 byte 数组输出流的全部内容写入到指定的输出流参数中，这与使用 out.write(buf, 0, count) </p>
<p>调用该输出流的 write 方法效果一样。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testByteArrayInputStream</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		InputStream in = <span class="keyword">new</span> ByteArrayInputStream(<span class="keyword">new</span> <span class="keyword">byte</span>[] &#123; <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span> &#125;);</span><br><span class="line">		ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> b = -<span class="number">1</span>; (b = in.read()) != -<span class="number">1</span>;) &#123;</span><br><span class="line">			out.write(b);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		in.close();</span><br><span class="line">		out.close();</span><br><span class="line"></span><br><span class="line">		System.out.println(Arrays.toString(out.toByteArray()));</span><br><span class="line">		System.out.println(out);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="操作字符数组"><a href="#操作字符数组" class="headerlink" title="操作字符数组"></a>操作字符数组</h3><p>CharArrayReader</p>
<p>CharArrayWriter</p>
<p>对于这些流，源是内存。目的也是内存。</p>
<p>而且这些流并未调用系统资源。使用的就是内存中的数组。</p>
<p>所以这些在使用的时候不需要close。</p>
<p>操作数组的读取流在构造时，必须要明确一个数据源。所以要传入相对应的数组。</p>
<p>对于操作数组的写入流，在构造函数可以使用空参数。因为它内置了一个可变长度数组作为缓冲区。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testCharArrayReader</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		CharArrayReader reader = <span class="keyword">new</span> CharArrayReader(<span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">'A'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> &#125;);</span><br><span class="line">		CharArrayWriter writer = <span class="keyword">new</span> CharArrayWriter();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> b = -<span class="number">1</span>; (b = reader.read()) != -<span class="number">1</span>;) &#123;</span><br><span class="line">			writer.write(b);</span><br><span class="line">		&#125;</span><br><span class="line">		reader.close();</span><br><span class="line">		writer.close();</span><br><span class="line"></span><br><span class="line">		System.out.println(writer.toCharArray());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>类似原理的还有StringReader、StringWriter.</p>
<h2 id="操作基本数据类型的流对象"><a href="#操作基本数据类型的流对象" class="headerlink" title="操作基本数据类型的流对象"></a>操作基本数据类型的流对象</h2><p>DataInputStream、DataOutputStream,DataInputStream类继承FilterInputStream类，并实现了DataInput接口。DataOutputStream类继承FilterOutputStream 并实现了DataOutput 接口。</p>
<p>从底层输入流中读取基本 Java 数据类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataInputStream</span><br><span class="line">操作基本数据类型的方法：</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">readInt</span><span class="params">()</span>:一次读取四个字节，并将其转成<span class="keyword">int</span>值。</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">readBoolean</span><span class="params">()</span>:一次读取一个字节。</span></span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="title">readShort</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">readLong</span><span class="params">()</span></span>;</span><br><span class="line">剩下的数据类型一样。</span><br><span class="line"><span class="function">String <span class="title">readUTF</span><span class="params">()</span>:按照utf-8修改版读取字符。注意，它只能读<span class="title">writeUTF</span><span class="params">()</span>写入的字符数据。</span></span><br><span class="line"><span class="function">DataOutputStream</span></span><br><span class="line"><span class="function"><span class="title">DataOutputStream</span><span class="params">(OutputStream)</span>:</span></span><br><span class="line"><span class="function">操作基本数据类型的方法:</span></span><br><span class="line"><span class="function"><span class="title">writeInt</span><span class="params">(<span class="keyword">int</span>)</span>：一次写入四个字节。</span></span><br><span class="line"><span class="function">注意和<span class="title">write</span><span class="params">(<span class="keyword">int</span>)</span>不同。<span class="title">write</span><span class="params">(<span class="keyword">int</span>)</span>只将该整数的最低一个8位写入。剩余三个8位丢弃。</span></span><br><span class="line"><span class="function"><span class="title">writeBoolean</span><span class="params">(<span class="keyword">boolean</span>)</span></span>;</span><br><span class="line">writeShort(<span class="keyword">short</span>);</span><br><span class="line">writeLong(<span class="keyword">long</span>);</span><br><span class="line">剩下是数据类型也也一样。</span><br><span class="line">writeUTF(String):按照utf-<span class="number">8</span>修改版将字符数据进行存储。只能通过readUTF读取。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDataInputStream</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		DataOutputStream out = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(</span><br><span class="line">				<span class="string">"c:/a.txt"</span>));</span><br><span class="line"></span><br><span class="line">		out.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">		out.writeByte(<span class="number">15</span>); <span class="comment">// 0x05 1 个字节</span></span><br><span class="line">		out.writeBytes(<span class="string">"abc"</span>); <span class="comment">// 0x 0041 2个字节</span></span><br><span class="line">		out.writeChar(<span class="string">'X'</span>); <span class="comment">// ??</span></span><br><span class="line">		out.writeChars(<span class="string">"xyz"</span>);</span><br><span class="line">		out.writeLong(<span class="number">111</span>);</span><br><span class="line">		out.writeUTF(<span class="string">"中国"</span>);</span><br><span class="line"></span><br><span class="line">		out.close();</span><br><span class="line"></span><br><span class="line">		DataInputStream in = <span class="keyword">new</span> DataInputStream(</span><br><span class="line">				<span class="keyword">new</span> FileInputStream(<span class="string">"c:/a.txt"</span>));</span><br><span class="line">		System.out.println(in.readBoolean());</span><br><span class="line">		System.out.println(in.readByte());</span><br><span class="line">		</span><br><span class="line">		System.out.println(in.readByte());</span><br><span class="line">		System.out.println(in.readByte());</span><br><span class="line">		System.out.println(in.readByte());</span><br><span class="line">		</span><br><span class="line">		System.out.println(in.readChar());</span><br><span class="line">		</span><br><span class="line">		System.out.println(in.readChar());</span><br><span class="line">		System.out.println(in.readChar());</span><br><span class="line">		System.out.println(in.readChar());</span><br><span class="line">		</span><br><span class="line">		System.out.println(in.readLong());</span><br><span class="line">		</span><br><span class="line">		System.out.println(in.readUTF());</span><br><span class="line">		in.close();</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//true 15 97 98 99 X x y z 111 中国</span></span><br></pre></td></tr></table></figure>

<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">什么是编码？</span><br><span class="line">	计算机中存储的都是二进制，但是要显示的时候，就是我们看到的却可以有中国 ，a  <span class="number">1</span> 等字符</span><br><span class="line">计算机中是没有存储字符的，但是我们却看到了。计算机在存储这些信息的时候，根据一个有规则的编号，当用户输入a 有a对映的编号，就将这个编号存进计算机中这就是编码。</span><br><span class="line"></span><br><span class="line">计算机只能识别二进制数据。</span><br><span class="line">为了方便应用计算机，让它可以识别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表，这就是编码表。</span><br><span class="line">例如：汉字 中  </span><br><span class="line">有一种编码：</span><br><span class="line">中字在utf <span class="number">8</span>中对映的编码</span><br><span class="line">utf-<span class="number">8</span>  --&gt;<span class="number">100</span>  </span><br><span class="line">在gbk中呢？有可能就不是<span class="number">100</span>了</span><br><span class="line">gbk    --&gt;  <span class="number">150</span></span><br><span class="line">很显然同一个信息在不同的编码中对映的数字也不同，</span><br><span class="line">不同的国家和地区使用的码表是不同的，</span><br><span class="line">gbk 是中国大陆</span><br><span class="line">bjg5 是台湾同胞中的繁体字。所以如果给big5一个简体字是不认识的。</span><br><span class="line">还有ASCII 美国标准信息交换码</span><br></pre></td></tr></table></figure>

<h2 id="码表"><a href="#码表" class="headerlink" title="码表"></a>码表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">常见的码表如下：</span><br><span class="line">ASCII：		美国标准信息交换码。用一个字节的<span class="number">7</span>位可以表示。</span><br><span class="line">ISO8859-<span class="number">1</span>：	拉丁码表。欧洲码表，用一个字节的<span class="number">8</span>位表示。又称Latin-<span class="number">1</span>(拉丁编码)或“西欧语言”。ASCII码是包含的仅仅是英文字母，并且没有完全占满<span class="number">256</span>个编码位置，所以它以ASCII为基础，在空置的<span class="number">0xA0</span>-<span class="number">0xFF</span>的范围内，加入<span class="number">192</span>个字母及符号，</span><br><span class="line">藉以供使用变音符号的拉丁字母语言使用。从而支持德文，法文等。因而它依然是一个单字节编码，只是比ASCII更全面。</span><br><span class="line">GB2312：	中国的中文编码表。</span><br><span class="line">GBK：		中国的中文编码表升级，融合了更多的中文文字符号。</span><br><span class="line">Unicode：  国际标准码，融合了多种文字。所有文字都用两个字节来表示，Java语言使用的就是unicode。</span><br><span class="line">UTF-<span class="number">8</span>：		最多用三个字节来表示一个字符。</span><br><span class="line">（我们以后接触最多的是iso8859-<span class="number">1</span>、gbk、utf-<span class="number">8</span>）</span><br><span class="line">	</span><br><span class="line">查看上述码表后，很显然中文的‘中’在iso8859-<span class="number">1</span>中是没有对映的编码的。或者一个字符在<span class="number">2</span>中码表中对应的编码不同，例如有一些字在不同的编码中是有交集的，例如bjg5 和gbk 中的汉字简体和繁体可能是一样的，就是有交集，但是在各自码表中的数字不一样。</span><br><span class="line">例如 </span><br><span class="line">使用gbk 将中文保存在计算机中，</span><br><span class="line">	中  国</span><br><span class="line">对映  <span class="number">100</span>  <span class="number">200</span>   如果使用big5 打开</span><br><span class="line">可能   ？  ...   </span><br><span class="line">不同的编码对映的是不一样的。</span><br><span class="line">很显然，我们使用什么样的编码写数据，就需要使用什么样的编码来对数据。</span><br><span class="line">ISO8859-<span class="number">1</span>：一个字节</span><br><span class="line">GBK： 两个字节包含了英文字符和扩展的中文 	ISO8859-<span class="number">1</span>+中文字符</span><br><span class="line">UTF-<span class="number">8</span> 万国码，推行的。是<span class="number">1</span>~<span class="number">3</span>个字节不等长。英文存的是<span class="number">1</span>个字节，中文存的是<span class="number">3</span>个字节，是为了节省空间。</span><br></pre></td></tr></table></figure>

<h2 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">编码：</span><br><span class="line">字符串---》字节数组</span><br><span class="line">String类的getBytes() 方法进行编码，将字符串，转为对映的二进制，并且这个方法可以指定编码表。如果没有指定码表，该方法会使用操作系统默认码表。</span><br><span class="line">注意：中国大陆的Windows系统上默认的编码一般为GBK。在Java程序中可以使用System.getProperty(<span class="string">"file.encoding"</span>)方式得到当前的默认编码。</span><br><span class="line"></span><br><span class="line">字节数组---》字符串</span><br><span class="line">String类的构造函数完成。</span><br><span class="line">String(<span class="keyword">byte</span>[] bytes)  使用系统默认码表</span><br><span class="line">String(<span class="keyword">byte</span>[],charset)指定码表</span><br><span class="line">注意：我们使用什么字符集（码表）进行编码，就应该使用什么字符集进行解码，否则很有可能出现乱码（兼容字符集不会）。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"中"</span>;</span><br><span class="line"><span class="comment">// 编码操作</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = str.getBytes();</span><br><span class="line"><span class="keyword">byte</span>[] bytes2 = str.getBytes(<span class="string">"gbk"</span>);<span class="comment">// d6d0</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes3 = str.getBytes(<span class="string">"utf-8"</span>);<span class="comment">// e4b8ad</span></span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(bytes)); <span class="comment">// [-42, -48]</span></span><br><span class="line">System.out.println(Arrays.toString(bytes2));<span class="comment">// [-42, -48]</span></span><br><span class="line">System.out.println(Arrays.toString(bytes3));<span class="comment">// [-28, -72, -83]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码操作</span></span><br><span class="line"><span class="comment">// 编码gbk,解码utf-8乱码。</span></span><br><span class="line">String str2 = <span class="keyword">new</span> String(bytes2, <span class="string">"utf-8"</span>);</span><br><span class="line">System.out.println(str2);  <span class="comment">//??</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码utf-8 解码gbk，乱码</span></span><br><span class="line">str2 = <span class="keyword">new</span> String(bytes3, <span class="string">"gbk"</span>);</span><br><span class="line">System.out.println(str2); <span class="comment">// 涓?</span></span><br><span class="line"><span class="comment">// gbk兼容gb2312所以，没有问题。</span></span><br><span class="line">str = <span class="keyword">new</span> String(<span class="string">"中国"</span>.getBytes(<span class="string">"gb2312"</span>), <span class="string">"gbk"</span>);</span><br><span class="line">System.out.println(str); <span class="comment">// 中国</span></span><br></pre></td></tr></table></figure>

<h2 id="字节流读取中文"><a href="#字节流读取中文" class="headerlink" title="字节流读取中文"></a>字节流读取中文</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"c:/a.txt"</span>);</span><br><span class="line"><span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(buf,<span class="number">0</span>,len,<span class="string">"gbk"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字节流写入中文"><a href="#字节流写入中文" class="headerlink" title="字节流写入中文"></a>字节流写入中文</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		String path = <span class="string">"c:\\test.txt"</span>;</span><br><span class="line">		writeFileByOutputStream(path, <span class="string">"世界你好"</span>);</span><br><span class="line">		readFileByInputStream(path);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeFileByOutputStream</span><span class="params">(String path, String content)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(path);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 把字符串进行编码操作</span></span><br><span class="line">		<span class="keyword">byte</span>[] bytes = content.getBytes(<span class="string">"utf-8"</span>);</span><br><span class="line">		<span class="comment">// 内容通过字节流写入到文件中。</span></span><br><span class="line">		fos.write(bytes);</span><br><span class="line">		fos.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFileByInputStream</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">		<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="comment">// 二进制解码，使用系统默认编码</span></span><br><span class="line">			System.out.println(<span class="keyword">new</span> String(buffer, <span class="number">0</span>, len,<span class="string">"utf-8"</span>));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在明白了字节流也可以正确的处理中文字符之后，就应该明白字符流其实就是字节流在加上系统默认的码表。自动进行了编码和解码的操作。底层还是使用字节流读取文件。通过转换流的学习就可以明白这些道理。</p>
<h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><h3 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h3><p>查看API文档，发现是字节流通向字符流的桥梁。查看构造，可以传递字节流，可以指定编码，该流可以实现什么功能？很显然可以包装我们的字节流，自动的完成节流编码和解码的工作。该流是一个Reader的子类，是字符流的体系。所以将转换流称之为字节流和字符流之间的桥梁。</p>
<p>输入字节流的转换流：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStreamReader	是字节流通向字符流的桥</span><br></pre></td></tr></table></figure>
<p>输出字节流的转换流：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutputStreamWriter   可以把输出字节流转换成输出字符流 。</span><br></pre></td></tr></table></figure>
<p>转换流的作用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 如果目前所获取到的是一个字节流需要转换字符流使用，这时候就可以使用转换流。  字节流----&gt; 字符流</span><br><span class="line">  	<span class="number">2</span>. 使用转换流可以指定编码表进行读写文件。</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读  字节流向字符 InputStreamReader</span></span><br><span class="line">	File file = <span class="keyword">new</span> File(<span class="string">"c:/users/ZhangXu/Desktop/temp.txt"</span>);</span><br><span class="line">	File file2 = <span class="keyword">new</span> File(<span class="string">"c:/users/ZhangXu/Desktop/t.txt"</span>);</span><br><span class="line">	</span><br><span class="line">	InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file), <span class="string">"utf-8"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	<span class="keyword">while</span>((len = isr.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">		System.out.println(buf);</span><br><span class="line">	&#125;</span><br><span class="line">	isr.close();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 写 字符流向字节 OutputStreamWriter	</span></span><br><span class="line">	<span class="keyword">char</span>[] charArray = <span class="string">"北京欢迎你"</span>.toCharArray();</span><br><span class="line">	OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(file2), <span class="string">"utf-8"</span>);</span><br><span class="line">	osw.write(charArray);</span><br><span class="line">	osw.close();</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">操作文件的字符流对象是转换流的子类。</span><br><span class="line">Reader</span><br><span class="line">|--InputStreamReader</span><br><span class="line">|--FileReader</span><br><span class="line">Writer </span><br><span class="line">|--OutputStreamWriter</span><br><span class="line">|--FileWriter</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">在使用FileReader操作文本数据时，该对象使用的是默认的编码表。</span><br><span class="line">如果要使用指定编码表时，必须使用转换流。</span><br><span class="line"></span><br><span class="line">如果系统默认编码是GBK的：</span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"a.txt"</span>);<span class="comment">//操作a.txt的中的数据使用的本系统默认的GBK。</span></span><br><span class="line">操作a.txt中的数据使用的也是本系统默认的GBK。</span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>));</span><br><span class="line">这两句的代码的意义相同。</span><br><span class="line">但是,如果a.txt中的文件中的字符数据是通过utf-<span class="number">8</span>的形式编码。使用FileReader就无能为力，那么在读取时，就必须指定编码表。那么转换流必须使用。</span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"a.txt"</span>),<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础知识-集合</title>
    <url>/2017/12/02/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/5-Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86_%E9%9B%86%E5%90%88_%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="什么是集合？"><a href="#什么是集合？" class="headerlink" title="什么是集合？"></a>什么是集合？</h2><p>集合是储存对象的容器，面向对象对事物的体现就是对象，所以为了方便对多个对象的操作，存储对象是常用的一种方式。</p>
<p>集合的出现就是为了持有对象。集合中可以存储任意类型的对象, 而且长度可变。在程序中有可能无法预先知道需要多少个对象, 那么用数组来装对象的话, 长度不好定义, 而集合解决了这样的问题。</p>
<a id="more"></a>

<h2 id="集合和数组的区别？"><a href="#集合和数组的区别？" class="headerlink" title="集合和数组的区别？"></a>集合和数组的区别？</h2><ol>
<li>数组和集合类都是容器</li>
<li>数组长度是固定的，集合长度是可变的。数组中可以存储基本数据类型，集合只能存储对象数组中存储数据类型是单一的，集合中可以存储任意类型的对象。</li>
</ol>
<p>集合类的特点：</p>
<p>​    用于存储对象，长度是可变的，可以存储不同类型的对象。</p>
<h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><p><img src="/images/collections.png" alt="collectios"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">---|Collection: 单列集合</span><br><span class="line">			---|List: 有存储顺序, 可重复</span><br><span class="line">				---|ArrayList:	数组实现, 查找快, 增删慢</span><br><span class="line">					     由于是数组实现, 在增和删的时候会牵扯到数组增容, 以及拷贝元素. 所以慢。数组是可以直接按索引查找, 所以查找时较快</span><br><span class="line"></span><br><span class="line">				---|LinkedList:	链表实现, 增删快, 查找慢</span><br><span class="line">						由于链表实现, 增加时只要让前一个元素记住自己就可以, 删除时让前一个元素记住后一个元素, 后一个元素记住前一个元素. 这样的增删效率较高但查询时需要一个一个的遍历, 所以效率较低</span><br><span class="line">						</span><br><span class="line">				---|Vector:	和ArrayList原理相同, 但线程安全, 效率略低</span><br><span class="line">					     和ArrayList实现方式相同, 但考虑了线程安全问题, 所以效率略低</span><br><span class="line">					     </span><br><span class="line">			---|Set: 无存储顺序, 不可重复</span><br><span class="line">				---|HashSet</span><br><span class="line">				---|TreeSet</span><br><span class="line">				---|LinkedHashSet</span><br><span class="line">				</span><br><span class="line">---| Map: 键值对</span><br><span class="line">		---|HashMap</span><br><span class="line">		---|TreeMap</span><br><span class="line">		---|HashTable</span><br><span class="line">		---|LinkedHashMap</span><br></pre></td></tr></table></figure>

<p>为什么出现这么多集合容器，因为每一个容器对数据的存储方式不同，这种存储方式称之为数据结构（data structure）</p>
<p><strong>注意集合和数组中存放的都是对象的引用。</strong></p>
<table>
<thead>
<tr>
<th align="left">Collection</th>
<th align="left">我们需要保存若干个对象的时候使用集合。</th>
</tr>
</thead>
<tbody><tr>
<td align="left">List</td>
<td align="left">如果我们需要保留存储顺序, 并且保留重复元素, 使用List.  如果查询较多, 那么使用ArrayList  如果存取较多, 那么使用LinkedList  如果需要线程安全, 那么使用Vector</td>
</tr>
<tr>
<td align="left">Set</td>
<td align="left">如果我们不需要保留存储顺序, 并且需要去掉重复元素, 使用Set.  如果我们需要将元素排序, 那么使用TreeSet  如果我们不需要排序, 使用HashSet, HashSet比TreeSet效率高.  如果我们需要保留存储顺序, 又要过滤重复元素, 那么使用LinkedHashSet</td>
</tr>
</tbody></table>
<h1 id="集合类（Collection）"><a href="#集合类（Collection）" class="headerlink" title="集合类（Collection）"></a>集合类（Collection）</h1><p>Collection接口有两个子接口：</p>
<p>List(链表|线性表)</p>
<p>Set(集)</p>
<p>特点：</p>
<p>Collection中描述的是集合共有的功能(CRUD)</p>
<p>List可存放重复元素，元素存取是有序的</p>
<p>Set不可以存放重复元素，元素存取是无序的</p>
<h2 id="Collection的共性方法"><a href="#Collection的共性方法" class="headerlink" title="Collection的共性方法"></a>Collection的共性方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">增加：</span><br><span class="line">		<span class="number">1</span>：<span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">()</span>	将指定对象存储到容器中</span></span><br><span class="line"><span class="function">                      add 方法的参数类型是Object 便于接收任意对象</span></span><br><span class="line"><span class="function">		2：<span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">()</span> 将指定集合中的元素添加到调用该方法和集合中</span></span><br><span class="line"><span class="function">		<span class="comment">//c.addAll(c2); // 把c2的元素的添加到c集合中去。</span></span></span><br><span class="line"><span class="function">删除：</span></span><br><span class="line"><span class="function">		3：<span class="keyword">boolean</span> <span class="title">remove</span><span class="params">()</span> 将指定的对象从集合中删除</span></span><br><span class="line"><span class="function">		4：<span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">()</span> 将指定集合中的元素删除</span></span><br><span class="line"><span class="function">		                            </span></span><br><span class="line"><span class="function"><span class="comment">//c.removeAll(c2); //删除c集合中与c2的交集元素。</span></span></span><br><span class="line"><span class="function"><span class="comment">//c.retainAll(c2); //保留c集合与c2的交集元素，其他的元素一并删除。</span></span></span><br><span class="line"><span class="function">修改</span></span><br><span class="line"><span class="function">		5：<span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> 清空集合中的所有元素</span></span><br><span class="line"><span class="function">判断</span></span><br><span class="line"><span class="function">		6：<span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> 判断集合是否为空</span></span><br><span class="line"><span class="function">		7：<span class="keyword">boolean</span> <span class="title">contains</span><span class="params">()</span> 判断集合何中是否包含指定对象     </span></span><br><span class="line"><span class="function">		8：<span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">()</span> 判断集合中是否包含指定集合</span></span><br><span class="line"><span class="function">                            使用<span class="title">equals</span><span class="params">()</span>判断两个对象是否相等</span></span><br><span class="line"><span class="function">         例：</span></span><br><span class="line"><span class="function">    @Override</span></span><br><span class="line"><span class="function">	<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		Person p = (Person)obj;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.id == p.id ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//java规范： 一般重写equlas方法我们都会重写hashCode方法的。</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">获取:   <span class="number">9</span>：<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>    返回集合容器的大小</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">转成数组10： <span class="title">toArray</span><span class="params">()</span>   集合转换数组</span></span><br><span class="line"><span class="function">     String[] y </span>= x.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]); </span><br><span class="line">注意，toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]) 和 toArray() 在功能上是相同的。</span><br></pre></td></tr></table></figure>

<h1 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h1><h2 id="List集合特有的方法"><a href="#List集合特有的方法" class="headerlink" title="List集合特有的方法"></a>List集合特有的方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List接口中特有方法：</span><br><span class="line">	</span><br><span class="line">	添加</span><br><span class="line">		add(<span class="keyword">int</span> index, E element) </span><br><span class="line">		addAll(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c) </span><br><span class="line">	获取：</span><br><span class="line">		get(<span class="keyword">int</span> index) </span><br><span class="line">		indexOf(Object o) </span><br><span class="line">		lastIndexOf(Object o) </span><br><span class="line">		subList(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) </span><br><span class="line">	修改：</span><br><span class="line">		set(<span class="keyword">int</span> index, E element) </span><br><span class="line"></span><br><span class="line">	迭代</span><br><span class="line">		listIterator()</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">		List list=  <span class="keyword">new</span> ArrayList();</span><br><span class="line">		list.add(<span class="string">"狗娃"</span>);</span><br><span class="line">		list.add(<span class="string">"狗剩"</span>);</span><br><span class="line">		list.add(<span class="string">"铁蛋"</span>);  <span class="comment">//把元素添加到集合的末尾处。</span></span><br><span class="line">		list.add(<span class="string">"狗娃"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*	</span></span><br><span class="line"><span class="comment">	       //添加方法</span></span><br><span class="line"><span class="comment">		list.add(1, "赵本山"); // 把元素添加到集合中的指定索引值位置上。</span></span><br><span class="line"><span class="comment">		List list2 = new ArrayList();</span></span><br><span class="line"><span class="comment">		list2.add("本山");</span></span><br><span class="line"><span class="comment">		list2.add("小沈阳");</span></span><br><span class="line"><span class="comment">		list.addAll(2,list2); //把list2的元素添加到list集合指定索引值的位置上。</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">//		获取的方法 </span></span><br><span class="line"><span class="comment">		System.out.println("get方法获取元素："+list.get(1)); //根据索引值获取集合中的元素</span></span><br><span class="line"><span class="comment">		使用get方法遍历集合的元素：</span></span><br><span class="line"><span class="comment">		for (int i = 0; i &lt; list.size() ; i++) &#123;</span></span><br><span class="line"><span class="comment">			System.out.print(list.get(i)+",");</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		System.out.println("找出指定元素第一次出现在集合中 的索引值："+ list.indexOf("本山"));</span></span><br><span class="line"><span class="comment">		System.out.println("找指定的元素最后一次出现在集合中的索引值："+list.lastIndexOf("狗娃"));</span></span><br><span class="line"><span class="comment">		List subList = list.subList(1, 3); //指定开始与结束的索引值截取集合中的元素。</span></span><br><span class="line"><span class="comment">		System.out.println("子集合的元素是："+ subList);</span></span><br><span class="line"><span class="comment">	 */</span>	</span><br><span class="line">		list.set(<span class="number">3</span>, <span class="string">"赵本山"</span>); <span class="comment">//使用指定的元素替换指定索引值位置的元素。</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"集合的元素："</span>+list);</span><br></pre></td></tr></table></figure>

<h2 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--| Iterable</span><br><span class="line">			  ----| Collection</span><br><span class="line">				 ------| List</span><br><span class="line">				      ---------| ArrayList  底层采用数组实现，默认<span class="number">10</span>。</span><br><span class="line">				      每次增长<span class="number">60</span>%,（(oldCapacity * <span class="number">3</span>)/<span class="number">2</span> + <span class="number">1</span>） 查询快，增删慢。</span><br><span class="line">				 ---------| LinkedList          </span><br><span class="line">ArrayList:实现原理：</span><br><span class="line">数组实现, 查找快, 增删慢</span><br><span class="line">数组为什么是查询快?因为数组的内存空间地址是连续的.</span><br><span class="line">	ArrayList底层维护了一个Object[] 用于存储对象，默认数组的长度是<span class="number">10</span>。可以通过 <span class="keyword">new</span> ArrayList(<span class="number">20</span>)显式的指定用于存储对象的数组的长度。</span><br><span class="line">	当默认的或者指定的容量不够存储对象的时候，容量自动增长为原来的容量的<span class="number">1.5</span>倍。</span><br><span class="line">由于ArrayList是数组实现, 在增和删的时候会牵扯到数组增容, 以及拷贝元素. 所以慢。数组是可以直接按索引查找, 所以查找时较快</span><br><span class="line">可以考虑,假设向数组的<span class="number">0</span>角标未知添加元素,那么原来的角标位置的元素需要整体往后移,并且数组可能还要增容,一旦增容,就需要要将老数组的内容拷贝到新数组中.所以数组的增删的效率是很低的.</span><br></pre></td></tr></table></figure>

<h2 id="LinkList集合"><a href="#LinkList集合" class="headerlink" title="LinkList集合"></a>LinkList集合</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList:链表实现, 增删快, 查找慢</span><br><span class="line">由于LinkedList:在内存中的地址不连续,需要让上一个元素记住下一个元素.所以每个元素中保存的有下一个元素的位置.虽然也有角标,但是查找的时候,需要从头往下找,显然是没有数组查找快的.但是,链表在插入新元素的时候,只需要让前一个元素记住新元素,让新元素记住下一个元素就可以了.所以插入很快.</span><br><span class="line">由于链表实现, 增加时只要让前一个元素记住自己就可以, 删除时让前一个元素记住后一个元素, 后一个元素记住前一个元素. 这样的增删效率较高。</span><br><span class="line">但查询时需要一个一个的遍历, 所以效率较低。</span><br><span class="line"></span><br><span class="line">特有方法</span><br><span class="line"><span class="number">1</span>：方法介绍</span><br><span class="line">addFirst(E e) </span><br><span class="line">addLast(E e) </span><br><span class="line">getFirst() </span><br><span class="line">getLast() </span><br><span class="line">removeFirst() </span><br><span class="line">removeLast() </span><br><span class="line">如果集合中没有元素，获取或者删除元</span><br><span class="line">素抛：NoSuchElementException</span><br><span class="line"><span class="number">2</span>：数据结构</span><br><span class="line">				<span class="number">1</span>：栈 （<span class="number">1.6</span>）</span><br><span class="line">					先进后出</span><br><span class="line">					push() </span><br><span class="line">					pop()</span><br><span class="line">				<span class="number">2</span>：队列（双端队列<span class="number">1.5</span>）</span><br><span class="line">					先进先出</span><br><span class="line">					offer()</span><br><span class="line">					poll()</span><br><span class="line"><span class="number">3</span>：返回逆序的迭代器对象      </span><br><span class="line">descendingIterator()   返回逆序的迭代器对象</span><br></pre></td></tr></table></figure>

<p>基本方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">list.add(<span class="string">"西游记"</span>);</span><br><span class="line">list.add(<span class="string">"三国演义"</span>);</span><br><span class="line">list.add(<span class="string">"石头记"</span>);</span><br><span class="line">list.add(<span class="string">"水浒传"</span>);</span><br><span class="line">list.add(<span class="string">"全球通史"</span>);</span><br><span class="line">list.addFirst(<span class="string">"史记"</span>);</span><br><span class="line">list.addLast(<span class="string">"呐喊"</span>);</span><br><span class="line"><span class="comment">// list.addFirst(null);</span></span><br><span class="line"><span class="comment">// list.addLast(null);</span></span><br><span class="line">System.out.println(list);</span><br><span class="line"><span class="comment">// 获取指定位置处的元素。</span></span><br><span class="line">String str = (String) list.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 返回此列表的第一个元素。</span></span><br><span class="line">String str2 = (String) list.getFirst();</span><br><span class="line">System.out.println(str.equals(str2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定位置处的元素。</span></span><br><span class="line">String str3 = (String) list.get(list.size() - <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 返回此列表的最后一个元素。</span></span><br><span class="line">String str4 = (String) list.getLast();</span><br><span class="line">System.out.println(str3.equals(str4));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取但不移除此列表的头（第一个元素）。</span></span><br><span class="line">Object element = list.element();</span><br><span class="line">System.out.println(element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size = list.size();</span><br><span class="line">System.out.println(size);</span><br></pre></td></tr></table></figure>

<p>堆栈：先进后出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">		<span class="comment">// 压栈，先进后出</span></span><br><span class="line">		list.push(<span class="string">"西游记"</span>);</span><br><span class="line">		list.push(<span class="string">"三国演义"</span>);</span><br><span class="line">		list.push(<span class="string">"石头记"</span>);</span><br><span class="line">		list.push(<span class="string">"水浒传"</span>);</span><br><span class="line">		System.out.println(list);</span><br><span class="line">		<span class="comment">// 弹栈</span></span><br><span class="line">		String str1 = (String) list.pop();</span><br><span class="line">		System.out.println(str1);</span><br><span class="line">		String str2 = (String) list.pop();</span><br><span class="line">		System.out.println(str2);</span><br><span class="line">		String str3 = (String) list.pop();</span><br><span class="line">		System.out.println(str3);</span><br><span class="line">		String str4 = (String) list.pop();</span><br><span class="line">		System.out.println(str4);</span><br><span class="line">        System.out.println(list.size());<span class="comment">// 0</span></span><br><span class="line">		System.out.println(list); <span class="comment">//[]</span></span><br></pre></td></tr></table></figure>

<p>队列：先进先出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">		<span class="comment">// 队列，先进先出</span></span><br><span class="line">		list.offer(<span class="string">"西游记"</span>);</span><br><span class="line">		list.offer(<span class="string">"三国演义"</span>);</span><br><span class="line">		list.offer(<span class="string">"石头记"</span>);</span><br><span class="line">		list.offer(<span class="string">"水浒传"</span>);</span><br><span class="line">		System.out.println(list);</span><br><span class="line">		<span class="comment">// 出队列</span></span><br><span class="line">		System.out.println(list.poll());</span><br><span class="line">		System.out.println(list.poll());</span><br><span class="line">		System.out.println(list.poll());</span><br><span class="line">		System.out.println(list.poll());</span><br><span class="line"></span><br><span class="line">		System.out.println(list.size());</span><br><span class="line"></span><br><span class="line">		System.out.println(list.peek()); <span class="comment">// 获取队列的头元素，但是不删除</span></span><br><span class="line">		System.out.println(list.peekFirst()); <span class="comment">// 获取队列的头元素，但是不删除</span></span><br><span class="line">		System.out.println(list.peekLast()); <span class="comment">// 获取队列的最后一个元素，但是不删除</span></span><br></pre></td></tr></table></figure>

<p>ArrayList和 LinkedList的存储查找的优缺点：</p>
<p>1、ArrayList 是采用动态数组来存储元素的，它允许直接用下标号来直接查找对应的元素。但是，但是插入元素要涉及数组元素移动及内存的操作。总结：查找速度快，插入操作慢。</p>
<p>2、LinkedList 是采用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快</p>
<p>问题：有一批数据要存储，要求存储这批数据不能出现重复数据，ArrayList、LinkedList都没法满足需求。解决办法：使用 set集合。</p>
<h2 id="Vector集合"><a href="#Vector集合" class="headerlink" title="Vector集合"></a>Vector集合</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Vector: 描述的是一个线程安全的ArrayList。</span><br><span class="line">         </span><br><span class="line">ArrayList： 单线程效率高</span><br><span class="line">Vector   ： 多线程安全的，所以效率低</span><br><span class="line">特有的方法：</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">addElement</span><span class="params">(E obj)</span>  在集合末尾添加元素</span></span><br><span class="line"><span class="function"> E <span class="title">elementAt</span><span class="params">( <span class="keyword">int</span> index)</span> 返回指定角标的元素</span></span><br><span class="line"><span class="function"> Enumeration <span class="title">elements</span><span class="params">()</span>  返回集合中的所有元素，封装到Enumeration对象中</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> Enumeration 接口：</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          测试此枚举是否包含更多的元素。 </span></span><br><span class="line"><span class="function">  E <span class="title">nextElement</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          如果此枚举对象至少还有一个可提供的元素，则返回此枚举的下一个元素。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Vector v = <span class="keyword">new</span> Vector();</span><br><span class="line">		v.addElement(<span class="string">"aaa"</span>);</span><br><span class="line">		v.addElement(<span class="string">"bbb"</span>);</span><br><span class="line">		v.addElement(<span class="string">"ccc"</span>);</span><br><span class="line">		System.out.println( v );</span><br><span class="line">		System.out.println( v.elementAt(<span class="number">2</span>) );   <span class="comment">// ccc</span></span><br><span class="line">		<span class="comment">// 遍历Vector遍历</span></span><br><span class="line">		Enumeration ens = v.elements();</span><br><span class="line">		<span class="keyword">while</span> ( ens.hasMoreElements() )</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println( ens.nextElement() );</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Jdk1<span class="number">.5</span>之后添加的新接口, Collection的父接口. 实现了Iterable的类就是可迭代的.并且支持增强<span class="keyword">for</span>循环。该接口只有一个方法即获取迭代器的方法iterator（）可以获取每个容器自身的迭代器Iterator。（Collection）集合容器都需要获取迭代器（Iterator）于是在<span class="number">5.0</span>后又进行了抽取将获取容器迭代器的iterator（）方法放入到了Iterable接口中。Collection接口进程了Iterable，所以Collection体系都具备获取自身迭代器的方法，只不过每个子类集合都进行了重写（因为数据结构不同）</span><br><span class="line"> Iterator</span><br><span class="line">	<span class="function">Iterator <span class="title">iterator</span><span class="params">()</span> 返回该集合的迭代器对象</span></span><br><span class="line"><span class="function">该类主要用于遍历集合对象，该类描述了遍历集合的常见方法</span></span><br><span class="line"><span class="function">			1：java.lang. Itreable  </span></span><br><span class="line"><span class="function">			 ---| Itreable      接口 实现该接口可以使用增强<span class="keyword">for</span>循环</span></span><br><span class="line"><span class="function">				---| Collection		描述所有集合共性的接口</span></span><br><span class="line"><span class="function">					---| List接口	    可以有重复元素的集合</span></span><br><span class="line"><span class="function">					---| Set接口	    不可以有重复元素的集合</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> interface Iterable&lt;T&gt;</span></span><br><span class="line"><span class="function">Itreable   该接口仅有一个方法，用于返回集合迭代器对象。</span></span><br><span class="line"><span class="function">	1： Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span>	返回集合的迭代器对象</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Iterator接口定义的方法</span></span><br><span class="line"><span class="function">Itreator	该接口是集合的迭代器接口类，定义了常见的迭代方法</span></span><br><span class="line"><span class="function">	1：<span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">						判断集合中是否有元素，如果有元素可以迭代，就返回<span class="keyword">true</span>。</span></span><br><span class="line"><span class="function">	2： E <span class="title">next</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">						返回迭代的下一个元素，注意： 如果没有下一个元素时，调用</span></span><br><span class="line"><span class="function">next元素会抛出NoSuchElementException</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">	3： <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function">						从迭代器指向的集合中移除迭代器返回的最后一个元素（可选操作）。</span></span><br><span class="line"><span class="function">思考：为什么next方法的返回类型是Object的呢？ 为了可以接收任意类型的对象,那么返回的时候,不知道是什么类型的就定义为object</span></span><br></pre></td></tr></table></figure>

<p>Collection—迭代的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">toArray() </span><br><span class="line">iterator()</span><br></pre></td></tr></table></figure>
<p>迭代器的作用：就是用于抓取集合中的元素。</p>
<p>迭代器的方法：<br>​    hasNext()   问是否有元素可遍历。如果有元素可以遍历，返回true，否则返回false 。</p>
<pre><code>next()    获取元素...
remove()  移除迭代器最后一次返回的元素。</code></pre><p>NoSuchElementException 没有元素的异常。<br>出现的原因： 没有元素可以被迭代了。。。</p>
<p>注意在对集合进行迭代过程中，不允许出现迭代器以外的对元素的操作，因为这样会产生安全隐患，java会抛出异常并发修改异常（ConcurrentModificationException），普通迭代器只支持在迭代过程中的删除动作。</p>
<p>注意：      ConcurrentModificationException: 当一个集合在循环中即使用引用变量操作集合又使用迭代器操作集合对象， 会抛出该异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    Stu(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"["</span>+<span class="keyword">this</span>.name+<span class="string">" "</span>+<span class="keyword">this</span>.age+<span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span></span>&#123;</span><br><span class="line">        Collection&lt;Stu&gt; c = <span class="keyword">new</span> ArrayList&lt;Stu&gt;();</span><br><span class="line">        c.add(<span class="keyword">new</span> Stu(<span class="string">"zhangsan"</span>,<span class="number">22</span>));</span><br><span class="line">        c.add(<span class="keyword">new</span> Stu(<span class="string">"lisi"</span>,<span class="number">21</span>));</span><br><span class="line">        c.add(<span class="keyword">new</span> Stu(<span class="string">"wangwu"</span>,<span class="number">22</span>));</span><br><span class="line">   		Iterator&lt;Stu&gt; it = c.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            Stu s = it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            c.add(<span class="keyword">new</span> Student(<span class="string">" "</span>,<span class="number">1</span>));</span><br><span class="line">        	<span class="comment">//  java.util.ConcurrentModificationException</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		list.add(<span class="string">"1"</span>);</span><br><span class="line">		list.add(<span class="string">"4"</span>);</span><br><span class="line">		list.add(<span class="string">"2"</span>);</span><br><span class="line">		list.add(<span class="string">"7"</span>);</span><br><span class="line">		System.out.println(list); <span class="comment">//[1,4,2,7]</span></span><br><span class="line">		<span class="comment">// 因为2是最后一个元素了，也就是删除后 没有在调用了迭代器的next方法。</span></span><br><span class="line">		Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			String s = it.next();</span><br><span class="line">			it.remove();</span><br><span class="line"><span class="comment">//			list.add("33");  //java.util.ConcurrentModificationException</span></span><br><span class="line"><span class="comment">//			list.remove("1"); //java.util.ConcurrentModificationException</span></span><br><span class="line">			System.out.print(s); <span class="comment">//1427</span></span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();  </span><br><span class="line">		System.out.println(list); <span class="comment">//[]</span></span><br></pre></td></tr></table></figure>

<h3 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListIterator</span> <span class="keyword">extends</span> <span class="title">Iterator</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; <span class="title">listIterator</span>()</span></span><br><span class="line"><span class="class">---| <span class="title">Iterator</span></span></span><br><span class="line"><span class="class">		<span class="title">hasNext</span>()</span></span><br><span class="line"><span class="class">		<span class="title">next</span>()</span></span><br><span class="line"><span class="class">		<span class="title">remove</span>()</span></span><br><span class="line"><span class="class">	   ------| <span class="title">ListIterator</span> <span class="title">Iterator</span>子接口 <span class="title">List</span>专属的迭代器</span></span><br><span class="line"><span class="class">                  <span class="title">add</span>(<span class="title">E</span> <span class="title">e</span>)    将指定的元素插入列表（可选操作）。该元素直接插入到 <span class="title">next</span> 返回的下一个元素的前面（如果有）</span></span><br><span class="line"><span class="class">                  <span class="title">void</span> <span class="title">set</span>(<span class="title">E</span> <span class="title">o</span>)   用指定元素替换 <span class="title">next</span> 或 <span class="title">previous</span> 返回的最后一个元素</span></span><br><span class="line"><span class="class">                  <span class="title">hasPrevious</span>()    逆向遍历列表，列表迭代器有多个元素，则返回 <span class="title">true</span>。</span></span><br><span class="line"><span class="class">                  <span class="title">previous</span>()       返回列表中的前一个元素。</span></span><br><span class="line"><span class="class"><span class="title">Iterator</span>在迭代时，只能对元素进行获取(<span class="title">next</span>())和删除(<span class="title">remove</span>())的操作。</span></span><br><span class="line"><span class="class">对于 <span class="title">Iterator</span> 的子接口<span class="title">ListIterator</span> 在迭代<span class="title">list</span> 集合时，还可以对元素进行添加(<span class="title">add</span>(<span class="title">obj</span>))，修改<span class="title">set</span>(<span class="title">obj</span>)的操作。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">// 增加：add() 将指定对象存储到容器中</span></span><br><span class="line">list.add(<span class="string">"计算机网络"</span>);</span><br><span class="line">list.add(<span class="string">"现代操作系统"</span>);</span><br><span class="line">list.add(<span class="string">"java编程思想"</span>);</span><br><span class="line">list.add(<span class="string">"java核心技术"</span>);</span><br><span class="line">list.add(<span class="string">"java语言程序设计"</span>);</span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line">ListIterator lit = list.listIterator();</span><br><span class="line">lit.next(); <span class="comment">// 计算机网络</span></span><br><span class="line">lit.next(); <span class="comment">// 现代操作系统</span></span><br><span class="line">System.out.println(lit.next()); <span class="comment">// java编程思想</span></span><br><span class="line"><span class="comment">//用指定元素替换 next 或 previous 返回的最后一个元素</span></span><br><span class="line">lit.set(<span class="string">"平凡的世界"</span>);<span class="comment">// 将java编程思想替换为平凡的世界</span></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line">System.out.println(lit.next()); <span class="comment">// java编程思想</span></span><br><span class="line"><span class="comment">// 将指定的元素插入列表，该元素直接插入到 next 返回的元素的后</span></span><br><span class="line">lit.add(<span class="string">"平凡的世界"</span>);<span class="comment">// 在java编程思想后添加平凡的世界</span></span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>

<h1 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set:注重独一无二的性质,该体系集合可以知道某物是否已近存在于集合中,不会存储重复的元素</span><br><span class="line">用于存储无序(存入和取出的顺序不一定相同)元素，值不能重复。</span><br><span class="line">对象的相等性</span><br><span class="line">引用到堆上同一个对象的两个引用是相等的。如果对两个引用调用hashCode方法，会得到相同的结果，如果对象所属的类没有覆盖Object的hashCode方法的话，hashCode会返回每个对象特有的序号（java是依据对象的内存地址计算出的此序号），所以两个不同的对象的hashCode值是不可能相等的。</span><br><span class="line">	如果想要让两个不同的Person对象视为相等的，就必须覆盖Object继下来的hashCode方法和equals方法，因为Object  hashCode方法返回的是该对象的内存地址，所以必须重写hashCode方法，才能保证两个不同的对象具有相同的hashCode，同时也需要两个不同对象比较equals方法会返回<span class="keyword">true</span></span><br><span class="line">该集合中没有特有的方法，直接继承自Collection。</span><br><span class="line">---| Itreable      接口 实现该接口可以使用增强<span class="keyword">for</span>循环</span><br><span class="line">				---| Collection		描述所有集合共性的接口</span><br><span class="line">					---| List接口	    可以有重复元素的集合</span><br><span class="line">                            ---| ArrayList   </span><br><span class="line">                            ---|  LinkedList</span><br><span class="line">					---| Set接口	    不可以有重复元素的集合</span><br><span class="line">案例：set集合添加元素并使用迭代器迭代元素。</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//Set 集合存和取的顺序不一致。</span></span><br><span class="line">		Set hs = <span class="keyword">new</span> HashSet();</span><br><span class="line">		hs.add(<span class="string">"世界军事"</span>);</span><br><span class="line">		hs.add(<span class="string">"兵器知识"</span>);</span><br><span class="line">		hs.add(<span class="string">"舰船知识"</span>);</span><br><span class="line">		hs.add(<span class="string">"汉和防务"</span>);</span><br><span class="line">		System.out.println(hs);</span><br><span class="line">		<span class="comment">// [舰船知识, 世界军事, 兵器知识, 汉和防务]</span></span><br><span class="line">		Iterator it = hs.iterator();</span><br><span class="line">		<span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">			System.out.println(it.next());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HashSet集合"><a href="#HashSet集合" class="headerlink" title="HashSet集合"></a>HashSet集合</h2><p>​                —|Set接口     不可以有重复元素的集合</p>
<p>​                            —| HashSet  </p>
<p>线程不安全，存取速度快。底层是以哈希表实现的。</p>
<p>hashSet的实现原理：</p>
<pre><code>往Haset添加元素的时候，HashSet会先调用元素的hashCode方法得到元素的哈希值 ，然后通过元素 的哈希值经过移位等运算，就可以算出该元素在哈希表中 的存储位置。

情况1： 如果算出元素存储的位置目前没有任何元素存储，那么该元素可以直接存储到该位置上。

情况2： 如果算出该元素的存储位置目前已经存在有其他的元素了，那么会调用该元素的equals方法与该位置的元素再比较一次，如果equals返回的是true，那么该元素与这个位置上的元素就视为重复元素，不允许添加，如果equals方法返回的是false，那么该元素运行添加。</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;	</span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"&#123; 编号:"</span>+ <span class="keyword">this</span>.id+<span class="string">" 姓名："</span>+ <span class="keyword">this</span>.name+<span class="string">"&#125;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"=======hashCode====="</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"======equals======"</span>);</span><br><span class="line">		Person p = (Person)obj;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.id==p.id;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">		set.add(<span class="keyword">new</span> Person(<span class="number">110</span>,<span class="string">"狗娃"</span>));</span><br><span class="line">		set.add(<span class="keyword">new</span> Person(<span class="number">220</span>,<span class="string">"狗剩"</span>));</span><br><span class="line">		set.add(<span class="keyword">new</span> Person(<span class="number">330</span>,<span class="string">"铁蛋"</span>));</span><br><span class="line">		<span class="comment">//在现实生活中只要编号一致就为同一个人.</span></span><br><span class="line">		System.out.println(<span class="string">"添加成功吗？"</span>+set.add(<span class="keyword">new</span> Person(<span class="number">110</span>,<span class="string">"狗娃"</span>)));</span><br><span class="line">		System.out.println(<span class="string">"集合的元素："</span>+set);	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">=======hashCode=====</span><br><span class="line">=======hashCode=====</span><br><span class="line">=======hashCode=====</span><br><span class="line">=======hashCode=====</span><br><span class="line">======equals======</span><br><span class="line">添加成功吗？<span class="keyword">false</span></span><br><span class="line">集合的元素：[&#123; 编号:<span class="number">330</span> 姓名：铁蛋&#125;, &#123; 编号:<span class="number">220</span> 姓名：狗剩&#125;, &#123; 编号:<span class="number">110</span> 姓名：狗娃&#125;]</span><br></pre></td></tr></table></figure>

<h2 id="TreeSet集合"><a href="#TreeSet集合" class="headerlink" title="TreeSet集合"></a>TreeSet集合</h2><p>treeSet要注意的事项：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.  往TreeSet添加元素的时候，如果元素本身具备了自然顺序的特性，那么就按照元素自然顺序的特性进行排序存储。</span><br><span class="line"> 	<span class="number">2</span>. 往TreeSet添加元素的时候，如果元素本身不具备自然顺序的特性，那么该元素所属的类必须要实现Comparable接口，把元素</span><br><span class="line">   的比较规则定义在compareTo(T o)方法上。 </span><br><span class="line"></span><br><span class="line">   <span class="number">3</span>. 如果比较元素的时候，compareTo方法返回 的是<span class="number">0</span>，那么该元素就被视为重复元素，不允许添加.(注意：TreeSet与HashCode、equals方法是没有任何关系。)</span><br><span class="line"></span><br><span class="line">   <span class="number">4</span>. 往TreeSet添加元素的时候, 如果元素本身没有具备自然顺序 的特性，而元素所属的类也没有实现Comparable接口，那么必须要在创建TreeSet的时候传入一个</span><br><span class="line">     比较器。</span><br><span class="line"></span><br><span class="line">   <span class="number">5</span>. 往TreeSet添加元素的时候，如果元素本身不具备自然顺序的特性，而元素所属的类已经实现了Comparable接口， 在创建TreeSet对象的时候也传入了比较器</span><br><span class="line">     那么是以比较器的比较规则优先使用。</span><br><span class="line">   如何自定义定义比较器： 自定义一个类实现Comparator接口即可，把元素与元素之间的比较规则定义在compare方法内即可。</span><br><span class="line">   	自定义比较器的格式 ：</span><br><span class="line"></span><br><span class="line">   		<span class="class"><span class="keyword">class</span>  类名  <span class="keyword">implements</span> <span class="title">Comparator</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   		&#125;</span><br><span class="line"></span><br><span class="line">   推荐使用：使用比较器(Comparator)。</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Emp</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Emp</span>&gt;</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	</span><br><span class="line">	String name;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> salary;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> salary)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.salary = salary;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"&#123; 编号："</span>+  <span class="keyword">this</span>.id+<span class="string">" 姓名："</span>+ <span class="keyword">this</span>.name+<span class="string">" 薪水："</span>+ <span class="keyword">this</span>.salary+<span class="string">"&#125;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//@Override //元素与元素之间的比较规则。</span></span><br><span class="line">	<span class="comment">// 负整数、零或正整数，根据此对象是小于、等于还是大于指定对象。 </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Emp o)</span> </span>&#123;</span><br><span class="line"><span class="comment">//		System.out.println(this.name+"compare"+ e.name);</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.salary- o.salary;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义一个比较器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Emp</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Emp o1, Emp o2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> o1.id-o2.id;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//根据第一个参数小于、等于或大于第二个参数分别返回负整数、零或正整数。 </span></span><br><span class="line">	<span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">	public int compare(Object o1, Object o2) &#123;</span></span><br><span class="line"><span class="comment">		Emp e1 = (Emp) o1;</span></span><br><span class="line"><span class="comment">		Emp e2 = (Emp) o2;</span></span><br><span class="line"><span class="comment">		return e1.id - e2.id;</span></span><br><span class="line"><span class="comment">	&#125;*/</span>	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建一个比较器对象</span></span><br><span class="line">		MyComparator comparator = <span class="keyword">new</span> MyComparator();</span><br><span class="line">		<span class="comment">//创建TreeSet的时候传入比较器</span></span><br><span class="line">		TreeSet tree = <span class="keyword">new</span> TreeSet(comparator);</span><br><span class="line">		</span><br><span class="line">		tree.add(<span class="keyword">new</span> Emp(<span class="number">110</span>, <span class="string">"老陆"</span>, <span class="number">100</span>));</span><br><span class="line">		tree.add(<span class="keyword">new</span> Emp(<span class="number">113</span>, <span class="string">"老钟"</span>, <span class="number">200</span>));</span><br><span class="line">		tree.add(<span class="keyword">new</span> Emp(<span class="number">220</span>, <span class="string">"老汤"</span>, <span class="number">300</span>));</span><br><span class="line">		tree.add(<span class="keyword">new</span> Emp(<span class="number">120</span>, <span class="string">"老蔡"</span>, <span class="number">500</span>));</span><br><span class="line">		System.out.println(<span class="string">"集合的元素："</span>+tree);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串比较规则"><a href="#字符串比较规则" class="headerlink" title="字符串比较规则"></a>字符串比较规则</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">TreeSet是可以对字符串进行排序的，因为字符串已经实现了Comparable接口。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">字符串的比较规则：</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	情况一： 对应位置有不同的字符出现，就比较的就是对应位置不同的字符。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	情况 二：对应位置上的字符都一样，比较的就是字符串的长度。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">		TreeSet tree = <span class="keyword">new</span> TreeSet();</span><br><span class="line">		tree.add(<span class="string">"abcccccccccccccccccc"</span>);</span><br><span class="line">		tree.add(<span class="string">"abc"</span>);</span><br><span class="line">		System.out.println(tree); <span class="comment">// [abc, abcccccccccccccccccc]</span></span><br><span class="line">		System.out.println(<span class="string">"abw"</span>.compareTo(<span class="string">"abcccccccccccc"</span>)); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<h2 id="LinkHashList集合"><a href="#LinkHashList集合" class="headerlink" title="LinkHashList集合"></a>LinkHashList集合</h2><p>会保存插入的顺序。</p>
<p>看到array，就要想到角标。</p>
<p>看到link，就要想到first，last。</p>
<p>看到hash，就要想到hashCode,equals.</p>
<p>看到tree，就要想到两个接口。Comparable，Comparator。</p>
<h1 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h1><p>双列集合</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map学习体系：</span><br><span class="line"> ---| Map  接口    将键映射到值的对象。一个映射不能包含重复的键；每个键最多只能映射到一个值。</span><br><span class="line">			---| HashMap  采用哈希表实现，所以无序</span><br><span class="line">            ---| TreeMap   可以对健进行排序</span><br><span class="line"></span><br><span class="line">---|Hashtable:</span><br><span class="line">底层是哈希表数据结构，线程是同步的，不可以存入<span class="keyword">null</span>键，<span class="keyword">null</span>值。</span><br><span class="line">效率较低，被HashMap 替代。</span><br><span class="line">---|HashMap:</span><br><span class="line">底层是哈希表数据结构，线程是不同步的，可以存入<span class="keyword">null</span>键，<span class="keyword">null</span>值。</span><br><span class="line">要保证键的唯一性，需要覆盖hashCode方法，和equals方法。</span><br><span class="line">---| LinkedHashMap：</span><br><span class="line">该子类基于哈希表又融入了链表。可以Map集合进行增删提高效率。</span><br><span class="line">---|TreeMap:</span><br><span class="line">底层是二叉树数据结构。可以对map集合中的键进行排序。需要使用Comparable或者Comparator 进行比较排序。<span class="keyword">return</span> <span class="number">0</span>，来判断键的唯一性。</span><br></pre></td></tr></table></figure>

<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、添加：</span><br><span class="line">	<span class="number">1</span>、<span class="function">V <span class="title">put</span><span class="params">(K key, V value)</span>    （可以相同的key值，但是添加的value值会覆</span></span><br><span class="line"><span class="function">盖前面的，返回值是前一个，如果没有就返回<span class="keyword">null</span>）                                          </span></span><br><span class="line"><span class="function">	2、<span class="title">putAll</span><span class="params">(Map&lt;? extends K,? extends V&gt; m)</span>  从指定映射中将所有映射关</span></span><br><span class="line"><span class="function">系复制到此映射中（可选操作）。</span></span><br><span class="line"><span class="function">2、删除</span></span><br><span class="line"><span class="function">	1、<span class="title">remove</span><span class="params">()</span>    删除关联对象，指定key对象</span></span><br><span class="line"><span class="function">	2、<span class="title">clear</span><span class="params">()</span>     清空集合对象</span></span><br><span class="line"><span class="function">3、获取</span></span><br><span class="line"><span class="function">     1：value <span class="title">get</span><span class="params">(key)</span></span>; 可以用于判断键是否存在的情况。当指定的键不存在的时候，返</span><br><span class="line">回的是<span class="keyword">null</span>。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、判断：</span><br><span class="line">	<span class="number">1</span>、<span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span>   长度为0返回<span class="keyword">true</span>否则<span class="keyword">false</span></span></span><br><span class="line"><span class="function">    2、<span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span>  判断集合中是否包含指定的key</span></span><br><span class="line"><span class="function">	3、<span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span>  判断集合中是否包含指定的value</span></span><br><span class="line"><span class="function">	4、长度：</span></span><br><span class="line"><span class="function">Int size（）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加</span></span><br><span class="line">		<span class="comment">// 定义一个Map的容器对象</span></span><br><span class="line">		Map&lt;String, Integer &gt; map1 = <span class="keyword">new</span> HashMap&lt;String, Integer &gt;();</span><br><span class="line">		map1.put(<span class="string">"jack"</span>, <span class="number">20</span>);</span><br><span class="line">		map1.put(<span class="string">"rose"</span>, <span class="number">18</span>);</span><br><span class="line">		map1.put(<span class="string">"lucy"</span>, <span class="number">17</span>);</span><br><span class="line">		map1.put(<span class="string">"java"</span>, <span class="number">25</span>);</span><br><span class="line">		System.out.println(map1);  <span class="comment">//&#123;java=25, rose=18, lucy=17, jack=20&#125;</span></span><br><span class="line">		<span class="comment">// 添加重复的键值（值不同）,会返回集合中原有（重复键）的值System.out.println(map1.put("jack", 30)); //20</span></span><br><span class="line">		       </span><br><span class="line">		Map&lt;String, Integer&gt; map2 = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">		map2.put(<span class="string">"张三丰"</span>, <span class="number">100</span>);</span><br><span class="line">		map2.put(<span class="string">"虚竹"</span>, <span class="number">20</span>);</span><br><span class="line">		System.out.println(<span class="string">"map2:"</span> + map2);</span><br><span class="line">		<span class="comment">// 从指定映射中将所有映射关系复制到此映射中。</span></span><br><span class="line">		map1.putAll(map2);</span><br><span class="line">		System.out.println(<span class="string">"map1:"</span> + map1);</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">		<span class="comment">// 指定key，返回删除的键值对映射的值。</span></span><br><span class="line">		System.out.println(<span class="string">"value:"</span> + map1.remove(<span class="string">"java"</span>));</span><br><span class="line">		map1.clear();</span><br><span class="line">		System.out.println(<span class="string">"map1:"</span> + map1);</span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line">		<span class="comment">// V get(Object key) 通过指定的key对象获取value对象</span></span><br><span class="line">		<span class="comment">// int size() 获取容器的大小</span></span><br><span class="line">		System.out.println(<span class="string">"value:"</span> + map1.get(<span class="string">"jack"</span>));</span><br><span class="line">		System.out.println(<span class="string">"map.size:"</span> + map1.size());</span><br><span class="line"><span class="comment">// 判断</span></span><br><span class="line">		Map&lt;String, Integer&gt; map1 = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">		map1.put(<span class="string">"jack"</span>, <span class="number">20</span>);</span><br><span class="line">		map1.put(<span class="string">"rose"</span>, <span class="number">18</span>);</span><br><span class="line">		map1.put(<span class="string">"lucy"</span>, <span class="number">17</span>);</span><br><span class="line">		map1.put(<span class="string">"java"</span>, <span class="number">25</span>);</span><br><span class="line">		System.out.println(map1);</span><br><span class="line">		System.out.println(<span class="string">"isEmpty:"</span> + map1.isEmpty());</span><br><span class="line">		System.out.println(<span class="string">"containskey:"</span> + map1.containsKey(<span class="string">"jack"</span>));</span><br><span class="line">		System.out.println(<span class="string">"containsvalues:"</span> + map1.containsValue(<span class="number">100</span>));</span><br></pre></td></tr></table></figure>

<h2 id="遍历Map"><a href="#遍历Map" class="headerlink" title="遍历Map"></a>遍历Map</h2><p>方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、将map 集合中所有的键取出存入set集合。</span><br><span class="line">		<span class="function">Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span>   返回所有的key对象的Set集合</span></span><br><span class="line"><span class="function">                             再通过get方法获取键对应的值。</span></span><br><span class="line"><span class="function">2、 <span class="title">values</span><span class="params">()</span> ，获取所有的值.</span></span><br><span class="line"><span class="function">		Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span>不能获取到key对象</span></span><br><span class="line"><span class="function">3、 Map.Entry对象  推荐使用   重点</span></span><br><span class="line"><span class="function">		Set&lt;Map.Entry&lt;k,v&gt;&gt; <span class="title">entrySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">将map 集合中的键值映射关系打包成一个对象Map.Entry对象通过Map.Entry 对象的getKey，getValue获取其键和值。</span></span><br></pre></td></tr></table></figure>

<p>第一种方式:使用keySet</p>
<p>将Map转成Set集合（keySet()），通过Set的迭代器取出Set集合中的每一个元素（Iterator）就是Map集合中的所有的键，再通过get方法获取键对应的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">"aaaa"</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">"bbbb"</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">"cccc"</span>);</span><br><span class="line">System.out.println(map);</span><br><span class="line"></span><br><span class="line">Set&lt;Integer&gt; ks = map.keySet();</span><br><span class="line">Iterator&lt;Integer&gt; it = ks.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">	Integer key = it.next();</span><br><span class="line">	String value = map.get(key);</span><br><span class="line">	System.out.println(<span class="string">"key="</span> + key + <span class="string">" value="</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种方式: 通过values 获取所有值,不能获取到key对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">"aaaa"</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">"bbbb"</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">"cccc"</span>);</span><br><span class="line">System.out.println(map);</span><br><span class="line">Collection&lt;String&gt; vs = map.values();</span><br><span class="line">Iterator&lt;String&gt; it = vs.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">	String value = it.next();</span><br><span class="line">	System.out.println(<span class="string">" value="</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三种方式: Map.Entry</p>
<p>publicstatic interface Map.Entry&lt;K,V&gt;</p>
<p>通过Map中的entrySet()方法获取存放Map.Entry&lt;K,V&gt;对象的Set集合。</p>
<p>Set&lt;Map.Entry&lt;K,V&gt;&gt;entrySet()</p>
<p>面向对象的思想将map集合中的键和值映射关系打包为一个对象，就是Map.Entry，将该对象存入Set集合，Map.Entry是一个对象，那么该对象具备的getKey，getValue获得键和值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">"aaaa"</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">"bbbb"</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">"cccc"</span>);</span><br><span class="line">System.out.println(map);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的Map.Entry对象的Set集合 Map.Entry包含了key和value对象</span></span><br><span class="line">Set&lt;Map.Entry&lt;Integer, String&gt;&gt; es = map.entrySet();</span><br><span class="line"></span><br><span class="line">Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; it = es.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 返回的是封装了key和value对象的Map.Entry对象</span></span><br><span class="line">	Map.Entry&lt;Integer, String&gt; en = it.next();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取Map.Entry对象中封装的key和value对象</span></span><br><span class="line">	Integer key = en.getKey();</span><br><span class="line">	String value = en.getValue();</span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">"key="</span> + key + <span class="string">" value="</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HashMap集合"><a href="#HashMap集合" class="headerlink" title="HashMap集合"></a>HashMap集合</h2><p>HashMap的存储原理：</p>
<pre><code>往HashMap添加元素的时候，首先会调用键的hashCode方法得到元素 的哈希码值，然后经过运算就可以算出该
元素在哈希表中的存储位置。 
情况1： 如果算出的位置目前没有任何元素存储，那么该元素可以直接添加到哈希表中。

情况2：如果算出 的位置目前已经存在其他的元素，那么还会调用该元素的equals方法与这个位置上的元素进行比较
，如果equals方法返回 的是false，那么该元素允许被存储，如果equals方法返回的是true，那么该元素被视为
重复元素，不允存储</code></pre><p>底层是哈希表数据结构，线程是不同步的，可以存入null键，null值。要保证键的唯一性，需要覆盖hashCode方法，和equals方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name.hashCode() + age * <span class="number">37</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">			Person p = (Person) obj;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.name.equals(p.name) &amp;&amp; <span class="keyword">this</span>.age == p.age;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Person@name:"</span> + <span class="keyword">this</span>.name + <span class="string">" age:"</span> + <span class="keyword">this</span>.age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		HashMap&lt;Person, String&gt; hm = <span class="keyword">new</span> HashMap&lt;Person, String&gt;();</span><br><span class="line">		hm.put(<span class="keyword">new</span> Person(<span class="string">"jack"</span>, <span class="number">20</span>), <span class="string">"1001"</span>);</span><br><span class="line">		hm.put(<span class="keyword">new</span> Person(<span class="string">"rose"</span>, <span class="number">18</span>), <span class="string">"1002"</span>);</span><br><span class="line">		hm.put(<span class="keyword">new</span> Person(<span class="string">"lucy"</span>, <span class="number">19</span>), <span class="string">"1003"</span>);</span><br><span class="line">		hm.put(<span class="keyword">new</span> Person(<span class="string">"hmm"</span>, <span class="number">17</span>), <span class="string">"1004"</span>);</span><br><span class="line">		hm.put(<span class="keyword">new</span> Person(<span class="string">"ll"</span>, <span class="number">25</span>), <span class="string">"1005"</span>);</span><br><span class="line">		System.out.println(hm);</span><br><span class="line">		System.out.println(hm.put(<span class="keyword">new</span> Person(<span class="string">"rose"</span>, <span class="number">18</span>), <span class="string">"1006"</span>));</span><br><span class="line"></span><br><span class="line">		Set&lt;Entry&lt;Person, String&gt;&gt; entrySet = hm.entrySet();</span><br><span class="line">		Iterator&lt;Entry&lt;Person, String&gt;&gt; it = entrySet.iterator();</span><br><span class="line">		<span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">			Entry&lt;Person, String&gt; next = it.next();</span><br><span class="line">			Person key = next.getKey();</span><br><span class="line">			String value = next.getValue();</span><br><span class="line">			System.out.println(key + <span class="string">" = "</span> + value);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="TreeMap集合"><a href="#TreeMap集合" class="headerlink" title="TreeMap集合"></a>TreeMap集合</h2><p>TreeMap的排序，TreeMap可以对集合中的键进行排序。如何实现键的排序？</p>
<p>方式一：元素自身具备比较性</p>
<p>和TreeSet一样原理，需要让存储在键位置的对象实现Comparable接口，重写compareTo方法，也就是让元素自身具备比较性，这种方式叫做元素的自然排序也叫做默认排序。</p>
<p>方式二：容器具备比较性</p>
<p>当元素自身不具备比较性，或者自身具备的比较性不是所需要的。那么此时可以让容器自身具备。需要定义一个类实现接口Comparator，重写compare方法，并将该接口的子类实例对象作为参数传递给TreeMap集合的构造方法。</p>
<p>注意：当Comparable比较方式和Comparator比较方式同时存在时，以Comparator的比较方式为主；</p>
<p>注意：在重写compareTo或者compare方法时，必须要明确比较的主要条件相等时要比较次要条件。（假设姓名和年龄一直的人为相同的人，如果想要对人按照年龄的大小来排序，如果年龄相同的人，需要如何处理？不能直接return 0，以为可能姓名不同（年龄相同姓名不同的人是不同的人）。此时就需要进行次要条件判断（需要判断姓名），只有姓名和年龄同时相等的才可以返回0.）</p>
<p>通过return 0来判断唯一性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;<span class="comment">//implements Comparable&lt;Emp&gt;&#123;</span></span><br><span class="line">	</span><br><span class="line">	String name;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> salary;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(String name, <span class="keyword">int</span> salary)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.salary = salary;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"[姓名："</span>+<span class="keyword">this</span>.name+<span class="string">" 薪水："</span>+ <span class="keyword">this</span>.salary+<span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	@Override</span></span><br><span class="line"><span class="comment">	public int compareTo(Emp o) &#123;</span></span><br><span class="line"><span class="comment">		return this.salary - o.salary;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义一个比较器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Emp</span>&gt;</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Emp o1, Emp o2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> o1.salary - o2.salary;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*	TreeMap&lt;Character, Integer&gt; tree = new TreeMap&lt;Character, Integer&gt;();</span></span><br><span class="line"><span class="comment">		tree.put('c',10);</span></span><br><span class="line"><span class="comment">		tree.put('b',2);</span></span><br><span class="line"><span class="comment">		tree.put('a',5);</span></span><br><span class="line"><span class="comment">		tree.put('h',12);</span></span><br><span class="line"><span class="comment">		System.out.println(tree);*/</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//创建一个自定义比较器</span></span><br><span class="line">		MyComparator comparator = <span class="keyword">new</span> MyComparator();</span><br><span class="line">		</span><br><span class="line">		TreeMap&lt;Emp, String&gt; tree = <span class="keyword">new</span> TreeMap&lt;Emp, String&gt;(comparator);</span><br><span class="line">		tree.put(<span class="keyword">new</span> Emp(<span class="string">"冰冰"</span>, <span class="number">2000</span>),<span class="string">"001"</span>);</span><br><span class="line">		tree.put(<span class="keyword">new</span> Emp(<span class="string">"家宝"</span>, <span class="number">1000</span>),<span class="string">"002"</span>);</span><br><span class="line">		tree.put(<span class="keyword">new</span> Emp(<span class="string">"习总"</span>, <span class="number">3000</span>),<span class="string">"003"</span>);</span><br><span class="line">		tree.put(<span class="keyword">new</span> Emp(<span class="string">"克强"</span>, <span class="number">5000</span>),<span class="string">"005"</span>);</span><br><span class="line">		</span><br><span class="line">		tree.put(<span class="keyword">new</span> Emp(<span class="string">"财厚"</span>, <span class="number">5000</span>),<span class="string">"008"</span>);</span><br><span class="line">		System.out.println(tree);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Collections与Arrays"><a href="#Collections与Arrays" class="headerlink" title="Collections与Arrays"></a>Collections与Arrays</h1><p>集合框架中的工具类：特点：该工具类中的方法都是静态的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections：常见方法：</span><br><span class="line"><span class="number">1</span>，对list进行二分查找：</span><br><span class="line">    前提该集合一定要有序。</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(list,key)</span></span>;</span><br><span class="line">    <span class="comment">//必须根据元素自然顺序对列表进行升级排序</span></span><br><span class="line">    <span class="comment">//要求list 集合中的元素都是Comparable 的子类。</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(list,key,Comparator)</span></span>;</span><br><span class="line"><span class="number">2</span>，对list集合进行排序。</span><br><span class="line">    sort(list); </span><br><span class="line">    <span class="comment">//对list进行排序,其实使用的事list容器中的对象的compareTo方法</span></span><br><span class="line">    sort(list,comaprator);</span><br><span class="line">	<span class="comment">//按照指定比较器进行排序</span></span><br><span class="line"><span class="number">3</span>，对集合取最大值或者最小值。</span><br><span class="line">	max(Collection)</span><br><span class="line">	max(Collection,comparator)</span><br><span class="line">	min(Collection)</span><br><span class="line">	min(Collection,comparator)</span><br><span class="line"><span class="number">4</span>，对list集合进行反转。</span><br><span class="line">	reverse(list);</span><br><span class="line"><span class="number">5</span>，对比较方式进行强行逆转。</span><br><span class="line">	<span class="function">Comparator <span class="title">reverseOrder</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">Comparator <span class="title">reverseOrder</span><span class="params">(Comparator)</span></span>;</span><br><span class="line"><span class="number">6</span>，对list集合中的元素进行位置的置换。</span><br><span class="line">	swap(list,x,y);</span><br><span class="line"><span class="number">7</span>，对list集合进行元素的替换。如果被替换的元素不存在，那么原集合不变。</span><br><span class="line">	replaceAll(list,old,<span class="keyword">new</span>);</span><br><span class="line"><span class="number">8</span>，可以将不同步的集合变成同步的集合。</span><br><span class="line">    <span class="function">Set <span class="title">synchronizedSet</span><span class="params">(Set&lt;T&gt; s)</span></span></span><br><span class="line"><span class="function">    Map <span class="title">synchronizedMap</span><span class="params">(Map&lt;K,V&gt; m)</span></span></span><br><span class="line"><span class="function">    List <span class="title">synchronizedList</span><span class="params">(List&lt;T&gt; list)</span></span></span><br><span class="line"><span class="function">9. 如果想要将集合变数组：</span></span><br><span class="line"><span class="function">	可以使用Collection 中的toArray 方法。注意：是Collection不是Collections工具类</span></span><br><span class="line"><span class="function">传入指定的类型数组即可，该数组的长度最好为集合的size。</span></span><br></pre></td></tr></table></figure>

<p>Arrays:用于对数组操作的工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>， 二分查找,数组需要有序</span><br><span class="line">    binarySearch(<span class="keyword">int</span>[])</span><br><span class="line">    binarySearch(<span class="keyword">double</span>[])</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>，数组排序</span><br><span class="line">    sort(<span class="keyword">int</span>[])</span><br><span class="line">    sort(<span class="keyword">char</span>[])……</span><br><span class="line"><span class="number">2</span>，	将数组变成字符串。</span><br><span class="line"> toString(<span class="keyword">int</span>[])</span><br><span class="line"><span class="number">3</span>，	复制数组。</span><br><span class="line"> copyOf();</span><br><span class="line"><span class="number">4</span>，	复制部分数组。</span><br><span class="line">	copyOfRange():</span><br><span class="line"><span class="number">5</span>，	比较两个数组是否相同。</span><br><span class="line">	equals(<span class="keyword">int</span>[],<span class="keyword">int</span>[]);</span><br><span class="line"><span class="number">6</span>，	将数组变成集合。</span><br><span class="line">	<span class="function">List <span class="title">asList</span><span class="params">(T[])</span></span>;</span><br><span class="line">这样可以通过集合的操作来操作数组中元素，</span><br><span class="line">但是不可以使用增删方法，add，remove。因为数组长度是固定的，会出现</span><br><span class="line">UnsupportOperationExcetion。</span><br><span class="line">可以使用的方法：contains，indexOf。。。</span><br><span class="line">如果数组中存入的基本数据类型，那么asList会将数组实体作为集合中的元素。</span><br><span class="line">如果数组中的存入的引用数据类型，那么asList会将数组中的元素作为集合中</span><br><span class="line">的元素。</span><br></pre></td></tr></table></figure>

<h1 id="泛型-Generic"><a href="#泛型-Generic" class="headerlink" title="泛型(Generic)"></a>泛型(Generic)</h1><p>泛型编译时期有效，避免了类型强制转换的问题。</p>
<p>格式  通过&lt;&gt; 来指定容器中元素的类型.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">细节一</span><br><span class="line">声明好泛型类型之后,集合中只能存放特定类型元素</span><br><span class="line"></span><br><span class="line">细节二:</span><br><span class="line">泛型类型必须是引用类型(基本数据类型不行)</span><br><span class="line"></span><br><span class="line">细节三: 使用泛型后取出元素不需要类型转换.</span><br></pre></td></tr></table></figure>

<h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">定义：</span><br><span class="line">当函数中使用了一个不明确的数据类型，那么在函数上就可以进行泛型的定义。</span><br><span class="line">		  <span class="keyword">public</span> &lt;泛型的声明&gt; 返回值类型  函数名( 泛型 变量名  )&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">new</span> Demo6().getData(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> data;</span><br><span class="line">	&#125;</span><br><span class="line">细节：</span><br><span class="line">使用泛型方法前需要进行泛型声明，使用一对尖括号 &lt;泛型&gt;，声明的位置在<span class="keyword">static</span>后返回值类型前。</span><br><span class="line">当一个类中有多个函数声明了泛型，那么该泛型的声明可以声明在类上。</span><br></pre></td></tr></table></figure>

<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">定义格式：</span><br><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;类型&gt;</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 使用泛型类，创建对象的时候需要指定具体的类型</span></span><br><span class="line">		<span class="keyword">new</span> Demo&lt;Integer&gt;().getData(<span class="number">5</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 反序任意类型数组</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(T[] arr)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> end = arr.length - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">				T temp = arr[start];</span><br><span class="line">				arr[start] = arr[end];</span><br><span class="line">				arr[end] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>泛型类细节：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、创建对象的时候要指定泛型的具体类型</span><br><span class="line"><span class="number">2</span>、创建对象时可以不指定泛型的具体类型(和创建集合对象一样)。默认是Object，例如我们使用集合存储元素的时候没有使用泛型就是那么参数的类型就是Object</span><br><span class="line"><span class="number">3</span>、类上面声明的泛型只能应用于非静态成员函数，如果静态函数需要使用泛型，那么需要在函数上独立声明。</span><br><span class="line"><span class="number">4</span>、如果建立对象后指定了泛型的具体类型，那么该对象操作方法时，这些方法只能操作一种数据类型。</span><br><span class="line"><span class="number">5</span>、所以既可以在类上的泛型声明，也可以在同时在该类的方法中声明泛型。</span><br></pre></td></tr></table></figure>
<h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo8</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		MyInter&lt;String&gt; my = <span class="keyword">new</span> MyInter&lt;String&gt;();</span><br><span class="line">		my.print(<span class="string">"泛型"</span>);</span><br><span class="line"></span><br><span class="line">		MyInter2 my2 = <span class="keyword">new</span> MyInter2();</span><br><span class="line">		my.print(<span class="string">"只能传字符串"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现不知为何类型时可以这样定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Inter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"myprint:"</span> + t);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用接口时明确具体类型。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInter2</span> <span class="keyword">implements</span> <span class="title">Inter</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String t)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"myprint:"</span> + t);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">通配符：？</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(List&lt;?&gt; list)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">可以对类型进行限定范围。</span><br><span class="line">？extends E: 接收E类型或者E的子类型。</span><br><span class="line">? <span class="keyword">super</span> E: 接收E类型或者E的父类型。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">限定通配符的上边界：</span><br><span class="line">extends </span><br><span class="line">接收Number 类型或者Number的子类型</span><br><span class="line">正确：Vector&lt;? extends Number&gt; x = <span class="keyword">new</span> Vector&lt;Integer&gt;();</span><br><span class="line">错误：Vector&lt;? extends Number&gt; x = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">限定通配符的下边界</span><br><span class="line"><span class="keyword">super</span></span><br><span class="line">接收Integer 或者Integer的父类型</span><br><span class="line">正确：Vector&lt;? <span class="keyword">super</span> Integer&gt; x = <span class="keyword">new</span> Vector&lt;Number&gt;();</span><br><span class="line">错误：Vector&lt;? <span class="keyword">super</span> Integer&gt; x = <span class="keyword">new</span> Vector&lt;Byte&gt;();</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<p>JDK5中的泛型允许程序员在编写集合代码时，就限制集合的处理类型，从而把原来程序运行时可能发生问题，转变为编译时的问题，以此提高程序的可读性和稳定</p>
<p>注意：泛型是提供给javac编译器使用的，它用于限定集合的输入类型，让编译器在源代码级别上，即挡住向集合中插入非法数据。但编译器编译完带有泛形的java程序后，生成的class文件中将不再带有泛形信息，以此使程序运行效率不受到影响，这个过程称之为“擦除”。</p>
<p>泛型的基本术语，以ArrayList<E>为例：&lt;&gt;念着typeof</p>
<p>ArrayList<E>中的E称为类型参数变量</p>
<p>ArrayList<Integer>中的Integer称为实际类型参数</p>
<p>整个称为ArrayList<E>泛型类型</p>
<p>整个ArrayList<Integer>称为参数化的类型ParameterizedType</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础知识-常用API</title>
    <url>/2017/12/01/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3-Java%E5%B8%B8%E7%94%A8%E5%AF%B9%E8%B1%A1api/</url>
    <content><![CDATA[<h1 id="1-Object对象"><a href="#1-Object对象" class="headerlink" title="1       Object对象"></a>1       Object对象</h1><p>面向对象的核心思想:“找合适的对象，做适合的事情”。</p>
<p>合适的对象：</p>
<ol>
<li><p>自己描述类，自己创建对象。</p>
</li>
<li><p>sun已经描述了好多常用的类，可以使用这些类创建对象。</p>
</li>
</ol>
<p>API（Application Program Interface）</p>
<p>​        sun定义的那么多类的终极父类是Object。Object描述的是所有类的通用属性与方法。</p>
<a id="more"></a>

<h2 id="1-1-toString方法"><a href="#1-1-toString方法" class="headerlink" title="1.1  toString方法"></a>1.1  toString方法</h2><p>​</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础知识-面向对象</title>
    <url>/2017/11/30/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2-Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p><strong>对象</strong>：在现实生活中存在具体的一个事物。</p>
<p><strong>类：</strong>实际就是对某种类型事物的共性属性与行为的抽取。 </p>
<p>面向对象与面向过程：</p>
<p>​    狗.吃（粑粑）； // 面向对象</p>
<p>​    吃（狗，粑粑）； // 面向过程</p>
<a id="more"></a>

<h2 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2><p>成员变量：定义在类中的变量，随类的创建而创建，随类消失而消失。</p>
<p>局部变量：定义在方法中的变量，使用完就释放。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.    存储位置  成员变量属于对象，它存储在堆内，堆内的实体，当没有引用指向其时，才垃圾回收清理 局部变量存在栈内存中，当不在使用时，马上就会被释放。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.    初始值 </span><br><span class="line"></span><br><span class="line">  成员变量它存储在堆中，如果没有赋初值，它有默认值。</span><br><span class="line">      <span class="number">1</span>.  整数<span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">int</span>、<span class="keyword">long</span> =<span class="number">0</span>；</span><br><span class="line">      <span class="number">2</span>.  <span class="keyword">char</span>=<span class="string">'\u0000'</span>； <span class="comment">// char a = '';</span></span><br><span class="line">      <span class="number">3</span>.  <span class="keyword">boolean</span> =<span class="keyword">false</span>；</span><br><span class="line">      <span class="number">4</span>.  String =<span class="keyword">null</span>;</span><br><span class="line">      <span class="number">5</span>.  类类型 =<span class="keyword">null</span>；</span><br><span class="line">      <span class="number">6</span>.  数组 =<span class="keyword">null</span>；</span><br><span class="line"></span><br><span class="line"> 局部变量，如果要想使用必须手动初始化.</span><br><span class="line">	 <span class="number">1</span>. 方法中，参数列表中，语句中。</span><br><span class="line">	 <span class="number">2</span>. 必须给初始化值，没有初始值，不能使用</span><br><span class="line">	 <span class="number">3</span>. 在栈内存中</span><br><span class="line">	 </span><br><span class="line">	 	<span class="keyword">char</span> a = <span class="string">'\u0000'</span>;</span><br><span class="line">		<span class="keyword">char</span> b[] = <span class="keyword">null</span>;</span><br><span class="line">		System.out.println(a);  <span class="comment">// 空</span></span><br><span class="line">		System.out.println((<span class="keyword">int</span>)a);  <span class="comment">// 0</span></span><br><span class="line">		System.out.println(b);  <span class="comment">// error  java.lang.NullPointerException</span></span><br></pre></td></tr></table></figure>

<h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">疑问：创建对象时，jvm就会调用到对应的构造方法，那么我们以前没有学构造方法，那么</span><br><span class="line">以前创建对象时，jvm是否 也会调用构造方法呢？如果有？构造方法从何而来呢？</span><br><span class="line">				</span><br><span class="line">			会调用， java编译器在编译的时候给加上去的。</span><br><span class="line">jdk提供了一个java开发工具(javap.exe)给我们进行反编译的。</span><br><span class="line">javap 反编译工具的使用格式：</span><br><span class="line">		javap -c -l -<span class="keyword">private</span> 类名</span><br></pre></td></tr></table></figure>

<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>构造函数要注意的细节：</p>
<pre><code>1. 构造函数是没有返回值类型的。
2. 构造函数的函数名必须要与类名一致。
3. 构造函数并不是由我们手动调用的，而是在创建对应的对象时，jvm就会主动调用到对应的构造函数。
4. 如果一个类没有显式的写上一个构造方法时，那么java编译器会为该类添加一个无参的构造函数的。
5. 如果一个类已经显式的写上一个构造方法时,那么java编译器则不会再为该类添加一个无参的构造方法。
6. 构造函数是可以在一个类中以函数重载 的形式存在多个的。</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">构造函数与普通函数的区别：	</span><br><span class="line">	<span class="number">1</span>. 返回值类型的区别：</span><br><span class="line">		<span class="number">1</span>. 构造函数是没有返回值类型的，</span><br><span class="line">		<span class="number">2</span>. 普通函数是有返回值类型的，即使函数没有返回值，返回值类型也要写上<span class="keyword">void</span>。</span><br><span class="line">	<span class="number">2</span>. 函数名的区别：</span><br><span class="line">		<span class="number">1</span>. 构造函数的函数名必须要与类名一致，</span><br><span class="line">		<span class="number">2</span>. 普通函数的函数名只要符合标识符的命名规则即可。</span><br><span class="line">	<span class="number">3</span>. 调用方式的区别：</span><br><span class="line">		<span class="number">1</span>. 构造函数是 在创建对象的时候由jvm调用的。</span><br><span class="line">		<span class="number">2</span>. 普通函数是由我们使用对象调用的，一个对象可以对象多次普通 的函数，</span><br><span class="line">	<span class="number">4</span>. 作用上的区别：</span><br><span class="line">		<span class="number">1</span>. 构造函数 的作用用于初始化一个对象。</span><br><span class="line">		<span class="number">2</span>. 普通函数是用于描述一类事物的公共行为的。</span><br></pre></td></tr></table></figure>

<p>疑问： java编译器添加 的无参构造方法的权限修饰符是 什么？</p>
<p>​    与类的权限修饰是一致的。</p>
<h2 id="类访问权限修饰符"><a href="#类访问权限修饰符" class="headerlink" title="类访问权限修饰符"></a>类访问权限修饰符</h2><p>java中访问修饰符public,private,protected,以及默认（default）时的区别： </p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>当前类</th>
<th>同 包</th>
<th>子 类</th>
<th>其他包</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>default</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>private</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<p>类的成员不写访问修饰时默认为default。默认对于同一个包中的其他类相当于公开（public），对于不是同一个包中的其他类相当于私有（private）。受保护（protected）对子类相当于公开，对不是同一包中的没有父子关系的类相当于私有。Java中，外部类的修饰符只能是public或默认，类的成员（包括内部类）的修饰符可以是以上四种。</p>
<p>总结：</p>
<p>同包可以访问的有，public、protected，但protected只能是父子关系才可以访问。default同一个包中相当于public。</p>
<ol>
<li>public 一个类中，同一包中，子类中，不同包中 </li>
<li>protected  一个类中，同一包中，子类中(可以不同包)</li>
<li>default 一个类中，同一包中</li>
<li>private 一个类中</li>
</ol>
<p><strong>在该类包外的子类中能“看到“的只是子类自己继承来的protected 方法和属性，它是不能“看到“它的父类对象的protected方法和属性的。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> a;</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">int</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> b;</span><br><span class="line"><span class="keyword">import</span> a.A;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      B b = <span class="keyword">new</span> B();</span><br><span class="line">      b.a = <span class="number">1</span>; <span class="comment">//这句是可以通过编译，并能正确执行的</span></span><br><span class="line">     A a = <span class="keyword">new</span> A();</span><br><span class="line">      a.a = <span class="number">1</span>; <span class="comment">//这句是不能通过编译的</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="private和protected不能修饰外部类的原因"><a href="#private和protected不能修饰外部类的原因" class="headerlink" title="private和protected不能修饰外部类的原因"></a>private和protected不能修饰外部类的原因</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">大家都知道类的成员变量和方法可以使用<span class="keyword">private</span>和<span class="keyword">protected</span>修饰。</span><br><span class="line"></span><br><span class="line">使用<span class="keyword">private</span>修饰，表示该类的成员只能在类的内部访问。</span><br><span class="line"></span><br><span class="line">使用<span class="keyword">protected</span>修饰，表示该类的成员可以被类的内部、同包下的其它类以及该类的子类访问。</span><br><span class="line"></span><br><span class="line">从组织结构来分析：</span><br><span class="line"></span><br><span class="line">类的成员（包过变量、方法、内部类等）的上层结构是类，而类的上层结构是包。</span><br><span class="line"></span><br><span class="line">如果类可以使用<span class="keyword">private</span>来修饰，表示该包下的这个类不能被其它类访问，那么该类也失去了存在的意义，所以不能使用<span class="keyword">private</span>来修饰类。</span><br><span class="line"></span><br><span class="line">如果类可以使用<span class="keyword">protected</span>来修饰，表示该类所在的包的其它类可以访问该类；该类所在的包的子包的类可以访问该类，但是包没有继承的概念，所以后一句是不对。所以用<span class="keyword">protected</span>来修饰类也是没有意义的。</span><br><span class="line"></span><br><span class="line">综上，类只有<span class="keyword">public</span>和<span class="keyword">default</span>修饰。</span><br></pre></td></tr></table></figure>

<h2 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">构造代码块：</span><br><span class="line"></span><br><span class="line">构造代码块的作用：给对象进行统一的初始化。</span><br><span class="line"></span><br><span class="line">构造函数的作用： 给对应的对象进行初始化。</span><br><span class="line">构造代码块的格式：</span><br><span class="line">	&#123;</span><br><span class="line">		构造代码块</span><br><span class="line">	&#125;</span><br><span class="line">注意： 构造代码块的大括号必须位于成员 位置上。</span><br><span class="line">代码块的类别：</span><br><span class="line">	<span class="number">1</span>. 构造代码块。</span><br><span class="line">	<span class="number">2</span>. 局部代码块.   大括号位于方法之内。  作用：缩短局部 变量 的生命周期，节省一点点内存。</span><br><span class="line">	<span class="number">3</span>. 静态代码块  <span class="keyword">static</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造代码块要注意的事项：</span></span><br><span class="line"><span class="comment">	1. java编译器编译一个java源文件的时候，会把成员变量的声明语句提前至一个类的最前端。</span></span><br><span class="line"><span class="comment">	2. 成员变量的初始化工作其实都在在构造函数中执行的。</span></span><br><span class="line"><span class="comment">	3. 一旦经过java编译器编译后，那么构造代码块的代码块就会被移动构造函数中执行，是在构造函数之前执行的，构造函数的中代码是最后执行的。</span></span><br><span class="line"><span class="comment">	4. 成员变量的显示初始化与构造代码块的代码是按照当前代码的顺序执行的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Demo5</span><span class="params">()</span></span>&#123;   <span class="comment">//构造函数</span></span><br><span class="line">		i = <span class="number">300000000</span>;	</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="comment">//构造代码块   //构造代码块的初始化</span></span><br><span class="line">	&#123;</span><br><span class="line">		i = <span class="number">200000000</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">100000000</span>;	 <span class="comment">//成员变量的显初始化	</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Demo5 d = <span class="keyword">new</span> Demo5();</span><br><span class="line">		System.out.println(<span class="string">"i = "</span>+d.i); <span class="comment">//    300000000</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>关键字：</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>关键字代表了所属函数的调用者对象。</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>关键字作用：</span><br><span class="line">	<span class="number">1</span>. 如果存在同名成员变量与局部变量时，在方法内部默认是访问局部变量的数据，可以通过<span class="keyword">this</span>关键字指定访问成员变量的数据。</span><br><span class="line">	<span class="number">2</span>. 在一个构造函数中可以调用另外一个构造函数初始化对象。</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>关键字调用其他的构造函数要注意的事项：</span><br><span class="line">	<span class="number">1</span>. <span class="keyword">this</span>关键字调用其他的构造函数时，<span class="keyword">this</span>关键字必须要位于构造函数中的第一个语句。</span><br><span class="line">	<span class="number">2</span>. <span class="keyword">this</span>关键字在构造函数中不能出现相互调用的情况，因为是一个死循环。</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>关键字要注意事项：</span><br><span class="line">	<span class="number">1</span>. 存在同名的成员变量与局部变量时，在方法的内部访问的是局部变量(java 采取的是“就近原则”的机制访问的。)</span><br><span class="line">	<span class="number">2</span>. 如果在一个方法中访问了一个变量，该变量只存在成员变量的情况下，那么java编译器会在该变量的前面添加<span class="keyword">this</span>关键字。</span><br></pre></td></tr></table></figure>

<h2 id="static修饰符"><a href="#static修饰符" class="headerlink" title="static修饰符"></a>static修饰符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="keyword">static</span>修饰成员变量 ：如果有数据需要被共享给所有对象使用时，那么就可以使用<span class="keyword">static</span>修饰。	</span><br><span class="line">		静态成员变量的访问方式：	</span><br><span class="line">				方式<span class="number">1</span>： 可以使用对象进行访问。</span><br><span class="line">					格式： 对象.变量名。</span><br><span class="line">				</span><br><span class="line">				方式二： 可以使用类名进行访问。</span><br><span class="line">					格式： 类名.变量名;</span><br><span class="line">		注意： </span><br><span class="line">		<span class="number">1</span>. 非静态的成员变量只能使用对象进行访问，不能使用类名进行访问。</span><br><span class="line">		<span class="number">2</span>. 千万不要为了方便访问数据而使用<span class="keyword">static</span>修饰成员变量，只有成员变量的数据是真正需要被共享的时候才使用<span class="keyword">static</span>修饰。</span><br><span class="line">			</span><br><span class="line">	<span class="keyword">static</span>修饰成员变量的应用场景： 如果一个数据需要被所有对象共享使用的时候，这时候即可好实用<span class="keyword">static</span>修饰。</span><br><span class="line"><span class="number">2</span>. <span class="keyword">static</span>修饰成员函数:</span><br></pre></td></tr></table></figure>

<p>静态的成员变量与非静态的成员变量的区别：</p>
<pre><code>1. 作用上的区别：
    1. 静态的成员变量的作用共享一个 数据给所有的对象使用。
    2. 非静态的成员变量的作用是描述一类事物的公共属性。
2. 数量与存储位置上的区别：
    1. 静态成员变量是存储方法 区内存中，而且只会存在一份数据。
    2. 非静态的成员变量是存储在堆内存中，有n个对象就有n份数据。
3. 生命周期的区别：
    1. 静态的成员变量数据是随着类的加载而存在，随着类文件的消失而消失。
    2.非静态的成员数据是随着对象的创建而存在，随着对象被垃圾回收器回收而消失。</code></pre><p>静态函数要注意的事项：</p>
<pre><code>1. 静态函数是可以调用类名或者对象进行调用的，而非静态函数只能使用对象进行调用。
2. 静态的函数可以直接访问静态的成员，但是不能直接访问非静态的成员。    
    原因：静态函数是可以使用类名直接调用的，这时候可能还没有存在对象，
    而非静态的成员数据是随着对象的存在而存在的。

3. 非静态的函数是可以直接访问静态与非静态的成员。
    原因：非静态函数只能由对象调用，当对象存在的时候，静态数据老早就已经存在了，而非静态
    数据也随着对象的创建而存在了。

4. 静态函数不能出现this或者super关键字。
    原因：因为静态的函数是可以使用类名调用的，一旦使用类名调用这时候不存在对象，而this
    关键字是代表了一个函数的调用者对象，这时候产生了冲突。</code></pre><p>静态的数据的生命周期：静态的成员变量数据是优先于对象存在的。</p>
<h2 id="单列设计模式"><a href="#单列设计模式" class="headerlink" title="单列设计模式"></a>单列设计模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 饿汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    <span class="function">pirvate <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> Single s = <span class="keyword">new</span> Single();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getSingle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 懒汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> Single s;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getSingle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span>)&#123;</span><br><span class="line">            s = <span class="keyword">new</span> Single();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>继承特点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>：描述类和类之间的关系</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>：降低类和类之间的重复代码</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>：降低对象和对象之间的代码重复使用静态变量</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>：降低类和类之间的代码重复使用就继承</span><br></pre></td></tr></table></figure>

<p>继承要注意的事项：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 千万不要为了减少重复代码而去继承，只有真正存在着继承关系的时候才去继承。</span><br><span class="line"><span class="number">2</span>. 父类私有的成员不能被继承。</span><br><span class="line"><span class="number">3</span>. 父类的构造函数不能被继承。</span><br><span class="line"><span class="number">4</span>. 创建子类对象时默认会先调用父类无参的构造函数。</span><br></pre></td></tr></table></figure>
<h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>super关键字代表了父类空间的引用。</p>
<p><strong>super关键字的作用：</strong><br>    1. 子父类存在着同名的成员时，在子类中默认是访问子类的成员，可以通过super关键字指定访问父类的成员。<br>    2. 创建子类对象时，默认会先调用父类无参的构造方法，可以通过super关键字指定调用父类的构造方法。</p>
<p><strong>super关键字调用父类构造方法要注意的事项：</strong><br>    1. 如果在子类的构造方法上没有指定调用父类的构造方法，那么java编译器会在子类的构造方法上面加super()语句。<br>    2. super关键字调用父类的构造函数时，该语句必须要是子类构造函数中的第一个语句。<br>    3. super与this关键字不能同时出现在同一个构造函数中调用其他的构造函数。因为两个语句都需要第一个句。</p>
<p><strong>super关键字与this关键字的区别：</strong><br>    1. 代表的事物不一致。<br>            1. super关键字代表的是父类空间的引用。<br>            2. this关键字代表的是所属函数的调用者对象。<br>    2. 使用前提不一致。<br>            1. super关键字必须要有继承关系才能使用。<br>            2. this关键字不需要存在继承关系也可使用。<br>    3. 调用构造函数的区别：<br>            1. super关键字是调用父类的构造函数。<br>            2. this关键字是调用本类的构造函数。</p>
<ul>
<li><p><strong>super语句，和this语句为什么不能同时存在，super为什么要定义在第一行？</strong></p>
<p>不能同时出现，是因为this和super都要定义在第一行，所以只能有一个；<br>那么为什么要定义在第一行呢？<br>​    先说super，因为子类继承了父类的属性和方法，所以在先初始化父类的属性和方法，这样子类才可以初始化自己特有的，因为java中不允许调用没有初始化的成员。<br>​    this就是调用本类的其他构造函数，在其他构造函数中也有默认的super()，或者自定义了带参的super，这样就初始化了父类的成员了，所以写了this的构造函数不能再写super了，因为实例化一个对象运行两super是不安全的。</p>
<p>​    this放在第一行，也是因为要先初始化父类和this代表的构造函数先，因为当前构造函数可能用到那些成员，所以那些成员得要先初始化。</p>
</li>
</ul>
<h2 id="重写和重载"><a href="#重写和重载" class="headerlink" title="重写和重载"></a>重写和重载</h2><p>目前的问题：父类的功能无法满足子类的需求。</p>
<p>方法重写的前提： 必须要存在<strong>继承</strong>的关系。</p>
<p>方法的重写: 子父类出了同名的函数，这个我们就称作为方法的重写。</p>
<p>什么是时候要使用方法的重写：父类的功能无法满足子类的需求时。</p>
<p><strong>方法重写要注意的事项：</strong><br>    1.方法重写时， 方法名与形参列表必须一致。<br>    2.方法重写时，子类的权限修饰符必须要大于或者等于父类的权限修饰符。<br>    3.方法重写时，子类的返回值类型必须要小于或者 等于父类的返回值类型。<br>    4.方法重写时， 子类抛出的异常类型要小于或者等于父类抛出的异常类型。<br>            Exception(最坏)<br>            RuntimeException(小坏)</p>
<p>方法的重载：在一个类中存在两个或者两个 以上的同名函数,称作为方法重载。</p>
<p><strong>方法重载的要求:</strong><br>    1. 函数名要一致。<br>    2. 形参列表不一致（形参的个数或形参 的类型不一致）<br>    3. 与返回值类型无关。</p>
<h2 id="子类的实例化过程"><a href="#子类的实例化过程" class="headerlink" title="子类的实例化过程"></a>子类的实例化过程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.JVM先找指定的类字节码并加载进内存，并会先加载父类的字节码进内存；</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.在堆内开辟内存空间，分配内存地址；</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.在对象的内存空间中对对象的属性进行默认初始化；</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.调用对应的构造方法初始化；</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.在构造方法中第一行先调用父类的构造方法对父类进行初始化；（如果不显示指定父类构造方法，默认为<span class="keyword">super</span>()）;</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>. 父类初始化完毕后，再对子类属性进行显式初始化；</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>.再进行子类构造方法的特定初始化；</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>.初始化完毕后，将对象的引（分配的内存地址）用返回。</span><br></pre></td></tr></table></figure>

<h2 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a>instanceof 关键字</h2><p>​       1：属于比较运算符：</p>
<p>​       2：instanceof关键字：该关键字用来判断一个对象是否是指定类的对象。</p>
<p>​       3：用法：</p>
<p>​               对象 instanceof 类;  </p>
<p>​       该表达式是一个比较运算符，返回的结果是boolea类型  true|false</p>
<p>   注意：使用instanceof关键字做判断时，两个类之间必须有关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p=<span class="keyword">new</span> Person();</span><br><span class="line">		System.out.println( p <span class="keyword">instanceof</span> Person);</span><br></pre></td></tr></table></figure>

<h2 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h2><p>final关键字的用法：</p>
<pre><code>1. final关键字修饰一个基本类型的变量时，该变量不能重新赋值，第一次的值为最终的。
2. fianl关键字修饰一个引用类型变量时，该变量不能重新指向新的对象。
3. final关键字修饰一个函数的时候，该函数不能被重写。
4. final关键字修饰一个类的时候，该类不能被继承。</code></pre><p>常量 的修饰符一般为： public static final </p>
<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>当描述一个类的时候，如果不能确定功能函数如何定义，那么该类就可以定义为抽象类，功能函数应该描述为抽象函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">	String color;</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"旺旺"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"叽叽喳喳"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽象类的特点"><a href="#抽象类的特点" class="headerlink" title="抽象类的特点"></a>抽象类的特点</h2><p>​          1：有抽象函数的类，该类一定是抽象类。</p>
<p>​          2：抽象类中不一定要有抽象函数。</p>
<p>​          3：抽象类不能使用new创建对象</p>
<p>​              1：创建对象，使用对象的功能，抽象类的方法，没有方法体。</p>
<p>​          4：抽象类主要为了提高代码的复用性，让子类继承来使用。</p>
<p>​          5：编译器强制子类实现抽象类父类的未实现的方法。</p>
<p>​              1：<strong>可以不实现，前提是子类的也要声明为抽象的。</strong></p>
<h2 id="抽象类的优点"><a href="#抽象类的优点" class="headerlink" title="抽象类的优点"></a>抽象类的优点</h2><p>1：提高代码复用性</p>
<p>​              2：强制子类实现父类中没有实现的功能</p>
<p>2：提高代码的扩展性，便于后期的代码维护</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>抽象类一定有构造函数，子类继承抽象父类，初始化父类成员，并实现抽象方法。</p>
<p><strong>final</strong>和abstract 不同同时使用，</p>
<p>​    因为final修饰的类不能被继承，抽象类的出现就是为了子类来实现父类中没有实现的方法，所以不能同时使用。</p>
<p><strong>static</strong> 和abstract 不同同时使用，</p>
<p>​        static修饰的方法可以用类名调用，</p>
<p>​                对于abstract修饰的方法没有具体的方法实现，所有不能直接调用，</p>
<p>​               也就是说不可以与static共存。</p>
<p><strong>private</strong>和abstract 不同同时使用，</p>
<p>​               private修饰的只能在本类中使用，</p>
<p>​               abstract方法是用来被子类进行重写的，有矛盾</p>
<p>​               所有不能共存.</p>
<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口的定义格式：<br>​    </p>
<pre><code>interface 接口名{}</code></pre><p>接口要注意的事项 ：<br>    1. 接口是一个特殊的类。<br>    2. 接口的成员变量默认的修饰符为： public static final 。那么也就是说接口中的成员变量都是常量。<br>    3. 接口中的方法都是抽象的方法，默认的修饰符为： public abstract。<br>    4. 接口不能创建对象。<br>    5. 接口是没有构造方法的。<br>    6. 接口是给类去实现使用的，非抽象类实现一个接口的时候，必须要把接口中所有方法全部实现。</p>
<p>实现接口的格式：</p>
<pre><code>class  类名 implements 接口名{}</code></pre><p>接口的作用：</p>
<pre><code>1. 程序的解耦。  （低耦合）
2. 定义约束规范。
3. 拓展功能。</code></pre><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>面向对象的三大特征：</p>
<pre><code>1. 封装
2. 继承。
3. 多态</code></pre><p>多态：一个对象具备多种形态。(父类的引用类型变量指向了子类的对象)</p>
<p>（或者是接口的引用类型变量指向了接口实现类的对象)</p>
<p><strong>多态的前提：必须存在继承或者实现关系。</strong></p>
<pre><code>动物  a  = new   狗();</code></pre><p><strong>多态要注意的细节：</strong><br>    1.  多态情况下，子父类存在同名的成员变量时，访问的是父类的成员变量。（静态和非静态都是）<br>    2.  多态情况下，子父类存在同名的非静态的成员函数时，访问的是子类的成员函数。<br>    3.  多态情况下，子父类存在同名的静态的成员函数时，访问的是父类的成员函数。<br>    4.  多态情况下，不能访问子类特有的成员。</p>
<p><strong>总结：</strong></p>
<p>​    多态情况下，子父类存在同名的成员时，访问的都是父类的成员，除了在同名非静态函数时才是访问子类的。</p>
<p>​    编译看左边，运行不一定看右边。</p>
<p>​    编译看左边：java编译器在编译的时候，会检查引用类型变量所属的类是否具备指定的成员，如果不具备马上编译报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">a.sha();  <span class="comment">// 编译时，看Animal类是否有sha()函数，没有报错。</span></span><br></pre></td></tr></table></figure>

<p><strong>多态的好处：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//需求1： 定义一个函数可以接收任意类型的图形对象，并且打印图形面积与周长。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(MyShape s)</span></span>&#123; <span class="comment">// MyShpe s = new Circle(4.0);      // 多态用于形参</span></span><br><span class="line">		s.getArea();</span><br><span class="line">		s.getLength();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 需求2： 定义一个函数可以返回任意类型的图形对象。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyShape  <span class="title">getShape</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;   <span class="comment">// 多态用与返回值</span></span><br><span class="line">		<span class="keyword">if</span> (i==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Circle(<span class="number">4.0</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Rect(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">多态的应用： </span><br><span class="line">	<span class="number">1</span>.多态用于形参类型的时候，可以接收更多类型的数据</span><br><span class="line">	<span class="number">2</span>.多态用于返回值类型的时候，可以返回更多类型的数据.</span><br></pre></td></tr></table></figure>

<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><ol>
<li><p>内部类可以直接访问外部类的成员属性。(孙悟空相当于内部类飞到牛魔王的肚子里面去)。</p>
</li>
<li><p>内部类需要访问内部类的成员属性时需要创建内部类的对象。</p>
<ol>
<li><p>在外部类的成员函数中创建内部类的对象，通过内部类对象对象直接访问内部类的成员。</p>
</li>
<li><p>在其他类中直接创建内部类的对象。</p>
<p>Outer.Inner inner = new Outer().new Inner();</p>
</li>
</ol>
</li>
</ol>
<h3 id="私有成员内部类"><a href="#私有成员内部类" class="headerlink" title="私有成员内部类"></a>私有成员内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//外部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员变量</span></span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">100</span>; <span class="comment">// Outer.class文件被加载到内存的时候存在内存中。  静态的成员数据是不需要对象存在才访问。</span></span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">9</span>;</span><br><span class="line">	<span class="comment">//成员内部类</span></span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;      	</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"这个是成员内部类的print方法！"</span>+i);</span><br><span class="line">            System.out.println(<span class="string">"这个是成员内部类的print方法！"</span>+Outer.<span class="keyword">this</span>.x); <span class="comment">// 内部类访问同名外部类变量</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//在外部的方法中创建了内部类的对象，然后调用内部方法。内部类私有时，只能在外部类创建内部类对象访问部类成员</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">instance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">		inner.print();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其他类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">	</span>&#123;		</span><br><span class="line">		<span class="comment">// System.out.println(Outer.Inner.i);</span></span><br><span class="line">		<span class="comment">// Outer.Inner in = new Outer().new Inner();  // 私有内部类，其他类不可以访问</span></span><br><span class="line">		<span class="comment">// System.out.println(in.i);</span></span><br><span class="line">		Outer out = <span class="keyword">new</span> Outer();</span><br><span class="line">		System.out.println(out.i);	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态成员内部类"><a href="#静态成员内部类" class="headerlink" title="静态成员内部类"></a>静态成员内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">19</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo4</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span></span>&#123;</span><br><span class="line">        Outer.Inner in = <span class="keyword">new</span> Outer.Inner();</span><br><span class="line">        System.out.println(in.i); <span class="comment">// 19</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：成员内部类成员属性、成员方法特点</p>
<ol>
<li><strong>私有的成员内部类</strong></li>
</ol>
<p>​              特点：不能在其他类中直接创建内部类对象来访问</p>
<ol start="2">
<li><strong>静态的成员内部类</strong></li>
</ol>
<p>​               特点：如果内部类中包含有静态成员，那么java规定内部类必须声明为静的</p>
<p>​                        访问静态内部类的形式：</p>
<p>​                        Outer.Inner in = new Outer.Inner();</p>
<h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p><strong>局部内部类概述：</strong>包含在外部类的<strong>函数中</strong>的内部类称之为局部内部类。</p>
<p><strong>访问：</strong>可以在包含局部内部类的方法中直接创建局部内部类的对象调用局部内部类的成员。</p>
<p><strong>注意：</strong>局部内部类只能访问所在函数的final属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Outer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	String name= <span class="string">"外部类的name"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//局部变量</span></span><br><span class="line">		<span class="keyword">final</span>	<span class="keyword">int</span> y =<span class="number">100</span>;  <span class="comment">// y 什么时候从内存中消失？ 方法执行完毕之后y消失。</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//局部内部类</span></span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;     <span class="comment">/*</span></span><br><span class="line"><span class="comment">							当test方法执行完毕之后，那么y马上从内存中消失，而Inner对象在方法</span></span><br><span class="line"><span class="comment">							执行完毕的时候还没有从内存中消失，而inner对象的print方法还在访问着</span></span><br><span class="line"><span class="comment">							y变量，这时候的y变量已经消失了，那么就给人感觉y的生命变量已经被延长了</span></span><br><span class="line"><span class="comment">							解决方案： 如果一个局部内部类访问一个局部变量的时候，那么就让该局部内类</span></span><br><span class="line"><span class="comment">							访问这个局部 变量 的复制品。				</span></span><br><span class="line"><span class="comment">						*/</span></span><br><span class="line">			<span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"这个是局部内部类的print方法.."</span>+y);</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		Inner inner = <span class="keyword">new</span> Inner();  <span class="comment">//这个inner对象什么时候消失？  Inner对象的生命周期比局部变量y的生命周期要长。</span></span><br><span class="line">		inner.print();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">		outer.test();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>内部类要注意的细节：
    1. 如果外部类与内部类存在同名的成员变量时，在内部类中默认情况下是访问内部类的成员变量。
    可以通过&quot;外部类.this.成员变量名&quot; 指定访问外部类的 成员。
    2. 私有的成员内部类只能在外部类提供一个方法创建内部类的对象进行访问，不能在其他类创建对了。
    3. 成员内部类一旦出现了静态的成员，那么该类也必须 使用static修饰。</code></pre><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>匿名内部类：就是没有类名字的内部类。</p>
<p>匿名内部类作用：简化内部类书写。</p>
<p>匿名内部类的前提:必须继承一个父类或者是实现一个接口。</p>
<p>匿名内部类的格式： </p>
<p>​        new父类或者接口(){ 执行代码….};</p>
<p>内部类的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现关系下匿名内部类</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Dao</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//创建一个匿名内部类的对象</span></span><br><span class="line">		<span class="keyword">new</span> Dao()&#123;   <span class="comment">//不是接口不能创建对象吗？怎么现在又可以了? // 创建的时匿名对象，借用了接口名字 </span></span><br><span class="line">			 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"添加成功"</span>);</span><br><span class="line">			 &#125;</span><br><span class="line">		&#125;.add();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo7</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		test(<span class="keyword">new</span> Dao()&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"添加员工成功"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//调用这个方法...</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">test</span><span class="params">(Dao d)</span></span>&#123;  <span class="comment">//形参类型是一个接口引用..</span></span><br><span class="line">		d.add();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>现实生活中的很多病况从面向对象的角度考虑也是一类事物，可以定义为类。      </p>
<p>java中可以通过类对这一类不正常的现象进行描述，并封装为对象。</p>
<ol>
<li><p>java的异常体系包含在java.lang这个包默认不需要导入。</p>
</li>
<li><p>java异常体系</p>
</li>
</ol>
<p>​          |——Throwable  （实现类描述java的错误和异常）</p>
<p>​              |——Error （错误）一般不通过代码去处理。</p>
<p>​              |——Exception （异常）</p>
<p>​                 |——RuntimeException （运行时异常）</p>
<p>​                 |——非运行时异常</p>
<h2 id="Throwable类"><a href="#Throwable类" class="headerlink" title="Throwable类"></a>Throwable类</h2><ol>
<li><p>toString() 输出该异常的类名。</p>
</li>
<li><p>getMessage() 输出异常的信息，需要通过构造方法传入异常信息（例如病态信息）。</p>
</li>
<li><p>printStackTrace() 打印栈信息。</p>
<p>   人生病：流鼻涕，感冒，呼吸道感染，肺炎。。。最后体现的是肺炎。</p>
<p>   医生要处理需要获知这些信息。从外到里处理。最后找病源</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo6</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// Throwable able=new Throwable();</span></span><br><span class="line">		Throwable able = <span class="keyword">new</span> Throwable(<span class="string">"想吐。。。"</span>);</span><br><span class="line">		System.out.println(able.toString()); <span class="comment">// 输出该异常的类名</span></span><br><span class="line">		System.out.println(able.getMessage()); <span class="comment">// 输出异常的信息</span></span><br><span class="line">		able.printStackTrace(); <span class="comment">// 打印栈信息</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>异常的体系：<br>———-| Throwable  所以异常或者错误类的超类<br>————–|Error  错误   错误一般是用于jvm或者是硬件引发的问题，所以我们一般不会通过代码去处理错误的。<br>————–|Exception 异常   是需要通过代码去处理的。</p>
<p>如何区分错误与异常呢：<br>    如果程序出现了不正常的信息，如果不正常的信息的类名是以Error结尾的，那么肯定是一个错误。<br>    如果是以Exception结尾的，那么肯定就是一个异常。</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h2 id="捕获处理"><a href="#捕获处理" class="headerlink" title="捕获处理"></a>捕获处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">异常的处理：</span><br><span class="line"></span><br><span class="line">	 方式一：捕获处理</span><br><span class="line"></span><br><span class="line">	  捕获处理的格式：</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				可能发生异常的代码；</span><br><span class="line"></span><br><span class="line">			&#125;<span class="keyword">catch</span>(捕获的异常类型 变量名)&#123;</span><br><span class="line">				处理异常的代码....</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		捕获处理要注意的细节：</span><br><span class="line">			<span class="number">1</span>. 如果<span class="keyword">try</span>块中代码出了异常经过了处理之后，那么<span class="keyword">try</span>-<span class="keyword">catch</span>块外面的代码可以正常执行。</span><br><span class="line">			<span class="number">2</span>. 如果<span class="keyword">try</span>块中出了异常的代码，那么在<span class="keyword">try</span>块中出现异常代码后面的代码是不会执行了。</span><br><span class="line">			<span class="number">3</span>. 一个<span class="keyword">try</span>块后面是可以跟有多个<span class="keyword">catch</span>块的，也就是一个<span class="keyword">try</span>块可以捕获多种异常的类型。</span><br><span class="line">			<span class="number">4</span>. 一个<span class="keyword">try</span>块可以捕获多种异常的类型,但是捕获的异常类型必须从小到大进行捕获，否则编译报错。</span><br><span class="line"></span><br><span class="line">疑问一 : 异常的处理感觉没有多大作用，因为都是输出一个话而已?</span><br><span class="line">		异常处理非常有用，只不过是由于我们目前所接触的知识点太过于局限而已。</span><br><span class="line"></span><br><span class="line">疑问二： 以后捕获处理 的时候是否就是捕获Exception即可？</span><br><span class="line">	错的，因为我们在现实开发中遇到不同的异常类型的时候，我往往会有不同 的处理方式。</span><br><span class="line">	所以要分开不同的异常类型处理。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo10</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] arr = <span class="keyword">null</span>;</span><br><span class="line">		div(<span class="number">4</span>,<span class="number">0</span>,arr);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a , <span class="keyword">int</span> b,<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			c = a/b;  <span class="comment">//jvm在这句话的时候发现了不正常的情况，那么就会创建一个对应的异常对象。</span></span><br><span class="line">			System.out.println(<span class="string">"数组的长度："</span>+ arr.length);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</span><br><span class="line">			<span class="comment">//处理异常的代码....</span></span><br><span class="line">			System.out.println(<span class="string">"异常处理了...."</span>);</span><br><span class="line">			System.out.println(<span class="string">"toString:"</span>+ e.toString());</span><br><span class="line">		&#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">			System.out.println(<span class="string">"出现了空指针异常...."</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;  </span><br><span class="line">			System.out.println(<span class="string">"我是急诊室，包治百病！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"c="</span>+c);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>多个catch语句之间的执行顺序。</strong></p>
<ol>
<li><p>是进行顺序执行，从上到下。</p>
</li>
<li><p>如果多个catch 内的异常有子父类关系。</p>
<pre><code>1.  子类异常在上，父类在最下。编译通过运行没有问题

2.  父类异常在上，子类在下，编译不通过。(因为父类可以将子类的异常处理，子类的catch处理不到)。

3.  多个异常要按照子类和父类顺序进行catch</code></pre></li>
</ol>
<h2 id="抛出处理"><a href="#抛出处理" class="headerlink" title="抛出处理"></a>抛出处理</h2><p>定义一个功能，进行除法运算例如（div(int x,int y)）如果除数为0，进行处理。</p>
<p>功能内部不想处理，或者处理不了。就抛出使用throw new Exception(“除数不能为0”); 进行抛出。抛出后需要在函数上进行声明，告知调用函数者，我有异常，你需要处理如果函数上不进行throws 声明，编译会报错。例如：未报告的异常 java.lang.Exception；必须对其进行捕捉或声明以便抛出throw  new Exception(“除数不能为0”);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">throws</span> Exception </span>&#123; <span class="comment">// 声明异常，通知方法调用者。</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"除数为0"</span>); <span class="comment">// throw关键字后面接受的是具体的异常的对象</span></span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(x / y);</span><br><span class="line">		System.out.println(<span class="string">"除法运算"</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>throw和throws的区别</p>
<ol>
<li><p>相同：都是用于做异常的抛出处理的。</p>
</li>
<li><p>不同点：</p>
<pre><code>1.  使用的位置: throws 使用在函数上，throw使用在函数内</code></pre></li>
<li><p>后面接受的内容的个数不同: </p>
</li>
<li><p>throws 后跟的是异常类，可以跟多个，用逗号隔开。</p>
<ol start="2">
<li>throw 后跟异常对象。</li>
</ol>
</li>
</ol>
<p>抛出处理应注意的细节：</p>
<ol>
<li>如果方法内抛出一个编译时异常，那么该方法必须声明抛出。</li>
<li>如果调用了一个抛出编译时异常的方法，那么调用者必须要处理</li>
<li>如果一个方法抛出了一个异常对象，那么该方法也会马上停止，</li>
<li>在一种情况下只能抛出一种异常对象。</li>
</ol>
<p><strong>总结</strong></p>
<ol>
<li>try语句不能单独存在，可以和catch、finally组成 try…catch…finally、try…catch、try…finally三种结构。</li>
</ol>
<ol start="2">
<li>catch语句可以有一个或多个，finally语句最多一个，try、catch、finally这三个关键字均不能单独使用。</li>
</ol>
<ol start="3">
<li>try、catch、finally三个代码块中变量的作用域分别独立而不能相互访问。如果要在三个块中都可以访问，则要将变量定义到这些块的外面。</li>
<li>多个catch块时候，Java虚拟机会匹配其中一个异常类或其子类，就执行这个catch块，而不会再执行别catch块。（子类在上，父类在下）。</li>
<li>throw语句后不允许有紧跟其他语句，因为这些没有机会执行。</li>
<li>如果一个方法调用了另外一个声明抛出异常的方法，那么这个方法要么处理异常，要么声明抛出。</li>
</ol>
<h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoMoneyException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	NoMoneyException() &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	NoMoneyException(String message) &#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo11</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		System.out.println();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			eat(<span class="number">0</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (NoMoneyException e) &#123;</span><br><span class="line">			System.out.println(<span class="string">"跟我干活吧。"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(<span class="keyword">double</span> money)</span> <span class="keyword">throws</span> NoMoneyException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (money &lt; <span class="number">10</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NoMoneyException(<span class="string">"钱不够"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"吃桂林米粉"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行时异常和编译时异常"><a href="#运行时异常和编译时异常" class="headerlink" title="运行时异常和编译时异常"></a>运行时异常和编译时异常</h2><p>运行时异常：Runtime Exception或其子类 都是远行时异常。</p>
<p>编译时异常： 除了运行时异常都是编译时异常，编译器有强制要求。</p>
<p>运行时异常都是可以通过良好的程序避免的，Java编译器没有过多的要求。</p>
<p>编译时异常，避免不了（文件读取，磁盘坏了）</p>
<h2 id="异常在子父类覆盖中的体现"><a href="#异常在子父类覆盖中的体现" class="headerlink" title="异常在子父类覆盖中的体现"></a>异常在子父类覆盖中的体现</h2><p>1，子类在覆盖父类时，如果父类的方法抛出异常，那么子类的覆盖方法，只能抛出父类的异常或者该异常的子类。<br>2，如果父类方法抛出多个异常，那么子类在覆盖该方法时，只能抛出父类异常的子集。<br>3，如果父类或者接口的方法中没有异常抛出，那么子类在覆盖方法时，也不可以抛出异常。</p>
<pre><code>如果子类方法发生了异常。就必须要进行try处理。绝对不能抛。</code></pre>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础知识</title>
    <url>/2017/11/29/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1-Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="常见的dos命令"><a href="#常见的dos命令" class="headerlink" title="常见的dos命令"></a>常见的dos命令</h1><p>盘符： 进入指定的盘符下。</p>
<p><strong>dir</strong> : 列出当前目录下的文件以及文件夹</p>
<p><strong>md :</strong> 创建目录</p>
<p><strong>rd</strong> : 删除目录    注意：rd不能删除非空的文件夹，而且只能用于删除文件夹。</p>
<p><strong>cd</strong> : 进入指定目录</p>
<p><strong>cd..</strong> : 退回到上一级目录</p>
<p><em><code>cd \</code></em> : 退回到根目录</p>
<p><strong>echo “hello java”&gt;a.txt  **写入文本到指定文件</strong>  **</p>
<p>*<em>type a.txt *</em>显示文件内容命令</p>
<p><strong>del</strong> : 删除文件    注意：不能删除文件夹，只能删除文件。</p>
<p><strong>exit</strong> : 推出dos命令行</p>
<p>*<em>cls *</em> : 通知计算机将当前的命令清空</p>
<p>*:  是通配符。</p>
<p><strong>tab</strong>  命令补全。</p>
<p>方向键上下是找回上次你写过的命令。</p>
<a id="more"></a>

<h1 id="classpath、path环境变量"><a href="#classpath、path环境变量" class="headerlink" title="classpath、path环境变量"></a>classpath、path环境变量</h1><p>运行一个Java程序，首先需要javac编译源文件.java，然后jvm将编译后的.class文件翻译成所在系统支持运行的二进制文件，java  类名,运行程序;</p>
<p>使用 javac java 等命令，需要在bin文件夹使用，为了在任何路径都能使用这些命令，将bin目录完整路径设置在path环境变量中就可以了。</p>
<p>使用java 运行一个.class文件时，也是需要在其目录中才能找到文件并运行，将文件的完整路径设置classpath环境变量，无论命令行的路径在哪都可以运行。</p>
<p>需求： 在现实开发中有时候jdk版本的信息有时候只会使用一次或者几次就不再使用了，那么如果是这种需求，我们一般都是通过set命令配置临时环境变量。</p>
<p><strong>临时环境变量就是仅对于当前控制台窗口起作用，窗口一旦关闭，那么配置的临时环境变量信息会发生消失。</strong></p>
<p>set命令的用法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">set    				查看所有的环境变量信息。</span><br><span class="line">set 环境变量的名字 		查看指定的环境变量信息。</span><br><span class="line">set 环境变量名字 = 路径信息     设置指定的环境变量信息。</span><br><span class="line">set 环境变量名字 =              清空指定的环境变量信息。</span><br><span class="line">set 环境变量名字 = 新路径；%环境变量名字%    在原有的基础上添加新的路径信息。</span><br><span class="line"></span><br><span class="line">使用%%:</span><br><span class="line">JAVA_HOME = C:\java</span><br><span class="line">path = %JAVA_HOME%\bin</span><br><span class="line"></span><br><span class="line">classpath = C:\codeRun;（.(./)）    <span class="comment">// ；相当于当前路径，也就是 . ;运行程序先到classpath路径找，找不到才到当前路径中找。</span></span><br><span class="line">classpath = ;C:\codeRun;   <span class="comment">// 查找路径顺序相反。</span></span><br></pre></td></tr></table></figure>

<p>注意： 以后大家但凡看到是set命令设置的环境变量信息，都是临时环境变量信息。</p>
<h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><ul>
<li><p>标识符由数字、字母、_(下划线)、$(美元符号)组成</p>
</li>
<li><p>不能以数字开头，标识符名应见名知意</p>
<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><table>
<thead>
<tr>
<th><strong>关键字</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>abstract</td>
<td>表明类或者成员方法具有抽象属性</td>
</tr>
<tr>
<td>assert</td>
<td>断言，用来进行程序调试</td>
</tr>
<tr>
<td>boolean</td>
<td>基本数据类型之一，布尔类型</td>
</tr>
<tr>
<td>break</td>
<td>提前跳出一个块</td>
</tr>
<tr>
<td>byte</td>
<td>基本数据类型之一，字节类型</td>
</tr>
<tr>
<td>case</td>
<td>用在switch语句之中，表示其中的一个分支</td>
</tr>
<tr>
<td>catch</td>
<td>用在异常处理中，用来捕捉异常</td>
</tr>
<tr>
<td>char</td>
<td>基本数据类型之一，字符类型</td>
</tr>
<tr>
<td>class</td>
<td>声明一个类</td>
</tr>
<tr>
<td>const</td>
<td>保留关键字，没有具体含义</td>
</tr>
<tr>
<td>continue</td>
<td>回到一个块的开始处</td>
</tr>
<tr>
<td>default</td>
<td>默认，例如，用在switch语句中，表明一个默认的分支</td>
</tr>
<tr>
<td>do</td>
<td>用在do-while循环结构中</td>
</tr>
<tr>
<td>double</td>
<td>基本数据类型之一，双精度浮点数类型</td>
</tr>
<tr>
<td>else</td>
<td>用在条件语句中，表明当条件不成立时的分支</td>
</tr>
<tr>
<td>enum</td>
<td>枚举</td>
</tr>
<tr>
<td>extends</td>
<td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td>
</tr>
<tr>
<td>final</td>
<td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td>
</tr>
<tr>
<td>finally</td>
<td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td>
</tr>
<tr>
<td>float</td>
<td>基本数据类型之一，单精度浮点数类型</td>
</tr>
<tr>
<td>for</td>
<td>一种循环结构的引导词</td>
</tr>
<tr>
<td>goto</td>
<td>保留关键字，没有具体含义</td>
</tr>
<tr>
<td>if</td>
<td>条件语句的引导词</td>
</tr>
<tr>
<td>implements</td>
<td>表明一个类实现了给定的接口</td>
</tr>
<tr>
<td>import</td>
<td>表明要访问指定的类或包</td>
</tr>
<tr>
<td>instanceof</td>
<td>用来测试一个对象是否是指定类型的实例对象</td>
</tr>
<tr>
<td>int</td>
<td>基本数据类型之一，整数类型</td>
</tr>
<tr>
<td>interface</td>
<td>接口</td>
</tr>
<tr>
<td>long</td>
<td>基本数据类型之一，长整数类型</td>
</tr>
<tr>
<td>native</td>
<td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td>
</tr>
<tr>
<td>new</td>
<td>用来创建新实例对象</td>
</tr>
<tr>
<td>package</td>
<td>包</td>
</tr>
<tr>
<td>private</td>
<td>一种访问控制方式：私用模式</td>
</tr>
<tr>
<td>protected</td>
<td>一种访问控制方式：保护模式</td>
</tr>
<tr>
<td>public</td>
<td>一种访问控制方式：共用模式</td>
</tr>
<tr>
<td>return</td>
<td>从成员方法中返回数据</td>
</tr>
<tr>
<td>short</td>
<td>基本数据类型之一,短整数类型</td>
</tr>
<tr>
<td>static</td>
<td>表明具有静态属性</td>
</tr>
<tr>
<td>strictfp</td>
<td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9JRUVFJTIwNzU0" title="https://baike.baidu.com/item/IEEE%20754">IEEE 754<i class="fa fa-external-link"></i></span>算术规范[1]<a href=""> </a></td>
</tr>
<tr>
<td>super</td>
<td>表明当前对象的父类型的引用或者父类型的构造方法</td>
</tr>
<tr>
<td>switch</td>
<td>分支语句结构的引导词</td>
</tr>
<tr>
<td>synchronized</td>
<td>表明一段代码需要同步执行</td>
</tr>
<tr>
<td>this</td>
<td>指向当前实例对象的引用</td>
</tr>
<tr>
<td>throw</td>
<td>抛出一个异常</td>
</tr>
<tr>
<td>throws</td>
<td>声明在当前定义的成员方法中所有需要抛出的异常</td>
</tr>
<tr>
<td>transient</td>
<td>声明不用序列化的成员域</td>
</tr>
<tr>
<td>try</td>
<td>尝试一个可能抛出异常的程序块</td>
</tr>
<tr>
<td>void</td>
<td>声明当前成员方法没有返回值</td>
</tr>
<tr>
<td>volatile</td>
<td>表明两个或者多个变量必须同步地发生变化</td>
</tr>
<tr>
<td>while</td>
<td>用在循环结构中</td>
</tr>
</tbody></table>
</li>
<li><p>保留字</p>
<p>goto const</p>
</li>
<li><p>标识符</p>
<p>false true null</p>
</li>
</ul>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">单行注释： <span class="comment">// code</span></span><br><span class="line"></span><br><span class="line">多行注释： <span class="comment">/* code */</span></span><br><span class="line"></span><br><span class="line">文档注释，生产开发者文档。</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	<span class="doctag">@author</span> zx</span></span><br><span class="line"><span class="comment">	<span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">	<span class="doctag">@param</span> 参数</span></span><br><span class="line"><span class="comment">	<span class="doctag">@return</span> 返回的类型参数值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">使用javadoc开发工具即可生成一个开发者文档。</span><br><span class="line"></span><br><span class="line">javadoc工具的使用格式：</span><br><span class="line">	javadoc -d 存放文档的路径   java的源文件 </span><br><span class="line">	或 javadoc –d 指定存储文档的路径  -version –author（可选）  目标文件</span><br><span class="line">使用javadoc工具要注意细节：</span><br><span class="line">	<span class="number">1</span>. 如果一个类需要使用javadoc工具生成一个软件的开发者文档，那么该类必须使用<span class="keyword">public</span>修饰。</span><br><span class="line">	<span class="number">2</span>. 文档注释注释的内容一般都是位于类或者方法的上面的。</span><br><span class="line"></span><br><span class="line">写注释的规范：一般单行注释是位于代码的右侧，多行注释与文档注释一般是写在类或者方法的上面的。</span><br></pre></td></tr></table></figure>
<h1 id="常量和变量"><a href="#常量和变量" class="headerlink" title="常量和变量"></a>常量和变量</h1><h2 id="java中常量的分类"><a href="#java中常量的分类" class="headerlink" title="java中常量的分类"></a>java中常量的分类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  整数常量 ： 所有整数</span><br><span class="line">  小数常量 ： 所有小数</span><br><span class="line">  布尔常量 ： 只有<span class="keyword">true</span>和<span class="keyword">false</span></span><br><span class="line">  字符常量 ：使用’’引起来的单个字符</span><br><span class="line">  字符串常量 ：使用“”引起来的字符序列，“”  、“a” 、” ”  </span><br><span class="line">  <span class="keyword">null</span>常量 ： 只有一个值<span class="keyword">null</span></span><br><span class="line">  		<span class="comment">/*</span></span><br><span class="line"><span class="comment">System.out.println(12); //整数常量</span></span><br><span class="line"><span class="comment">System.out.println(3.14); //小数常量</span></span><br><span class="line"><span class="comment">System.out.println(false); //布尔常量</span></span><br><span class="line"><span class="comment">System.out.println('1'); //字符常量</span></span><br><span class="line"><span class="comment">System.out.println("hello world"); //字符串常量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果一个数据没有加上任何的标识之前，默认就是十进制的数据。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">System.out.println(<span class="number">10</span>);<span class="comment">// 十进制</span></span><br><span class="line">System.out.println(<span class="number">0b10</span>); <span class="comment">//二进制 , 如果一个数据要表示二进制，那么要在该数据的前面加上0b开头。</span></span><br><span class="line">System.out.println(<span class="number">010</span>); <span class="comment">//八进制数据， 八进制的数据需要以0开头</span></span><br><span class="line">System.out.println(<span class="number">0x10</span>); <span class="comment">//十六进制数据， 十六进制的数据需要以0x开头</span></span><br></pre></td></tr></table></figure>
<h2 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 整型</span><br><span class="line">	<span class="keyword">byte</span>   代表一个字节的大小   <span class="number">8</span>bit  <span class="number">2</span>(<span class="number">8</span>)   -<span class="number">128</span>~<span class="number">127</span>        <span class="number">256</span></span><br><span class="line">	<span class="keyword">short</span>  代表两个字节的大小  <span class="number">16</span>bit  <span class="number">2</span>(<span class="number">16</span>)  -<span class="number">2</span>(<span class="number">15</span>)~<span class="number">2</span>(<span class="number">15</span>)-<span class="number">1</span></span><br><span class="line">	<span class="keyword">int</span>    代表四个字节的大小  <span class="number">32</span>bit  <span class="number">2</span>(<span class="number">32</span>)  -<span class="number">2</span>(<span class="number">31</span>)~<span class="number">2</span>(<span class="number">31</span>)-<span class="number">1</span></span><br><span class="line">	<span class="keyword">long</span>   代表八个字节的大小  <span class="number">64</span>bit  <span class="number">2</span>(<span class="number">64</span>)  -<span class="number">2</span>(<span class="number">63</span>)~<span class="number">2</span>(<span class="number">63</span>)-<span class="number">1</span></span><br><span class="line">	如果一个数值没有采取特殊的处理，那么该整数默认的类型是<span class="keyword">int</span>。</span><br><span class="line">	可以使用数值后面添加L或小写l改变默认的整数类型。<span class="comment">// long a = 110L;</span></span><br><span class="line"><span class="number">2</span>. 浮点型</span><br><span class="line">	 <span class="keyword">float</span>  代表四个字节的大小  <span class="number">32</span>bit</span><br><span class="line">	 <span class="keyword">double</span> 代表八个字节的大小  <span class="number">64</span>bit</span><br><span class="line">java程序中所有的小数默认的类型是<span class="keyword">double</span>类型，所以需要使用特殊的符号改变默认的小数类型，如果</span><br><span class="line">	需要表示成<span class="keyword">float</span>类型，那么需要在小数的后面加上f表示。f不区分大小写的。<span class="comment">// float ff = 3.14f;</span></span><br><span class="line"><span class="number">3</span>. 字符型</span><br><span class="line">	  <span class="keyword">char</span>   代表两个字节的大小  <span class="number">16</span>bit  <span class="number">2</span>(<span class="number">16</span>) </span><br><span class="line">	  原理：将字符映射为码表中对应的十进制数据加以存储。</span><br><span class="line"><span class="number">4</span>. 布尔型</span><br><span class="line"><span class="keyword">boolean</span> <span class="keyword">true</span> <span class="keyword">false</span>   <span class="number">1</span>字节或者<span class="number">4</span>个字节   </span><br><span class="line">	如果使用<span class="keyword">boolean</span>声明一个基本类型的变量时，那么该变量占<span class="number">4</span>个字节，如果使用<span class="keyword">boolean</span>声明一个数组类型 的时候，那么每个数组的元素占一个字节。</span><br></pre></td></tr></table></figure>

<h2 id="变量类型转换"><a href="#变量类型转换" class="headerlink" title="变量类型转换"></a>变量类型转换</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型转换： </span><br><span class="line">	</span><br><span class="line">	小数据类型--------&gt;大数据类型     自动类型转换</span><br><span class="line">	</span><br><span class="line">	大数据类型---------&gt;小数据类型    强制类型转换</span><br><span class="line"></span><br><span class="line">强制类型转换的格式：</span><br><span class="line">			</span><br><span class="line">			小数据类型  变量名 = (小数据类型)大数据类型</span><br><span class="line">	</span><br><span class="line">数据类型转换要注意的细节：</span><br><span class="line">	<span class="number">1</span>. 凡是<span class="keyword">byte</span>、<span class="keyword">short</span> 、 <span class="keyword">char</span>数据类型数据在运算的时候都会自动转换成<span class="keyword">int</span>类型的数据再运算。</span><br><span class="line">	<span class="number">2</span>. 两个不同数据类型的数据在运算的时候，结果取决于大的数据类型。</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">2</span>+<span class="number">1</span>; <span class="comment">// error 2 1 是int类型，需要强转才能赋值给byte类型的b变量</span></span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)(<span class="number">2</span>+<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h1 id="运算符和优先级"><a href="#运算符和优先级" class="headerlink" title="运算符和优先级"></a>运算符和优先级</h1><ul>
<li>与C语言一致</li>
</ul>
<h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><ul>
<li>与C语言基本一致</li>
<li>switch（ch） ch 可以是 整型、字符串、字符、枚举</li>
<li>无goto语句，但关键字保留</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// break 可以控制结束内外循环</span></span><br><span class="line">aaa:<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j&lt;<span class="number">3</span> ; j++)&#123; <span class="comment">// j=0 外层for循环</span></span><br><span class="line">    bbb:<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; <span class="number">2</span> ; i++)&#123;  <span class="comment">// i=0 内层for循环</span></span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>); <span class="comment">// 1	</span></span><br><span class="line">        <span class="keyword">break</span> aaa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// continue 也是可以的</span></span><br></pre></td></tr></table></figure>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>Java无指针,有函数重载（overload），其他与C语言类似。</p>
<p><strong>函数重载的定义：</strong>在同一个类中，有一个以上的同名函数，只要函数的参数列表或参数类型不一样即可，与返回值无关， 这些统称为方法的重载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">reverse(a,b); <span class="comment">// 无效</span></span><br><span class="line">System.out.println(<span class="string">"a= "</span>+a+<span class="string">"b= "</span>+b);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><strong>数组的定义：</strong></p>
<ol>
<li><p>元素类型[] 数组名 = new 元素类型[元素个数或数组长度];</p>
<p>示例：</p>
<p>int[] arr = newint[5];</p>
</li>
<li><p>元素类型[] 数组名 = new 元素类型[]{元素，元素，……};</p>
<p>int[] arr = new int[]{3,5,1,7};</p>
<p>int[]arr = {3,5,1,7};</p>
</li>
</ol>
<p>new相当于C语言中malloc，在堆内存中分配内存空间。</p>
<p><strong>二维数组的定义：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	动态初始化:		</span><br><span class="line">		数据类型[][] 变量名 = <span class="keyword">new</span> 数据类型[长度<span class="number">1</span>][长度<span class="number">2</span>];</span><br><span class="line">	静态初始化：</span><br><span class="line">		数据类型[][]  变量名 = &#123;&#123;元素<span class="number">1</span>,元素<span class="number">2</span>...&#125;,&#123;元素<span class="number">1</span>,元素<span class="number">2</span>...&#125;,&#123;元素<span class="number">1</span>,元素<span class="number">2</span>...&#125; ..&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">4</span>]; <span class="comment">//3 可以是值为3的变量</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">10</span>,<span class="number">11</span>,<span class="number">9</span>&#125;,&#123;<span class="number">67</span>,<span class="number">12</span>&#125;,&#123;<span class="number">33</span>,<span class="number">35</span>,<span class="number">39</span>,<span class="number">40</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>



<h1 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h1><p>包: </p>
<p>java中的包就相当于windows文件夹。</p>
<p>包的作用：<br>    1. 解决类名重复产生冲突的问题。<br>    2. 便于软件版本的发布。</p>
<p>定义包的格式：<br>    package 包名;</p>
<p>包名命名规范：包名全部小写。</p>
<p>包语句要注意的事项：<br>    1. package语句必须位于java文件中中第一个语句。<br>    2. 如果一个类加上了包语句，那么该类的完整类名就是: 包名.类名<br>    3. 一个java文件只能有一个包语句。</p>
<p>问题：  每次编译的时候都需要自己创建一个文件夹，把对应 的class文件存储 到文件夹中。烦！！！<br>        javac -d 指定类文件的存放路径   java源文件<br>        javac -d ./ Demo.java<br>        java aa.Demo 运行</p>
<p><strong>导包语句作用：简化书写。 (误区： 把一个类导入到内存中)</strong></p>
<p>导包语句的格式：<br>             import 包名.类名;   （导入xxx包中某个类）</p>
<p>导包语句要注意的细节：<br>     1. 一个java文件中可以出现多句导包语句。<br>     2. “*”是 导包语句的通配符。可以匹配任何 的类名。<br>     3. import aa.*; 是不会作用于aa包下面的子包的。</p>
<p>推荐使用：import 包名.类名;   因为使用*通配符会导致结构不清晰。</p>
<p>什么时候使用import语句:<br>    1. 相互访问的两个类不是在同一个包下面，这时候就需要使用到导包语句。<br>    2. java.lang 是默认导入 的，不需要我们自己导入。</p>
<h1 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h1><p>1：<strong>jar</strong>就是打包文件</p>
<p>jar文件时一种打包文件java active File,与zip兼容，称之为jar包</p>
<p>开发了很多类，需要将类提供给别人使用，通常以jar包形式提供.当项目写完之后，需要及将class字节码文件打包部署给客户。如何打包？可以使用jar命令.</p>
<p>2：jar命令</p>
<p>   1：jar工具存放于jdk的bin目录中(jar.exe)</p>
<p>   2：jar工具：主要用于对class文件进行打包(压缩)</p>
<p>   3：dos中输入jar查看帮助</p>
<p><strong>用法：</strong></p>
<p><code>jar cvf jar文件的名字  class文件或者是文件夹</code></p>
<p>打jar包要注意的事项：</p>
<pre><code>1. 一个程序打完了jar之后 必须要在清单文件上指定入口类： 格式 Main-Class: 包名.类名
2. jar包双击运行仅对于图形化界面的程序起作用，对控制台的程序不起作用。</code></pre><p>jar文件的作用：<br>jar文件的作用：<br>    1. 方便用户快速运行一个项目。<br>    2. 提供工具类以jar包的形式给别人使用。 </p>
<p>如果使用jar包里面的类必须要先设置classpath路径。</p>
<p>jre = jvm+ 核心类库</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础知识</tag>
      </tags>
  </entry>
</search>
